<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>MapToolDoc</sitename>
    <dbname>lmwcscom_mwwikidb2</dbname>
    <base>http://host307.hostmonster.com/rptools/wiki/Main_Page</base>
    <generator>MediaWiki 1.25.1</generator>
    <case>case-sensitive</case>
    <namespaces>
      <namespace key="-2" case="case-sensitive">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="case-sensitive" />
      <namespace key="1" case="case-sensitive">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="case-sensitive">MapToolDoc</namespace>
      <namespace key="5" case="case-sensitive">MapToolDoc talk</namespace>
      <namespace key="6" case="case-sensitive">File</namespace>
      <namespace key="7" case="case-sensitive">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="case-sensitive">Template</namespace>
      <namespace key="11" case="case-sensitive">Template talk</namespace>
      <namespace key="12" case="case-sensitive">Help</namespace>
      <namespace key="13" case="case-sensitive">Help talk</namespace>
      <namespace key="14" case="case-sensitive">Category</namespace>
      <namespace key="15" case="case-sensitive">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Main Page</title>
    <ns>0</ns>
    <id>1</id>
    <revision>
      <id>7342</id>
      <parentid>7341</parentid>
      <timestamp>2019-03-31T00:29:13Z</timestamp>
      <contributor>
        <ip>65.154.176.61</ip>
      </contributor>
      <comment>/* Macro Technical Reference */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2806">__NOTOC__
Welcome to the RPTools Documentation Wiki, currently we are heavily focused on documentation for [http://www.rptools.net/index.php?page=maptool MapTool], but documentation for any application in the [http://www.rptools.net RPTools] suite is welcome.

This wiki is a '''work in progress''' and currently consists of {{NUMBEROFARTICLES}} articles (most of which are macro function articles), so finding exactly what you need may take a little effort at times. If you would like to help contribute to the maintenance of this wiki feel free to create an account and take a look at our [[Editor|editing guidelines]].
Unfortunately due to a large amount of spam from new user accounts you will need to send a PM to Craig on the RPTools forums (http://forums.rptools.net) to create an account. 
{| width=100% cellpadding=5px &lt;!--- Do not edit this line ---&gt;
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;'''Topics you may be interested in:'''&lt;/big&gt;
==Basic MapTool Use==

* [[MapTool FAQ]]
* [[Introduction to Mapping]]
* [[Introduction to Game Hosting]]
* [[Introduction to Tokens]]
* [[Introduction to Properties]]
* [[Introduction to Macro Writing]]
** [[Introduction to Macro Branching]]
** [[More Branching Options]]
** [[Introduction to Macro Loops]]
* [[Introduction to Vision Blocking]]
* [[Introduction to Lights and Sights]]
* [[Introduction to Campaign Repositories]]
* [[Stack Size|About Java Memory Settings]]
* [[MapTool Preferences]]
* [[Network Connection Problems and Solutions]]
* [[Feature List]]
* [[Shortcut Keys]]
* [[Glossary|MapTool Glossary]]

===Chat &amp; Dice Rolling===

* [[Chat Commands]]
* [[Dice Expressions]]
* [[Macros:Roll:types | [ ] Roll formatting options]]
* [[Macros:Roll:output|Roll visibility options]]

===Resources for Users===

* [[Dice Box|Dice Box]]
* [[Frameworks|Frameworks]]
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;&amp;nbsp;&lt;/big&gt; &lt;!--- To even out spacing with the first column ---&gt;

==Macro Technical Reference==

* [[:Category:Macro|Macro Reference]]
* [[:Category:Macro Function|List of Functions]]
* [[Macros:Branching and Looping | Branching and Looping Options]]
* [[Variable Types]]
* [[Library Token]]
* [[:Category:Special Variable|Special Variables]]
* [[:Category:Event|List of events]]
* [[:Category:Tutorial|Macro Tutorials]]
* [[:Category:How To|Macros How To]]
* [[:Category:Cookbook|Macro Code Cookbook]]
* [[Macro Tips and Tricks]]
* [[Macro FAQ]]

===Tokens===

* [[Token|MapTool Tokens]]
* [[Token Types]]
* [[TokenTool QuickStart|TokenTool QuickStart Guide]]

===Miscellaneous===

* [[Supported CSS Styles]]
* [[Sample Ruleset]]
* [[Java 64 fails when using Launcher]]
* [[Command Line Options]]
* [[MapTool ChangeLog (by build version)]]
|} &lt;!--- Do not edit this line ---&gt;
{{Languages|Main Page}}</text>
      <sha1>39m615b4ux6wcj2ky95vpu424zbot49</sha1>
    </revision>
  </page>
  <page>
    <title>MediaWiki:Geshi.css</title>
    <ns>8</ns>
    <id>2</id>
    <revision>
      <id>629</id>
      <parentid>628</parentid>
      <timestamp>2008-12-22T20:55:12Z</timestamp>
      <contributor>
        <username>WikiSysop</username>
        <id>1</id>
      </contributor>
      <model>css</model>
      <format>text/css</format>
      <text xml:space="preserve" bytes="1931">/* @override http://lmwcs.com/maptool/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000 */

/* @override http://lmwcs.com/maptool/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000 */

/* CSS placed here will be applied to GeSHi syntax highlighting */
.mtmacro .de1, .mtmacro .de2 {
    font: normal normal 1em/1.2em monospace; 
    margin:0;
    padding:0; 
    background:none; 
    vertical-align:top;
    background-color: #F8F8F8;
    color: #0A0A0A;
}
.mtmacro  {
    font-family:monospace;
    background-color: #F8F8F8;
    color: #0A0A0A;
}
.mtmacro.source-mtmacro .imp {
    font-weight: bold; 
    color: red;
}
.mtmacro.source-mtmacro li, .mtmacro .li1 {
    font-weight: normal; 
    vertical-align:top;
}
.mtmacro.source-mtmacro .ln {
    width:1px;
    text-align:right; 
    margin:0;padding:0 2px;
    vertical-align:top;
}
.mtmacro.source-mtmacro .li2 {
    font-weight: bold; 
    vertical-align:top;
}
.mtmacro.source-mtmacro .kw1 {
    color: #0000FF;
    font-weight: bold;
}
.mtmacro.source-mtmacro .kw2 {
    color: #0000FF; 
    font-style: italic;
}
.mtmacro.source-mtmacro .es0 {
    color: #000099; 
    font-weight: bold;
}
.mtmacro.source-mtmacro .br0 {
    color: #0A0A0A;
}
.mtmacro.source-mtmacro .sy0 {
    color: #0A0A0A;
}
.mtmacro.source-mtmacro .st0 {
    color: #FF0080;
	font-style: italic;
}
.mtmacro.source-mtmacro .nu0 {
    color: #0A0A0A;
}
.mtmacro.source-mtmacro .sc-1 {
    color: #0A0A0A; 
    font-style: italic;
}
.mtmacro.source-mtmacro .sc0 {
    color: #00bbdd;
}
.mtmacro.source-mtmacro .sc1 {
    color: #0A0A0A;
}
.mtmacro.source-mtmacro .sc2 {
    color: #73c5c8;
}
.mtmacro.source-mtmacro .ln-xtra, .mtmacro li.ln-xtra, .mtmacro div.ln-xtra {
    background-color: #ffc;
}
.mtmacro span.xtra {
    display:block;
}

.mtmacro ol li {
	padding: 0 0 0 2em;
	border-left: 1px dotted #7590ff;
}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Help:Editing</title>
    <ns>12</ns>
    <id>3</id>
    <revision>
      <id>7327</id>
      <parentid>4033</parentid>
      <timestamp>2019-03-28T23:12:23Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>/* Example */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8285">This article contains documentation on specific features of our wiki, see MediaWiki's [[mw:Help:Editing | help on editing]] article for details of basic formatting and markup.

==Miscellaneous Formatting==

===Macro Code Highlighting===
To perform syntax highlighting on your macro code enclose it in the following tags:

'''Syntax:'''
&lt;pre&gt;
  &lt;source lang=&quot;mtmacro&quot; line&gt;
  &lt;/source&gt;
&lt;/pre&gt;

'''Example:''' 
&lt;pre&gt;
  &lt;source lang=&quot;mtmacro&quot; line&gt;
    [h: name = getName()]
    [r: name]
  &lt;/source&gt;
&lt;/pre&gt;

'''Produces:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: name = getName()]
[r: name]
&lt;/source&gt;


You can also change the number that the line number starts at:

'''Example:''' 
&lt;pre&gt;
  &lt;source lang=&quot;mtmacro&quot; line start=10&gt;
    [h: name = getName()]
    [r: name]
  &lt;/source&gt;
&lt;/pre&gt;

'''Produces:'''
&lt;source lang=&quot;mtmacro&quot; line start=10&gt;
[h: name = getName()]
[r: name]
&lt;/source&gt;
This is useful for breaking up long chunks of example code, yet still maintaining proper line numbering.


===Inline Code===
There are a number of ways to include {{code|inline code}}, but we've created a small template that makes it easier than ever.  The syntax below produces: {{code|example}}
&lt;pre&gt;
{{code|example}}
&lt;/pre&gt;
You can replace {{code|example}} with anything you want to be shown as inline code. This is useful if you're referencing a variable, function, or anything else that would be more appropriate in a monospaced typeface.  This template works inside wiki-links as well, the following syntax produces: [[abort|{{code|abort()}}]]
&lt;pre&gt;
[[abort|{{code|abort()}}]]
&lt;/pre&gt;

===Marking Articles===
====Stub====
If you come across an article that looks like little more than a placeholder, please mark it as a stub so that we can easily find it in the future and expand it.

To mark an article as a stub, edit it and add the following tag to the top of the article:
&lt;pre&gt;
{{stub}}
&lt;/pre&gt;
Optionally, you may add a note about why the article is considered a stub.
&lt;pre&gt;
{{stub|What this article needs so that it wouldn't be a stub.}}
&lt;/pre&gt;

====Clarification====
If you come across an article that doesn't seem clear enough on a particular point, you can mark it for clarification which allows a knowledgeable editor to find it easier in the future.

To mark an article for clarification, edit the article and add a note near the section that needs clarification.  Use &lt;source lang=&quot;text&quot; enclose=none&gt;{{Clarify|&lt;/source&gt; followed by a short note about what needs to be clarified, then end your note with &lt;source lang=&quot;text&quot; enclose=none&gt;}}&lt;/source&gt;.

'''Example'''
&lt;pre&gt;
{{Clarify|How is this function supposed to be used in the event that such and such occurs?}}
&lt;/pre&gt;

===Function Linking===
We often find ourselves linking to functions, and function links look better with parenthesis after the function name, but the function articles themselves do not contain the parenthesis. This prevents us from simply creating a &lt;source lang=&quot;text&quot; enclose=none&gt;[[functionName]]&lt;/source&gt; wikilink, and instead forces us to type the function name twice: &lt;source lang=&quot;text&quot; enclose=none&gt;[[functionName|functionName()]]&lt;/source&gt;. To make it easier to link to functions, while still having the parenthesis attached, we've created the &lt;source lang=&quot;text&quot; enclose=none&gt;{{func|&lt;/source&gt; template.

'''Example'''
&lt;pre&gt;
{{func|functionName}}
&lt;/pre&gt;
Will result in the link to the function having the necessary parenthesis added automatically.

===Roll Option Linking===
Formats the roll option link as [rolloption:] or [rolloption():] depending on the type.  The type is determined by a list inside the roll template, so be sure to add new roll options there.  To use, &lt;source lang=&quot;text&quot; enclose=none&gt;{{roll|&lt;/source&gt; followed by the roll option's article name not including the _(roll_option) that you would normally have to include, then closed with &lt;source lang=&quot;text&quot; enclose=none&gt;}}&lt;/source&gt; template.

'''Examples'''
&lt;pre&gt;
{{roll|expanded}}
&lt;/pre&gt;Results in a link as if you had entered &lt;source lang=&quot;text&quot; enclose=none&gt;[[expanded (roll option)|[expanded:] ]]&lt;/source&gt;

&lt;pre&gt;
{{roll|foreach}}
&lt;/pre&gt;Results in a link as if you had entered &lt;source lang=&quot;text&quot; enclose=none&gt;[[foreach (roll option)|[foreach():] ]]&lt;/source&gt;

==Function Formatting==
A template has been created to assist with writing articles for macro functions.  To use the template, begin with &lt;code&gt;{{MacroFunction&lt;/code&gt;, followed by any parameters you might use, and then end with &lt;code&gt;}}&lt;/code&gt;. See Mediawiki's [[mw:Help:Template|template help]] for more documentation on using templates.

===Notes===
* This template only adds the function to the [[:Category:Macro Function|Macro Function]] category, you should manually add any other categories it belongs in. Categories can be added by including &lt;source lang=&quot;text&quot; enclose=none&gt;[[Category:Example]]&lt;/source&gt;, where Example is the name of the category you with to add. You can include this code anywhere within the article, but preferably at the end to make it easier for other editors to find.

* The broken bar | is a special character inside templates; this presents problems when trying to build wiki tables inside a template. There is a special template that allows you to work around this problem: using &lt;source lang=&quot;text&quot; enclose=none&gt;{{!}}&lt;/source&gt; in place of all broken bars will allow your table to work properly inside a template.

===Parameters===
All parameters are optional, except '''|name=''' and '''|usage='''. Although the parameters can be used in any order, using them in the order presented will make it easier for other editors that might work on the function article.

* '''|name=''' • Case-sensitive name of the function.

* '''|proposed=true''' • Adds a note that the article refers to a proposed change that has not yet been implemented in the main code base. If this parameter is missing, or contains a value that is not {{code|true}}, it will be treated as {{code|false}} and not displayed.

* '''|deprecated=''' • Adds a note that the function has been deprecated and a link to the function that should be used instead.

* '''|trusted=true''' • Adds a note that the function can only be used in a [[Trusted Macro|trusted macro]]. If this parameter is missing, or contains a value that is not {{code|true}}, it will be treated as {{code|false}} and not displayed.

* '''|version=''' • Adds a note for which version of MapTool included the addition of this function. The value should be the exact version number, e.g. {{code|1.3b50}}

* '''|compatibility=''' • Adds a note stating the version of MapTool that this function's article is about. This is primarily used if a function has received changes since its first inclusion that could cause the usage and/or examples to not work with the version in which it was first introduced. The value should be the exact version number, e.g. {{code|1.3b50}}

* '''|description=''' • This should contain a brief description on the purpose of the function.

* '''|usage=''' • The usage block should contain the various syntax that the function accepts.

* '''|examples=''' • Examples should be the majority of a function's page content. The more examples there are, the more of a complete understanding the reader will have.

* '''|also=''' • If you use other functions in any examples, or if there are other articles that are related to this one, you should include links to them in this block.

* '''|changes=''' • A place to record changes that function has received in various versions of MapTool.

===Example===
&lt;pre&gt;{{MacroFunction
|name=exampleFunction
|proposed=true
|deprecated=[[newFunction|newFunction()]]
|trusted=true
|version=1.3b50
|compatibility=1.3b52
|description=
This is an example function.  It doesn't actually exist as a function in MapTool.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
exampleFunction(param1, param2)
&lt;/source&gt;
'''Parameters'''
{{param|param1|Describe parameter}}
{{param|param2|Describe parameter}}

|example=
This example doesn't really do anything.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: exampleVariable = &quot;a,b,c&quot;]
[r: exampleFunction(exampleVariable, reverse)]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
c,b,a
&lt;/source&gt;

|also=
[[linkToRelatedArticle|Display Name of Related Article]]

|changes=
* '''1.3b52''' - Added reverse parameter.
}}&lt;/pre&gt;</text>
      <sha1>tlgjglr6ym0minjfuzenw02h4iy32en</sha1>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:list of functions</title>
    <ns>0</ns>
    <id>4</id>
    <redirect title="Category:Macro Function" />
    <revision>
      <id>1797</id>
      <parentid>1104</parentid>
      <timestamp>2009-03-09T05:49:52Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirected to Category:Macro Function</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[:Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:ProposedChange</title>
    <ns>10</ns>
    <id>5</id>
    <revision>
      <id>7105</id>
      <parentid>6153</parentid>
      <timestamp>2019-02-20T05:07:16Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="571">&lt;noinclude&gt;This template is used to point out pending changes.&lt;br&gt;
* First parameter &lt;nowiki&gt;{{{1}}}&lt;/nowiki&gt; allows you to detail what proposed change is and why it is suggested.
----&lt;/noinclude&gt;
&lt;div class=&quot;template_proposed&quot;&gt;
&lt;p style=&quot;background-color: #CCCCFF; color: #000000&quot;&gt;
&amp;nbsp;&lt;b&gt;Note: This refers to a proposed change that has not been implemented in the main code base yet.&lt;/b&gt;
{{#if: {{{1|}}} | &lt;br&gt;&lt;b&gt;&amp;nbsp;Details:&lt;/b&gt;&lt;br /&gt;&lt;i&gt;{{{1}}}&lt;/i&gt;|}}&lt;/p&gt;
&lt;/div&gt;
&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;
&lt;includeonly&gt;[[Category:Proposed Change]]&lt;/includeonly&gt;</text>
      <sha1>kmhi23fzubx98erhxft5hfjgcqphifp</sha1>
    </revision>
  </page>
  <page>
    <title>bringToFront</title>
    <ns>0</ns>
    <id>6</id>
    <revision>
      <id>4114</id>
      <parentid>2502</parentid>
      <timestamp>2010-01-18T22:21:45Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>Added note about current bug in 1.3.b63</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1257">{{MacroFunction
|name=bringToFront
|version=1.3b48
|description=
Adjust the z order (or draw order) of the [[Token]] so that is is drawn after all other [[Token]]s on the same [[Map Layer]], this has the effect of making the [[Token]] appear to be in front of the other [[Token]]s as it will obscure other [[Token]]s on the same [[Map Layer]] in the same location.

''As of 1.3.b63 there appears to be a bug in which token states are not rendered properly after calling sendToBack or bringToFront.  As a work-around, macros should change the token ordering first, then turn states on or off.''

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
bringToFront()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
bringToFront(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} or name of the token to effect, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Make sure that we are visible above all other tokens on the same layer --&gt;
[h: bringToFront()]
&lt;/source&gt;


&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- The Hero of the piece should always stand out --&gt;
[h: bringToFront(&quot;Hero&quot;)]
&lt;/source&gt;

|also=
[[sendToBack|sendToBack()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}
}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:PropsedChange</title>
    <ns>10</ns>
    <id>7</id>
    <redirect title="Template:ProposedChange" />
    <revision>
      <id>25</id>
      <timestamp>2008-12-01T05:08:35Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <comment>[[Template:PropsedChange]] moved to [[Template:ProposedChange]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[Template:ProposedChange]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>clearLights</title>
    <ns>0</ns>
    <id>8</id>
    <revision>
      <id>2828</id>
      <parentid>2363</parentid>
      <timestamp>2009-04-04T21:12:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="659">{{MacroFunction
|name=clearLights
|version=1.3b48
|description=Turns off all of the [[LightSource:light source|light source]]s for the [[Current Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
clearLights()
&lt;/source&gt;


|examples=
To turn off all of the light sources for the current token.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: clearLights()]
&lt;/source&gt;

To turn off all the lights sources on the map you could run the following script, note you will have to be the GM or run it
as part of a trusted macro.
&lt;source lang=&quot;mtmacro&quot; line&gt;
Ok Kids lights out!
[h,foreach(tok, getTokens()), code: { [token(tok): clearLights()]}]
&lt;/source&gt;

}}
[[Category: Light Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:CreateMacros.png</title>
    <ns>6</ns>
    <id>9</id>
    <revision>
      <id>29</id>
      <timestamp>2008-12-01T05:41:37Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>createMacro</title>
    <ns>0</ns>
    <id>10</id>
    <revision>
      <id>6364</id>
      <parentid>6363</parentid>
      <timestamp>2015-07-19T19:22:57Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4364">{{stub|Examples using the new functionality.}}
{{MacroFunction
|name=createMacro
|version=1.3b48
|description=
Creates a [[Macro_Button|macro button]] for the [[Current Token]] and returns the index of the newly created button.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
createMacro(label, command)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
createMacro(label, command, props)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
createMacro(label, command, props, delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
createMacro(label, command, props, delim, id)
&lt;/source&gt;
'''JSON-only syntax'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
createMacro(props)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
createMacro(props, id)
&lt;/source&gt;
'''Parameters'''
{{param|label|The label for the macro button.}}
{{param|command|The command to run when the macro button is clicked, or the macro is called.}}
{{param|props|A [[String Property List]] or [[JSON Object]] containing the properties for the button.
** {{code|applyToSelected}} - Should the macro be applied to the selected tokens.
** {{code|autoExecute}} - If the macro will be automatically executed when the button is clicked, accepts {{true}} or {{false}}.
** {{code|color}} - The name of the color for the button.
** {{code|command}} - The command for the macro (only when using JSON version of function).
** {{code|fontColor}} - The name of the font color for the button.
** {{code|fontSize}} - The size of the font for the button.
** {{code|includeLabel}} - If the label will be output when the button is clicked. Accepts {{true}} or {{false}}.
** {{code|group}} - The name of the group that the button belongs to.
** {{code|sortBy}} - The sort by value of the macro button.
** {{code|label}} - The label for the button.
** {{code|maxWidth}} - The maximum width of the button.
** {{code|minWidth}} - The minimum width of the button.
** {{code|playerEditable}} - Is the button player editable, accepts {{true}} or {{false}}.
** {{code|tooltip}} - The tool tip for the macro button.
** {{code|compare}} - Takes a [[JSON Array]] which can contain one or more of the following keywords (only usable with JSON version of the function).
*** {{code|applyToSelected}} - Use the macro applyToSelected for common macro comparisons.
*** {{code|autoExecute}} - Use the macro autoExec for common macro comparisons.
*** {{code|command}} - Use the macro command for common macro comparisons.
*** {{code|group}} - Use the macro group for common macro comparisons.
*** {{code|includeLabel}} - Use the macro includeLabel for common macro comparisons.
*** {{code|sortPrefix}} - Use the macro sortPrefix for common macro comparisons.  }}
{{param|delim|The delimiter used in the [[String Property List]] that is sent to the {{code|props}} parameter, defaults to {{code|&quot;;&quot;}}. If you are sending a [[JSON Object]] to the {{code|props}} parameter, and using the {{code|id}} parameter, you can set this to {{code|&quot;json&quot;}}.}}
{{param|id|The token {{code|id}} of the token that the macro is created on. {{TrustedParameter}} }}

''Note: It appears that if a JSON object is passed as {{code|props}} that contains a key of {{code|index}} and that macro index already exists in the destination token, the existing macro will be overwritten.  A workaround is to remove that key from the JSON object prior to calling this function.''

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[createMacro(&quot;Test&quot;, &quot;this is a test&quot;, &quot;autoExecute=true;color=blue&quot;, &quot;;&quot;) ]
[createMacro(&quot;Another Test&quot;, &quot;this is a test&quot;, 
             &quot;autoExecute=true;color=red;fontColor=white&quot;, &quot;;&quot;) ]
&lt;/source&gt;
Will create the following buttons on the current token.
[[Image:createMacros.png]]

Note that if you want to provide a macro command in the command section, you will have issues with quotations as you cannot use double quotes &quot; inside, so macro commands need to be with single ' quotes. 
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: createMacro(&quot;myMacro&quot;, &quot;[macro('aMacro@Lib:Test'): 'aParameter']&quot;,
    &quot;autoExecute=true;group=Weapons&quot;) ]
&lt;/source&gt;
|changes=
{{change|1.3b49|Added {{code|json}} delimiter option.}}
{{change|1.3b51|Added {{code|id}} parameter option, and JSON-only parameter syntax.}}
{{change|1.3b53|Added ability for {{code|command}}, {{code|compare}}, {{code|playerEditable}}, {{code|applyToSelected}}, {{code|autoExec}}, {{code|group}}, and {{code|tooltip}} parameters.}}
}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:TrustedOnlyFunction</title>
    <ns>10</ns>
    <id>11</id>
    <revision>
      <id>34</id>
      <timestamp>2008-12-01T05:52:41Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <comment>New page: &lt;div&gt; &lt;p style=&quot;background-color: #FFCCCC; font-weight:bold&quot;&gt; This function can only be called from a [[Macros:TrustedMacros| trusted macro]] &lt;/p&gt; &lt;/div&gt;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="153">&lt;div&gt;
&lt;p style=&quot;background-color: #FFCCCC; font-weight:bold&quot;&gt;
This function can only be called from a [[Macros:TrustedMacros| trusted macro]]
&lt;/p&gt;
&lt;/div&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>currentToken</title>
    <ns>0</ns>
    <id>12</id>
    <revision>
      <id>5624</id>
      <parentid>2829</parentid>
      <timestamp>2011-07-24T10:42:42Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="698">{{MacroFunction
|name=currentToken
|version=1.3b48
|description=Returns the id of the [[Current Token]]. In most cases this will return the same as [[Macros:Functions:getImpersonated | getImpersonated()]] function. The difference is when it is called in a {{roll|token}} or after a call to the  [[Macros:Functions:switchToken | switchToken()]] function, in both these cases it will return the id of the [[token]] being operated on, while [[Macros:Functions:getImpersonated | getImpersonated()]] will return the id of the [[impersonated token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
currentToken()
&lt;/source&gt;

|changes=
{{change|1.3b51|No longer a trusted function.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>decode</title>
    <ns>0</ns>
    <id>13</id>
    <revision>
      <id>1930</id>
      <parentid>1128</parentid>
      <timestamp>2009-03-10T11:49:23Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="475">{{MacroFunction
|name=decode
|version=1.3b48
|description=Decodes a string that was encoded with the [[encode|encode()]] function. The [[encode | encode()]] and decode() functions can be used to encode a property list so that it can be embedded within another property list.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
decode(str)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: getStrProp(decode(getStrProp(inv, &quot;Weapons&quot;), &quot;Name&quot;)]
&lt;/source&gt;
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>encode</title>
    <ns>0</ns>
    <id>14</id>
    <revision>
      <id>1929</id>
      <parentid>1928</parentid>
      <timestamp>2009-03-10T11:47:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="531">{{MacroFunction
|name=encode
|version=1.3b48
|description=Encodes a string that was can be decoded with the [[decode|decode()]] function. The [[decode | decode()]] and encode() functions can be used to encode a property list so that it can be embedded within another property list.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
encode(str)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: innerPropList = encode(&quot;val1=blah ; val2=blahblah&quot;)]
[h: props = setStrProp(props, key, innerPropList)]
&lt;/source&gt;
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>findToken</title>
    <ns>0</ns>
    <id>15</id>
    <revision>
      <id>1989</id>
      <parentid>1824</parentid>
      <timestamp>2009-03-10T13:05:31Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="502">{{MacroFunction
|name=findToken
|trusted=true
|version=1.3b48
|description=Finds a [[Token:token|token]] on the current [[Map:map|map]] by the [[Token:token|token]] name or GM name and returns its id. If the [[Token:token|token]] is not found then an empty string &quot;&quot; is returned.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
findToken(name)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: id = findToken(&quot;Hero&quot;)]
[if (id == &quot;&quot;, &quot;Token not found!&quot;, &quot;Token found&quot;)]
&lt;/source&gt;
}}
[[Category:Find Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getAllPlayerNames</title>
    <ns>0</ns>
    <id>16</id>
    <revision>
      <id>5155</id>
      <parentid>2007</parentid>
      <timestamp>2011-01-20T16:23:21Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="804">{{MacroFunction
|name=getAllPlayerNames
|trusted=true
|version=1.3b48
|description=Gets a [[Macros:string list|string list]] containing the names of all the players that are connected.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getAllPlayerNames()
getAllPlayerNames(delim)
&lt;/source&gt;

If {{code|delim}} is specified then it is used to separate the values in the list; if it is not specified then it defaults to &quot;{{code|,}}&quot;.  When {{code|delim}} is the string &quot;{{code|json}}&quot; the return value will be in the form of a [[JSON Array]].

|example=
You can use the following code to print the names of all of the players that are connected.
&lt;source lang=&quot;mtmacro&quot; line&gt;
Players Connected&lt;br&gt;
[h: players = getAllPlayerNames()]
[foreach(name, players, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;
}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getAllPropertyNames</title>
    <ns>0</ns>
    <id>17</id>
    <revision>
      <id>7141</id>
      <parentid>7140</parentid>
      <timestamp>2019-03-02T23:22:17Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1955">{{MacroFunction
|name=getAllPropertyNames
|version=1.3b48
|description=Gets a list containing the [[Token:token property|token property]] names that are defined in the [[Campaign:campaign properties|campaign properties]]. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned and the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter is {{code|&quot;json&quot;}} then a [[JSON Array]] is returned.
* Otherwise, a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getAllPropertyNames()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getAllPropertyNames(type)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getAllPropertyNames(type, delim)
&lt;/source&gt;

If type is specified then the [[Macros:string list|string list]] contains the [[Token:token property|property]] names for that [[Token:token property type|token property type]], otherwise it will contain the [[Token:token property|token property]] names for all [[Token:token property type|token property type]]s. If delim is specified then it is used to separate the values in the [[Macros:string list|string list]], if it is not specified then it defaults to ','.

|examples=
You can use the following code to print out all of the properties in the [[Campaign:campaign properties|campaign properties]] list..
&lt;source lang=&quot;mtmacro&quot; line&gt;
Campaign Properties&lt;br&gt;
[h: props = getAllPropertyNames()]
[foreach(name, props, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

If you have two token property sets, for instance &quot;PC&quot; and &quot;NPC&quot;, you could print out all of the properties for the &quot;PC&quot; property set like so:
&lt;source lang=&quot;mtmacro&quot; line&gt;
PC Properties&lt;br&gt;
[h: props=getAllPropertyNames(&quot;PC&quot;)]
[foreach(name, props, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

|changes=
{{change|1.3b49|Added {{code|json}} delimiter option.}}

}}
[[Category:Token Function]][[Category:Property Function]]</text>
      <sha1>3hynqct54ey6lq68muxboh1lbsbgmoe</sha1>
    </revision>
  </page>
  <page>
    <title>abort</title>
    <ns>0</ns>
    <id>18</id>
    <revision>
      <id>7243</id>
      <parentid>7189</parentid>
      <timestamp>2019-03-10T12:27:09Z</timestamp>
      <contributor>
        <username>Naciron</username>
        <id>664</id>
      </contributor>
      <comment>Adding catching of an abort</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2902">{{MacroFunction
|name=abort
|version=1.3b42
|description=

Is used to conditionally abort the execution of a macro. If the argument to {{code|abort()}} is 0 then the execution of the macro stops and all macro output is discarded. If the argument to {{code|abort()}} is non zero then the macro continues. 

Note that only the output of the macro is discarded when the macro is aborted any changes made to macros will not be undone.

Common uses for this function are 
* Ending a macro if the cancel button is clicked on an input dialog created using the [[Macros:Functions:input | input()]] function.
* Discarding all output generated by the macro, in effect making a &quot;silent&quot; macro.
* Silently bailing out of a macro if a certain condition is not met.

If you prefer to display an error message when exiting the macro see the [[assert | {{code|assert()}}]] function.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
abort(abrt)
&lt;/source&gt;

'''Parameters'''
{{param|abrt| {{code|0}} if the abort function should abort the macro, nonzero if it should not.}}


|examples=
The following example will create a dialog box for the user to enter a value for the variable named blah, if the user clicks on cancel then res will be 0 so the abort() function will cause the macro to terminate, otherwise res will not be 0 so the macro will continue.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: res = input(&quot;blah&quot;)] [h: abort(res)]
&lt;/source&gt;

The following example discards any output in the macro.
&lt;source lang=&quot;mtmacro&quot; line&gt;
Hah! you will never see this! [abort(0)]
&lt;/source&gt;

The following line can be used to protect macros that only the GM should run
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: abort(isGM())]
&lt;/source&gt;

The following line can be used to silently end a macro that can only be run from a [[Trusted Macro]]
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: abort(isTrusted())]
&lt;/source&gt;

===Usage Notes===
When aborting a macro called from another macro (for example, a [[Token:library_token|library token]]), all macros are aborted, not just the one executing.

Since 1.5.0 you can change that behaviour by using [[macro.catchAbort|macro.catchAbort]].

====Calling Macro====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Call the getAmmo library macro --&gt;
[MACRO(&quot;getAmmo@Lib:test&quot;): &quot;arrows&quot;]
You have [r:macro.return] arrows.
&lt;/source&gt;

====Called Macro====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- getAmmo macro in Lib:test token --&gt;
[h: macro.return = 0]
[h: abort(json.contains(ammunition, macro.args))]
[h: macro.return = json.get(ammunition, macro.args)]
&lt;/source&gt;

====Results====
''assuming ammunition = { &quot;arrows&quot; : 30 }''
 TokenName: You have 30 arrows.
''assuming ammunition = { &quot;bolts&quot; : 20 }''
 (nothing)


|changes=
{{change|1.3b49|No message is displayed if called from a macroLink.}}
{{change|1.5.0|catch an abort with macro.catchAbort}}

|also=
[[ assert|assert()]]
[[ macro.catchAbort|macro.catchAbort]]

}}

[[Category:Miscellaneous Function]]</text>
      <sha1>90b2sjep4krobr51vin88mswmwi4saw</sha1>
    </revision>
  </page>
  <page>
    <title>abs</title>
    <ns>0</ns>
    <id>19</id>
    <redirect title="absolutevalue" />
    <revision>
      <id>1027</id>
      <parentid>1026</parentid>
      <timestamp>2009-03-06T22:07:06Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[absolutevalue]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="90">#REDIRECT [[absolutevalue]]
[[Category:Macro Function]]
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>absolutevalue</title>
    <ns>0</ns>
    <id>20</id>
    <revision>
      <id>1024</id>
      <parentid>1019</parentid>
      <timestamp>2009-03-06T22:05:18Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="802">{{MacroFunction
|name=absolutevalue
|description=Returns the absolute value of a number. The absolute value of a number is the number without the sign.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = absolutevalue(num)]
&lt;/source&gt;
You can use the following shorthand for this function:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = abs(num)]
&lt;/source&gt;

|examples=
====Negative Number====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: absolutevalue(-3)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;3&lt;/source&gt;


====Positive Number====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: abs(4)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;4&lt;/source&gt;


====Decimal Number====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: abs(3.4)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;3.4&lt;/source&gt;

}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>add</title>
    <ns>0</ns>
    <id>21</id>
    <revision>
      <id>1042</id>
      <parentid>1035</parentid>
      <timestamp>2009-03-06T22:20:37Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="938">{{MacroFunction
|name=add
|description=Adds number and/or strings together. If all of the arguments to the function are numbers then a numeric addition is performed, if any of the arguments are strings then all of the arguments are concatenated as a string.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: result = add(val1, val2, ...)]
[h: result = sum(val1, val2, ...)]
[h: result = concat(val1, val2, ...)]
&lt;/source&gt;

|examples=
====Numbers====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: add(1,4)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;5&lt;/source&gt;


====Strings====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: add(&quot;Mary&quot;, &quot;had&quot;, &quot;a&quot;, &quot;little&quot;, &quot;lamb&quot;)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;&quot;Maryhadalittlelamb&quot;&lt;/source&gt;


====Numbers and Strings====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: add(1,&quot;4&quot;)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;&quot;14&quot;&lt;/source&gt;

}}
[[Category:Mathematical Function]]
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:GMOnlyFunction</title>
    <ns>10</ns>
    <id>22</id>
    <revision>
      <id>54</id>
      <timestamp>2008-12-01T12:03:03Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <comment>New page: &lt;div&gt; &lt;p style=&quot;background-color: #EEEE88; font-weight: bold&quot;&gt; This is a GM only function, it can not be called by players. &lt;/p&gt; &lt;/div&gt;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="135">&lt;div&gt;
&lt;p style=&quot;background-color: #EEEE88; font-weight: bold&quot;&gt;
This is a GM only function, it can not be called by players.
&lt;/p&gt;
&lt;/div&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>addAllNPCsToInitiative</title>
    <ns>0</ns>
    <id>23</id>
    <revision>
      <id>2226</id>
      <parentid>2219</parentid>
      <timestamp>2009-03-25T10:29:27Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="987">{{MacroFunction
|name=Function addAllNPCsToInitiative
|trusted=true
|description=Adds all the [[Token:NPC token|NPC token]]s on the current [[Map:map|map]] to the [[Initiative:initiative panel|initiative panel]]. This function returns the number of [[Token:token|token]]s that were added to the [[Initiative:initiative panel|initiative panel]]. 

This function will not assign any initiative value to the [[Token:token|token]]s, you can use the [[setInitiative | {{code|setInitiative()}}]] function
to set the initiative value of tokens.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
addAllNPCsToInitiative()
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: noTokens = addAllNPCsToInitiative()]
&lt;/source&gt;


&lt;source lang=&quot;mtmacro&quot; line&gt;
Added [r: addAllNPCsToInitiative()] NPCs to the initiative panel.
&lt;/source&gt;

|also=
[[setInitiative | setInitiative()]] [[addAllPCsToInitiative | addAllPCsToInitiative()]] [[addAllToInitiative | addAllToInitiative()]]

}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>addAllPCsToInitiative</title>
    <ns>0</ns>
    <id>24</id>
    <revision>
      <id>2227</id>
      <parentid>2220</parentid>
      <timestamp>2009-03-25T10:37:31Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="900">{{MacroFunction
|name=addAllPCsToInitiative
|trusted=true
|description=Adds all the [[Token:PC token|PC token]]s on the current [[Map:map|map]] to the [[Initiative:initiative panel|initiative panel]]. This function returns the number of [[Token:token|token]]s that were added to the [[Initiative:initiative panel|initiative panel]].

This function will not assign any initiative value to the [[Token:token|token]]s, you can use the [[setInitiative | {{code|setInitiative()}}]]
function to set the initiative value of tokens.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: noTokens = addAllPCsToInitiative()]
&lt;/source&gt;


&lt;source lang=&quot;mtmacro&quot; line&gt;
Added [r: addAllNPCsToInitiative()] NPCs to the initiative panel.
&lt;/source&gt;

|also=
[[setInitiative | setInitiative()]] [[addAllNPCsToInitiative | addAllNPCsToInitiative()]] [[addAllToInitiative | addAllToInitiative()]]

}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>addAllToInitiative</title>
    <ns>0</ns>
    <id>25</id>
    <revision>
      <id>2228</id>
      <parentid>2221</parentid>
      <timestamp>2009-03-25T10:44:51Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="899">{{MacroFunction
|name=addAllToInitiative
|trusted=true
|description=Adds all of the [[Token:token|token]]s on the current [[Map:map|map]] to the [[Initiative:initiative panel|initiative panel]]. This function returns the number of [[Token:token|token]]s that were added to the [[Initiative:initiative panel|initiative panel]].

This function will not assign any initiative value to the [[Token:token|token]]s, you can use the [[setInitiative | {{code|setInitiative()}}]]
function to set the initiative value of tokens. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: noTokens = addAllToInitiative()]
&lt;/source&gt;



&lt;source lang=&quot;mtmacro&quot; line&gt;
Added [r: addAllNPCsToInitiative()] NPCs to the initiative panel.
&lt;/source&gt;

|also=
[[setInitiative | setInitiative()]] [[addAllPCsToInitiative | addAllPCsToInitiative()]] [[addAllNPCsToInitiative | addAllNPCsToInitiative()]]

}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>average</title>
    <ns>0</ns>
    <id>26</id>
    <revision>
      <id>7192</id>
      <parentid>2271</parentid>
      <timestamp>2019-03-06T07:25:49Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="465">{{MacroFunction
|name=avg
|description=
Calculates the average (or mean) of all of the numbers that are passed in. The mean
is equal to the sum of all the arguments divided by the number of arguments.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: av = avg(num, num, ...)]
[h: av = average(num, num, ...)]
[h: av = mean(num, num, ...)]
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: avg(1, 2, 3, 3, 10)]
&lt;/source&gt;
Returns 3.8
}}
[[Category:Mathematical Function]]</text>
      <sha1>knqmbdqd8bv31felogwrzi7yufvrirt</sha1>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:avg</title>
    <ns>0</ns>
    <id>27</id>
    <redirect title="average" />
    <revision>
      <id>1069</id>
      <parentid>1067</parentid>
      <timestamp>2009-03-06T23:00:45Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[average]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[average]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>addToInitiative</title>
    <ns>0</ns>
    <id>28</id>
    <revision>
      <id>4014</id>
      <parentid>4013</parentid>
      <timestamp>2009-10-27T18:45:25Z</timestamp>
      <contributor>
        <username>Lmarkus001</username>
        <id>34</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1641">{{stub}}
{{MacroFunction
|name=addToInitiative
|description=Adds the [[Current Token]] to the [[Initiative:initiative panel|initiative panel]]. 
This function will not assign any initiative value to the [[Token:token|token]]s, you can use the [[setInitiative | setInitiative()]] function
to set the initiative value of tokens.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: addToInitiative()]
[H: return = addToInitiative( AllowDuplicates, value ) ]
&lt;/source&gt;
'''Parameters'''
* {{code|AllowDuplicates}} - If false (default) then will not add the token if it is already in the initiative list.  If true (1) an additional entry will be added to the initiative list (so there could be multiple initiative entries for the same token).
* {{code|value}} - The initiative value to set.  If included, the initiative will be set even if the token is already on the initiative list and duplicates are not allowed.
* {{code|return}} - Returns 1 if added to the initiative, 0 if did not.

|example=
The following example shows how to add a [[Current Token]] to the [[Initiative:initiative panel|initiative panel]], set 
its initiative and then sort the [[Initiative:initiative panel|initiative panel]]. Normally you would not sort the [[Initiative:initiative panel|initiative panel]] every time you add a [[Current Token]] but its done here to show you how it is done.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: addToInitiative()]
[h: setInitiative(1d20)]
[h: sortInitiative()]
&lt;/source&gt;

|also=
[[setInitiative | setInitiative()]] [[addAllPCsToInitiative | addAllPCsToInitiative()]] [[addAllToInitiative | addAllToInitiative()]]

}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:band</title>
    <ns>0</ns>
    <id>29</id>
    <redirect title="bitwiseand" />
    <revision>
      <id>1078</id>
      <parentid>81</parentid>
      <timestamp>2009-03-06T23:15:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[bitwiseand]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[bitwiseand]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>bitwiseand</title>
    <ns>0</ns>
    <id>30</id>
    <revision>
      <id>4332</id>
      <parentid>4207</parentid>
      <timestamp>2010-07-28T13:18:52Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Removed spam link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1270">{{MacroFunction
|name=bitwiseand
|description=Performs a bitwise 'and' operation of the {number} arguments by taking the binary representation of each of the numbers and performing the logical and operation on each of the bits.

'''Logical &quot;and&quot; Table'''
{{{!}}
{{!}}Bit1 {{!}}{{!}} Bit2 {{!}}{{!}}  Result
{{!}}-
{{!}}align=center{{!}} 0 {{!}}{{!}} align=center{{!}} 0 {{!}}{{!}} align=center{{!}} 0
{{!}}-
{{!}}align=center{{!}} 0 {{!}}{{!}} align=center{{!}} 1 {{!}}{{!}} align=center{{!}} 0
{{!}}-
{{!}}align=center{{!}} 1 {{!}}{{!}} align=center{{!}} 1 {{!}}{{!}} align=center{{!}} 1
{{!}}}

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = band(num, num, ...)]
[h: val = bitwiseand(num, num, ...)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: band(1,0)]
&lt;/source&gt;
Returns 0.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: band(1,1)]
&lt;/source&gt;
Returns 1.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: band(3, 5]
&lt;/source&gt;
Returns 1.
3 in binary is 011 and 5 in binary is 101, the bitwise 'and' of these values is 001 in binary which is 1 in decimal.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: band(20, 12)]
&lt;/source&gt;
Returns 4.      
20 in binary is 10100 and 12 in binary is 01100, the bitwise 'and' of these values is 00100 in binary which is 4 in decimal.
}}
[[Category:Logical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>bitwisenot</title>
    <ns>0</ns>
    <id>31</id>
    <revision>
      <id>1081</id>
      <parentid>1080</parentid>
      <timestamp>2009-03-06T23:21:00Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:bitwisenot]] moved to [[bitwisenot]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1461">{{MacroFunction
|name=bitwisenot
|description=Performs a bitwise 'not' operation of the {number}. A bitwise not is performed by taking the binary representation of the {number} and performing a logical 'not' operation on each of these bits.

'''Logical &quot;not&quot; Table'''
{{{!}}
{{!}}Bit {{!}}{{!}}  Result
{{!}}-
{{!}}align=center{{!}} 0 {{!}}{{!}} align=center{{!}} 1
{{!}}-
{{!}}align=center{{!}} 1 {{!}}{{!}} align=center{{!}} 0
{{!}}}

    
Unfortunately its not quite as simple as the table above makes it appear since number are a string of 32 (or more bits) so a 1 in binary is actually a 00000000000000000000000000000001 and a 0 is actually a 00000000000000000000000000000000 so the table is now.

        bnot of binary 00000000000000000000000000000000
                is             11111111111111111111111111111111
        which is -1 in decimal

        bnot of binary 00000000000000000000000000000001 
        is             11111111111111111111111111111110
        which is -2 in decimal

If you are unsure why the results are negative then you can get more information by reading [[wp:Twos_complement|Twos_complement]]

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = bnot(num)]
[h: val = bitwisenot(num)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[bnot(1)]
&lt;/source&gt;
Returns 0.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: bnot(1)]
&lt;/source&gt;
Returns 0.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: bnot(12]
&lt;/source&gt;
Returns -13.
}}
[[Category:Logical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>bitwiseor</title>
    <ns>0</ns>
    <id>32</id>
    <revision>
      <id>1086</id>
      <parentid>1085</parentid>
      <timestamp>2009-03-06T23:25:50Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:bitwiseor]] moved to [[bitwiseor]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1315">{{MacroFunction
|name=bitwiseor
|description=Performs a bitwise 'or' operation of the number arguments by taking the binary representation of each of the numbers and performing the logical or operation on each of the bits.

'''Logical &quot;or&quot; Table'''
{{{!}}
{{!}}Bit1 {{!}}{{!}} Bit2 {{!}}{{!}}  Result
{{!}}-
{{!}}align=center{{!}} 0 {{!}}{{!}} align=center{{!}} 0 {{!}}{{!}} align=center{{!}} 0
{{!}}-
{{!}}align=center{{!}} 0 {{!}}{{!}} align=center{{!}} 1 {{!}}{{!}} align=center{{!}} 1
{{!}}-
{{!}}align=center{{!}} 1 {{!}}{{!}} align=center{{!}} 1 {{!}}{{!}} align=center{{!}} 1
{{!}}}

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = bor(num, num, ...)]
[h: val = btwiseor(num, num, ...)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: bor(1,0)]
&lt;/source&gt;
Returns 1.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: bor(1,1)]
&lt;/source&gt;
Returns 1.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: bor(0,0)]
&lt;/source&gt;
Returns 0.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: bor(2, 4]
&lt;/source&gt;
Returns 6.
2 in binary is 010 and 4 in binary is 100, so a bitwise or of these two values is 110 which is 6 in decimal.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: band(20, 12)]
&lt;/source&gt;
Returns 4.      
20 in binary is 10100 and 12 in binary is 01100, the bitwise 'and' of these values is 00100 in binary which is 4 in decimal.
}}
[[Category:Logical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>bitwisexor</title>
    <ns>0</ns>
    <id>33</id>
    <revision>
      <id>1091</id>
      <parentid>1090</parentid>
      <timestamp>2009-03-06T23:30:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:bitwisexor]] moved to [[bitwisexor]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1331">{{MacroFunction
|name=bitwisexor
|description=Performs a bitwise 'exlusive or' operation of the number arguments by taking the binary representation of each of the numbers and performing the logical exclusive or operation on each of the bits.

'''Logical &quot; exclusive or&quot; Table'''
{{{!}}
{{!}}Bit1 {{!}}{{!}} Bit2 {{!}}{{!}}  Result
{{!}}-
{{!}}align=center{{!}} 0 {{!}}{{!}} align=center{{!}} 0 {{!}}{{!}} align=center{{!}} 0
{{!}}-
{{!}}align=center{{!}} 0 {{!}}{{!}} align=center{{!}} 1 {{!}}{{!}} align=center{{!}} 1
{{!}}-
{{!}}align=center{{!}} 1 {{!}}{{!}} align=center{{!}} 1 {{!}}{{!}} align=center{{!}} 0
{{!}}}

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = bxor(num, num, ...)]
[h: val = bitwisexor(num, num, ...)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: bor(1,0)]
&lt;/source&gt;
Returns 1.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: bor(1,1)]
&lt;/source&gt;
Returns 0.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: bor(0,0)]
&lt;/source&gt;
Returns 0.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: bor(2, 4]
&lt;/source&gt;
Returns 6.
2 in binary is 010 and 4 in binary is 100, so a bitwise or of these two values is 110 which is 6 in decimal.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: band(6, 4)]
&lt;/source&gt;
Returns 2.      
6 in binary is 110 and 4 in binary is 100, so a bitwise or of these two values is 010 which is 2 in decimal.
}}
[[Category:Logical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:bnot</title>
    <ns>0</ns>
    <id>34</id>
    <redirect title="bitwisenot" />
    <revision>
      <id>1083</id>
      <parentid>83</parentid>
      <timestamp>2009-03-06T23:21:00Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[Macros:Functions:bitwisenot]] has been moved, it is now a redirect to [[bitwisenot]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[bitwisenot]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:bor</title>
    <ns>0</ns>
    <id>35</id>
    <redirect title="bitwiseor" />
    <revision>
      <id>1088</id>
      <parentid>84</parentid>
      <timestamp>2009-03-06T23:25:50Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[Macros:Functions:bitwiseor]] has been moved, it is now a redirect to [[bitwiseor]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[bitwiseor]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:bxor</title>
    <ns>0</ns>
    <id>36</id>
    <redirect title="bitwisexor" />
    <revision>
      <id>1093</id>
      <parentid>85</parentid>
      <timestamp>2009-03-06T23:30:29Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[Macros:Functions:bitwisexor]] has been moved, it is now a redirect to [[bitwisexor]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[bitwisexor]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>concat</title>
    <ns>0</ns>
    <id>37</id>
    <redirect title="add" />
    <revision>
      <id>1041</id>
      <parentid>1039</parentid>
      <timestamp>2009-03-06T22:20:02Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[add]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="74">#REDIRECT [[add]]
[[Category:Macro Function]]
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:ceil</title>
    <ns>0</ns>
    <id>38</id>
    <redirect title="ceiling" />
    <revision>
      <id>1102</id>
      <parentid>88</parentid>
      <timestamp>2009-03-06T23:43:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[ceiling]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[ceiling]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>ceiling</title>
    <ns>0</ns>
    <id>39</id>
    <revision>
      <id>1100</id>
      <parentid>1099</parentid>
      <timestamp>2009-03-06T23:42:49Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:ceiling]] moved to [[ceiling]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="498">{{MacroFunction
|name=ceiling
|description=Returns the number passed in if it is an integer, otherwise it returns the number rounded up to the next integer.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = ceil(num)]
[h: val = ceiling(num)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: ceil(10)]
&lt;/source&gt;
Returns 10.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: ceil(1.2)]
&lt;/source&gt;
Returns 2.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: ceil(-1.2)]
&lt;/source&gt;
Returns -1.
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>countStrProp</title>
    <ns>0</ns>
    <id>40</id>
    <revision>
      <id>1906</id>
      <parentid>1116</parentid>
      <timestamp>2009-03-10T11:08:03Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="369">{{MacroFunction
|name=countStrProp
|version=1.3b42
|description=Returns the number of keys in a [[Macros:string property list|string property list]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
countStrProp(propList)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: countStrProp(&quot;a=blah; b=doh; c=meh&quot;)]
&lt;/source&gt;
Returns 3.
}}
[[Category:String Property List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>deleteStrProp</title>
    <ns>0</ns>
    <id>41</id>
    <revision>
      <id>1905</id>
      <parentid>1131</parentid>
      <timestamp>2009-03-10T11:07:13Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="413">{{MacroFunction
|name=deleteStrProp
|version=1.3b42
|description=Returns a copy of the [[Macros:string property list|string property list]] with the specified key removed.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
deleteStrProp(props, key)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: deleteStrProp(&quot;a=blah; b=doh; c=meh&quot;, &quot;a&quot;)]
&lt;/source&gt;
Returns &quot;b=doh; c=meh&quot;.
}}
[[Category:String Property List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>divide</title>
    <ns>0</ns>
    <id>42</id>
    <revision>
      <id>1138</id>
      <parentid>1135</parentid>
      <timestamp>2009-03-07T01:42:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:divide]] moved to [[divide]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="480">{{MacroFunction
|name=divide
|description=Divides the first number by the second number, and then divides that result by the third number --if present-- and so on for all the numbers passed to the function.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: props = divide(num, num, ...)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: divide(4, 2)]
&lt;/source&gt;
Returns 2.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: divide(24, 2, 2)]
&lt;/source&gt;
Returns 6.
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>floor</title>
    <ns>0</ns>
    <id>43</id>
    <revision>
      <id>1159</id>
      <parentid>1158</parentid>
      <timestamp>2009-03-07T02:32:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:floor]] moved to [[floor]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="509">{{MacroFunction
|name=floor
|description=Returns the number padded in if it is an integer, otherwise the number is rounded down to the nearest smaller integer and that value is returned.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: result = floor(num)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: floor(2)]
&lt;/source&gt;
Returns 2.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: floor(1.2)]
&lt;/source&gt;
Returns 1.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: floor(-1.2)]
&lt;/source&gt;
Returns -2.
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getBar</title>
    <ns>0</ns>
    <id>44</id>
    <revision>
      <id>6287</id>
      <parentid>6286</parentid>
      <timestamp>2014-05-17T00:43:46Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="390">{{stub}}
{{MacroFunction
|name=getBar
|version=1.3b42
|description=Gets the value of the specified [[Token:bar|bar]] for the [[Current Token]]. The value returned is between 0 and 1 for 0% to 100% respectively.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getBar(name)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: healthPct = getBar(&quot;health&quot;) * 100]
&lt;/source&gt;
}}
[[Category:Bar Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getCurrentInitiative</title>
    <ns>0</ns>
    <id>45</id>
    <revision>
      <id>1177</id>
      <parentid>1176</parentid>
      <timestamp>2009-03-07T02:50:50Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:getCurrentInitiative]] moved to [[getCurrentInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="440">{{MacroFunction
|name=getCurrentInitiative
|trusted=true
|description=Gets the offset of the [[Token:token|token]] in the [[Initiative:initiative panel|initiative panel]] that has the [[Initiative:initiative|initiative]]. The offset starts at 0, if no token has [[Initiative:initiative|initiative]] then -1 is returned.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: offset = getCurrentInitiative()]
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getExposedTokenNames</title>
    <ns>0</ns>
    <id>46</id>
    <revision>
      <id>7142</id>
      <parentid>6304</parentid>
      <timestamp>2019-03-02T23:23:37Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2247">{{MacroFunction
|name=getExposedTokenNames
|trusted=true
|version=1.3b48
|description=Gets a list containing the names of all of the [[Token:token|token]]s on the current [[Map:map|map]] that have been exposed, (i.e. not covered by [[Map:fog of war|fog of war]]). The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned and the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|&quot;json&quot;}} then a [[JSON Array]] is returned.
* Otherwise, a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getExposedTokenNames()
getExposedTokenNames(delim)
&lt;/source&gt;

If delim is specified then it is used as the delimiter that separates the [[Token:token|token]] names.

|example=
The following example will print out the names of all the [[Token:token|token]]s on the current [[Map:map|map]] not covered by [[Map:fog of war|fog of war]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getExposedTokenNames()]
[r: foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

The following example will return the exposed tokens from the TOKEN layer only.
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- get all tokens from the token layer and store in json array --&gt;
[h:allToks		= getTokenNames(&quot;json&quot;,'{layer:[&quot;TOKEN&quot;]}')]
&lt;!-- get all exposed tokens from map --&gt;
[h:allExposed	= getExposedTokenNames(&quot;json&quot;)]
&lt;!-- get the intersection of token layer tokens and all the exposed tokens, resulting in token layer exposed tokens only --&gt;
[h:tokExposed	= json.intersection(allToks, allExp)]
&lt;!-- sort the result ascending --&gt;
[h:tokExposed	= json.sort(allToks, allExp,&quot;a&quot;)]
&lt;/source&gt;

This is exactly the same example as the one above, but then nested, so you can have the result in one line of code.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:tokExposed	= json.sort(json.intersection(getTokenNames(&quot;json&quot;,'{layer:[&quot;TOKEN&quot;]}'), getExposedTokenNames(&quot;json&quot;)),&quot;a&quot;)]
&lt;/source&gt;


|changes=
* '''1.3b49''' - Added ''&quot;json&quot;'' delimiter option.
* '''1.3b91''' - Apparently now tokens from ALL layers are returned, instead of TOKEN LAYER only. Added example to correct this.

}}
[[Category:Find Function]]
[[Category:Token Function]]</text>
      <sha1>of2f04vk3vg1lqnjzmn6zh4t3gpy7zl</sha1>
    </revision>
  </page>
  <page>
    <title>getExposedTokens</title>
    <ns>0</ns>
    <id>47</id>
    <revision>
      <id>7143</id>
      <parentid>2873</parentid>
      <timestamp>2019-03-02T23:24:21Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1180">{{MacroFunction
|name=getExposedTokens
|trusted=true
|version=1.3b48
|description=Gets a list containing the ids of all of the [[Token:token|token]]s on the current [[Map:map|map]] that have been exposed, (i.e. not covered by [[Map:fog of war|fog of war]]). The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned with the default value of ',' is used.
* If the delimiter ''&quot;json&quot;'' then a [[JSON Array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getExposedTokenNames()
getExposedTokenNames(delim)
&lt;/source&gt;

If delim is specified then it is used as the delimiter that separates the [[Token:token|token]] ids.

|example=
The following example will print out the ids of all the [[Token:token|token]]s on the current [[Map:map|map]] not covered by [[Map:fog of war|fog of war]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: ids = getExposedTokens()]
[r: foreach(id, ids &quot;&lt;br&gt;&quot;): id]
&lt;/source&gt;

|changes=
* '''1.3b49''' - Added ''&quot;json&quot;'' delimiter option.
}}
[[Category:Find Function]]</text>
      <sha1>kg8653go9vbxnrb2v1mnmqp44jn6mac</sha1>
    </revision>
  </page>
  <page>
    <title>getFindCount</title>
    <ns>0</ns>
    <id>48</id>
    <revision>
      <id>1932</id>
      <parentid>1187</parentid>
      <timestamp>2009-03-10T11:51:15Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="472">{{MacroFunction
|name=getFindCount
|version=1.3b48
|description=Returns the number of times that [[strfind| strfind()]] was able to match the input string.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getFindCount(id)
&lt;/source&gt;

The id is the id value returned by [[Macros:Functions:strfind| strfind()]].

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: id = strfind(&quot;this is a test&quot;, &quot;(\\S+)\\s+(\\S+)\\s*&quot;)]
[r: getFindCount(id)]
&lt;/source&gt;
Returns 2.
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getGMName</title>
    <ns>0</ns>
    <id>49</id>
    <revision>
      <id>2462</id>
      <parentid>1191</parentid>
      <timestamp>2009-03-31T00:16:09Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="485">{{stub|Examples of usage.}}
{{MacroFunction
|name=getGMName
|version=1.3b49
|trusted=true
|description=Returns the GM Name of a token as a string.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getGMName()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getGMName(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of the token that has its GM Name returned, defaults to the [[Current Token]].}}

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}
}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getGMNotes</title>
    <ns>0</ns>
    <id>50</id>
    <revision>
      <id>2833</id>
      <parentid>1958</parentid>
      <timestamp>2009-04-04T21:18:36Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="235">{{MacroFunction
|name=getGMNotes
|trusted=true
|version=1.3b48
|description=Returns the [[Token:GM notes|GM notes]] from the [[Current Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getGMNotes()
&lt;/source&gt;
}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getGroup</title>
    <ns>0</ns>
    <id>51</id>
    <revision>
      <id>6904</id>
      <parentid>6375</parentid>
      <timestamp>2017-09-21T06:57:06Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5013">{{MacroFunction
|name=getGroup
|version=1.3b48
|description=Returns the specified capture group for the specified match that was found using [[strfind|strfind()]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getGroup(id, match, group)
&lt;/source&gt;
Where 
{{param|id|is the id returned by [[strfind|strfind()]]}}
{{param|match|is the number of the match found by [[strfind|strfind()]]}}
{{param|group|is the number of the capture group found by [[strfind|strfind()]]}}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: id = strfind(&quot;this is a test&quot;, &quot;(\\S+)\\s(\\S+)\\s*&quot;)]
match 1, group 0 = [getGroup(id, 1, 0)]&lt;br&gt;
match 1, group 1 = [getGroup(id, 1, 1)]&lt;br&gt;
match 1, group 2 = [getGroup(id, 1, 2)]&lt;br&gt;
match 2, group 0 = [getGroup(id, 2, 0)]&lt;br&gt;
match 2, group 1 = [getGroup(id, 2, 1)]&lt;br&gt;
match 2, group 2 = [getGroup(id, 2, 2)]&lt;br&gt;
&lt;/source&gt;
Returns:
&lt;pre&gt;
match 1, group 0 = this is
match 1, group 1 = this 
match 1, group 2 = is 
match 2, group 0 = a test
match 2, group 1 = a 
match 2, group 2 = test 
&lt;/pre&gt;

'''Example explained'''

First off, escapes = &quot;\&quot; are used to let the character in question NOT be what it usually is. E.g. &quot;d&quot; is the alphabetical character &quot;d&quot;; &quot;\d&quot; however is thus NOT &quot;d&quot; and with that it gets a 'regex' meaning, in this case 'digit', so 1,2,3,4,5,6,7,8,9 or 0. The same the other way round, e.g. &quot;.&quot; means &quot;any character&quot; if you actually want to find a &quot;.&quot; (dot) in the text you thus use \. so its NOT the regex &quot;any character&quot; but just a &quot;.&quot;. 

Now the tricky bit: in maptool ALL escapes (&quot;\&quot;) are eaten by the maptool parser UNLESS they are preceded by an escape themselves. This happens BEFORE the regex is parsed by the regex parser. THUS ALL ESCAPES MUST BE ESCAPED !! So in the above examples &quot;\d&quot; becomes &quot;\\d&quot; and &quot;\.&quot; becomes &quot;\\.&quot;. Really tricky it becomes when you want to find the &quot;\&quot; character. This is a regex symbol hence it needs to be escaped: &quot;\\&quot; but as its in maptool every escape must be escaped so it ultimately becomes &quot;\\\\&quot; !

note that alternatively you can use [] ANY character in there will be looked at literally (and separately). So \\. == [.]. Obviously here too are exceptions, but read a regex tutorial for that.

So back to the above example:

*{{code|S}} = 'everything that is NOT a whitespace'
*{{code|s}} = 'white-space'
*{{code|+}} = '1 or more'
*{{code|*}} = '0 or more'
Have a look [http://www.addedbytes.com/download/regular-expressions-cheat-sheet-v2/png/ here] for an overview.

Second important thing to know is that a group is defined by {{code|'('}}parenthesis{{code|')'}}: {{code|(group1)(group2)(etc.)}}, where group {{code|'0'}} returns the entire &quot;match&quot; result. 

So {{code|\\S}} means grab the first none-whitespace you encounter, {{code|\\S+}} means grab the first none-whitespace you encounter AND ALL characters after that until you encounter a whitespace.
Hence the regex statement looks for 
  ''{{code|(string of non-whitespace chars) whitespace (string of non-whitespace chars) 0 or more whitespaces}}''
apply this to the text example and you get:
  MATCH 1: &quot;(this) (is) &quot; MATCH2: &quot;(a) (code)&quot;
Hence in this example you have 2 MATCHES: Match 1 and Match 2 both consists out of 2 GROUPS: Group 1 and Group 2. Note that Group 0 will return the ENTIRE match.

In summary: a search result can have multiple matches, and each match can consist out of 1 or more groups:
* The first group {{code|'0'}} returns the ENTIRE match. 
* Every group after that will return partial matches that are within {{code|()}}.

[http://www.gskinner.com/RegExr/ Here a link] to test your regex statements (remember that for this applet you only use one {{code|\}} while in MT you need {{code|\\}}.


'''Another Example'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!--
   (?i) - case insensative
   (d+) - number of dice (not optional)
   d - dice expression separator, upper or lower case
   (d+) - die sides (not optional)
   Optional:
      space* - space before modifier
      ([+-]*d+)* - roll modifier
      space* - space after modifier
      (w+)* - single word for damage type
      
   Example Groups: &quot;(3)d(6)(+2) (Fire)&quot;
--&gt;
[H: regex = &quot;(?i)(\\d+)d(\\d+) *([+-]*\\d+)* *(\\w+)*&quot;]
[H, while(1), code: {
   &lt;!-- cancel input to break out of loop --&gt;
   [H: abort(input(&quot;diceExp|3d6+2 Fire|Enter Dice Expression|TEXT&quot;))]
   [H: id = strfind(diceExp,regex)]
   [H: valid = getFindCount(id)]
   [H, if(valid), code: {
      [H: numDice = getGroup(id,1,1)]
      [H: numSides = getGroup(id,1,2)]
      [H: dieMod = getGroup(id,1,3)]
      [H: dmgType = getGroup(id,1,4)]
      
      [H: output = strformat(&quot;Original: %{diceExp}&lt;br&gt;Dice Expression: %{numDice}d%{numSides}&quot;)]
      [H, if(! json.isEmpty(dieMod)): output = json.append(output,strformat(&quot;Modifier: %{dieMod}&quot;))]
      [H, if(! json.isEmpty(dmgType)): output = json.append(output,strformat(&quot;Damage Type: %{dmgType}&quot;))]
   };{
      [H: output = strformat(&quot;Invalid Dice Expression: [%{diceExp}]&quot;)]
   }]
   [H: broadcast(json.toList(output,&quot;&lt;br&gt;&quot;))]
}] 

&lt;/source&gt;

}}
[[Category:String Function]]</text>
      <sha1>n1h7h27s1kymiu4ycyav2ucfc2a9jhi</sha1>
    </revision>
  </page>
  <page>
    <title>getGroupCount</title>
    <ns>0</ns>
    <id>52</id>
    <revision>
      <id>1933</id>
      <parentid>1201</parentid>
      <timestamp>2009-03-10T11:52:23Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="450">{{MacroFunction
|name=getGroupCount
|version=1.3b48
|description=Returns the number of capture groups for the match performed by [[strfind|strfind()]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: text = getGroupCount(id)]
&lt;/source&gt;
id is the id returned by [[strfind|strfind()]]
|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: id = strfind(&quot;this is a test&quot;, &quot;(\\S+)\\s(\\S+)\\s*&quot;)]
[r: getGroupCount(id)]
&lt;/source&gt;
Returns 2.
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getGroupEnd</title>
    <ns>0</ns>
    <id>53</id>
    <revision>
      <id>1936</id>
      <parentid>1204</parentid>
      <timestamp>2009-03-10T11:54:48Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="928">{{MacroFunction
|name=getGroupEnd
|version=1.3b48
|description=Returns the end index of the specified capture group for the specified match that was found using [[strfind|strfind()]]

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getGroupEnd(id, match, group)
&lt;/source&gt;
Where 
* id is the id returned by [[strfind|strfind()]]
* match is the number of the match found by [[strfind|strfind()]]
* group is the number of the capture group found by [[strfind|strfind()]]

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: id = strfind(&quot;this is a test&quot;, &quot;(\\S+)\\s(\\S+)\\s*&quot;)]
match 1, group 1 end = [getGroupEnd(id, 1, 1)]&lt;br&gt;
match 1, group 2 end = [getGroupEnd(id, 1, 2)]&lt;br&gt;
match 2, group 1 end = [getGroupEnd(id, 2, 1)]&lt;br&gt;
match 2, group 2 end = [getGroupEnd(id, 2, 2)]&lt;br&gt;
&lt;/source&gt;
Returns
&lt;pre&gt;
match 1, group 1 end = 4 
match 1, group 2 end = 7 
match 2, group 1 end = 9 
match 2, group 2 end = 14  
&lt;/pre&gt;
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getGroupStart</title>
    <ns>0</ns>
    <id>54</id>
    <revision>
      <id>1935</id>
      <parentid>1207</parentid>
      <timestamp>2009-03-10T11:53:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="957">{{MacroFunction
|name=getGroupStart
|version=1.3b48
|description=Returns the start index of the specified capture group for the specified match that was found using [[strfind|strfind()]]

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getGroupStart(id, match, group)
&lt;/source&gt;
Where 
* id is the id returned by [[strfind|strfind()]]
* match is the number of the match found by [[strfind|strfind()]]
* group is the number of the capture group found by [[strfind|strfind()]]

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: id = strfind(&quot;this is a test&quot;, &quot;(\\S+)\\s(\\S+)\\s*&quot;)]
match 1, group 1 start = [getGroupStart(id, 1, 1)]&lt;br&gt;
match 1, group 2 start = [getGroupStart(id, 1, 2)]&lt;br&gt;
match 2, group 1 start = [getGroupStart(id, 2, 1)]&lt;br&gt;
match 2, group 2 start = [getGroupStart(id, 2, 2)]&lt;br&gt;
&lt;/source&gt;
Returns
&lt;pre&gt;
match 1, group 1 start = 0 
match 1, group 2 start = 5 
match 2, group 1 start = 8 
match 2, group 2 start = 10 
&lt;/pre&gt;
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getHalo</title>
    <ns>0</ns>
    <id>55</id>
    <revision>
      <id>2474</id>
      <parentid>2464</parentid>
      <timestamp>2009-03-31T01:31:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="903">{{MacroFunction
|name=getHalo
|version=1.3b49
|description=Gets the color value of a token's [[Halo]]. The value returned is a string that represents the hexadecimal value of the color of the [[Halo]] in the format {{code|&quot;#RRGGBB&quot;}} or {{code|&quot;None&quot;}} if the token has no [[Halo]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getHalo()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getHalo(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of the token which has its halo color returned, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
The following example will display the text &quot;Halo Color Text&quot; in the color of the [[Current Token]]'s [[Halo]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;span style=&quot;color:[r: getHalo()]&quot;&gt;Halo Color Text&lt;/span&gt;
&lt;/source&gt;

|also=
[[Halo]],
[[setHalo|setHalo()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}
}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getImage</title>
    <ns>0</ns>
    <id>56</id>
    <revision>
      <id>6083</id>
      <parentid>6081</parentid>
      <timestamp>2013-04-07T10:45:38Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Tweaking page layout and typography</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1069">{{MacroFunction
|name=getImage
|version=1.3b48
|description=Returns the [[asset id]] for the image of a [[Token]] or [[Image Token]]. 

|usage=
{{Clarify|There's no real parameter description.&lt;br /&gt;
Error handling on duplicates should be pointed out.}}
&lt;source lang=&quot;mtmacro&quot; line&gt;
getImage(name)
&lt;/source&gt;

'''Note:''' Token ID does NOT work, only token name works.

Note that token images can be retrieved from ANY map (so they do NOT have to be on the current map).  If identical token names appear on multiple maps, it may be difficult (or impossible) to select a specific token image using this function.
|example=
To display the image from an [[Token:image token{{!}}image token]] called {{code|image:Map}} you can do the following:
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;img src=&quot;[r: getImage('image:Map')]&quot;&gt;&lt;/img&gt;
&lt;/source&gt;

Alternatively this can be used to retrieve a normal token:
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;img src=&quot;[r: getImage('Dragon')]&quot;&gt;&lt;/img&gt;
&lt;/source&gt;
|also=[[getTokenImage]] (which you can give the size as parameter)
}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Image Token</title>
    <ns>0</ns>
    <id>57</id>
    <revision>
      <id>2346</id>
      <parentid>2345</parentid>
      <timestamp>2009-03-25T15:36:43Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Token:image token]] moved to [[Image Token]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="679">{{stub}}
==Image Token==
An image token is a [[Token]] whose name starts with the string &quot;image:&quot; -- case is not important. These [[Token|token]]s can appear on any [[Map:map|map]] and you can use functions such as [[getImage|getImage()]] to search through all of the [[Map:map|map]]s to find the [[Token|token]] and return the [[Asset ID|asset id]] for the [[Token|token]]'s image. The [[Image Token|image token]] does not have to be owned by a player to be used but the [[Token:visible to player|visible to player]] flag must be set. You can not have more than one [[Image Token|image token]] with the same name in a [[Campaign:campaign file|campaign file]].
[[Category:Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getImpersonated</title>
    <ns>0</ns>
    <id>58</id>
    <revision>
      <id>2134</id>
      <parentid>1991</parentid>
      <timestamp>2009-03-22T21:43:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Removed trusted.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="269">{{MacroFunction
|name=getImpersonated
|version=1.3b48
|description=Returns the id of the [[impersonated token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getImpersonated()
&lt;/source&gt;

|changes=
{{change|1.3b51|No longer a trusted function.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getImpersonatedName</title>
    <ns>0</ns>
    <id>59</id>
    <revision>
      <id>2135</id>
      <parentid>1992</parentid>
      <timestamp>2009-03-22T21:44:12Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Removed trusted.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="279">{{MacroFunction
|name=getImpersonatedName
|version=1.3b48
|description=Returns the name of the [[impersonated token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getImpersonatedName()
&lt;/source&gt;

|changes=
{{change|1.3b51|No longer a trusted function.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getInitiative</title>
    <ns>0</ns>
    <id>60</id>
    <revision>
      <id>1888</id>
      <parentid>1224</parentid>
      <timestamp>2009-03-10T10:10:39Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version, cleaned up formatting.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="357">{{stub}}
{{MacroFunction
|name=getInitative
|version=1.3b41
|description=Returns the [[Iniatiative:initiative{{!}}initiative]] of the current [[Token:token{{!}}token]]

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getInitiative()
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
Your initiative is [r: getInitiative()]
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getInitiativeHold</title>
    <ns>0</ns>
    <id>61</id>
    <revision>
      <id>1886</id>
      <parentid>1227</parentid>
      <timestamp>2009-03-10T10:06:53Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version, cleaned up formatting.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="562">{{stub}}
{{MacroFunction
|name=getInitiativeHold
|version=1.3b41
|description=Returns if the [[Token:token{{!}}token]] is on [[Initiative:hold{{!}}hold]] in the [[Initiative:initiative panel{{!}}initiative panel]] or not. This function will return 1 if the [[Token:token{{!}}token]] is on [[Initiative:hold{{!}}hold]] or 0 if it is not.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getInitiativeHold()
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: if(getInitiativeHold(), &quot;You are on hold&quot;, &quot;You are not on hold&quot;)]
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getInitiativeRound</title>
    <ns>0</ns>
    <id>62</id>
    <revision>
      <id>6017</id>
      <parentid>5993</parentid>
      <timestamp>2012-10-10T12:51:40Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Typographical tweak</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="434">{{MacroFunction
|name=getInitiativeRound
|description=Returns the current [[Initiative:round number{{!}}round number]] in the [[Initiative:initiative panel{{!}}initiative panel]].  Returns {{code|-1}} if round number is blank.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: round = getInitiativeRound()]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
Round Number [r: getInitiativeRound()]
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getLabel</title>
    <ns>0</ns>
    <id>63</id>
    <revision>
      <id>2506</id>
      <parentid>1233</parentid>
      <timestamp>2009-03-31T05:09:03Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="536">{{stub|Examples of usage.}}
{{MacroFunction
|name=getLabel
|version=1.3b48
|description=
Returns the [[Token Label]] for a specific [[Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLabel()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLabel(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of the token that has its [[Token Label]] returned, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|also=
{{func|setLabel}}

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getLayer</title>
    <ns>0</ns>
    <id>64</id>
    <revision>
      <id>7144</id>
      <parentid>2488</parentid>
      <timestamp>2019-03-02T23:25:03Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="671">{{stub|Examples of usage.}}
{{MacroFunction
|name=getLayer
|version=1.3b48
|description=
Returns the [[Map Layer]] that a [[Token]] is on.

The [[Map Layer]] will be one of:
* {{code|TOKEN}}
* {{code|GM}} also known as Hidden
* {{code|OBJECT}}
* {{code|BACKGROUND}}
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLayer()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLayer(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of the token which has its [[Map Layer]] returned, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|also=
[[setLayer|setLayer()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1>nl4tav3cv9ionpyapu6smnolqj0lugv</sha1>
    </revision>
  </page>
  <page>
    <title>getLibProperty</title>
    <ns>0</ns>
    <id>65</id>
    <revision>
      <id>4137</id>
      <parentid>4136</parentid>
      <timestamp>2010-02-05T20:09:28Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2123">{{MacroFunction
|name=getLibProperty
|version=1.3b48
|description=Returns the value of a [[Token:token property{{!}}token property]] from a [[Token:library token{{!}}library token]]. If the lib argument is not specified then the [[Token:token property{{!}}token property]] will be retrieved from the [[Token:library token{{!}}library token]] that the macro is currently running from.

Unlike {{func|getProperty}}, this function will not retrieve the default value of a campaign property.  Default values are generally programmed as local variables in a macro, then overridden with the result of this function if this function returns a value.  An example is shown below.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLibProperty(name)
getLibProperty(name, lib)
&lt;/source&gt;

'''Important Note'''
As mentioned in the introduction, if the value of the property on the Token equals the default value, the function will return nothing! This means that if e.g. you set the default property to 
&lt;source lang=&quot;mtmacro&quot; line&gt;
Weapons : Shotgun, Pistol, Revolver
&lt;/source&gt;
And you leave the e.g. the value on the token lib:Compendium unchanged, so it will also contain the value &quot;Shotgun, Pistol, Revolver&quot;, then
&lt;source lang=&quot;mtmacro&quot; line&gt;
[getLibProperty(&quot;Weapons&quot;, &quot;lib:Compendium&quot;)]
&lt;/source&gt;
will return nothing!


|examples=
To get the &quot;init&quot; [[Token:token property{{!}}token property]] from the [[Token:library token{{!}}library token]] that a macro is running from use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[getLibProperty(&quot;init&quot;)]
&lt;/source&gt;

To get the &quot;init&quot; [[Token:token property{{!}}token property]] from the [[Token:library token{{!}}library token]] if the library token has such a property.  If not, use a default value of &quot;default&quot;.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[result = getLibProperty(&quot;init&quot;)]
[IF(result == &quot;&quot;): result = &quot;default&quot; ]
&lt;/source&gt;

To get the &quot;init&quot; [[Token:token property{{!}}token property]] from a [[Token:library token{{!}}library token]] called &quot;lib:Attacks&quot; use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[getLibProperty(&quot;init&quot;, &quot;lib:Attacks&quot;)]
&lt;/source&gt;
}}
[[Category:Token Library Function]][[Category:Property Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getLights</title>
    <ns>0</ns>
    <id>66</id>
    <revision>
      <id>7145</id>
      <parentid>7001</parentid>
      <timestamp>2019-03-02T23:25:25Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1881">{{MacroFunction
|name=getLights
|version=1.3b48
|description=Returns a string list containing the names of the [[Map:light source{{!}}light source]]s that are turned on for the [[Current Token]]. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[Macros:string list{{!}}string list]] is returned with the default value of ',' is used.
* If the delimiter ''&quot;json&quot;'' then a [[JSON Array]] is returned.
* Otherwise a [[Macros:string list{{!}}string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLights()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLights(type)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLights(type, delim)
&lt;/source&gt;
Where 
* type is the [[LightSource:type {{!}}type of light source]] (e.g. &quot;Generic&quot; or &quot;D20&quot;). If it is not specified then all [[LightSource:light source{{!}}light source]]s that are on for the [[Token:token{{!}}token]] are returned.
* delim is the delimiter used to separate values in the [[Macros:string list{{!}}string list]]. If it is not specified then it defaults to &quot;,&quot;

If you want to specify the delimiter but still want to fetch all of the [[LightSource:type {{!}} light source type]]s then you can use the special value &quot;*&quot; for type.

|examples=
To get a [[Macros:string list{{!}}string list]] of all of the [[LightSource:light source]]s that the current [[Token:token{{!}}token]] has on.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[getLights()]
&lt;/source&gt;

To get a [[Macros:string list{{!}}string list]] of the [[LightSource:light source]]s that the current [[Token:token{{!}}token]] has on with the [[LightSource:type{{!}} lighet source type]] of &quot;Generic&quot;.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[getLights(&quot;Generic&quot;)]
&lt;/source&gt;

|changes=
* '''1.3b49''' - Added ''&quot;json&quot;'' delimiter option.
}}
[[Category:Light Function]]
[[Category:Token Function]]</text>
      <sha1>4l7cb8vtwyesvdre5i4r0led5ycm52e</sha1>
    </revision>
  </page>
  <page>
    <title>getMacroCommand</title>
    <ns>0</ns>
    <id>67</id>
    <revision>
      <id>5583</id>
      <parentid>2835</parentid>
      <timestamp>2011-07-19T15:12:09Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="808">{{stub|Examples of usage.}}
{{MacroFunction
|name=getMacroCommand
|version=1.3b48
|description=Returns the command that would be executed for a [[Macro_Button|macro button]] on the [[Current Token]]. The [[getMacroIndexes{{!}} getMacroIndexes()]] function can be used to get the index of a [[Macro_Button|macro button]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroCommand(index)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroCommand(index, id)
&lt;/source&gt;
'''Parameters'''
{{param|index|The index of the macro button which will have the command returned.}}
{{param|id|The token {{code|id}} of the token that the function is executed on. {{TrustedParameter}} }}

|also=
[[getMacroIndexes|getMacroIndexes()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}
}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getMacroIndexes</title>
    <ns>0</ns>
    <id>68</id>
    <revision>
      <id>2452</id>
      <parentid>1986</parentid>
      <timestamp>2009-03-30T21:18:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1012">{{stub|Examples of usage.}}
{{MacroFunction
|name=getMacroIndexes
|version=1.3b48
|description=Returns a list of the [[macro buttons]] on the [[Current Token]] that have the specified label. The type of the value returned depends on the delimiter parameter. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroIndexes(label)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroIndexes(label, delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroIndexes(label, delim, id)
&lt;/source&gt;
'''Parameters'''
{{param|label|The label for the macro buttons to return.}}
{{param|delim|The delimiter used to separate the values in the [[String List]] which defaults to {{code|&quot;,&quot;}} if not specified. This function returns a [[JSON Object]] if {{code|&quot;json&quot;}} is specified.}}
{{param|id|The token {{code|id}} of the token that the function is executed on. {{TrustedParameter}} }}

|changes=
{{change|1.3b49|Added {{code|&quot;json&quot;}} delimiter option.}}
{{change|1.3b51|Added {{code|id}} parameter option.}}
}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getMacroLocation</title>
    <ns>0</ns>
    <id>69</id>
    <revision>
      <id>3501</id>
      <parentid>1979</parentid>
      <timestamp>2009-06-16T04:38:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated for changes in 1.3b51</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="757">{{MacroFunction
|name=getMacroLocation
|version=1.3b48
|description=
Returns the location of the macro being executed, the return value will be {{code|&quot;chat&quot;}}, {{code|&quot;global&quot;}}, {{code|&quot;campaign&quot;}} or the label of the token the macro resides on (e.g. {{code|&quot;Lib:Utilities&quot;}} or {{code|&quot;Token:Orc&quot;}}.) Standard PC and NPC tokens will have their label prefixed with {{code|Token:}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroLocation()
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: MacroLocation = getMacroLocation()]
[if(MacroLocation == &quot;chat&quot;, &quot;You are running from chat&quot;, &quot;You are running from &quot;+MacroLocation]
&lt;/source&gt;

|changes=
{{change|1.3b51|Now accurately reports where the macro button resides.}}

}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getMacroName</title>
    <ns>0</ns>
    <id>70</id>
    <revision>
      <id>5584</id>
      <parentid>1978</parentid>
      <timestamp>2011-07-19T15:18:07Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="610">{{MacroFunction
|name=getMacroName
|version=1.3b48
|description=
Returns the name of the macro being executed via [[macro_(roll_option)| [macro():] ]]. If the macro typed into chat, run by clicking on a [[Macro_Button|macro button]], or run via the [[Token:popup menu| token popup menu]] then this function will return &quot;chat&quot;.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroName()
&lt;/source&gt;
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: macroName = getMacroName()]
[if(macroName == &quot;chat&quot;, &quot;You are running from chat&quot;, &quot;You are running the macro called &quot; + macroName)]
&lt;/source&gt;
}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getMacroProps</title>
    <ns>0</ns>
    <id>71</id>
    <revision>
      <id>5585</id>
      <parentid>4204</parentid>
      <timestamp>2011-07-19T15:20:10Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3074">{{MacroFunction
|name=getMacroProps
|version=1.3b48
|description=
Returns a property list of the properties for a [[Macro_Button|macro button]] for the [[Current Token]]. You can retrieve the index of a [[Macro_Button|macro button]] with the [[getMacroIndexes|getMacroIndexes()]] function.The type of the value returned depends on the delimiter parameter. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroProps(index)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroProps(index, delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroProps(index, delim, id)
&lt;/source&gt;
'''Parameters'''
{{param|index|The index of the [[Macro_Button|macro button]].}}
{{param|delim|The delimiter used to separate the values in the  [[Macros:string property list|string property list]] which defaults to {{code|&quot;;&quot;}} if not specified. This function returns a [[JSON Object]] if {{code|&quot;json&quot;}} is specified.}}
{{param|id|The token {{code|id}} of the token that the function is executed on. {{TrustedParameter}} }}

'''Valid Properties for Macro Buttons'''
* {{code|applyToSelected}} - Should the macro be applied to the selected tokens.
* {{code|autoExecute}} - If the macro will be automatically executed when the button is clicked, accepts {{true}} or {{false}}.
* {{code|color}} - The name of the color for the button.
* {{code|command}} - The command for the macro (only when using JSON version of function).
* {{code|fontColor}} - The name of the font color for the button.
* {{code|fontSize}} - The size of the font for the button.
* {{code|includeLabel}} - If the label will be output when the button is clicked. Accepts {{true}} or {{false}}.
* {{code|group}} - The name of the group that the button belongs to.
* index - The index of the button.
* {{code|sortBy}} - The sort by value of the macro button.
* {{code|label}} - The label for the button.
* {{code|maxWidth}} - The maximum width of the button.
* {{code|minWidth}} - The minimum width of the button.
* {{code|playerEditable}} - Is the button player editable, accepts {{true}} or {{false}}.
* {{code|tooltip}} - The tool tip for the macro button.
* {{code|compare}} - Takes a [[JSON Array]] which can contain one or more of the following keywords (only usable with JSON version of the function).
** {{code|applyToSelected}} - Use the macro applyToSelected for common macro comparisons.
** {{code|autoExecute}} - Use the macro autoExec for common macro comparisons.
** {{code|command}} - Use the macro command for common macro comparisons.
** {{code|group}} - Use the macro group for common macro comparisons.
** {{code|includeLabel}} - Use the macro includeLabel for common macro comparisons.
** {{code|sortPrefix}} - Use the macro sortPrefix for common macro comparisons.

|changes=
{{change|1.3b49|Added {{code|json}} delimiter option.}}
{{change|1.3b51|Added optional token {{code|id}} parameter.}}
{{change|1.3b53|Added ability for {{code|command}}, {{code|compare}}, {{code|playerEditable}}, {{code|applyToSelected}}, {{code|autoExecute}}, {{code|group}}, and {{code|tooltip}} parameters.}}
}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getMacros</title>
    <ns>0</ns>
    <id>72</id>
    <revision>
      <id>5884</id>
      <parentid>5586</parentid>
      <timestamp>2012-03-11T02:11:24Z</timestamp>
      <contributor>
        <username>Bubblobill</username>
        <id>150</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1097">{{MacroFunction
|name=getMacros
|version=1.3b48
|description=
Returns a list of the labels of all of the [[Macro_Button|macro buttons]] on the [[Current Token]]. The type of the value returned depends on the delimiter parameter. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacros()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacros(delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacros(delim, id)
&lt;/source&gt;
'''Parameters'''
{{param|delim|The delimiter used to separate the values in the  [[String List]], a JSON array is returned if {{code|&quot;json&quot;}} is specified as the delimiter. Defaults to {{code|&quot;,&quot;}} }}
{{param|id|The token {{code|id}} of the token that the function is executed on. {{TrustedParameter}} }}

|examples=
To display all of the [[Macro_Button|macro button]] labels on the current [[Token|token]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: macroLabels = getMacros()]
[foreach(macro, macroLabels, &quot;&lt;br&gt;&quot;): macro]
&lt;/source&gt;

|changes=
{{change|1.3b49|Added {{code|json}} delimiter option.}}
{{change|1.3b51|Added optional token {{code|id}} parameter.}}

}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getNPCNames</title>
    <ns>0</ns>
    <id>73</id>
    <revision>
      <id>7147</id>
      <parentid>3988</parentid>
      <timestamp>2019-03-02T23:26:14Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1141">{{MacroFunction
|name=getNPCNames
|trusted=true
|version=1.3b48
|description=Returns a list containing the names of the [[NPC Token{{!}}NPC token]]s on the current [[Map{{!}}map]]. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[String List{{!}}string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array]] is returned.
* Otherwise a [[String List{{!}}string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: macros = getNPCNames()]
[h: macros = getNPCNames(delim)]
&lt;/source&gt;
{{code|delim}} is the delimiter used to separate the values in the  [[String List{{!}}string list]] which defaults to {{code|&quot;,&quot;}} if not specified.

|example=
To display the names of all of the [[NPC Token{{!}}NPC token]]s on the current [[Map:map{{!}}map]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getNPCNames()]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;
|changes=
* '''1.3b49''' - Added {{code|json}} delimiter option.
|also=
{{roll|foreach}}
}}
[[Category:Find Function]]</text>
      <sha1>nuefspgagxdpe9h7afmmqmnha17njtu</sha1>
    </revision>
  </page>
  <page>
    <title>getNPC</title>
    <ns>0</ns>
    <id>74</id>
    <revision>
      <id>7146</id>
      <parentid>3989</parentid>
      <timestamp>2019-03-02T23:25:52Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1081">{{MacroFunction
|name=getNPC
|trusted=true
|version=1.3b48
|description=Returns a list containing the ids of the [[NPC Token|NPC token]]s on the current [[Map|map]]. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[String List{{!}}string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array|json array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getNPC()
getNPC(delim)
&lt;/source&gt;
delim is the delimiter used to separate the values in the  [[Macros:string list|string list]] which defaults to {{code|&quot;,&quot;}} if not specified.

|example=
To display the ids of all of the [[Token:NPC token|NPC token]]s on the current [[Map:map|map]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: ids = getNPC()]
[foreach(id, ids, &quot;&lt;br&gt;&quot;): id]
&lt;/source&gt;

|changes=
* '''1.3b49''' - Added {{code|json}} delimiter option.

|also=
{{roll|foreach}}
}}
[[Category:Find Function]]</text>
      <sha1>qy1q1jj9viz1l2xe4go890bbczp2isc</sha1>
    </revision>
  </page>
  <page>
    <title>getName</title>
    <ns>0</ns>
    <id>75</id>
    <revision>
      <id>3042</id>
      <parentid>1875</parentid>
      <timestamp>2009-04-13T18:24:42Z</timestamp>
      <contributor>
        <username>Bobthedog</username>
        <id>48</id>
      </contributor>
      <minor/>
      <comment>Added id parameter and usage example.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="602">{{stub}}
{{MacroFunction
|name=getName
|version=1.3b40
|description=
Returns the name of a [[Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getName()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getName(id)
&lt;/source&gt;
'''Parameters'''
{{param|id|The token {{code|id}} of the token to name, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[TokenList = getTokens(&quot;json&quot;)]
[foreach(Token, TokenList, &quot;&lt;br&gt;&quot;, &quot;json&quot;): getName(Token) + &quot;'s ID is &quot; + Token]
&lt;/source&gt;

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getNotes</title>
    <ns>0</ns>
    <id>76</id>
    <revision>
      <id>3831</id>
      <parentid>1957</parentid>
      <timestamp>2009-09-07T23:03:03Z</timestamp>
      <contributor>
        <username>Hawke</username>
        <id>55</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="248">{{MacroFunction
|name=getNotes
|version=1.3b48
|description=Returns the [[Notes|token notes]] for the [[Current Token|Current Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getNotes()
&lt;/source&gt;
}}

See also [[setNotes]]

[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getOwned</title>
    <ns>0</ns>
    <id>77</id>
    <revision>
      <id>7148</id>
      <parentid>3990</parentid>
      <timestamp>2019-03-02T23:26:31Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1140">{{MacroFunction
|name=getOwned
|trusted=true
|version=1.3b48
|description=Returns a list containing the ids of the [[token|token]]s on the current [[Map|map]] that are owned by the specified player. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[String List|string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array|json array]] is returned.
* Otherwise a [[String List|string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getOwned(player)
getOwned(player, delim)
&lt;/source&gt;
{{code|delim}} is the delimiter used to separate the values in the  [[String List|string list]] which defaults to {{code|&quot;,&quot;}} if not specified.

|example=
To display the ids of all of the [[Token|token]]s on the current [[Map|map]] by the [[Player]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: ids = getOwned(getPlayerName())]
[foreach(id, ids, &quot;&lt;br&gt;&quot;): id]
&lt;/source&gt;

|changes=
* '''1.3b49''' - Added {{code|json}} delimiter option.

|also=
{{roll|foreach}}
}}
[[Category:Find Function]]</text>
      <sha1>6uuvkq71f4yc2ihcnnq2nmaik9bbi7l</sha1>
    </revision>
  </page>
  <page>
    <title>getOwnedNames</title>
    <ns>0</ns>
    <id>78</id>
    <revision>
      <id>7149</id>
      <parentid>3992</parentid>
      <timestamp>2019-03-02T23:26:56Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1177">{{MacroFunction
|name=getOwnedNames
|trusted=true
|version=1.3b48
|description=Returns a list containing the names of the [[Token|token]]s on the current [[Map|map]] that are owned by the specified player. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[String List|string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array|json array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getOwnedNames(player)
getOwnedNames(player, delim)
&lt;/source&gt;
{{code|delim}} is the delimiter used to separate the values in the [[String List|string list]] which defaults to {{code|&quot;,&quot;}} if not specified.

|examples=
To display the ids of all of the [[Token|token]]s on the current [[Map|map]] by the [[Player]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getOwnedNames(getPlayerName())]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

|changes=
* '''1.3b49''' - Added {{code|json}} delimiter option.

|also=
{{roll|foreach}}
}}
[[Category:Find Function]]</text>
      <sha1>ekm99cp9toizevyf78da2w1hb9f6vpj</sha1>
    </revision>
  </page>
  <page>
    <title>getOwners</title>
    <ns>0</ns>
    <id>79</id>
    <revision>
      <id>2495</id>
      <parentid>1947</parentid>
      <timestamp>2009-03-31T03:49:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1196">{{stub|Examples using new functionality.}}
{{MacroFunction
|name=getOwners
|version=1.3b48
|description=
Returns a [[String List]] or [[JSON Array]] containing the names of the owners of a [[Token]]. The type of the value returned depends on the delimiter parameter. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getOwners()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getOwners(delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getOwners(delim, id)
&lt;/source&gt;
'''Parameters'''
{{param|delim|The delimiter used to separate the values in the [[String List]], defaults to {{code|&quot;,&quot;}}. If set to {{code|&quot;json&quot;}}, this function will return a [[JSON Array]] instead of a [[String List]].}}
{{param|id|The token {{code|id}} of the token which has its owners returned, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
To display the [[Owners|owners]] of the [[Current Token]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getOwners()]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

|also=
[[isOwnedByAll|isOwnedByAll()]], 
[[isOwner|isOwner()]]

|changes=
{{change|1.3b49|Added {{code|json}} delimiter option.}}
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getPCNames</title>
    <ns>0</ns>
    <id>80</id>
    <revision>
      <id>7151</id>
      <parentid>3993</parentid>
      <timestamp>2019-03-02T23:27:27Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1117">{{MacroFunction
|name=getPCNames
|trusted=true
|version=1.3b48
|description=Returns a list containing the names of the [[Token:PC token|PC token]]s on the current [[Map:map|map]]. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPCNames()
getPCNames(delim)
&lt;/source&gt;
{{code|delim}} is the delimiter used to separate the values in the  [[Macros:string list|string list]] which defaults to {{code|&quot;,&quot;}} if not specified.

|example=
To display the names of all of the [[Token:PC token|PC token]]s on the current [[Map:map|map]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getPCNames()]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

|changes=
* '''1.3b49''' - Added {{code|json}} delimiter option.

|also=
{{roll|foreach}}
}}
[[Category:Token Function]]</text>
      <sha1>e2f7eep06jhwk2lenp5h5dtkhw58vak</sha1>
    </revision>
  </page>
  <page>
    <title>getPC</title>
    <ns>0</ns>
    <id>81</id>
    <revision>
      <id>7150</id>
      <parentid>3994</parentid>
      <timestamp>2019-03-02T23:27:11Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1085">{{MacroFunction
|name=getPC
|trusted=true
|version=1.3b48
|description=Returns a list containing the ids of the [[Token:PC token|PC token]]s on the current [[Map:map|map]]. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPC()
getPC(delim)
&lt;/source&gt;
{{code|delim}} is the delimiter used to separate the values in the  [[Macros:string list|string list]] which defaults to {{code|&quot;,&quot;}} if not specified.

|example=
To display the ids of all of the [[Token:PC token|PC token]]s on the current [[Map:map|map]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: ids = getPC()]
[foreach(id, ids, &quot;&lt;br&gt;&quot;): id]
&lt;/source&gt;

|changes=
* '''1.3b49''' - Added {{code|json}} delimiter option.

|also=
{{roll|foreach}}
}}
[[Category:Token Function]]</text>
      <sha1>ipq8idv6moqoeuxadcrv4uav310ggqg</sha1>
    </revision>
  </page>
  <page>
    <title>getPlayerName</title>
    <ns>0</ns>
    <id>82</id>
    <revision>
      <id>5995</id>
      <parentid>5994</parentid>
      <timestamp>2012-09-19T18:05:33Z</timestamp>
      <contributor>
        <username>True Hitoare</username>
        <id>579</id>
      </contributor>
      <minor/>
      <comment>Punctuation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="344">{{MacroFunction
|name=getPlayerName
|version=1.3b48
|description=Returns the name of the player for the [[Client]] that it executes on.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPlayerName()
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
/say My name is [r: getPlayerName()], nice to meet you!
&lt;/source&gt;
}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getProperty</title>
    <ns>0</ns>
    <id>83</id>
    <revision>
      <id>6038</id>
      <parentid>4107</parentid>
      <timestamp>2012-11-20T18:55:41Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Property Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1843">{{stub|Examples of usage.}}
{{MacroFunction
|name=getProperty
|version=1.3b48
|description=
Returns the value of a [[Token Property]] on a [[Token]].  
If the [[Token Property]] is empty ({{code|NULL}}) or not defined, an empty string ({{code|&quot;&quot;}}) is returned. 
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getProperty(property)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line=&quot;2&quot;&gt;
getProperty(property, id)
&lt;/source&gt;

'''Parameter'''
{{param|property|The property that has its value returned. For referencing the literal name of the property (for instance, if you wish to get the property ''Constitution'' configured in Campaign Properties), enclose the property name in quotes. If using a variable whose ''value ''is the name of the property, do not enclose the variable name in quotes.}}
{{param|id|The token {{code|id}} or name of the token that has its property value returned, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
Getting a property using the literal property name.
&lt;source lang=&quot;mtmacro&quot; line&gt;
The value of property 'Strength' is [r: getProperty(&quot;Strength&quot;)].
&lt;/source&gt;

This will output the following if '''Strength''' has the value '''18''':
 The value of property 'Strength' is 18.

Getting a property using a variable.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:desiredProperty = &quot;Constitution&quot;]
The value of property 'Constitution' is [r: getProperty(desiredProperty)].
&lt;/source&gt;
This will output the following if '''Constitution''' has the value '''12''':
  The value of property 'Constitution' is 12.
|also=
[[setProperty|setProperty()]], 
[[resetProperty|resetProperty()]], 
[[isPropertyEmpty|isPropertyEmpty()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}
{{change|1.3b51|Changed to return the default value if the property has no value.}}

}}
[[Category:Token Function]][[Category:Property Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getPropertyDefault</title>
    <ns>0</ns>
    <id>84</id>
    <revision>
      <id>6039</id>
      <parentid>2838</parentid>
      <timestamp>2012-11-20T18:57:15Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Property Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="458">{{MacroFunction
|name=getPropertyDefault
|version=1.3b48
|description=
Returns the [[Campaign:property default value| default value]] of a [[Token:property| token property]] for the [[Current Token]]. If the [[Campaign:property default value| default value]] contains nothing then an empty string ({{code|&quot;&quot;}}) is returned. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPropertyDefault(name)
&lt;/source&gt;
}}
[[Category:Token Function]][[Category:Property Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getPropertyNames</title>
    <ns>0</ns>
    <id>85</id>
    <revision>
      <id>7092</id>
      <parentid>7091</parentid>
      <timestamp>2019-02-19T14:32:35Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Fixed link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2036">{{MacroFunction
|name=getPropertyNames
|version=1.3b48
|description=
Returns a [[String List]] or [[JSON Array]] containing the names of the [[Token Property|Token Properties]] for the [[Current Token]]. The type of the value returned depends on the delimiter parameter. All names returned will be in lower case. Use {{func|getPropertyNamesRaw}} to get the names as they are shown in [[Introduction_to_Properties|Campaign Properties]].

{{note|When a token is added to a campaign it inherits the currently defined properties of the current campaign.  These properties are persistent in the token even if the properties are subsequently removed from the campaign.  Properties that have been removed from the campaign are no longer editable via the Edit Token dialog but they are still present on the token and may be read and set with {{func|getProperty}} and {{func|setProperty}} respectively. To get ''all'' properties defined on a token, including those removed from the campaign, use ''getPropertyNames()''.  To see only the currently defined properties for the campaign, use {{func|getAllPropertyNames}}.}}

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPropertyNames()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPropertyNames(delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPropertyNames(delim, id)
&lt;/source&gt;
'''Parameters'''
{{param|delim|The delimiter used to separate the values in the [[String List]], defaults to {{code|&quot;,&quot;}}. Returns a [[JSON Array]] if set to {{code|&quot;json&quot;}}. }}
{{param|id|The token {{code|id}} of the token which has its property names returned, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
To display the names of all of the [[Token:property|properties]] on the current [[Token:token|token]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getPropertyNames()]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;
|changes=
{{change|1.3b49|Added {{code|json}} delimiter option.}}
{{change|1.3b51|Added {{code|id}} parameter option.}}
}}
[[Category:Token Function]][[Category:Property Function]]</text>
      <sha1>f3jhrivqzuoxvi8bqqsnv4uz7veag5f</sha1>
    </revision>
  </page>
  <page>
    <title>getPropertyType</title>
    <ns>0</ns>
    <id>86</id>
    <revision>
      <id>6042</id>
      <parentid>2477</parentid>
      <timestamp>2012-11-20T19:01:54Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Property Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="602">{{stub|Examples of usage.}}
{{MacroFunction
|name=getPropertyType
|version=1.3b48
|description=
Returns the [[Property Type]] of a [[Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPropertyType()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPropertyType(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of the token which has its [[Property Type]] returned, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|also=
[[setPropertyType|setPropertyType()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]][[Category:Property Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getSelected</title>
    <ns>0</ns>
    <id>87</id>
    <revision>
      <id>7152</id>
      <parentid>3367</parentid>
      <timestamp>2019-03-02T23:27:45Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1128">{{MacroFunction
|name=getSelected
|version=1.3b48
|description=
Returns a list containing the ids of the selected [[Token:token|token]]s on the current [[Map:map|map]]. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage= 
&lt;source lang=&quot;mtmacro&quot; line&gt;
getSelected()
getSelected(delim)
&lt;/source&gt;
{{code|delim}} is the delimiter used to separate the values in the  [[Macros:string list|string list]] which defaults to {{code|&quot;,&quot;}} if not specified.

|example=
To display the ids of all of the selected [[Token:token|token]]s on the current [[Map:map|map]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: ids = getSelected()]
[foreach(id, ids, &quot;&lt;br&gt;&quot;): id]
&lt;/source&gt;

|changes=
{{change|1.3b49|Added {{code|json}} delimiter option.}}
{{change|1.3b51|No longer a trusted function.}}

}}
[[Category:Token Function]]</text>
      <sha1>jnua7avjmw1rxebo43s2u3i9ttzo9fh</sha1>
    </revision>
  </page>
  <page>
    <title>getSelectedNames</title>
    <ns>0</ns>
    <id>88</id>
    <revision>
      <id>7153</id>
      <parentid>5626</parentid>
      <timestamp>2019-03-02T23:28:06Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1154">{{MacroFunction
|name=getSelectedNames
|version=1.3b48
|description=
Returns a list containing the names of the selected [[Token|token]]s on the current [[Map:map|map]]. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage= 
&lt;source lang=&quot;mtmacro&quot; line&gt;
getSelectedNames()
getSelectedNames(delim)
&lt;/source&gt;
{{code|delim}} is the delimiter used to separate the values in the  [[Macros:string list|string list]] which defaults to {{code|&quot;,&quot;}} if not specified.

|example=
To display the names of all of the selected [[Token:token|token]]s on the current [[Map:map|map]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getSelectedNames()]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

|changes=
{{change|1.3b49|Added {{code|json}} delimiter option.}}
{{change|1.3b51|No longer a trusted function.}}

}}
[[Category:Token Function]]</text>
      <sha1>p4zxfieuogvanxu6768zc90i4hw0umw</sha1>
    </revision>
  </page>
  <page>
    <title>getSightType</title>
    <ns>0</ns>
    <id>89</id>
    <revision>
      <id>2839</id>
      <parentid>1966</parentid>
      <timestamp>2009-04-04T21:22:21Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="260">{{MacroFunction
|name=getSightType
|version=1.3b48
|description=
Returns the type of [[Token:sight|sight]] that the [[Current Token]] has.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getSightType()
&lt;/source&gt;
}}
[[Category:Sight Function]]
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getSize</title>
    <ns>0</ns>
    <id>90</id>
    <revision>
      <id>7154</id>
      <parentid>5691</parentid>
      <timestamp>2019-03-02T23:28:41Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="809">{{stub|Examples of usage.}}
{{MacroFunction
|name=getSize
|version=1.3b48
|description=
Returns the [[Size]] of a [[Token]].

The sizes returned are:
* {{code|Fine}}
* {{code|Diminutive}}
* {{code|Tiny}}
* {{code|Small}}
* {{code|Medium}}
* {{code|Large}}
* {{code|Huge}}
* {{code|Gargantuan}}
* {{code|Colossal}}
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getSize()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getSize(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of the token which has its [[Size]] returned, defaults to the [[Current Token]]. {{TrustedParameter}} }}
* Note that if the token is in native or free size, the value returned will be an empty string: &quot;&quot;

|also=
[[setSize|setSize()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1>n0pltu34uyuzeorxo0cgia6178g6dkc</sha1>
    </revision>
  </page>
  <page>
    <title>getSpeech</title>
    <ns>0</ns>
    <id>91</id>
    <revision>
      <id>2840</id>
      <parentid>2008</parentid>
      <timestamp>2009-04-04T21:24:39Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="236">{{stub}}
{{MacroFunction
|name=getSpeech
|version=1.3b48
|description=
Returns the [[Token:speech|speech]] value from the [[Current Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getSpeech(name)
&lt;/source&gt;
}}
[[Category:Speech Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getSpeechNames</title>
    <ns>0</ns>
    <id>92</id>
    <revision>
      <id>7155</id>
      <parentid>4088</parentid>
      <timestamp>2019-03-02T23:29:13Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1098">{{MacroFunction
|name=getSpeechNames
|version=1.3b48
|description=
Returns a list containing the [[Token:speech|speech]] names of the [[Current Token]]. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getSpeechNames()
getSpeechNames(delim)
&lt;/source&gt;
{{code|delim}} is the delimiter used to separate the values in the  [[Macros:string list|string list]] which defaults to {{code|&quot;,&quot;}} if not specified.

|example=
To display the names of all of the [[Token:speech|speech]] values for the [[Current Token]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getSpeech()]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

|changes=
* '''1.3b49''' - Added {{code|json}} delimiter option.
}}
[[Category:Token Function]]
[[Category:Speech Function]]</text>
      <sha1>tct3e93zk0lxa9nfrbmgcjrg1dbkv6p</sha1>
    </revision>
  </page>
  <page>
    <title>getState</title>
    <ns>0</ns>
    <id>93</id>
    <revision>
      <id>7203</id>
      <parentid>2472</parentid>
      <timestamp>2019-03-06T21:37:18Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="840">{{stub|Examples using current functionality.}}
{{MacroFunction
|name=getState
|version=1.3b40
|description=
Checks whether the specified [[State]] is active on a token, returning {{true}} or {{false}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getState(state)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getState(state, id)
&lt;/source&gt;
'''Parameters'''
{{param|state|The name of the state to check for.}}
{{param|id|The token {{code|id}} of the token to check for the state, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[if(getState(&quot;Dead&quot;), &quot;You are dead!&quot;, &quot;You are not dead (yet!)&quot;)]
&lt;/source&gt;

|also=
[[State]],
[[setState|setState()]],
[[setAllStates|setAllStates()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:State Function]]
[[Category:Token Function]]</text>
      <sha1>9wtvo5tnhngrputgkjd5ds8ii8bv5mt</sha1>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getStateImage</title>
    <ns>0</ns>
    <id>94</id>
    <redirect title="getStateImage" />
    <revision>
      <id>2328</id>
      <parentid>210</parentid>
      <timestamp>2009-03-25T14:09:15Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirect to article in main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[getStateImage]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getStrProp</title>
    <ns>0</ns>
    <id>95</id>
    <revision>
      <id>6067</id>
      <parentid>5820</parentid>
      <timestamp>2013-02-27T08:13:44Z</timestamp>
      <contributor>
        <username>Doktor Avalanche</username>
        <id>630</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1775">{{MacroFunction
|name=getStrProp
|version=1.3b42
|description=
Returns the value associated with a key from the specified [[Macros:string property list|string property list]]. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getStrProp(propList, key)
getStrProp(propList, key, default)
getStrProp(propList, key, default, delim)
&lt;/source&gt;
'''Parameters'''
{{param|proplist|String property list to extract data from.}} 
{{param|key|Key within string to extract. This cannot include a space.}}
{{param|default|Value returned if the key is not found.}}
{{param|delim|Delimiter between fields (default is &quot;;&quot;).}}

|example=
To get the name from a weapon [[Macros:string property list|string property list]]
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: weapon = &quot;name=longsword; damage=1d8; maxdamage=8&quot;]
Name of Weapon: [r: getStrProp(weapon, &quot;name&quot;)]
&lt;/source&gt;
Returns {{code|Name of Weapon: longsword}}.

To get the minimum damage from a weapon [[Macros:string property list|string property list]] with a default value should the key not exist
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: weapon = &quot;name=longsword; damage=1d8; maxdamage=8&quot;]
Minimum damage of Weapon: [r: getStrProp(weapon, &quot;mindamage&quot;, 1)]
&lt;/source&gt;
Returns {{code|Minimum damage of Weapon: 1}}.

To get the damage from a weapon [[Macros:string property list|string property list]] where the field delimiter is a colon.  The default is '''1d3''' (note that a default value must be provided in order to specify the delimiter).
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: weapon = &quot;name=longsword: damage=1d8: maxdamage=8&quot;]
Damage of Weapon: [r: getStrProp(weapon, &quot;damage&quot;, &quot;1d3&quot;, &quot;:&quot;)]
&lt;/source&gt;
Returns {{code|Damage of Weapon: 1d8}}.

|changes=
{{change|1.3b43|Added the optional {{code|error}} parameter.}}

}}
[[Category:String Property List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokenImage</title>
    <ns>0</ns>
    <id>96</id>
    <revision>
      <id>6262</id>
      <parentid>5986</parentid>
      <timestamp>2014-01-18T07:32:47Z</timestamp>
      <contributor>
        <username>True Hitoare</username>
        <id>579</id>
      </contributor>
      <minor/>
      <comment>Reformatted usage to conform to more standard design</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="638">{{MacroFunction
|name=getTokenImage
|description=
Returns the [[Asset ID|asset id]] of the image for the for the [[Current Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenImage()
getTokenImage(size)
&lt;/source&gt;

|examples=
To display the image for the current [[Token:token|token]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;img src='[r:getTokenImage()]'&gt;&lt;/img&gt;
&lt;/source&gt;

To get the image of any [[Token:token|token]] using its id and the  token roll option.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h, token(tokenId): imgAsset = getTokenImage()] 
&lt;/source&gt;

see also: [[getImage]] (which you can give the ID as parameter) 

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokenNames</title>
    <ns>0</ns>
    <id>97</id>
    <revision>
      <id>6063</id>
      <parentid>6060</parentid>
      <timestamp>2013-02-22T12:51:47Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Tweaking page layout and typography</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6962">{{MacroFunction
|name=getTokenNames
|trusted=true
|version=1.3b48
|description=
Gets a list containing the names of all the [[Token|token]]s on the current [[Map|map]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenNames()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenNames(delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenNames(delim, conditions)
&lt;/source&gt;
'''Parameters'''
{{param|delim|The delimiter used to separate the values in the String List that is returned, defaults to {{code|&quot;,&quot;}}. If {{code|&quot;json&quot;}} is specified, a JSON array is returned instead of a String List.}}
{{param|conditions|A JSON object that contains various conditions that the tokens must fullfill. All conditions are optional.
** {{code|setStates}} - A JSON array of states the token must have.  Any token which does not contain all of these states in the {{code|true}} condition will be removed from the returned list.
** {{code|unsetStates}} - A JSON array of states the token must '''not''' have.
** {{code|npc}} - If the token must be a NPC, set to {{true}} or {{false}}.
** {{code|pc}} - If the token must be a PC, set to {{true}} or {{false}}.
** {{code|selected}} - If the token must be selected, set to {{true}} or {{false}}.
** {{code|impersonated}} - If the token must be impersonated, set to {{true}} or {{false}}.
** {{code|current}} - If the token must be the current token, set to {{true}} or {{false}}.
** {{code|owned}} - If the token must be owned by the current player, set to {{true}} or {{false}}.
** {{code|visible}} - If the token must be visible to players, set to {{true}} or {{false}}.
*** &lt;u&gt;note&lt;/u&gt;: GMs will be able to see everything, to test if a token is visible to a player with this function, you must have &quot;Show as a Player&quot; enabled. In addition, this appears to only affect the &quot;visible to players&quot; flag - VBL and Fog of War do not seem to affect this.
** {{code|layer}} - A JSON array of layer names, or a single layer name as a string.  Note that a token not on any of the listed layers will be removed from the list returned (added in '''1.3b77''')
** {{code|range}} - A JSON object with range conditions, all range conditions are optional.
*** {{code|token}} - The id or name of the source token that the distance is measured from, defaults to the current token.
**** &lt;u&gt;note&lt;/u&gt;: this parameter is needed if you are calling your macro from a macroLink and aren't impersonating a token.
*** {{code|distancePerCell}} - If the Distance Per Cell multiplier should be used, set to {{true}} or {{false}}.
*** {{code|from}} - A number specifying the minimum range that a token needs to be from the source.
*** {{code|upto}} - A number specifying the maximum range that a token can be from the source.
*** {{code|metric}} - The distance metric to use, if it is not specified the default from the users preferences is used.
** {{code|area}} - A JSON object containing specific area information.
*** {{code|token}} - An optional field that contain the name or id of the token that resides at the center of the area. Defaults to the current token.
*** {{code|offsets}} - A JSON array of JSON objects that specify each individual cell that make up the area.
**** {{code|x}} - The relative {{code|x}} position of the cell in relation to the {{code|token}} field. Measured in cells.
**** {{code|y}} - The relative {{code|y}} position of the cell in relation to the {{code|token}} field. Measured in cells.}}


The movement metric in range specifies the movement metric use, the metric can be one of the following strings:
:* {{code|NO_GRID}} - The grid is ignored and straight line distance between the tokens is returned.
:* {{code|ONE_TWO_ONE}} - First Diagonal movement costs 1, second 2, and so on (Square grid only).
:* {{code|ONE_ONE_ONE}} - Diagonal movement costs a single square (Square grid only).
:* {{code|MANHATTAN}} - Diagonal movement costs 2 (Square grid only).
:* {{code|NO_DIAGONALS}} - No diagonal movement is allowed (Square grid only).

|example=
*You can use the following code to print out the names of all of the tokens on the current map:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getTokenNames()]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;&lt;br /&gt;
*Find and return a [[JSON Array]] containing all NPC tokens' names that are within 2 squares or hexes:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cond = '{ range: {upto:2, distancePerCell:0}, npc:1 }']
[h: names = getTokenNames(&quot;json&quot;, cond)]
&lt;/source&gt;&lt;br /&gt;
*Modifying the above example to exclude dead tokens:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cond = '{ range: {upto:2, distancePerCell:0}, npc:1, unsetStates:[&quot;Dead&quot;] }']
[h: names = getTokenNames(&quot;json&quot;, cond)]
&lt;/source&gt;&lt;br /&gt;
*Get all of the non dead NPC tokens' names in the square above, below, left, and to the right of the token, using the {{code|area}} option:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: areaOffsets = '[ {x:1, y:0}, {x:0, y:1}, {x:-1, y:0}, {y:-1, x:0}]']
[h: area = json.set(&quot;{}&quot;, &quot;offsets&quot;, areaOffsets)]
[h: cond = json.set(&quot;{}&quot;, &quot;area&quot;, area, &quot;npc&quot;, 1, &quot;unsetState&quot;, &quot;['Dead']&quot;)]
[h: names = getTokenNames(&quot;json&quot;, cond)]
&lt;/source&gt;&lt;br /&gt;
*The same could be achieved using the {{code|range}} option with {{code|NO_DIAGONALS}} metric:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cond = '{ range: {upto:1, distancePerCell:0, metric:&quot;NO_DIAGONALS&quot;}, npc:1, unsetStates:[&quot;Dead&quot;] }']
[h: names = getTokenNames(&quot;json&quot;, cond)]
&lt;/source&gt;&lt;br /&gt;
*Get ALL tokens on a map:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:allToks = getTokenNames(&quot;,&quot;,'{layer:[&quot;TOKEN&quot;, &quot;HIDDEN&quot;, &quot;OBJECT&quot;, &quot;BACKGROUND&quot;]}')]
&lt;/source&gt;
or better:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:getTokens(&quot;,&quot;, json.set(&quot;{}&quot;, &quot;layer&quot;, json.append(&quot;[]&quot;,&quot;TOKEN&quot;,&quot;HIDDEN&quot;,&quot;OBJECT&quot;,&quot;BACKGROUND&quot;)))]
&lt;/source&gt;


Please Note that it, in general, is bad practice to create json objects and arrays by hand. This makes your code very bug prone. The proper way is to build your json objects through code.&lt;br /&gt;
E.g.:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cond = '{ range: {upto:1, distancePerCell:0, metric:&quot;NO_DIAGONALS&quot;}, npc:1, unsetStates:[&quot;Dead&quot;] }']
&lt;/source&gt;
can better be created with
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cond = json.set(&quot;{}&quot;, &quot;range&quot;, json.set(&quot;{}&quot;, &quot;upto&quot;, 1, &quot;distancePerCell&quot;, 0, &quot;metric&quot;, &quot;NO_DIAGONALS&quot;), &quot;npc&quot;, 1, &quot;unsetStates&quot;, json.append(&quot;[]&quot;,&quot;Dead&quot;))]
&lt;/source&gt;
The big difference between the two methods is that, doing it by hand, it is quite likely that when you make a mistake your code appears to 'work', that is you get no error reports, but only part of the conditions are met because you e.g. used {{code|&lt;nowiki&gt;''&lt;/nowiki&gt;}} or {{code|&quot;&quot;}} where you should not have.&lt;br /&gt;
If you make a mistake in the automated method, there is a bigger chance you get an error report, allowing you to fix it. Of course typos like {{code|'ragne'}} instead of {{code|'range'}} won't trigger any errors. 

|changes=
{{change|1.3b49|Added {{code|json}} delimiter option.}}
{{change|1.3b51|Added {{code|conditions}} parameter.}}

}}
[[Category:Token Function]]
[[Category:Find Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokens</title>
    <ns>0</ns>
    <id>98</id>
    <revision>
      <id>6294</id>
      <parentid>6183</parentid>
      <timestamp>2014-06-30T14:23:34Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7256">{{MacroFunction
|name=getTokens
|trusted=true
|version=1.3b48
|description=
Gets a list containing the ids of all the tokens on the current map, or all the tokens that match the specified conditions. The type of the value returned depends on the delimiter parameter. 

Note: apparently the order of the list that getTokens() returns is also the z-order of the tokens, where the lowest z-order is the first in the list or array that is returned!

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokens()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokens(delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokens(delim, conditions)
&lt;/source&gt;
'''Parameters'''
{{param|delim|The delimiter used to sepearate the values in the String List that is returned, defaults to {{code|&quot;,&quot;}}. If {{code|&quot;json&quot;}} is specified, a JSON array is returned instead of a String List.}}
{{param|conditions|A JSON object that contains various conditions that the tokens must fullfill. All conditions are optional.
** {{code|setStates}} - A JSON array of states the token must have.  Any token which does not contain all of these states in the {{code|true}} condition will be removed from the returned list.
** {{code|unsetStates}} - A JSON array of states the token must '''not''' have.
** {{code|npc}} - If the token must be a NPC, set to {{true}} or {{false}}.
** {{code|pc}} - If the token must be a PC, set to {{true}} or {{false}}.
** {{code|selected}} - If the token must be selected, set to {{true}} or {{false}}.
** {{code|impersonated}} - If the token must be impersonated, set to {{true}} or {{false}}.
** {{code|current}} - If the token must be the current token, set to {{true}} or {{false}}.
** {{code|owned}} - If the token must be owned by the current player, set to {{true}} or {{false}}.
** {{code|visible}} - If the token must be visible to players, set to {{true}} or {{false}}.
*** &lt;u&gt;note&lt;/u&gt;: '''GMs will be able to see everything, to test if a token is visible to a player with this function, you must have &quot;Show as a Player&quot; enabled. In addition, this appears to only affect the &quot;Visible to players&quot; flag - VBL and Fog of War do not seem to affect this'''.
** {{code|layer}} - A JSON array of layer names, or a single layer name as a string.  Note that a token not on any of the listed layers will be removed from the list returned (added in '''1.3b77''')
** {{code|range}} - A JSON object with range conditions, all range conditions are optional.
*** {{code|token}} - The id or name of the source token that the distance is measured from, defaults to the current token. 
**** &lt;u&gt;note&lt;/u&gt;: '''token parameter cannot be unset or empty unless you are calling your macro from a macroLink and aren't impersonating a token'''.
*** {{code|distancePerCell}} - If the Distance Per Cell multiplier should be used, set to {{true}} or {{false}}.
*** {{code|from}} - A number specifying the minimum range that a token needs to be from the source.
*** {{code|upto}} - A number specifying the maximum range that a token can be from the source.
*** {{code|metric}} - The distance metric to use, if it is not specified the default from the users preferences is used.
** {{code|area}} - A JSON object containing specific area information.
*** {{code|token}} - An optional field that contain the name or id of the token that resides at the center of the area. Defaults to the current token.
*** {{code|offsets}} - A JSON array of JSON objects that specify each individual cell that make up the area.
**** {{code|x}} - The relative {{code|x}} position of the cell in relation to the {{code|token}} field. Measured in cells.
**** {{code|y}} - The relative {{code|y}} position of the cell in relation to the {{code|token}} field. Measured in cells.}}


The movement metric in range specifies the movement metric use, the metric can be one of the following strings:
:* {{code|NO_GRID}} - The grid is ignored and straight line distance between the tokens is returned.
:* {{code|ONE_TWO_ONE}} - First Diagonal movement costs 1, second 2, and so on (Square grid only).
:* {{code|ONE_ONE_ONE}} - Diagonal movement costs a single square (Square grid only).
:* {{code|MANHATTAN}} - Diagonal movement costs 2 (Square grid only).
:* {{code|NO_DIAGONALS}} - No diagonal movement is allowed (Square grid only).

|example=

*You can use the following code to print out the ids of all of the tokens on the current map:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: ids = getTokens()]
[foreach(id, ids, &quot;&lt;br&gt;&quot;): id]
&lt;/source&gt;&lt;br /&gt;
*Find ALL the tokens on ALL the layers on the map:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:getTokens(&quot;,&quot;, json.set(&quot;{}&quot;, &quot;layer&quot;, json.append(&quot;[]&quot;,&quot;TOKEN&quot;,&quot;HIDDEN&quot;,&quot;OBJECT&quot;,&quot;BACKGROUND&quot;)))]
&lt;/source&gt;&lt;br /&gt;
*Find and return a [[JSON Array]] containing all NPC tokens that are with 2 squares or hexes of the selected token:
&lt;source lang=&quot;mtmacro&quot; line&gt;[h: cond = '{ &quot;range&quot;: {&quot;upto&quot;:2, &quot;distancePerCell&quot;:0, &quot;token&quot;:&quot;' +getSelected()+ '&quot;}, &quot;npc&quot;:1}']
[h: ids = getTokens(&quot;json&quot;, cond)]
&lt;/source&gt;&lt;br /&gt;
*Modifying the above example to exclude dead tokens:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cond = '{ &quot;range&quot;: {&quot;upto&quot;:2, &quot;distancePerCell&quot;:0, &quot;token&quot;:&quot;' +getSelected()+ '&quot;}, &quot;npc&quot;:1, &quot;unsetStates&quot;:[&quot;Dead&quot;] }']
[h: ids = getTokens(&quot;json&quot;, cond)]
&lt;/source&gt;&lt;br /&gt;
*Get all of the non dead NPC tokens in the square above, below, left, and to the right of the token, using the {{code|area}} option:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: areaOffsets = '[ {x:1, y:0}, {x:0, y:1}, {x:-1, y:0}, {y:-1, x:0}]']
[h: area = json.set(&quot;{}&quot;, &quot;offsets&quot;, areaOffsets)]
[h: cond = json.set(&quot;{}&quot;, &quot;area&quot;, area, &quot;npc&quot;, 1, &quot;unsetState&quot;, &quot;['Dead']&quot;)]
[h: ids = getTokens(&quot;json&quot;, cond)]
&lt;/source&gt;&lt;br /&gt;
*The same could be achieved using the {{code|range}} option with {{code|NO_DIAGONALS}} metric:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cond = '{ range: {upto:1, distancePerCell:0, metric:&quot;NO_DIAGONALS&quot;}, npc:1, unsetStates:[&quot;Dead&quot;] }']
[h: ids = getTokens(&quot;json&quot;, cond)]
&lt;/source&gt;
Please note that it in general is bad practice to create JSON objects and arrays by hand. This makes your code very bug prone. The proper way is to build you JSON object through code.&lt;br /&gt;
E.g.:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cond = '{ range: {upto:1, distancePerCell:0, metric:&quot;NO_DIAGONALS&quot;}, npc:1, unsetStates:[&quot;Dead&quot;] }']
&lt;/source&gt;
can better be created with:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cond = json.set(&quot;{}&quot;, &quot;range&quot;, json.set(&quot;{}&quot;, &quot;upto&quot;, 1, &quot;distancePerCell&quot;, 0, &quot;metric&quot;, &quot;NO_DIAGONALS&quot;), &quot;npc&quot;, 1, &quot;unsetStates&quot;, json.append(&quot;[]&quot;,&quot;Dead&quot;))]
&lt;/source&gt;
The big difference between the two methods is that doing it by hand, it's quite likely that when you make a mistake your code appears to 'work', that is you get no error reports, but only part of the conditions is met because you e.g. used &lt;nowiki&gt;''&lt;/nowiki&gt; or &quot;&quot; where you should not have.&lt;br /&gt;
If you make a mistake in the automated method, there is a bigger chance you get an error report, allowing you to fix it. Of course typos like 'ragne' instead of 'range' won't trigger any errors. 

|changes=
{{change|1.3b49|Added {{code|json}} delimiter option.}}
{{change|1.3b51|Added {{code|conditions}} parameter.}}
{{change|1.3b55|Added {{code|metric}} option to {{code|range}} option in {{code|conditions}} parameter.}}
}}
[[Category:Find Function]]
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getVisible</title>
    <ns>0</ns>
    <id>99</id>
    <revision>
      <id>5627</id>
      <parentid>2475</parentid>
      <timestamp>2011-07-24T10:59:46Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="994">{{stub|Examples of usage.}}
{{MacroFunction
|name=getVisible
|version=1.3b40
|description=
Returns {{true}} if the [[Token:visible to players|visible to players]] flag is set on a [[Token]] otherwise returns {{false}}. The [[Token:visible to players|visible to players]] flag has two meanings, on a normal [[Token]] players will only be able to see the [[Token]] if it is set (when all other things like [[Map:Fog of War|Fog of War]] etc are taken into account). If it is a [[Library Token]] then it determines if players can call Macros using {{roll|macro}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getVisible()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getVisible(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of token that has its player visibility checked, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|also=
[[setVisible|setVisible()]]

|changes=
{{change|1.3b51|No longer a trusted function, added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getWithState</title>
    <ns>0</ns>
    <id>100</id>
    <revision>
      <id>7159</id>
      <parentid>2882</parentid>
      <timestamp>2019-03-02T23:33:54Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1276">{{MacroFunction
|name=getWithState
|trusted=true
|version=1.3b48
|description=
Gets a list containing the ids of all the [[Token:token|token]]s on the current [[Map:map|map]] that have the specified [[Token:state | token state]] set. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getWithState(state)
getWithState(state, delim)
&lt;/source&gt;

If {{code|delim}} is specified then it is used to separate the values in the list, if it is not specified then it defaults to {{code|&quot;,&quot;}}.

|example=
You can use the following code to print out the ids of all of the [[Token:token|token]]s on the current [[Map:map|map]] with the &quot;Dead&quot; [[Token:state| token state]] set.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: ids = getWithState(&quot;Dead&quot;)]
[foreach(id, ids, &quot;&lt;br&gt;&quot;): id]
&lt;/source&gt;

|changes=
* '''1.3b49''' - Added {{code|json}} delimiter option.
}}
[[Category:Find Function]]
[[Category:State Function]]
[[Category:Token Function]]</text>
      <sha1>ifjrdwtvqxr9xduz0b31lid50twkz3u</sha1>
    </revision>
  </page>
  <page>
    <title>getWithStateNames</title>
    <ns>0</ns>
    <id>101</id>
    <revision>
      <id>7160</id>
      <parentid>2884</parentid>
      <timestamp>2019-03-02T23:34:10Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1280">{{MacroFunction
|name=getWithStateNames
|trusted=true
|version=1.3b48
|description=
Gets a list containing the names of all the [[Token:token|token]]s on the current [[Map:map|map]] that have the specified [[Token:state | token state]] set. The type of the value returned depends on the delimiter parameter. 
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getWithStateNames(state)
getWithStateNames(state, delim)
&lt;/source&gt;

If {{code|delim}} is specified then it is used to separate the values in the list, if it is not specified then it defaults to {{code|&quot;,&quot;}}.

|example=
You can use the following code to print out the names of all of the [[Token:token|token]]s on the current [[Map:map|map]] with the &quot;Dead&quot; [[Token:state| token state]] set.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getWithStateNames(&quot;Dead&quot;)]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

|changes=
* '''1.3b49''' - Added {{code|json}} delimiter option.
}}
[[Category:Find Function]]
[[Category:State Function]]</text>
      <sha1>l39w8zilddywk9jpfwh2s0dnchioehy</sha1>
    </revision>
  </page>
  <page>
    <title>hasImpersonated</title>
    <ns>0</ns>
    <id>102</id>
    <revision>
      <id>1976</id>
      <parentid>1361</parentid>
      <timestamp>2009-03-10T12:49:41Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="269">{{MacroFunction
|name=hasImpersonated
|version=1.3b48
|description=
Returns 1 if there is an [[impersonated token]] otherwise returns 0.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
hasImpersonated()
&lt;/source&gt;
}}
[[Category:Metamacro Function]]
[[Category:Permission Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>hasLightSource</title>
    <ns>0</ns>
    <id>103</id>
    <revision>
      <id>2843</id>
      <parentid>1968</parentid>
      <timestamp>2009-04-04T21:26:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1582">{{MacroFunction
|name=hasLightSource
|version=1.3b48
|description=
Returns 1 if the [[Current Token]] has any [[LightSource:light source|light source]]s that match the criteria passed in or 0 if there are no matches. If no arguments are passed to the function then it will return 1 if any [[LightSource:light source|light source]] is on. If only the first argument is passed it will return 1 if any [[LightSource:light source|light source]] of that [[LightSource:light source type|light source type]] is on. If both arguments are passed to the function it will return 1 if the [[LightSource:light source|light source]] with the specified name and specified [[LightSource:light source type|light source type]] is on.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
hasLightSource()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
hasLightSource(type)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
hasLightSource(type, name)
&lt;/source&gt;
Where 
* type is the [[LightSource:light source type|light source type]], (e.g. &quot;Generic&quot;, &quot;D20&quot;)
* name is the name of the [[LightSource:light source|light source]].



If delim is specified then it is used to separate the values in the list, if it is not specified then it defaults to ','.

|examples=
Check to see if any light source is on.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: l = hasLightSource()]
&lt;/source&gt;

Check to see if a &quot;D20&quot; lamp is on.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: l = hasLightSource(&quot;D20&quot;, &quot;Lamp - 15&quot;)]
&lt;/source&gt;

Check to see if any &quot;D20&quot; light source is on.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: l = hasLightSource(&quot;D20&quot;)
&lt;/source&gt;
}}
[[Category:Light Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>hasMacro</title>
    <ns>0</ns>
    <id>104</id>
    <revision>
      <id>5587</id>
      <parentid>2844</parentid>
      <timestamp>2011-07-19T15:23:02Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="575">{{MacroFunction
|name=hasMacro
|version=1.3b48
|description=
Returns {{true}} if a [[Macro_Button|macro button]] with the specified label exists on the [[Current Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
hasMacro(label)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
hasMacro(label, id)
&lt;/source&gt;
'''Parameters'''
{{param|label|The label of the macro to check for.}}
{{param|id|The token {{code|id}} of the token that the function is executed on. {{TrustedParameter}} }}

|changes=
{{change|1.3b51|Added optional token {{code|id}} parameter.}}
}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>hasProperty</title>
    <ns>0</ns>
    <id>105</id>
    <revision>
      <id>6043</id>
      <parentid>3629</parentid>
      <timestamp>2012-11-20T19:03:00Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Property Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="840">{{stub|Examples of usage.}}
{{MacroFunction
|name=hasProperty
|version=1.3b48
|description=
Returns {{true}} if the [[Token Property]] with the specified name exists on a [[Token]]. The function will return true if the token possesses the specified property, even if that property is not defined in the token's current property type. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
hasProperty(name)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
hasProperty(name, id)
&lt;/source&gt;
'''Parameters'''
{{param|name|The name of the [[Token Property]] which is checked for on the token.}}
{{param|id|The token {{code|id}} of the token which is checked for the [[Token Property]], defaults to the [[Current Token]]. {{TrustedParameter}} }}

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]][[Category:Property Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>hasSight</title>
    <ns>0</ns>
    <id>106</id>
    <revision>
      <id>6826</id>
      <parentid>2845</parentid>
      <timestamp>2016-07-06T00:34:31Z</timestamp>
      <contributor>
        <username>RPTroll</username>
        <id>16</id>
      </contributor>
      <minor/>
      <comment>Changed category to Sight Function from Light Function</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="221">{{stub}}
{{MacroFunction
|name=hasSight
|version=1.3b48
|description=
Returns 1 if the [[Current Token]] has [[Token:sight|sight]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
hasSight()
&lt;/source&gt;
}}
[[Category:Sight Function]]</text>
      <sha1>l69j2bawjqmsf41x45f1fmwqdb1ppxp</sha1>
    </revision>
  </page>
  <page>
    <title>hex</title>
    <ns>0</ns>
    <id>107</id>
    <revision>
      <id>1394</id>
      <parentid>1389</parentid>
      <timestamp>2009-03-08T04:21:12Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <minor/>
      <comment>Added MacroFunction template and Mathematical Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="388">{{MacroFunction
|name=hex
|description=
Returns a string which contains the hexadecimal representation of the number that was passed in.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: hexVal = hex(num)
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: hex(23)]
&lt;/source&gt;
Returns 0x17.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: hex(10)]
&lt;/source&gt;
Returns 0xA.
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>hypot</title>
    <ns>0</ns>
    <id>108</id>
    <redirect title="hypotenuse" />
    <revision>
      <id>2017</id>
      <parentid>1414</parentid>
      <timestamp>2009-03-10T13:54:23Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to categories.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="87">#REDIRECT [[hypotenuse]]
[[Category:Macro Function]]
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>hypotenuse</title>
    <ns>0</ns>
    <id>109</id>
    <revision>
      <id>1412</id>
      <parentid>1411</parentid>
      <timestamp>2009-03-08T19:45:19Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:hypotenuse]] moved to [[hypotenuse]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="477">{{MacroFunction
|name=hypotenuse
|description=Returns the hypotenuse of a right triangle whos other two sides have a length of sideA and sideB. The formula used to calculate the hypotnese is, h^2 = sideA^2 * sideB^2. See [[wp:Hypotenuse|Hypotenuse]]

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: h = hypot(sideA, sideB)]
[h: h = hypotenuse(sideA, sideB)]
&lt;/source&gt;


|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: hypot(3,4)]
&lt;/source&gt;
Returns 5.
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>if</title>
    <ns>0</ns>
    <id>110</id>
    <revision>
      <id>7215</id>
      <parentid>5859</parentid>
      <timestamp>2019-03-06T22:08:39Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2939">{{MacroFunction
|name=if
|version=1.3b38
|description=
Is used to check whether a certain code ''expression'' should be executed or not. If the ''condition'' to be evaluated with this function is {{true}}, the first ''expression'' of code is the result, otherwise the second ''expression'' of code is the result.

{{note|Note that both ''expressions'', the true and the false, are evaluated!
This means that updates, macro calling, etc. in '''both''' ''expressions'' will be executed regardless of the test result.&lt;br /&gt;
Therefore, this function should only be used in limited cases where the ''expressions'' are simply returning a value.}}

This function doesn't have the parentheses limit that the roll option has:
&lt;source lang=&quot;mtmacro&quot;&gt;
[if(((1))): 1;0]     &lt;!-- in this case if() roll option fails --&gt;
[if(((1)),1,0)]      &lt;!-- in this case if() function    works --&gt;
&lt;/source&gt;
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
if(condition, trueExpr, falseExpr)
&lt;/source&gt;
'''Parameters'''
* {{code|condition}} - What is tested to determine is the {{code|trueExpr}} or {{code|falseExpr}} will be executed. This follows the standard rules for ''conditions'' that can be found in the [[Macros:Branching and Looping|Branching and Looping]] article.
* {{code|trueExpr}} - A section of code that is returned if {{code|condition}} is {{true}}.
* {{code|falseExpr}} - A section of code that is returned if {{code|condition}} is {{false}}.
&amp;nbsp;
&lt;!-- The 'nbsp' is needed to force the DIV to close. --&gt;
|examples=
'''Example 1:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: a = 10] [h: b = 20]
[r: if(a &gt; b, &quot;A is larger than B&quot;, &quot;A is not larger than B&quot;)]
&lt;/source&gt;
:'''Returns:''' {{code|A is not larger than B}}


'''Example 2:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: number = 1]
[r: if(number &gt;= 1, 20, &quot;&quot;)]
&lt;/source&gt;
:'''Returns:''' A ''blank string'', please note that a ''blank string'' is not an ''empty variable'' if you were to assign the ''output'' of this function.


'''Example 3:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: variable = &quot;Foobar&quot;]
[r: if(variable == &quot;Text&quot;, 1, 0)]
&lt;/source&gt;
:'''Returns:''' {{code|0}}


'''Example 4:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: variable = 20]
[property = if(variable &gt; 0 &amp;&amp; variable &lt; 20, 1, 0)]
&lt;/source&gt;
:'''Returns:''' {{code|property}} set to {{code|0}}


'''Example 5:''' Usually its better to use the roll option version {{roll|if}}. Sometimes it's pretty handy to use the version documented here, since you can easily embed it in loops and expressions.

Let's say you want to check if one of a player's tokens has Initiative, you could do it this like this:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: tokensOfPlayer = getOwned(getPlayerName(), &quot;json&quot;)]
[h: hasIni = 0]
[h: iniToken = getInitiativeToken()]
[h, foreach(id, tokensOfPlayer): hasIni = if(id!=iniToken,hasIni,1)]
&lt;/source&gt;

|also=
[[Macros:Branching and Looping|Branching and Looping]], [[if (roll option)|if (roll option)]]
}}
[[Category:Miscellaneous Function]]</text>
      <sha1>bnnsxreyful5tadmqc0jkyedd49ly93</sha1>
    </revision>
  </page>
  <page>
    <title>indexKeyStrProp</title>
    <ns>0</ns>
    <id>111</id>
    <revision>
      <id>1907</id>
      <parentid>1420</parentid>
      <timestamp>2009-03-10T11:08:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="494">{{MacroFunction
|name=indexKeyStrProp
|version=1.3b42
|description=
Returns the key from the specified [[Macros:string property list|string property list]] at the specified index. The index for the [[Macros:string property list|string property list]] starts at 0.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
indexKeyStrProp(prop, index)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[indexKeyStrProp(&quot;a=blah; b=doh; c=meh&quot;, 1)]
&lt;/source&gt;
Returns &quot;b&quot;.
}}
[[Category:String Property List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>indexOf</title>
    <ns>0</ns>
    <id>112</id>
    <revision>
      <id>5849</id>
      <parentid>1923</parentid>
      <timestamp>2012-01-25T15:25:28Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="778">{{MacroFunction
|name=indexOf
|version=1.3b48
|description=
Returns the index of a substring in the specified string. If the substring does not occur within the string then -1 is returned. If you do not specify the index to start at the search begins at the start of the string otherwise it will begin from the position you specify.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
indexOf(str, substr)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
indexOf(str, substr, start)
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: indexOf(&quot;this is a test&quot;, &quot;is&quot;)]
&lt;/source&gt;
Returns 2.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: indexOf(&quot;this is a test&quot;, &quot;is&quot;, 3)]
&lt;/source&gt;
Returns 5.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: indexOf(&quot;this is a test&quot;, &quot;x&quot;)]
&lt;/source&gt;
Returns -1.
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>indexValueStrProp</title>
    <ns>0</ns>
    <id>113</id>
    <revision>
      <id>1909</id>
      <parentid>1908</parentid>
      <timestamp>2009-03-10T11:09:46Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="504">{{MacroFunction
|name=indexValueStrProp
|version=1.3b42
|description=
Returns the value from the specified [[Macros:string property list|string property list]] at the specified index. The index for the [[Macros:string property list|string property list]] starts at 0.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
indexValueStrProp(prop, index)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[indexValueStrProp(&quot;a=blah; b=doh; c=meh&quot;, 1)]
&lt;/source&gt;
Returns &quot;doh&quot;.
}}
[[Category:String Property List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>initiativeSize</title>
    <ns>0</ns>
    <id>114</id>
    <revision>
      <id>1431</id>
      <parentid>1430</parentid>
      <timestamp>2009-03-08T20:09:21Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:initiativeSize]] moved to [[initiativeSize]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="360">{{MacroFunction
|name=initiativeSize
|description=
Returns the number of tokens in the [[Initiative:initiative panel|initiative panel]]

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: num = initiativeSize()]
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
There are [r: initiativeSize()] tokens in the initiative list.
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isBarVisible</title>
    <ns>0</ns>
    <id>115</id>
    <revision>
      <id>3386</id>
      <parentid>3385</parentid>
      <timestamp>2009-05-31T03:51:43Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="935">{{MacroFunction
|name=isBarVisible
|version=1.3b46
|description=
Returns {{true}} if the specified [[Token Bar]] on the [[Current Token]] is visible, or {{false}} if it is not.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
isBarVisible(bar)
&lt;/source&gt;
'''Parameters'''
{{param|bar|A string that contains the name of the bar that has its visibility checked.}}

|examples=
Displays {{code|The health bar is visible!}} if the bar named {{code|Health}} is set to visible; otherwise it displays {{code|The health bar is not visible!}}.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[if(isBarVisible(&quot;Health&quot;)), code:
{
    The health bar is visible!
};{
    The health bar is not visible!
}]
&lt;/source&gt;

Toggles the visibility of the bar named {{code|Fatigue}}.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setBarVisible(&quot;Fatigue&quot;, !isBarVisible(&quot;Fatigue&quot;))]
[h: abort(0)]
&lt;/source&gt;

|also=
{{func|setBarVisible}}, 
{{func|getBar}}, 
{{func|setBar}}

}}
[[Category:Bar Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isGM</title>
    <ns>0</ns>
    <id>116</id>
    <revision>
      <id>6306</id>
      <parentid>6189</parentid>
      <timestamp>2014-11-07T18:13:16Z</timestamp>
      <contributor>
        <username>Aliasmask</username>
        <id>182</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="891">{{MacroFunction
|name=isGM
|version=1.3b48
|description=
Returns {{true}} if the player is a GM or {{false}} if they are not.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
isGM()
&lt;/source&gt;

&lt;source lang=&quot;mtmacro&quot; line&gt;
isGM(player)
&lt;/source&gt;'''Parameters'''
{{param|player|player's name as a string to check if he is a GM or not.}}

|examples=
'''1. Test to see if current player is a GM.'''

&lt;source lang=&quot;mtmacro&quot; line&gt;
I am a [r,if(isGM()): &quot;GM&quot;; &quot;Player&quot;]
&lt;/source&gt;


'''2. Display a list of GMs.'''

&lt;source lang=&quot;mtmacro&quot;&gt;
[H: allPlayers = getAllPlayerNames(&quot;json&quot;)]
[H: GMList = &quot;[]&quot;]
[H: foreach(player,allPlayers), code: {
   [H, if(isGM(player)): GMList = json.append(GMList,player)]
}]
[R, if(! json.isEmpty(GMList)): &quot;GM List: &quot; + json.toList(GMList); &quot;No players are listed as GM&quot;]
&lt;/source&gt;


|changes=
*  '''b91''' - Added {{code|player}} parameter}}

[[Category:Permission Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isNPC</title>
    <ns>0</ns>
    <id>117</id>
    <revision>
      <id>2486</id>
      <parentid>1940</parentid>
      <timestamp>2009-03-31T02:45:58Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="683">{{stub|Examples using the new functionality.}}
{{MacroFunction
|name=isNPC
|version=1.3b48
|description=
Returns {{true}} if a [[Token]] is a NPC or {{false}} if it is not.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
isNPC()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
isNPC(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of the token which has its NPC status checked, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r, if(isNPC()): &quot;Hello I am an NPC&quot;]
&lt;/source&gt;

|also=
[[isPC|isPC()]], 
[[setPC|setPC()]], 
[[setNPC|setNPC()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isNumber</title>
    <ns>0</ns>
    <id>118</id>
    <revision>
      <id>2013</id>
      <parentid>1457</parentid>
      <timestamp>2009-03-10T13:35:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="239">{{stub}}
{{MacroFunction
|name=isNumber
|version=1.3b48
|description=
Returns 1 if the parameter is a number, or 0 if it is not.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: num = isNumber(val)]
&lt;/source&gt;
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isOwnedByAll</title>
    <ns>0</ns>
    <id>119</id>
    <revision>
      <id>2496</id>
      <parentid>1948</parentid>
      <timestamp>2009-03-31T03:54:59Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="826">{{stub|Examples using new functionality.}}
{{MacroFunction
|name=isOwnedByAll
|version=1.3b48
|description=
Returns {{true}} if a [[Token]] has the [[Owned by All]] check box checked.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
isOwnedByAll()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
isOwnedByAll(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of the token which has its [[Owned by All]] status checked, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
Returns {{code|Anyone can edit me}} if the [[Current Token]] has the [[Owned by All]] check box checked.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r, if(isOnwedByAll()): &quot;Anyone can edit me&quot;]
&lt;/source&gt;

|also=
[[getOwners|getOwners()]], 
[[isOwner|isOwner()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isOwner</title>
    <ns>0</ns>
    <id>120</id>
    <revision>
      <id>4334</id>
      <parentid>3802</parentid>
      <timestamp>2010-08-10T15:15:16Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <comment>missing 'player' as first parameter</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1133">{{MacroFunction
|name=isOwner
|version=1.3b48
|description=
Returns {{true}} if the given [[Player]] is an owner of a specific [[Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
isOwner()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
isOwner(player)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
isOwner(player, id)
&lt;/source&gt;
'''Parameters'''
{{param|plyer|The name of the player to check for ownership, defaults to the [[Current Player]]. }}

{{param|id|The token {{code|id}} of the token which is checked for ownership, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|examples=
Returns {{code|You can edit me.}} if the [[Current Player]] is an owner of the [[Current Token]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r, if(isOwner()): &quot;You can edit me.&quot;]
&lt;/source&gt;

Returns {{code|Azhrei can edit me.}} if the given [[Player]] is an owner of the given [[Token]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: id = getSelected() ]
[r, if(isOwner(&quot;Azhrei&quot;, id)): &quot;Azhrei can edit me.&quot;]
&lt;/source&gt;

|also=
[[getOwners|getOwners()]], 
[[isOwnedByAll|isOwnedByAll()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isPC</title>
    <ns>0</ns>
    <id>121</id>
    <revision>
      <id>2482</id>
      <parentid>1941</parentid>
      <timestamp>2009-03-31T02:33:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="628">{{MacroFunction
|name=isPC
|version=1.3b48
|description=
Returns {{true}} if a [[Token]] is a PC or {{false}} if it is not.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
isPC()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
isPC(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of the token which has its PC status checked, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r, if(isPC()): &quot;Hello I am a PC&quot;]
&lt;/source&gt;

|also=
[[setPC|setPC()]],
[[isNPC|isNPC()]],
[[setNPC|setNPC()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isPropertyEmpty</title>
    <ns>0</ns>
    <id>122</id>
    <revision>
      <id>6284</id>
      <parentid>6044</parentid>
      <timestamp>2014-02-02T16:52:04Z</timestamp>
      <contributor>
        <username>Aliasmask</username>
        <id>182</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1245">{{stub|Examples using the new functionality.}}
{{MacroFunction
|name=isPropertyEmpty
|version=1.3b48
|description=
Returns {{true}} if the [[Token Property]] for a specific [[Token]] is empty. A [[Token Property]] is considered empty if it is {{code|NULL}}; if an empty string ({{code|&quot;&quot;}}) has been assigned to it, it is not considered empty.

'''Note:''' If the token type sets a default value, this function will still see the property as empty. Try using [[json.isEmpty|json.isEmpty()]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
isPropertyEmpty(property)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
isPropertyEmpty(property, id)
&lt;/source&gt;
'''Parameters'''
{{param|property|The name of the property that has its value checked.}}
{{param|id|The token {{code|id}} of the token that has its value checked, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r, if(isPropertyEmpty(&quot;propertyName&quot;)): propertyName = someDefaultValue]
&lt;/source&gt;

|also=
[[resetProperty|resetProperty()]], 
[[getProperty|getProperty()]], 
[[setProperty|setProperty()]],
[[json.isEmpty|json.isEmpty()]]
|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]][[Category:Property Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isTrusted</title>
    <ns>0</ns>
    <id>123</id>
    <revision>
      <id>4570</id>
      <parentid>1973</parentid>
      <timestamp>2010-09-19T05:33:51Z</timestamp>
      <contributor>
        <username>Feyrath</username>
        <id>134</id>
      </contributor>
      <minor/>
      <comment>removed extraneous parenthesis near end.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="393">{{MacroFunction
|name=isTrusted
|version=1.3b48
|description=
Returns 1 if this is running as a [[Macros:TrustedMacros|trusted macro]] or 0 if it is not.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
isTrusted()
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r, if(isTrusted()): &quot;I can run the trusted functions! yay!&quot;]
&lt;/source&gt;
}}
[[Category:Metamacro Function]]
[[Category:Permission Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>lastIndexOf</title>
    <ns>0</ns>
    <id>124</id>
    <revision>
      <id>1924</id>
      <parentid>1539</parentid>
      <timestamp>2009-03-10T11:41:12Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="519">{{MacroFunction
|name=lastIndexOf
|version=1.3b48
|description=
Finds the index in a string of the last occurrence of a substring in a string. If the substring does not occur in the string then -1 is returned. The index for the string starts at 0.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
lastIndexOf(str, substr)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[lastIndexOf(&quot;abcde&quot;, &quot;c&quot;)]
&lt;/source&gt;
Returns 2

&lt;source lang=&quot;mtmacro&quot; line&gt;
[lastIndexOf(&quot;abcde&quot;, &quot;z&quot;)]
&lt;/source&gt;
Returns -1
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>length</title>
    <ns>0</ns>
    <id>125</id>
    <revision>
      <id>1920</id>
      <parentid>1542</parentid>
      <timestamp>2009-03-10T11:34:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="263">{{MacroFunction
|name=length
|version=1.3b48
|description=
Returns the length of a string.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
length(str)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r, length(&quot;abcde&quot;)]
&lt;/source&gt;
Returns 5
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>listAppend</title>
    <ns>0</ns>
    <id>126</id>
    <revision>
      <id>1900</id>
      <parentid>1545</parentid>
      <timestamp>2009-03-10T10:27:18Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="720">{{MacroFunction
|name=listAppend
|version=1.3b42
|description=
Returns a [[Macros:string list|string list]] with a value appended to the end of the [[Macros:string list|string list]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
listAppend(list, value)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
listAppend(list, value, delim)
&lt;/source&gt;

If delim is not specified then the default value of ',' is used to separate the values in the [[Macros:string list|string list]]

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listAppend(&quot;This, is, a&quot;, &quot;test&quot;)]
&lt;/source&gt;
Returns This, is, a, test

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listAppend(&quot;This: is: a:&quot;, &quot;test&quot;, &quot;:&quot;)] 
&lt;/source&gt;
Returns This: is: a: test
}}
[[Category:String List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>listCount</title>
    <ns>0</ns>
    <id>127</id>
    <revision>
      <id>1898</id>
      <parentid>1554</parentid>
      <timestamp>2009-03-10T10:24:52Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="611">{{MacroFunction
|name=listCount
|version=1.3b42
|description=
Returns the number of items in a [[Macros:string list|string list]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
listCount(list)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
listCount(list, delim)
&lt;/source&gt;

If delim is not specified then the default value of ',' is used as the value separator in the [[Macros:string list|string list]]

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listCount(&quot;This, is, a, test&quot;)]
&lt;/source&gt;
Returns 4

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listCount(&quot;This: is: a: test&quot;,&quot;:&quot;)] 
&lt;/source&gt;
Returns 4
}}
[[Category:String List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>listDelete</title>
    <ns>0</ns>
    <id>128</id>
    <revision>
      <id>1897</id>
      <parentid>1557</parentid>
      <timestamp>2009-03-10T10:23:58Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="624">{{MacroFunction
|name=listDelete
|version=1.3b42
|description=
Returns a [[Macros:string list|string list]] with the specified item deleted from it. The index for the [[Macros:string list|string list]] 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
listDelete(list, index)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
listDelete(list, index, delim)
&lt;/source&gt;

If delim is not specified then the default value of ',' is used as the value separator in the [[Macros:string list|string list]]

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listDelete(&quot;This, is, a, test&quot;, 1)] 
&lt;/source&gt;
Returns This, a, test
}}
[[Category:String List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>listFind</title>
    <ns>0</ns>
    <id>129</id>
    <revision>
      <id>1899</id>
      <parentid>1559</parentid>
      <timestamp>2009-03-10T10:25:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="796">{{MacroFunction
|name=listFind
|version=1.3b42
|description=
Returns the index of the first occurrence of a value in a [[Macros:string list|string list]]. If the value is not found then -1 is returned.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
listFind(list, value)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
listFind(list, value, delim)
&lt;/source&gt;

If delim is not specified then the default value of ',' is used as the value separator in the [[Macros:string list|string list]]

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listFind(&quot;This, is, a, test&quot;, &quot;is&quot;)]
&lt;/source&gt;
Returns 1

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listFind(&quot;This: is: a: test&quot;, &quot;a&quot;, &quot;:&quot;)]
&lt;/source&gt;
Returns 2

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listFind(&quot;This, is, a, test&quot;, &quot;not&quot;)]
&lt;/source&gt;
Returns -1
}}
[[Category:String List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>listGet</title>
    <ns>0</ns>
    <id>130</id>
    <revision>
      <id>1896</id>
      <parentid>1567</parentid>
      <timestamp>2009-03-10T10:22:45Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="702">{{MacroFunction
|name=listGet
|version=1.3b42
|description=
Returns the value in the [[Macros:string list|string list]] at the specified index. The index for a [[Macros:string list|string list]] starts at 0.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
listGet(list, index)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
listGet(list, index, delim)
&lt;/source&gt;

If delim is not specified then the default value of ',' is used as the value separator in the [[Macros:string list|string list]]

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listGet(&quot;This, is, a , test&quot;, 2)]
&lt;/source&gt;
Returns a

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listGet(&quot;This: is: a :test&quot;, 1, &quot;:&quot;)] 
&lt;/source&gt;
Returns is
}}
[[Category:String List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>listInsert</title>
    <ns>0</ns>
    <id>131</id>
    <revision>
      <id>1901</id>
      <parentid>1570</parentid>
      <timestamp>2009-03-10T10:28:23Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="675">{{MacroFunction
|name=listInsert
|version=1.3b42
|description=
Inserts a value into the [[Macros:string list|string list]] at the specified index. If a delimiter is not specified then the default value of ',' is used. The index for lists starts at 0

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
listInsert(list, index, value)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
listInsert(list, index, value, delim)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listInsert(&quot;This, a , test&quot;, 1, &quot;is&quot;)]
&lt;/source&gt;
Returns This, is, a, Test

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listInsert(&quot;This: a: test&quot;, 1, &quot;is&quot;, &quot;:&quot;)] 
&lt;/source&gt;
Returns This: is: a: test
}}
[[Category:String List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>listReplace</title>
    <ns>0</ns>
    <id>132</id>
    <revision>
      <id>3628</id>
      <parentid>3627</parentid>
      <timestamp>2009-06-30T09:16:52Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Performed an UNDO of the template tag deletion by the previous edit.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1065">{{MacroFunction
|name=listReplace
|version=1.3b42
|description=
Replaces the element at the specified index of a [[String List]] with a new value. If a delimiter is not specified then the default value of {{code|&quot;,&quot;}} is used. The index for lists starts at {{code|0}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
listReplace(list, index, value)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
listReplace(list, index, value, delim)
&lt;/source&gt;

|examples=
'''Simple example:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listReplace(&quot;This, isnt, a , test&quot;, 1, &quot;is&quot;)]
&lt;/source&gt;
Returns {{code|This, is, a, Test}}

'''Example using a [[String List]] with a non-default delimiter:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listReplace(&quot;This: isnt: a: test&quot;, 1, &quot;is&quot;, &quot;:&quot;)] 
&lt;/source&gt;
Returns {{code|This: is: a: test}}

'''Example using a [[String List]] stored in a variable:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: ListVar = &quot;This, is, a, great, test&quot;]
[h: ListVar = listReplace(ListVar, 3, &quot;silly&quot;)]
[r: ListVar]
&lt;/source&gt;
Returns: {{code|This, is, a, silly, test}}
}}
[[Category:String List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>ln</title>
    <ns>0</ns>
    <id>133</id>
    <revision>
      <id>1814</id>
      <parentid>1812</parentid>
      <timestamp>2009-03-09T14:22:17Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="786">{{MacroFunction
|name=ln
|version=1.3b36
|description=
Returns the ''exponent'' that the ''irrational constant''(approx. {{code|2.718281828}}) would have to be raised to in order to equal the parameter.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
ln(num)
&lt;/source&gt;
'''Parameter'''
* {{code|num}} - The {{code|number}} used with the ''irrational constant'' to calculate the ''exponent''.

|example=
'''Example 1'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: ln(5)]
&lt;/source&gt;
'''Returns:''' {{code|1.6094379124341002817999424223671667277812957763671875}}

'''Example 2'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: ln(23)]
&lt;/source&gt;
'''Returns:''' {{code|3.13549421592914967504839296452701091766357421875}}

|also=
[[wp:Natural_logarithm|Natural logarithm]], [[power|power()]]
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:log</title>
    <ns>0</ns>
    <id>134</id>
    <redirect title="log10" />
    <revision>
      <id>1597</id>
      <parentid>319</parentid>
      <timestamp>2009-03-09T02:59:00Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirected to log10</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[log10]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>log10</title>
    <ns>0</ns>
    <id>135</id>
    <revision>
      <id>1595</id>
      <parentid>1594</parentid>
      <timestamp>2009-03-09T02:58:32Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:log10]] moved to [[log10]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="345">{{MacroFunction
|name=log10
|description=
Returns the [[wp:Logarithm_of_the_base_10|logarithm of base 10]] of a number.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = log(num)]
[h: val = log10(num)]
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: log(100)]
[r: log(1000)]
&lt;/source&gt;
Returns 
   2
   3
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>lower</title>
    <ns>0</ns>
    <id>136</id>
    <revision>
      <id>1922</id>
      <parentid>1601</parentid>
      <timestamp>2009-03-10T11:37:01Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="496">{{MacroFunction
|name=lower
|version
|description=
Returns the lower case version of a string. If the number of characters is not specified then the whole string is converted to lower case.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
lower(str)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
lower(str, numChars)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: lower(&quot;This Is a Test&quot;)]
[r: lower(&quot;This Is a Test&quot;, 1)]
&lt;/source&gt;
Returns 
   this is a test
   this Is a Test
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>macroLink</title>
    <ns>0</ns>
    <id>137</id>
    <revision>
      <id>7162</id>
      <parentid>7139</parentid>
      <timestamp>2019-03-02T23:35:30Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5296">{{MacroFunction
|name=macroLink
|version=1.3b48
|description=
Creates the HTML for a link which will run the specified macro when clicked on in a [[frame_(roll_option)|frame]], [[dialog_(roll_option)|dialog]], or the chat window.  Additionally, if you send the link to the chat window, it will automatically be executed by any recipients as soon as they receive it.  This can be useful for popping up or updating [[frame_(roll_option)|frames]] or [[dialog_(roll_option)|dialogs]] for your players.  To auto-execute in the chat window, it must not be hidden by roll options like {{roll|h}}, but may be hidden by being contained within an HTML comment.&lt;br/&gt;
'''Some notes on the auto execution'''
*If you refer to a macro on a lib:token it will automatically execute, however if you refer to a macro on the campaign panel, the macro is NOT automatically executed when sent to the chat. 
*It will also not work if the owner of the lib:token is not an (online) GM, though as a general practice its best not to set ownership of lib:tokens at all.
*To prevent the macro from automatically executing you can turn off the 'auto execute' in the edit panel of the macro that you're linking to.
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
macroLink(text, macroName)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
macroLink(text, macroName, output)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
macroLink(text, macroName, output, args)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
macroLink(text, macroName, output, args, target)
&lt;/source&gt;
&lt;br/&gt;The string generated by the {{code|macroLink()}} function follows this format:&lt;source lang=&quot;html4strict&quot;&gt;
&lt;a href=&quot;macro://macroName/output/target?args&quot;&gt;text&lt;/a&gt;
&lt;/source&gt;
'''Parameters'''
{{param|text|is the text to display for the link.}}
{{param|macroName|is the name of the macro to run when the link is clicked. The {{code|macroName}} is in the same format that is used for [[Macros:Branching_and_Looping#MACRO_Option |[macro(...): ...] ]]  e.g. {{code|Test@Lib:test}}.}}
{{param|output|contains who the output of the macro should go to, values are (defaults to {{code|&quot;none&quot;}}):}}
** {{code|&quot;self&quot;}} - Display only to person who clicked on the link.
** {{code|&quot;gm&quot;}} - Display to GM.
** {{code|&quot;all&quot;}} - everyone (acts like a [[SlashCommands:say|/say]]).
** {{code|&quot;none&quot;}} - discard any output.
** {{code|&quot;gm-self&quot;}} - Display to GM and the person executing the link.
** {{code|&quot;list&quot;}} - Displays to a list of players. When the {{code|output}} is set to {{code|&quot;list&quot;}} then the macro link expects the {{code|args}} parameter to be a [[JSON Object]], that contains a field called {{code|mlOutputList}} which is a [[JSON Array]] containing the players to send the output to.
{{param|args|Any arguments to be passed to the macro when it is called.}}
{{param|target|Which tokens to run the macro on. Target can be one or more of the following separated by commas (defaults to {{code|&quot;impersonated&quot;}}):}}
** {{code|&quot;impersonated&quot;}} - the impersonated [[Token]].
** {{code|&quot;selected&quot;}} - the selected [[Token]]s.
** {{code|&quot;[[Token:Token Id|Token Id]]&quot;}} - the ''[[Token:Token Id|id]]'' of a [[Token]].

|examples=
* To create a link that will call a macro called {{code|Test}} on the [[Token:library_token|Library Token]] named {{code|Lib:Test}} that says &quot;''Click on me!''&quot; and displays the output to the GM.
&lt;source lang=&quot;mtmacro&quot;&gt;
[r: macroLink(&quot;Click on me!&quot;, &quot;Test@Lib:Test&quot;, &quot;gm&quot;, &quot;count=6&quot;, &quot;impersonated&quot;)]
&lt;/source&gt;&lt;br/&gt;
produces this output:&lt;source lang=&quot;html4strict&quot;&gt;&lt;a href=&quot;macro://Test@Lib:Test/gm/impersonated?count=6;&quot;&gt;Click on me!&lt;/a&gt;&lt;/source&gt;&lt;br/&gt;
* Sending to multiple players and the GM in 1.3b55
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: outputTo = '[&quot;Fred&quot;, &quot;Barney&quot;, &quot;gm&quot;]']
[h: args = json.set(&quot;{}&quot;, &quot;mlOutputList&quot;, outputTo)]
[r: macroLink(&quot;Click on me!&quot;, &quot;Test@Lib:Test&quot;, &quot;list&quot;, args)]
&lt;/source&gt;&lt;br/&gt;
* Updating a character sheet [[frame_(roll_option)|frame]] without displaying the link:
&lt;source lang=&quot;mtmacro&quot;&gt;
Took 4 points of damage.&lt;!-- [r: macroLink(&quot;Update Character Sheet&quot;, &quot;Update Character Sheet@Lib:Test&quot;)] --&gt;
&lt;/source&gt;&lt;br/&gt;
* An example of a longer custom macrolink:
This is a link that is user created to send several variables to the AttackMacro. Each variable must be separated by a {{code|&amp;}} sign. Spaces within text must be replaced with a {{code|+}} sign. Plus sign can't be sent, you might want to use the html code for plus sign ({{code|&amp;27;}}) instead of {{code|+}}.
&lt;source lang=&quot;html4strict&quot;&gt;&lt;a href=&quot;macro://AttackMacro@Lib:Test/all/impersonated?Count=6&amp;DiceToRoll=1d6plus4&amp;Text=Hello+there+Im+attacking+you;&quot;&gt;Click me&lt;/a&gt;&lt;/source&gt;

'''How to call a macro on a non-library token'''

You can call macros on usual tokens by using {{code|@TOKEN}} in the macro name. You have to specify the token with the macro as target token. The usual limits of ownership and trust should be expected here too.

This line would call macro {{code|B}} on token {{code|Hero}}:

&lt;source lang=&quot;mtmacro&quot;&gt;
[r: macroLink(&quot;Click me!&quot;, &quot;B@TOKEN&quot;, &quot;all&quot;, &quot;&quot;, findToken(&quot;Hero&quot;))]
&lt;/source&gt;

|also=
{{func|macroLinkText}}

|changes=
{{change|1.3b55|Added {{code|gm-self}} and {{code|list}} output options.}}
{{change|1.3b56|Links created using this function will no longer show a tooltip when displayed in a dialog or frame.}}
}}
[[Category:Miscellaneous Function]]</text>
      <sha1>heifxra7bfv2konuf4w4xxmo87qz6hq</sha1>
    </revision>
  </page>
  <page>
    <title>macroLinkText</title>
    <ns>0</ns>
    <id>138</id>
    <revision>
      <id>5798</id>
      <parentid>5618</parentid>
      <timestamp>2011-11-04T06:05:58Z</timestamp>
      <contributor>
        <username>Bone White</username>
        <id>617</id>
      </contributor>
      <minor/>
      <comment>Added example of changing link text colour, courtesy of aliasmask. See http://forums.rptools.net/viewtopic.php?f=20&amp;t=20330</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3398">{{MacroFunction
|name=macroLinkText
|version=1.3b48
|description=
Creates the text that would appear in a HTML tag for a link which will run the specified macro when clicked on. This is useful for callbacks in {{roll|dialog}} or {{roll|frame}}. If you just want to send a click-able link to someone use {{func|macroLink}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
macroLinkText(macroName)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
macroLinkText(macroName, output)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
macroLinkText(macroName, output, args)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
macroLinkText(macroName, output, args, target)
&lt;/source&gt;
'''Parameters'''
{{param|macroName|The name of the macro to run when the link is clicked.  The {{code|macroName}} is in the standard macro reference format (e.g. {{code|Macro@Lib:Token}})}}
{{param|output|Who the output of the macro should go to, values are (defaults to {{code|none}}):}}
** {{code|self}} - Display only to person who clicked on the link.
** {{code|gm}} - Display to GM.
** {{code|all}} - Everyone (acts like a {{code|/say}})
** {{code|none}} - Discard any output.
** {{code|gm-self}} - Display to GM and the person executing the link.
** {{code|list}} - Displays to a list of players. When the {{code|output}} parameter is {{code|&quot;list&quot;}} then the macro link expects the {{code|args}} parameter to be a [[JSON Object]], that contains a field called {{code|mlOutputList}} which is a [[JSON Array]] containing the players to send the output to.
{{param|args|Any arguments to be passed to the macro when it is called.}}
{{param|target|Which tokens to run the macro on. Target can be one or more of the following separated by commas (defaults to {{code|impersonated}}):}}
** {{code|impersonated}} - The impersonated [[Token]].
** {{code|selected}} - The selected [[Token]]/s.
** [[Token ID]] - The {{code|id}} of a [[Token]].

|examples=
To create the text that would go inside a form element as the {{code|action}} attribute, and that will call a macro named {{code|Test}} on the [[Library Token]] named {{code|Lib:Test}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: macroLinkText(&quot;Test@Lib:Test&quot;,&quot;&quot;, &quot;gm&quot;)]
&lt;/source&gt;
Returns: {{code|macro://Test@Lib:Test/gm/impersonated?}}

To create the text that would go inside a form element as the {{code|action}} attribute and call the {{code|AddWeapon}} on the [[Library Token]] named {{code|Lib:PC}} which will act upon the [[Current Token]]:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:macroLinkText('AddWeapon@Lib:PC', 'none', '', currentToken())]
&lt;/source&gt;
Returns: {{code|macro://AddWeapon@Lib:PC/none/#ID#?}} where {{code|#ID#}} is the {{code|id}} of the [[Current Token]].

Sending to multiple players and the GM in 1.3b55
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: outputTo = '[&quot;Fred&quot;, &quot;Barney&quot;, &quot;gm&quot;]']
[h: args = json.set(&quot;{}&quot;, &quot;mlOutputList&quot;, outputTo)]
[r: macroLinkText(&quot;Click on me!&quot;, &quot;Test@Lib:Test&quot;, &quot;list&quot;, args)]
&lt;/source&gt;

Correctly modifying the colour of the link, works both in the chat box and in forms:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: strformat('&lt;a style=&quot;color:red&quot; href=&quot;%s&quot;&gt;Click Me&lt;/a&gt;', macroLinkText(&quot;Click Me Macro@Lib:Test&quot;))] 
&lt;/source&gt;

|also=
{{func|macroLink}}

|changes=
{{change|1.3b55|Added {{code|gm-self}} and {{code|list}} output options.}}
{{change|1.3b56|Links created using this function will no longer show a tooltip when displayed in a dialog or frame.}}

}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>matches</title>
    <ns>0</ns>
    <id>139</id>
    <revision>
      <id>1927</id>
      <parentid>1584</parentid>
      <timestamp>2009-03-10T11:46:22Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="616">{{MacroFunction
|name=matches
|version=1.3b48
|description=
Returns 1 if a string matches pattern or 0 if it does not. The pattern can be a [[Macros:regular expression|regular expression]]. Matches performs a while string comparison, so the pattern must match the whole of the input string and not only part of it.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
matches(str, pattern)
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [r: matches(&quot;This is a test&quot;, &quot;test&quot;)]
    [r: matches(&quot;test&quot;, &quot;test&quot;)]
    [r: matches(&quot;This is a test&quot;, &quot;.*test&quot;)]

&lt;/source&gt;
Returns 
    0
    1
    1
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>max</title>
    <ns>0</ns>
    <id>140</id>
    <revision>
      <id>1591</id>
      <parentid>1586</parentid>
      <timestamp>2009-03-09T02:57:05Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <minor/>
      <comment>Added MacroFunction template and Mathematical Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="359">{{MacroFunction
|name=max
|description=
Returns the largest number of all the numbers that have been passed in.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: largest = max(num, num, ...)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [r: max(2, 30, 4, 7)]
    [r: max(-2, -40, -100)]
&lt;/source&gt;
Returns 
    30
    -2
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:mean</title>
    <ns>0</ns>
    <id>141</id>
    <redirect title="average" />
    <revision>
      <id>1070</id>
      <parentid>327</parentid>
      <timestamp>2009-03-06T23:02:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[average]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[average]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>median</title>
    <ns>0</ns>
    <id>142</id>
    <revision>
      <id>1598</id>
      <parentid>1592</parentid>
      <timestamp>2009-03-09T02:59:01Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <minor/>
      <comment>Added MacroFunction template and Mathematical Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="673">{{MacroFunction
|name=median
|description=
Returns the [[wp:Median|Median]] of the numbers passed in. The median value is the value where half the numbers in the list are higher or equal to it and the other half are lower or equal to it. The median is calculated by sorting the list of numbers and picking the middle number if the list has an odd amount or averaging the two in the middle if there is an even amount. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: av = median(num, num, ...)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [r: median(3,6,2,2)]   
    [r: median(12, 23, 3, 102, 1)]
&lt;/source&gt;
Returns 
    2.5
    12
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>min</title>
    <ns>0</ns>
    <id>143</id>
    <revision>
      <id>1639</id>
      <parentid>1638</parentid>
      <timestamp>2009-03-09T03:36:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:min]] moved to [[min]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="346">{{MacroFunction
|name=min
|description=
Returns the smallest of the numbers that are passed in.
    
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: smallest = min(num, num, ...)]
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [r: min(2, 4, 5, 1)]   
    [r: min(-1, -5, 100)]
&lt;/source&gt;
Returns 
    1
    -5
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>multiply</title>
    <ns>0</ns>
    <id>144</id>
    <revision>
      <id>1642</id>
      <parentid>1641</parentid>
      <timestamp>2009-03-09T03:37:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:multiply]] moved to [[multiply]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="356">{{MacroFunction
|name=multiply
|description=
Returns the numbers that are passed in multiplied together.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = multiply(num, num, ...)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [r: multiply(2, 5, 6)]   
    [r: multiply(4, 3, 2)]
&lt;/source&gt;
Returns 
    30
    24
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>nextInitiative</title>
    <ns>0</ns>
    <id>145</id>
    <revision>
      <id>5570</id>
      <parentid>1891</parentid>
      <timestamp>2011-07-19T13:47:28Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="548">{{stub}}
{{MacroFunction
|name=nextInitiative
|trusted=true
|version=1.3b41
|description=
Advances the initiative to the next [[Token:token|Token]] in the [[Initiative:Initiative Panel|Initiative Panel]]. Only the [[GM]] or a trusted macro can call this function. This function returns the offset into the [[Initiative:Initiative Panel|Initiative Panel]] (starting at 0) of the [[Token]] that will get the [[Initiative:Initiative|Initiative]].
    
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
nextInitiative()
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>number</title>
    <ns>0</ns>
    <id>146</id>
    <revision>
      <id>3313</id>
      <parentid>2011</parentid>
      <timestamp>2009-04-23T09:19:09Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="442">{{stub}}
{{MacroFunction
|name=number
|version=1.3b48
|description=
Returns the value that is passed in as a number. If the value can not be converted to a number then an error will occur. If you are unsure if a value is a number to can use [[Macros:Functions:isNumber|isNumber()]] before calling this function.
    
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
number(val)
&lt;/source&gt;
}}
[[Category:Mathematical Function]]
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>removeAllFromInitiative</title>
    <ns>0</ns>
    <id>147</id>
    <revision>
      <id>5571</id>
      <parentid>1613</parentid>
      <timestamp>2011-07-19T13:49:19Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="387">{{MacroFunction
|name=removeAllFromInitiative
|trusted=true
|description=
Removes all of the [[Token]]s from the [[Initiative:Initiative Panel|Initiative Panel]]. This function returns the number of [[Token]]s that were removed. Only the [[GM]] can call this function.    

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: removeAllFromInitiative()]
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>removeAllNPCsFromInitiative</title>
    <ns>0</ns>
    <id>148</id>
    <revision>
      <id>5572</id>
      <parentid>1616</parentid>
      <timestamp>2011-07-19T13:50:46Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="413">{{MacroFunction
|name=removeAllNPCsFromInitiative
|trusted=true
|description=
Removes all of the [[Token:NPC|NPC]] [[Token]]s from the [[Initiative:Initiative Panel|Initiative Panel]]. This function returns the number of [[Token]]s that were removed. Only the [[GM]] can call this function.    

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: removeAllNPCsFromInitiative()]
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>removeAllPCsFromInitiative</title>
    <ns>0</ns>
    <id>149</id>
    <revision>
      <id>5573</id>
      <parentid>1619</parentid>
      <timestamp>2011-07-19T13:52:06Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="409">{{MacroFunction
|name=removeAllPCsFromInitiative
|trusted=true
|description=
Removes all of the [[Token:PC|PC]] [[Token]]s from the [[Initiative:Initiative Panel|Initiative Panel]]. This function returns the number of [[Token]]s that were removed. Only the [[GM]] can call this function.    

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: removeAllPCsFromInitiative()]
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>removeFromInitiative</title>
    <ns>0</ns>
    <id>150</id>
    <revision>
      <id>2847</id>
      <parentid>1622</parentid>
      <timestamp>2009-04-04T21:29:16Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="274">{{MacroFunction
|name=removeFromInitiative
|description=
Removes the [[Current Token]] from the [[Initiative:Initiative Panel|Initiative Panel]].
    
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: removeFromInitiative(num, num, ...)]
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>replace</title>
    <ns>0</ns>
    <id>151</id>
    <revision>
      <id>6009</id>
      <parentid>5948</parentid>
      <timestamp>2012-10-04T08:20:56Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Tweaking page layout and typography</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1960">{{MacroFunction
|name=replace
|version=1.3b48
|description=
Returns the string with the occurrences of a pattern replaced by the specified value. If the number of times to perform the replacement is not specified then all occurrences of the pattern are replaced. Pattern can be a [[Macros:regular expression|regular expression]]. This means if the pattern string contains any regular expression special characters they must be escaped.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
replace(str, pattern, value)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
replace(str, pattern, value, times)
&lt;/source&gt;

|example=

'''Example 1'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [r: replace(&quot;This is a test&quot;, &quot; &quot;, &quot;-&quot;)]
    [r: replace(&quot;This is a test&quot;, &quot; &quot;, &quot;-&quot;, 2)]
&lt;/source&gt;
Returns:
    This-is-a-test
    This-is-a test

'''Example 2'''&lt;br&gt;
This is useful for search+replace of any string you feed to {{code|replace()}} that might have regex codes in it like parenthesis:
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [r: tString = &quot;is (a) t&quot;]
    [r: replace(&quot;This is (a) test&quot;, &quot;\\Q&quot; + tString + &quot;\\E&quot;, &quot;-&quot;)]
&lt;/source&gt;
Returns:
    This-est

'''Example 3'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [r: name = replace(&quot;wolph 5&quot;,&quot;(.*?) [0-9]+&quot;,&quot;\$1 42&quot;)]
&lt;/source&gt;
returns:
    wolph 42
The {{code|$}} normally means to match end-of-line, but only when it's at the end of the pattern. In this case, it's at the beginning of the pattern. And that means if the character immediately following is a digit (such as {{code|$1}}), those characters are replaced by the source string matched by the corresponding set of parentheses in the regular expression.

'''Example 4'''&lt;br&gt;
Note that multiple {{code|.*}} in the search string correspond with multiple {{code|$#}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h:lastPath = [{&quot;x&quot;:1,&quot;y&quot;:0},{&quot;x&quot;:1,&quot;y&quot;:1},{&quot;x&quot;:1,&quot;y&quot;:2}]]
  [r:result = replace(lastPath, '\\{&quot;x&quot;:(.*?),&quot;y&quot;:(.*?)\\}', '&quot;X\$1Y\$2&quot;')] 
&lt;/source&gt;
returns:
  [&quot;X1Y0&quot;,&quot;X1Y1&quot;,&quot;X1Y2&quot;]

}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>resetProperty</title>
    <ns>0</ns>
    <id>152</id>
    <revision>
      <id>4216</id>
      <parentid>4215</parentid>
      <timestamp>2010-06-02T20:40:44Z</timestamp>
      <contributor>
        <username>Aliasmask</username>
        <id>182</id>
      </contributor>
      <minor/>
      <comment>Oops.. first time editing.. missed the }}.. syntax corrected</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="892">{{stub|Examples of usage.}}
{{MacroFunction
|name=resetProperty
|version=1.3b48
|description=
Resets the specified [[Token Property]] on a specific [[Token]] so that it is empty and will return the default value when queried (if it has one). 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
resetProperty(property)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
resetProperty(property, id)
&lt;/source&gt;
'''Parameters'''
{{param|property|The name of the property to reset.}}
{{param|id|The token {{code|id}} of the token which has its property reset, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|also=
[[isPropertyEmpty|isPropertyEmpty()]], 
[[setProperty|setProperty()]], 
[[getProperty|getProperty()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}
{{change|1.3b68|[[Token Property]] is now deleted from [[Token]]}}

}}
[[Category:Property Function]]
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>sendToBack</title>
    <ns>0</ns>
    <id>153</id>
    <revision>
      <id>4113</id>
      <parentid>3136</parentid>
      <timestamp>2010-01-18T22:21:06Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>Added note about current bug in 1.3.b63</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1303">{{MacroFunction
|name=sendToBack
|version=1.3b48
|description=
Adjust the z-order (or draw order) of the [[Token]] so that it is drawn before all other [[Token]]s on the same [[Map Layer]], this has the effect of making the Token appear to be in back of the other [[Token]]s as it will be obscured by other [[Token]]s on the same [[Map Layer]] in the same location.

''As of 1.3.b63 there appears to be a bug in which token states are not rendered properly after calling sendToBack or bringToFront.  As a work-around, macros should change the token ordering first, then turn states on or off.''

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
sendToBack()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
sendToBack(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} or name of the token that has its z-order changed, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|examples=
Sends the [[Current Token]] to the lowest z-order.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: sendToBack()]
&lt;/source&gt;

Sends all of the selected tokens to the lowest z-order.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: tokens = getSelected()]
[h, foreach(id, tokens, &quot;&quot;), code:
{
    [h: sendToBack(id)]
}]
&lt;/source&gt;

|also=
{{func|bringToFront}}

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>set</title>
    <ns>0</ns>
    <id>154</id>
    <revision>
      <id>7165</id>
      <parentid>1635</parentid>
      <timestamp>2019-03-03T01:04:42Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="832">{{MacroFunction
|name=set
|description=
Sets the value of a variable.
&lt;p&gt;
This function is rarely used because a simple assignment to a variable name can be used instead.  However, using this function allows the first parameter to be a variable that identifies the variable name to be assigned.
&lt;/p&gt;
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: set(varName, val)]
&lt;/source&gt;

|example=
A simple use:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: set(&quot;test&quot;, 33)]
[r: test]
&lt;/source&gt;
Returns 
    33

A more sophisticated example that shows passing a string expression as the first parameter:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: var1=&quot;te&quot;]
[h: var2=&quot;st&quot;]
[h: set(var1+var2, 33)]
[r: test]
&lt;/source&gt;
Returns 
    33

Both of the above examples are equivalent to:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: test = 33]
&lt;/source&gt;
}}
[[Category:Miscellaneous Function]]</text>
      <sha1>10r1yxkr9cwftbxe72451liogm4198u</sha1>
    </revision>
  </page>
  <page>
    <title>setAllStates</title>
    <ns>0</ns>
    <id>155</id>
    <revision>
      <id>2470</id>
      <parentid>1885</parentid>
      <timestamp>2009-03-31T01:27:26Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="941">{{stub|Examples using new functionality.}}
{{MacroFunction
|name=setAllSates
|version=1.3b40
|description=
Sets all of the [[State|States]] of a [[Token]] to on ({{true}}) or off ({{false}}).

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setAllStates(value)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setAllStates(value, id)
&lt;/source&gt;
'''Parameter'''
{{param|value|If all states should be set on or off, {{true}} or {{false}}.}}
{{param|id|The token {{code|id}} of the token that should have its [[State|States]] set, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|examples=
Set all [[Token:state|Token States]] on
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setAllStates(1)]
&lt;/source&gt;
Set all [[Token:state|Token States]] off
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setAllStates(0)]
&lt;/source&gt;

|also=
[[State]],
[[getState|getState()]],
[[setState|setState()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}
}}
[[Category:State Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setBar</title>
    <ns>0</ns>
    <id>156</id>
    <revision>
      <id>2848</id>
      <parentid>1893</parentid>
      <timestamp>2009-04-04T21:29:39Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="404">{{stub}}
{{MacroFunction
|name=setBar
|trusted=true
|version=1.3b42
|description=
Sets the value of the specified [[Token:bar|bar]] for the [[Current Token]]. The value to set is between 0 and 1 for 0% to 100% respectively.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setBar(name, pct/100)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setBar(&quot;health&quot;, HP/MaxHP)]
&lt;/source&gt;
}}
[[Category:Bar Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setBarVisible</title>
    <ns>0</ns>
    <id>157</id>
    <revision>
      <id>2849</id>
      <parentid>1916</parentid>
      <timestamp>2009-04-04T21:30:12Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="629">{{MacroFunction
|name=setBarVisible
|version=1.3b46
|description=
Sets if the specified [[Token:bar|bar]] for the [[Current Token]] is visible or not. If the value is non zero then the [[Token:bar|bar]] is visible, if it is 0 it is not visible.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setBarVisible(name, value)
&lt;/source&gt;

|examples=
Make &quot;health&quot; [[Token:bar|bar]] for the [[Current Token]] visible.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setBarVisible(&quot;health&quot;, 1)]
&lt;/source&gt;

Hide &quot;health&quot; [[Token:bar|bar]] for the [[Current Token]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setBarVisible(&quot;health&quot;, 0)]
&lt;/source&gt;
}}
[[Category:Bar Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setCurrentInitiative</title>
    <ns>0</ns>
    <id>158</id>
    <revision>
      <id>5574</id>
      <parentid>5070</parentid>
      <timestamp>2011-07-19T13:53:33Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="729">{{MacroFunction
|name=setCurrentInitiative
|trsuted=true
|description=
Gives the [[Initiative:Initiative|Initiative]] to the [[Token]] at the specified offset in the [[Iniatiative:Initiative Panel|Initiative Panel]]. Offsets start at 0.  

To clear, specify a number that is not a valid token offset, like -1.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setCurrentInitiative(offset)]
&lt;/source&gt;

|examples=
Give Initiative to the 4th [[Token]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setCurrentInitiative(3)]
&lt;/source&gt;
Clear current initiative  (any number that is not a valid token offset will work).
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setCurrentInitiative(-1)]
[h: setCurrentInitiative(999)]
&lt;/source&gt;

}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setGMName</title>
    <ns>0</ns>
    <id>159</id>
    <revision>
      <id>3395</id>
      <parentid>3394</parentid>
      <timestamp>2009-06-04T06:15:46Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Completed the article.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="909">{{MacroFunction
|name=setGMName
|trusted=true
|version=1.3b49
|description=
Sets the GM Name of a token. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setGMName(name)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setGMName(name, id)
&lt;/source&gt;
'''Parameters'''
{{param|name|A string that is set as the GM Name on the token.}}
{{param|id|The token id of the token that has its GM Name set. Defaults to the [[Current Token]].}}

|examples=
Sets the GM Name of the [[Current Token]] to {{code|New GM Name}}.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setGMName(&quot;New GM Name&quot;)]
&lt;/source&gt;

Sets the GM Name of all selected tokens to {{code|New GM Name}}.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: SelectedTokens = getSelected()]
[h,foreach(TokenID, SelectedTokens), code:
{
[h: setGMName(&quot;New GM Name&quot;, TokenID)]
}]
&lt;/source&gt;

|also=
{{func|getGMName}}

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}
}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setGMNotes</title>
    <ns>0</ns>
    <id>160</id>
    <revision>
      <id>2851</id>
      <parentid>1960</parentid>
      <timestamp>2009-04-04T21:31:17Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="222">{{MacroFunction
|name=setGMNotes
|trusted=true
|version=1.3b48
|description=
Sets the [[GM]] notes of the [[Current Token]]. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setGMNotes(notes)
&lt;/source&gt;
}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setHalo</title>
    <ns>0</ns>
    <id>161</id>
    <revision>
      <id>2465</id>
      <parentid>1663</parentid>
      <timestamp>2009-03-31T00:31:06Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1164">{{MacroFunction
|name=setHalo
|version=1.3b49
|description=
Sets the [[Halo]] color of a [[Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setHalo(color)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setHalo(color, id)
&lt;/source&gt;
'''Parameters'''
{{param|color|The color to set the [[Halo]] to, valid values are:
** {{code|&quot;Black&quot;}}
** {{code|&quot;Green&quot;}}
** {{code|&quot;Yellow&quot;}}
** {{code|&quot;Orange&quot;}}
** {{code|&quot;Red&quot;}}
** {{code|&quot;Cyan&quot;}}
** {{code|&quot;Magenta&quot;}}
** {{code|&quot;White&quot;}}
** A hexadecimal color value in the format {{code|&quot;#RRGGBB&quot;}}
** {{code|&quot;None&quot;}} }}
{{param|id|The token {{code|id}} of the token that has its [[Halo]] set by this function. {{TrustedParameter}} }}

|examples=
To remove the [[Halo]] from the [[Current Token]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setHalo(&quot;None&quot;)]
&lt;/source&gt;

To set the [[Halo]] for the [[Current Token]] to red.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setHalo(&quot;Red&quot;)]
&lt;/source&gt;

To set the [[Halo]] from the [[Current Token]] to a custom color
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setHalo(&quot;#33AAFF&quot;)]
&lt;/source&gt;

|also=
[[Halo]],
[[getHalo|getHalo()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}
}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setHasSight</title>
    <ns>0</ns>
    <id>162</id>
    <revision>
      <id>5575</id>
      <parentid>2852</parentid>
      <timestamp>2011-07-19T13:57:28Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="397">{{MacroFunction
|name=setHasSight
|version=1.3b48
|description=
Sets if the [[Current Token]] has [[Token:Sight|Sight]] or not. If the argument is 0 the [[Current Token]] does not have [[Token:Sight|Sight]] if it is non zero then it does.

You can not set the [[Token:Sight|Sight]] of a [[NPC Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setHasSight(val)
&lt;/source&gt;
}}
[[Category:Sight Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setInitiative</title>
    <ns>0</ns>
    <id>163</id>
    <revision>
      <id>2853</id>
      <parentid>1889</parentid>
      <timestamp>2009-04-04T21:32:26Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="325">{{stub}}
{{MacroFunction
|name=setInitiative
|version=1.3b41
|description=
Sets the [[Initiative:Initiative|Initiative]] of the [[Current Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setInitiative(val)
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setInitiative(1d20)]
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setInitiativeHold</title>
    <ns>0</ns>
    <id>164</id>
    <revision>
      <id>2854</id>
      <parentid>1887</parentid>
      <timestamp>2009-04-04T21:33:05Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="472">{{stub}}
{{MacroFunction
|name=setInitiativeHold
|version=1.3b41
|description=
Sets if the [[Current Token]] is [[Initiative:on hold|on hold]] in the [[Initiative:Initiative Panel|Initiative Panel]]. If the value passed is non zero then the [[Current Token]] is placed [[Initiative:on hold|on hold]], if it is 0 it is removed from [[Initiative:on hold|on hold]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setInitiativeHold(value)
&lt;/source&gt;

}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setInitiativeRound</title>
    <ns>0</ns>
    <id>165</id>
    <revision>
      <id>7166</id>
      <parentid>1676</parentid>
      <timestamp>2019-03-03T01:05:46Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="301">{{stub}}
{{MacroFunction
|name=setInitiativeRound
|trusted=true
|description=
Sets the current [[Initiative:round|round]] number in the [[Initiative:Initiative Panel|Initiative Panel]]. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setInitiativeRound(round)]
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1>i5opsgv2c6km7zs1iry2bgzivhs9sg6</sha1>
    </revision>
  </page>
  <page>
    <title>setLabel</title>
    <ns>0</ns>
    <id>166</id>
    <revision>
      <id>2507</id>
      <parentid>1679</parentid>
      <timestamp>2009-03-31T05:12:46Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="592">{{stub|Examples of usage.}}
{{MacroFunction
|name=setLabel
|version=1.3b48
|description=
Sets the [[Token Label]] of a specific [[Token]]. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setLabel(label)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setLabel(label, id)
&lt;/source&gt;
'''Parameters'''
{{param|label|The string that the [[Token Label]] is set to.}}
{{param|id|The token {{code|id}} of the token that has its label set, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|also=
{{func|getLabel}}

|changes=
{{change|1.3b51|Add {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setLayer</title>
    <ns>0</ns>
    <id>167</id>
    <revision>
      <id>7164</id>
      <parentid>3331</parentid>
      <timestamp>2019-03-02T23:36:17Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1130">{{MacroFunction
|name=setLayer
|trusted=true
|version=1.3b48
|description=
Sets the [[Map Layer]] that a [[Token]] is on.

The [[Map Layer]] is one of:
* {{code|TOKEN}}
* {{code|GM}} also known as Hidden
* {{code|OBJECT}}
* {{code|BACKGROUND}}
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setLayer(layer)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setLayer(layer, id)
&lt;/source&gt;
'''Parameters'''
{{param|layer|The layer to move the [[Token]] to.}}
{{param|id|The token {{code|id}} of the token which has its layer set, defaults to the [[Current Token]].}}

|examples=
When an NPC token is dead, send it to the Object layer, otherwise leave it where it is.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: layerName = getLayer()]
[h: layerName = if(state.Dead&amp;&amp;isNPC(), &quot;OBJECT&quot;, layerName)]
[h: setLayer(layerName)]
&lt;/source&gt;

Toggle a token between the Hidden and Token layers.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: layerName = getLayer()]
[h: layerName = if(layerName==&quot;GM&quot;, &quot;TOKEN&quot;, &quot;GM&quot;)]
[h: setLayer(layerName)]
&lt;/source&gt;

|also=
[[getLayer|getLayer()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1>2vauiuumyrm8rxs8b8wpwbd2m7db6pq</sha1>
    </revision>
  </page>
  <page>
    <title>setLibProperty</title>
    <ns>0</ns>
    <id>168</id>
    <revision>
      <id>7129</id>
      <parentid>6377</parentid>
      <timestamp>2019-03-01T03:51:39Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1076">{{MacroFunction
|name=setLibProperty
|version=1.3b48
|description=
Sets the [[Token:token_property|Token Property]] on a [[Token:library_token|Library Token]]. if the name of the [[Token:library_token|Library Token]] is not specified then the [[Token:token_property|Token Property]] is set on the [[Token:library_token|Library Token]] that the macro is running from.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setLibProperty(name, value)
setLibProperty(name, value, libName)
&lt;/source&gt;

|examples=
Set a property on the [[Token:library_token|Library Token]] that the macro is running from.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setLibProperty(&quot;defaultStrength&quot;, 10)]
&lt;/source&gt;

Set a property on a specifig [[Token:library_token|Library Token]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setLibProperty(&quot;defaultStrength&quot;, 10, &quot;Lib:Character&quot;)]
&lt;/source&gt;

Known Bug: note that using setLibProperty during onCampaignLoad and not being on the map where the lib resides, will result in a duplicate of that lib on the current map!

}}
[[Category:Property Function]]
[[Category:Token Library Function]]</text>
      <sha1>anljpidxvq1djhp5gaksjwz6wdvacbh</sha1>
    </revision>
  </page>
  <page>
    <title>setLight</title>
    <ns>0</ns>
    <id>169</id>
    <revision>
      <id>7130</id>
      <parentid>1970</parentid>
      <timestamp>2019-03-01T03:52:25Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="640">{{MacroFunction
|name=setLight
|version=1.3b48
|description=
Sets the [[Map:light source|light source]]s of the [[Token:Current Token|Current Token]]. If the value is 0 then the [[Map:light source|light source]] is turned off; otherwise, it is turned on.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setLight(type, name, value)
&lt;/source&gt;
Where 
* type is the [[LightSource:type |type of light source]] (e.g. &quot;Generic&quot; or &quot;D20&quot;). 
* name is the name of the [[LightSource:Light Source|Light Source]] to change (e.g. &quot;Candle - 5&quot;).

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setLight(&quot;D20&quot;, &quot;Candle - 5&quot;, 1)]
&lt;/source&gt;
}}
[[Category:Light Function]]</text>
      <sha1>5a3aqcasqrmbex6skhv5qs8jxfyoq9j</sha1>
    </revision>
  </page>
  <page>
    <title>setMacroCommand</title>
    <ns>0</ns>
    <id>170</id>
    <revision>
      <id>2459</id>
      <parentid>2147</parentid>
      <timestamp>2009-03-31T00:00:56Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="995">{{MacroFunction
|name=setMacroCommand
|trusted=true
|version=1.3b48
|description=
Sets the command that will be run when the [[Token:Macro Button|Macro Button]] is pressed.  Note because of the way the parser interprets values within [] you may have to use the [[Macros:Functions:encode| encode()]] and [[Macros:Functions:decode|decode()]] functions with the string.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMacroCommand(index, command)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMacroCommand(index, command, id)
&lt;/source&gt;
'''Parameters'''
{{param|index|The index of the macro button.}}
{{param|command|A string containing the command to set on the macro button.}}
{{param|id|The token {{code|id}} of the token that the command is set on.}}

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setMacroCommand(1, &quot;[macro('Test@Lib:Test'): '']&quot;)]
&lt;/source&gt;

|changes=
{{change|1.3b49|Changed to a trusted function.}}
{{change|1.3b51|Added {{code|id}} parameter option.}}
}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setMacroProps</title>
    <ns>0</ns>
    <id>171</id>
    <revision>
      <id>3729</id>
      <parentid>2927</parentid>
      <timestamp>2009-07-23T22:00:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3888">{{stub|Examples using the new functionality.}}
{{MacroFunction
|name=setMacroProps
|version=1.3b48
|description=
Sets the properties for the specified [[Token:Macro Button|Macro Button]] on the [[Current Token]] . The properties are passed to this function as a [[String Property List]]. This function accepts either a [[Token:Macro Button Index|Macro Button Index]] or the label of a [[Token:Macro Button|Macro Button]]. If it is a label then all of [[Token:Macro Button|Macro Button]]s on the [[Current Token]] with a matching label are changed.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMacroProps(index, props)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMacroProps(index, props, delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMacroProps(index, props, delim, id)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMacroProps(label, props)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMacroProps(label, props, delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMacroProps(label, props, delim, id)
&lt;/source&gt;
'''Parameters'''
{{param|index|The index of the macro button.}}
{{param|label|The label of the macro button.}}
{{param|props|A [[String Property List]] or [[JSON Object]] containing the properties for the button.
** {{code|applyToSelected}} - Should the macro be applied to the selected tokens.
** {{code|autoExecute}} - If the macro will be automatically executed when the button is clicked, accepts {{true}} or {{false}}.
** {{code|color}} - The name of the color for the button.
** {{code|command}} - The command for the macro (only when using JSON version of function).
** {{code|fontColor}} - The name of the font color for the button.
** {{code|fontSize}} - The size of the font for the button.
** {{code|includeLabel}} - If the label will be output when the button is clicked. Accepts {{true}} or {{false}}.
** {{code|group}} - The name of the group that the button belongs to.
** {{code|sortBy}} - The sort by value of the macro button.
** {{code|label}} - The label for the button.
** {{code|maxWidth}} - The maximum width of the button.
** {{code|minWidth}} - The minimum width of the button.
** {{code|playerEditable}} - Is the button player editable, accepts {{true}} or {{false}}.
** {{code|tooltip}} - The tool tip for the macro button.
** {{code|compare}} - Takes a [[JSON Array]] which can contain one or more of the following keywords (only usable with JSON version of the function).
*** {{code|applyToSelected}} - Use the macro applyToSelected for common macro comparisons.
*** {{code|autoExecute}} - Use the macro autoExec for common macro comparisons.
*** {{code|command}} - Use the macro command for common macro comparisons.
*** {{code|group}} - Use the macro group for common macro comparisons.
*** {{code|includeLabel}} - Use the macro includeLabel for common macro comparisons.
*** {{code|sortPrefix}} - Use the macro sortPrefix for common macro comparisons.}}
{{param|delim|The delimiter used in the [[String Property List]] that is sent to the {{code|props}} parameter, defaults to {{code|&quot;;&quot;}} and can be omitted if you are sending a [[JSON Object]] to the {{code|props}} parameter. If you are sending a [[JSON Object]] to the {{code|props}} parameter, and using the {{code|id}} parameter, you can set this to {{code|&quot;json&quot;}}.}}
{{param|id|The token {{code|id}} of the token that the macro button is located on. {{TrustedParameter}} }}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setMacroProps(1, &quot;color=red;fontColor=white&quot;)]
[h: setMacroProps(&quot;Attack&quot;, &quot;color=red;fontColor=white&quot;)]
&lt;/source&gt;

|changes=
{{change|1.3b49|Added ability for {{code|props}} to accept a JSON object.}}
{{change|1.3b51|Added {{code|id}} parameter option.}}
{{change|1.3b53|Added ability for {{code|command}}, {{code|compare}}, {{code|playerEditable}}, {{code|applyToSelected}}, {{code|autoExecute}}, {{code|group}}, and {{code|tooltip}} parameters.}}

}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setName</title>
    <ns>0</ns>
    <id>172</id>
    <revision>
      <id>3096</id>
      <parentid>2856</parentid>
      <timestamp>2009-04-14T18:51:48Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="478">{{stub}}
{{MacroFunction
|name=setName
|version=1.3b40
|description=
Sets the name of a [[Token]]. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setName(name)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setName(name, id)
&lt;/source&gt;
'''Parameter'''
{{param|name|The name to set on the current token.}}
{{param|id|The token {{code|id}} of the token which has its name set. {{TrustedParameter}} }}

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setNotes</title>
    <ns>0</ns>
    <id>173</id>
    <revision>
      <id>3830</id>
      <parentid>2857</parentid>
      <timestamp>2009-09-07T23:02:45Z</timestamp>
      <contributor>
        <username>Hawke</username>
        <id>55</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="252">{{stub}}
{{MacroFunction
|name=setNotes
|version=1.3b48
|description=
Sets the [[Token:notes|notes]] of the [[Current Token]]. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setNotes(notes)]
&lt;/source&gt;
}}


See also [[getNotes]]

[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setPC</title>
    <ns>0</ns>
    <id>174</id>
    <revision>
      <id>2485</id>
      <parentid>2483</parentid>
      <timestamp>2009-03-31T02:41:34Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="531">{{stub|Examples of usage.}}
{{MacroFunction
|name=setPC
|trusted=true
|version=1.3b48
|description=
Sets a [[Token]] to a [[PC Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setPC()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setPC(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of the token which has its PC status set, defaults to the [[Current Token]].}}

|also=
[[isPC|isPC()]], 
[[isNPC|isNPC()]], 
[[setNPC|setNPC()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setProperty</title>
    <ns>0</ns>
    <id>175</id>
    <revision>
      <id>6035</id>
      <parentid>4102</parentid>
      <timestamp>2012-11-20T18:45:57Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Token Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1846">{{MacroFunction
|name=setProperty
|version=1.3b48
|description=
Sets the value of a [[Token Property]] on the [[Current Token]] (unless trusted, in which case a Token ID can be supplied to indicate which token is to be affected).

Note that if there is not already an existing property by the name listed in the macro, setProperty will create a new Token Property with that name.  Any created Property will not be visible in the Properties tab of the Edit Token window but can still be used like normal.  It's value can be retrieved with the getProperty command.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setProperty(property, value)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setProperty(property, value, id)
&lt;/source&gt;
'''Parameters'''
{{param|property|A string containing the name of the property that has its value set.}}
{{param|value|The value that the property is set to.}}
{{param|id|The token {{code|id}} of the token which has its property set, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|examples=
Sets a property named {{code|Health}} to the value of {{code|10}} on the [[Current Token]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setProperty(&quot;Health&quot;, 10)]
&lt;/source&gt;

Sets a property named {{code|Fatigue}} to the value of {{code|5}} on the selected token.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setProperty(&quot;Fatigue&quot;, 5, getSelected())]
&lt;/source&gt;

Sets a property named {{code|Strength}} to the value of {{code|20}} on the selected token using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: Property = &quot;Strength&quot;]
[h: Value = 20]
[h: ID = getSelected()]
[h: setProperty(Property, Value, ID)]
&lt;/source&gt;

|also=
[[getProperty|getProperty()]], 
[[resetProperty|resetProperty()]], 
[[isPropertyEmpty|isPropertyEmpty()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Property Function]][[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setPropertyType</title>
    <ns>0</ns>
    <id>176</id>
    <revision>
      <id>6036</id>
      <parentid>2478</parentid>
      <timestamp>2012-11-20T18:47:41Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Token Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="654">{{stub|Examples of usage.}}
{{MacroFunction
|name=setPropertyType
|version=1.3b48
|description=
Sets the [[Property Type]] of a [[Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setPropertyType(type)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setPropertyType(type, id)
&lt;/source&gt;
''Parameters'''
{{param|type|The property type to set on the token.}}
{{param|id|The token {{code|id}} of the token which has its property type set, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|also=
[[getPropertyType|getPropertyType()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Property Function]][[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setSightType</title>
    <ns>0</ns>
    <id>177</id>
    <revision>
      <id>2858</id>
      <parentid>1967</parentid>
      <timestamp>2009-04-04T21:35:13Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="242">{{stub}}
{{MacroFunction
|name=setSightType
|version=1.3b48
|description=
Sets the type of [[Token:sight|sight]] that the [[Current Token]] has.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setSightType(type)
&lt;/source&gt;
}}
[[Category:Sight Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setSize</title>
    <ns>0</ns>
    <id>178</id>
    <revision>
      <id>7122</id>
      <parentid>7121</parentid>
      <timestamp>2019-02-27T04:53:30Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4245">{{MacroFunction
|name=setSize
|trusted=true
|version=1.3b48
|description=
Sets the [[Size]] of a [[Token]].

==Grid Sizes and Scales==

The valid sizes for each type of grid are documented below, where '''Medium''' is always 1 full grid cell.  The '''Scale''' is a multiplier for the size of the image after configuring it to fit within the stated footprint.  For example, the {{code|Huge}} size on a square grid occupies a 3x3 cell area and the image is scaled ('''1.0''') to exactly fit that area.  But the {{code|Large}} size on a hex grid is 3 hexes scaled down 10% ('''0.9''') so as to keep the image slightly within the border of the 3 cells.

&lt;table class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse: collapse; float: left; margin-right: 2em&quot;&gt;
&lt;tr style=&quot;background-color:#e0ddd5&quot;&gt;&lt;th&gt;Hex Grid&lt;/th&gt;&lt;th&gt;Scale&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|1/6}}&lt;/td&gt;&lt;td&gt;0.408&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|1/4}}&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|1/3}}&lt;/td&gt;&lt;td&gt;0.577&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|1/2}}&lt;/td&gt;&lt;td&gt;0.707&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|2/3}}&lt;/td&gt;&lt;td&gt;0.816&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Medium}}&lt;/td&gt;&lt;td&gt;1.0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Large}}&lt;/td&gt;&lt;td&gt;0.9 (3 cells)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Huge}}&lt;/td&gt;&lt;td&gt;1.0 (6 cells)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Humongous}}&lt;/td&gt;&lt;td&gt;1.0 (19 cells)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;table class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse: collapse&quot;&gt;
&lt;tr style=&quot;background-color:#e0ddd5&quot;&gt;&lt;th&gt;Square Grid&lt;/th&gt;&lt;th&gt;Scale&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Fine}}&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Diminutive}}&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Tiny}}&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Small}}&lt;td&gt;0.75&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Medium}}&lt;td&gt;1.0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Large}}&lt;td&gt;1.0 (2x2)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Huge}}&lt;td&gt;1.0 (3x3)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Gargantuan}}&lt;td&gt;1.0 (4x4)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|Colossal}}&lt;td&gt;1.0 (6x6)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;br clear=&quot;clear&quot; /&gt;

&lt;table class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse: collapse; margin-top: 1em&quot;&gt;
&lt;tr style=&quot;background-color:#e0ddd5&quot;&gt;&lt;th&gt;Gridless&lt;/th&gt;&lt;th&gt;Scale&lt;/th&gt;&lt;th&gt;Gridless&lt;/th&gt;&lt;th&gt;Scale&lt;/th&gt;&lt;th&gt;Gridless&lt;/th&gt;&lt;th&gt;Scale&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|-11}} &lt;td&gt;0.086 &lt;/td&gt;&lt;td&gt;{{code|0}} &lt;/td&gt;&lt;td&gt;1.0   &lt;/td&gt;&lt;td&gt;{{code|11}} &lt;td&gt;7.43&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|-10}} &lt;td&gt;0.107 &lt;/td&gt;&lt;td&gt;{{code|1}} &lt;/td&gt;&lt;td&gt;1.2   &lt;/td&gt;&lt;td&gt;{{code|12}} &lt;td&gt;8.916&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|-9}} &lt;td&gt;0.134  &lt;/td&gt;&lt;td&gt;{{code|2}} &lt;/td&gt;&lt;td&gt;1.44  &lt;/td&gt;&lt;td&gt;{{code|13}} &lt;td&gt;10.699&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|-8}} &lt;td&gt;0.168  &lt;/td&gt;&lt;td&gt;{{code|3}} &lt;/td&gt;&lt;td&gt;1.728 &lt;/td&gt;&lt;td&gt;{{code|14}} &lt;td&gt;12.839&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|-7}} &lt;td&gt;0.21   &lt;/td&gt;&lt;td&gt;{{code|4}} &lt;/td&gt;&lt;td&gt;2.074 &lt;/td&gt;&lt;td&gt;{{code|15}} &lt;td&gt;15.407&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|-6}} &lt;td&gt;0.262  &lt;/td&gt;&lt;td&gt;{{code|5}} &lt;/td&gt;&lt;td&gt;2.488 &lt;/td&gt;&lt;td&gt;{{code|16}} &lt;td&gt;18.488&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|-5}} &lt;td&gt;0.328  &lt;/td&gt;&lt;td&gt;{{code|6}} &lt;/td&gt;&lt;td&gt;2.986 &lt;/td&gt;&lt;td&gt;{{code|17}} &lt;td&gt;22.186&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|-4}} &lt;td&gt;0.41   &lt;/td&gt;&lt;td&gt;{{code|7}} &lt;/td&gt;&lt;td&gt;3.583 &lt;/td&gt;&lt;td&gt;{{code|18}} &lt;td&gt;26.623&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|-3}} &lt;td&gt;0.512  &lt;/td&gt;&lt;td&gt;{{code|8}} &lt;/td&gt;&lt;td&gt;4.3   &lt;/td&gt;&lt;td&gt;{{code|19}} &lt;td&gt;31.948&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|-2}} &lt;td&gt;0.64   &lt;/td&gt;&lt;td&gt;{{code|9}} &lt;/td&gt;&lt;td&gt;5.16  &lt;/td&gt;&lt;td&gt;{{code|20}} &lt;td&gt;38.338&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;{{code|-1}} &lt;td&gt;0.8    &lt;/td&gt;&lt;td&gt;{{code|10}} &lt;/td&gt;&lt;td&gt;6.192&lt;/td&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

{{Clarify|It would be nice to include pictures that demonstrate how the grid cells are composed; at least for the hex grids.}}

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setSize(size)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setSize(size, id)
&lt;/source&gt;
'''Parameters'''
{{param|size|The [[Size]] to set the token to.}}
{{param|id|The token {{code|id}} of the token which has its [[Size]] set, defaults to the [[Current Token]].}}

{{note|If the token is in '''Free size''' or '''Native size''' you will get an error when you use 'setSize' on the token.}}

|examples=
To set the size of the current token to {{code|Medium}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setSize(&quot;Medium&quot;)]
&lt;/source&gt;

To set the size of the current token to whatever string is stored in the macro variable '''mySize''':
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: mySize = &quot;Large&quot;]
[h: setSize(mySize)]
&lt;/source&gt;

|also=
{{func|getSize}}

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1>q3xy98sg2lt0alfd9hhmruoof3rbtxd</sha1>
    </revision>
  </page>
  <page>
    <title>setSpeech</title>
    <ns>0</ns>
    <id>179</id>
    <revision>
      <id>2859</id>
      <parentid>2009</parentid>
      <timestamp>2009-04-04T21:35:31Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="240">{{stub}}
{{MacroFunction
|name=setSpeech
|version=1.3b48
|description=
Sets the [[Token:speech|speech]] value from the [[Current Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setSpeech(name, value)
&lt;/source&gt;
}}
[[Category:Speech Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setState</title>
    <ns>0</ns>
    <id>180</id>
    <revision>
      <id>2860</id>
      <parentid>2473</parentid>
      <timestamp>2009-04-04T21:36:03Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Unifying Current Token red link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1184">{{stub|Examples using new functionality.}}
{{MacroFunction
|name=setState
|version=1.3b40
|description=
Sets the value of the [[State]] on [[Token]]. If The value is {{false}} then the [[State]] is unset if it is non-zero({{true}}) then it is set.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setState(state, value)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setState(state, value, id)
&lt;/source&gt;
'''Parameters'''
{{param|state|The name of the state to set on the token.}}
{{param|value|The value of the state to set, {{code|true}}({{code|1}}) or {{code|false}}({{code|0}}).}}
{{param|id|The token {{code|id}} of the token which has its [[State]] set, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|examples=
To set the &quot;Dead&quot; [[Token:state|Token State]] on the [[Current Token]]
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setState(&quot;Dead&quot;, 1)]
&lt;/source&gt;

To reset the &quot;Dead&quot; [[Token:state|Token State]] on the [[Current Token]]
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setState(&quot;Dead&quot;, 0)]
&lt;/source&gt;

|also=
[[State]],
[[getState|getState()]],
[[setAllStates|setAllStates()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:State Function]]
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setStrProp</title>
    <ns>0</ns>
    <id>181</id>
    <revision>
      <id>2813</id>
      <parentid>2812</parentid>
      <timestamp>2009-04-04T03:44:57Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added params and see also, explained examples.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1158">{{MacroFunction
|name=setStrProp
|version=1.3b42
|description=
Returns a [[String Property List]] with the key set to the value passed in. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setStrProp(propList, key, value)
&lt;/source&gt;
'''Parameters'''
{{param|propList|The [[String Property List]] affected by this function.}}
{{param|key|The key in the specified [[String Property List]] that will have its value set.}}
{{param|value|The value that the specified key will be set to.}} 

|examples=
Add a new key to an existing [[String Property List]]:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: weapon = &quot;name=longsword; damage=1d8; maxdamage=8&quot;]
[h: weapon = setStrProp(weapon, &quot;value&quot;, 10)]
[r: weapon]
&lt;/source&gt;
Returns {{code|&quot;name{{=}}longsword ; damage{{=}}1d8 ; maxdamage{{=}}8 ; value{{=}}10 ; &quot;}}

Change the value of a key in an existing [[String Property List]]:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: weapon = &quot;name=longsword; damage=1d8; maxdamage=8&quot;]
[h: weapon = setStrProp(weapon, &quot;damage&quot;, &quot;1d6&quot;)]
[r: weapon]
&lt;/source&gt;
Returns {{code|&quot;name{{=}}longsword ; damage{{=}}1d6 ; maxdamage{{=}}8 ; &quot;}}

|also=
{{func|getStrProp}}
}}
[[Category:String Property List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setTokenImage</title>
    <ns>0</ns>
    <id>182</id>
    <revision>
      <id>5609</id>
      <parentid>2861</parentid>
      <timestamp>2011-07-24T08:55:06Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="674">{{MacroFunction
|name=setTokenImage
|version=1.3b48
|description=
Sets the image for the for the [[Current Token]]. The image can come from several sources. It can come from a function that returns an [[asset id]] such as [[Macros:Functions:tblImage |tblImage()]] or [[Macros:Functions:getTokenImage|getTokenImage()]]. Or it could come from a [[Image Token|Image Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenImage(assetId)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenImage(tokenImageName)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setTokenImage(tblImage(&quot;elfImages&quot;, 1))]
[h: setTokenImage(&quot;image:Elf-Dead&quot;)]
&lt;/source&gt;
}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setVisible</title>
    <ns>0</ns>
    <id>183</id>
    <revision>
      <id>4329</id>
      <parentid>4328</parentid>
      <timestamp>2010-07-22T22:54:50Z</timestamp>
      <contributor>
        <username>WikiSysop</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/Meghan|Meghan]] ([[User talk:Meghan|Talk]]) to last version by [[User:Verisimilar|Verisimilar]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1072">{{stub|Examples of usage.}}
{{MacroFunction
|name=setVisible
|trusted=true
|version=1.3b40
|description=
Sets the [[Visible to Players]] flag on a [[Token]] if the value passed in is non-zero({{true}}), otherwise resets it to {{false}}. The [[Visible to Players]] flag has two meanings, on a normal [[Token]] players will only be able to see the [[Token]] if it is set (when all other things like [[Fog of War]] etc are taken into account). If it is a [[Library Token]] then it determines if players can call [[:Category:Macro]]s using the [[Macros:Branching_and_Looping| [macro(...): ...] ]] roll option.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setVisible(visible)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setVisible(visible, id)
&lt;/source&gt;
'''Parameters'''
{{param|visible|The state of visibility, {{true}} or {{false}}.}}
{{param|id|The token {{code|id}} of the token which has its player visibility set, defaults to the [[Current Token]].}}

|also=
[[getVisible|getVisible()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>sortInitiative</title>
    <ns>0</ns>
    <id>184</id>
    <revision>
      <id>5576</id>
      <parentid>1890</parentid>
      <timestamp>2011-07-19T13:59:31Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="354">{{stub}}
{{MacroFunction
|name=sortInitiative
|trusted=true
|version=1.3b41
|description=
Sorts the [[Initiative:Initiative Panel|Initiative Panel]] [[Token]]s and returns the number of [[Token]]s in the [[Initiative:Initiative Panel|Initiative Panel]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
sortInitiative()
&lt;/source&gt;
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:sqr</title>
    <ns>0</ns>
    <id>185</id>
    <redirect title="square" />
    <revision>
      <id>1740</id>
      <parentid>437</parentid>
      <timestamp>2009-03-09T04:47:38Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirected to square</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[square]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>square</title>
    <ns>0</ns>
    <id>186</id>
    <revision>
      <id>1738</id>
      <parentid>1737</parentid>
      <timestamp>2009-03-09T04:47:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:square]] moved to [[square]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="331">{{MacroFunction
|name=square
|description=
Returns the [[wp:Square_(algebra)|square]] of a number.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: num = square(num)]
[h: num = sqr(num)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: square(5)]
[r: square(6)]
&lt;/source&gt;
Returns 
    25
    36
}}
[[category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:sqrt</title>
    <ns>0</ns>
    <id>187</id>
    <redirect title="squareroot" />
    <revision>
      <id>1745</id>
      <parentid>439</parentid>
      <timestamp>2009-03-09T04:49:58Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirected to squareroot</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[squareroot]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>squareroot</title>
    <ns>0</ns>
    <id>188</id>
    <revision>
      <id>1743</id>
      <parentid>1742</parentid>
      <timestamp>2009-03-09T04:49:35Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:squareroot]] moved to [[squareroot]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="346">{{MacroFunction
|name=squareroot
|description=
Returns the [[wp:Square_root|square root]] of a number.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: num = squareroot(num)]
[h: num = sqrt(num)]
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: squareroot(9)]
[r: squareroot(81)]
&lt;/source&gt;
Returns 
    3
    9
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>strformat</title>
    <ns>0</ns>
    <id>189</id>
    <revision>
      <id>6162</id>
      <parentid>6010</parentid>
      <timestamp>2013-06-29T20:44:41Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>added clarification that Java implements this function directly, and added link to Java documentation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8391">{{MacroFunction
|name=strformat
|version=1.3b48
|description=
Returns a string formatted based on the escape sequences in the passed string and optional arguments.

The format string can contain special instructions that are introduced with the {{code|%}} symbol. There are two different approaches to using {{code|strformat}}.

(This function is directly implemented by Java.  You can find more details on the syntax of the format [http://docs.oracle.com/javase/6/docs/api/java/util/Formatter.html#syntax here].  In particular, that page documents the '''argument_index''' modifier which isn't specified here, and MapTool numbers are converted to {{code|BigInteger}}'s when formatting integers and {{code|BigDecimal}}'s when formatting floating point values.)

====Simple words====
Simply said this means that it facilitates creating a string (sentences) which consists out of variables or even string operations. Its especially useful if you want to store the string first into a variable. 
The most common method is concatenation:

&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h:target = &quot;Orc&quot;]
  [h:tok = token.name]
  [h:hit = 2d6]
  [h:output = tok + &quot;hits the &quot; + target + &quot; for: &quot; + hit + &quot;wounds.&quot;]
  [r:output]
&lt;/source&gt;
Using {{code|strformat}} this becomes (just replacing line 4):

&lt;source lang=&quot;mtmacro&quot;&gt;
  [h:output = strformat(&quot;%{tok} hits the %{target} for: %{hit} wounds.&quot;)]
&lt;/source&gt;
Or the other method if you do not wish to create variables first:
&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h:target = &quot;Orc&quot;]
  [h:output = strformat(&quot;%s hits the %{target} for: %d wounds.&quot;, token.name, 2d6)]
&lt;/source&gt;
So why would you use this over the concatenation method? Four reasons:
# its cleaner (easier to read),
# its faster (though barely noticeable),
# you can embed the whole operation inside a function call and
# it has lots and lots of formatting options.
====Formatting by Data Type====

The most general use of {{code|strformat}} is to pass a format string first, followed by a list of parameters. Each parameter is matched against the corresponding marker in the format string. Any characters in the format string that are not markers are treated as literal text to be output.

  %(+0x

The first character is the percent sign ({{code|%}}). This denotes a format marker. All text up to the next alphabetic character is part of the marker. In the string above (the {{code|%(+0x}}), each character represents one type of option.

{{{!}} border=&quot;1&quot;
! Option Representation
! Applies to...
! Literal Values
{{!}}-
{{!}} valign=&quot;top&quot; align=&quot;center&quot; {{!}} '''%'''
{{!}} valign=&quot;top&quot; {{!}} All
{{!}} {{code|%}} identifies the beginning of a format marker.
{{!}}-
{{!}} valign=&quot;top&quot; align=&quot;center&quot; {{!}} '''('''
{{!}} valign=&quot;top&quot; {{!}} Numeric
{{!}} {{code|(}} will cause the numeric value to be enclosed in parentheses if it's negative.
{{!}}-
{{!}} valign=&quot;top&quot; align=&quot;center&quot; rowspan=&quot;2&quot; {{!}} '''+'''
{{!}} valign=&quot;top&quot; {{!}} Numeric
{{!}} {{code|+}} indicates that all numeric values, positive or negative, will have a preceding sign.
{{!}}-
{{!}} valign=&quot;top&quot; {{!}} All
{{!}} {{code|-}} indicates that the value to be formatted should be left-justified within the specified field.
{{!}}-
{{!}} valign=&quot;top&quot; align=&quot;center&quot; rowspan=&quot;2&quot; {{!}} '''0'''
{{!}} valign=&quot;top&quot; {{!}} String
{{!}} ''digits'' indicates the field width for this format marker. This field may contain a decimal point and additional digits to signify the maximum number of characters from the parameter that will be used.
{{!}}-
{{!}} valign=&quot;top&quot; {{!}} Numeric
{{!}} ''digits'' indicates the field width for this format marker. If ''digits'' starts with a literal '''0''' (zero), the numeric value being formatted will be zero-filled within the field instead of space-filled. If the format type is floating point, this field may contain a decimal point and additional digits to signify the number of digits after the decimal in the output.
{{!}}-
{{!}} valign=&quot;top&quot; align=&quot;center&quot; {{!}} '''x'''
{{!}} valign=&quot;top&quot; {{!}} All
{{!}} ''type'' is one of the alphabetic characters from the table below. The ''type'' identifies the basic characteristics of how the corresponding parameter will be displayed.
{{!}}}

====Format Types (conversion characters)====

The following format types are supported (lower case format arguments perform the same conversion as the lowercase letters but return the result in uppercase).

{{{!}} border=&quot;1&quot;
! Format Type
! Data Type
! Description
{{!}}-
{{!}} valign=&quot;top&quot; {{!}} '''%h, %H, %x, %X'''
{{!}} Integer
{{!}} Inserts the hexadecimal representation.
{{!}}-
{{!}} valign=&quot;top&quot; {{!}} '''%s, %S'''
{{!}} String
{{!}} Inserts the string representation.
{{!}}-
{{!}} valign=&quot;top&quot; {{!}} '''%d'''
{{!}} Integer
{{!}} Inserts the decimal representation.
{{!}}-
{{!}} valign=&quot;top&quot; {{!}} '''%e, %E'''
{{!}} Numeric
{{!}} Inserts the floating point value in scientific notation.
{{!}}-
{{!}} valign=&quot;top&quot; {{!}} '''%f'''
{{!}} Numeric
{{!}} Inserts the floating point value in fixed-point notation.
{{!}}-
{{!}} valign=&quot;top&quot; {{!}} '''%g, %G'''
{{!}} Numeric
{{!}} Inserts the floating point value in computerized scientific notion or fixed-point format.
{{!}}-
{{!}} valign=&quot;top&quot; {{!}} '''%a, %A'''
{{!}} Numeric
{{!}} Inserts the floating point value as a hexadecimal floating-point number with a significand and an exponent.
{{!}}-
{{!}} valign=&quot;top&quot; {{!}} '''%%'''
{{!}} -
{{!}} Inserts a literal percent symbol.
{{!}}-
{{!}} valign=&quot;top&quot; {{!}} '''%n'''
{{!}} -
{{!}} Inserts a newline.
{{!}}}

====Formatting by Embedding Variables====

This type of formatting does not control how the contents of a variable are displayed except that those contents are put into the output at a specific point in the data.

In this style, a single {{code|%}} is followed by a set of braces {{code|&quot;{&quot;}} and {{code|&quot;}&quot;}} with a variable name inside them.

This technique can be mixed with the usage of {{code|strformat}} as shown above.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
strformat(string)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
strformat(string, arg, ...)
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [h: weaponName = &quot;Long Sword&quot;]
    [h: maxDam = 8]
    [r: strformat(&quot;Weapon Name=%{weaponName}; Max Damage=%{maxDam}&quot;)]
&lt;/source&gt;
Returns:
 Weapon Name=Long Sword; Max Damage=8


&lt;source lang=&quot;mtmacro&quot; line&gt;
    [h: weaponName = &quot;Long Sword&quot;]
    [h: maxDam = 8]
    [r: strformat(&quot;Weapon Name=%s; Max Damage=%d&quot;, weaponName, maxDam)]
&lt;/source&gt;
Returns the same result as the previous:
 Weapon Name=Long Sword; Max Damage=8


&lt;source lang=&quot;mtmacro&quot; line&gt;
    [h: weaponName = &quot;Long Sword&quot;]
    [h: maxDam = 8]
    [r: strformat(&quot;Weapon Name='%12s'; Max Damage=%04d&quot;, weaponName, maxDam)]
&lt;/source&gt;
Returns the same data but formatted. Note how there are two additional spaces in front of the weapon name this time?  That's because the field width was specified as {{code|12}} in the format marker so the function generated 2 spaces and then the 10 characters from the variable. Also note that {{code|04}} caused the damage field to be 4 digits filled with leading zeroes. Take out the {{code|0}} from {{code|04}} and the output would still include 4 characters, but it would've been space-filled instead of zero-filled.
 Weapon Name='  Long Sword'; Max Damage=0008


&lt;source lang=&quot;mtmacro&quot; line&gt;
    [h: weaponName = &quot;Long Sword&quot;]
    [h: maxDam = 8]
    [h: style=&quot;background-color: yellow&quot; ]
    [r: strformat(&quot;&lt;table&gt;&lt;tr style='%{style}'&gt;&lt;td&gt;%{weaponName}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%.0f&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;,
           maxDam*1.5)]
&lt;/source&gt;
Combining the two techniques is often convenient as show here. Note that {{code|maxDam}} is multiplied by 1&amp;frac12; and this could result in a fractional component. Such floating point values '''must''' be displayed using one of the floating point format types. (Otherwise the error will be {{code|f !{{=}} java.lang.BigInteger}} because an integer was provided where a float was expected and it's telling you that the {{code|f}} type doesn't apply to integers. A similar message is displayed if you try to display a floating point value as a decimal.)


&lt;source lang=&quot;mtmacro&quot; line&gt;
    [strformat(&quot;%f&quot;, -10.502)] [strformat(&quot;%g&quot;, -10.502)]
    [strformat(&quot;%+e&quot;, -10.502)] [strformat(&quot;%5.1f&quot;, -10.502)]
    [strformat(&quot;%(5.1f&quot;, -10.502)]
&lt;/source&gt;
Returns:
    -10.502000 
    -10.5020 
     -1.050200e+01 
    -10.5 
    (10.5)
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>string</title>
    <ns>0</ns>
    <id>190</id>
    <revision>
      <id>2012</id>
      <parentid>1758</parentid>
      <timestamp>2009-03-10T13:34:09Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="184">{{MacroFunction
|name=string
|version=1.3b48
|description=
Returns the argument as a string.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
string(val)
&lt;/source&gt;
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>stringToList</title>
    <ns>0</ns>
    <id>191</id>
    <revision>
      <id>1918</id>
      <parentid>1761</parentid>
      <timestamp>2009-03-10T11:31:13Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="758">{{MacroFunction
|name=stringToList
|version=1.3b48
|description=
Converts a string into a [[Macros:string list|string list]] using a pattern to determine separator between elements. The specified delimiter is used to separate the elements in the [[Macros:string list]] if it is specified, otherwise the default value of &quot;,&quot; is used.  Pattern can be a [[Macros:regular expression|regular expression]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
stringToList(str, pattern)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
stringToList(str, pattern, delim)
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [stringToList(&quot;This is a test&quot;, &quot; &quot;)]
    [stringToList(&quot;1,2,3,4&quot;, &quot;,&quot;, &quot;:&quot;)]
&lt;/source&gt;
Returns 
    This,is,a,test
    1:2:3:4
}}
[[Category:String List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>strfind</title>
    <ns>0</ns>
    <id>192</id>
    <revision>
      <id>5879</id>
      <parentid>5778</parentid>
      <timestamp>2012-02-17T15:52:54Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Typographical tweaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2096">{{MacroFunction
|name=strfind
|version=1.3b48
|description=
Finds and extracts substrings from a string. {{code|strfind()}} is used to match a pattern against an input string and extract all of the capture groups. The function returns an id which can be used with other functions to extract the information. The supplied pattern is a [[Macros:regular expression|regular expression]]. 

Functions related to {{code|strfind()}}:
* [[Macros:Functions:getFindCount|getFindCount(id)]]
* [[Macros:Functions:getGroupCount|getGroupCount(id)]]
* [[Macros:Functions:getGroup|getGroup(id, matchNo, groupNo)]]
* [[Macros:Functions:getGroupStart|getGroupStart(id, matchNo, groupNo)]]
* [[Macros:Functions:getGroupEnd|getGroupEnd(id, matchNo, groupNo)]]

Both {{code|groupNo}} and {{code|matchNo}} start at 1, the special group number {{code|0}} returns the whole pattern match.
''Groups'' are the regex parts in {{code|&quot;(&quot;}} parenthesis {{code|&quot;)&quot;}}, so 1 returns the string that matches the first regex statement in {{code|()}}, 2 returns the second, etc.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
strfind(str,  pattern)
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [h: id = strfind(&quot;This is a really useless test&quot;, &quot;(\\S+)\\s+(\\S+)\\s*&quot;)] 
    [r: getGroupCount(id)]
    [r: getFindCount(id)] 
    [r: getGroup(id, 1, 1)]  
    [r: getGroup(id, 2, 2)]
&lt;/source&gt;
Returns:
    2 
    3 
    This 
    really 
    This is


A slightly more usefull and advanced example:
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:id = strfind(&quot;Command-20, Sleight of Hand 10, Knowledge (Arcana) +5&quot;, &quot;([^,]*?)\\s?([-+]?\\d+)(,|\$)&quot;)]
&lt;b&gt;First group&lt;/b&gt;&lt;br&gt;
[r,count(getFindCount(id), &quot;&lt;b&gt;Next group&lt;/b&gt;&lt;br&gt;&quot;), code: {
	&quot;[r:getGroup(id, roll.count+1, 0)]&quot; &lt;br&gt;
	&quot;[r:getGroup(id, roll.count+1, 1)]&quot; &lt;br&gt;
	&quot;[r:getGroup(id, roll.count+1, 2)]&quot; &lt;br&gt;
} ] &lt;/source&gt;
Returns:
    '''First group''' 
    &quot;Command-20,&quot; 
    &quot;Command&quot; 
    &quot;-20&quot; 
    '''Next group''' 
    &quot; Sleight of Hand 10,&quot; 
    &quot; Sleight of Hand&quot; 
    &quot;10&quot; 
    '''Next group''' 
    &quot; Knowledge (Arcana) +5&quot; 
    &quot; Knowledge (Arcana)&quot; 
    &quot;5&quot;
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>substring</title>
    <ns>0</ns>
    <id>193</id>
    <revision>
      <id>1919</id>
      <parentid>1767</parentid>
      <timestamp>2009-03-10T11:32:33Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="581">{{MacroFunction
|name=substring
|version=1.3b48
|description=
Returns the substring of the string from the start to the end indexes. Indexes for strings start at 0. If the end parameter is not specified then the substring extends to the end of the string.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
substring(str, start)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
substring(str, start, end)
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [substring(&quot;This is a test&quot;, 5)]
    [substring(&quot;This is a test&quot;, 5, 7)]
&lt;/source&gt;
Returns 
    is a test
    is
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>subtract</title>
    <ns>0</ns>
    <id>194</id>
    <revision>
      <id>1770</id>
      <parentid>1769</parentid>
      <timestamp>2009-03-09T05:26:34Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:subtract]] moved to [[subtract]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="499">{{MacroFunction
|name=subract
|description=
Subtracts the second number from the first number. Then will continue by subtracting the third number (if any from this result), the function continues subtracting until all number arguments are exhausted.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: num = subtract(num, num, ...)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [r: subtract(10, 2, 4)]
    [r: subtract(9, 10, 3)]
&lt;/source&gt;
Returns 
    4
    -4
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>sum</title>
    <ns>0</ns>
    <id>195</id>
    <redirect title="add" />
    <revision>
      <id>1036</id>
      <parentid>1033</parentid>
      <timestamp>2009-03-06T22:15:54Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:sum]] moved to [[sum]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="80">#REDIRECT [[add]]
[[Category:Mathematical Function]]
[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>switchToken</title>
    <ns>0</ns>
    <id>196</id>
    <revision>
      <id>5623</id>
      <parentid>4050</parentid>
      <timestamp>2011-07-24T10:37:48Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="816">{{MacroFunction
|name=switchToken
|trusted=true
|version=1.3b48
|description=
Changes the [[Current Token]] for the remainder of the Macro.
&lt;p&gt;In practice, &quot;the remainder of the Macro&quot; is the same as the variable scope. Thus, if a macro is running as a user defined function (see {{func|defineFunction}}  ) with a new scope, switchToken will only apply until the end of the current macro. Once control passes back to the calling macro, the [[Current Token]] reverts back to what it was before the external macro was called ( as a function ).
If a {{func|defineFunction}} does not create a new variable scope for the called macro, then effects of switchToken persist when control passes back to the calling macro.&lt;/p&gt;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
switchToken(tokenId)
&lt;/source&gt;
}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>table</title>
    <ns>0</ns>
    <id>197</id>
    <revision>
      <id>6720</id>
      <parentid>6719</parentid>
      <timestamp>2016-05-03T15:08:51Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2371">{{MacroFunction
|name=table
|version=1.3b39
|description=
Gets the text value from the specified {{code|table}}. If the row is not specified then the default {{code|roll}} for the {{code|table}} is used. The row can be either a constant or a {{code|roll}}.

Note that what this function returns is interpreted as either a string or a number. You can put code in a table entry but that too will be returned as a string and will not be evaluated. To evaluate the result you can use {{func|eval}} to evaluate e.g. the table entry {{code|1d5}} and {{func|evalMacro}} to evaluate e.g. the table entry {{code|[r:1d5]}}

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
table(name)
table(name, row)
tbl(name)
tbl(name, row)
&lt;/source&gt;
'''Parameters'''
* {{code|name}} - A string containing the name of the [[Table|table]].
* {{code|row}} - The row of the [[Table|table]] that should be returned.

|examples=
'''Example 1:''' Display a random value from table {{code|&quot;tbl1&quot;}} using default roll:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: table(&quot;tbl1&quot;)]
&lt;/source&gt;

'''Example 2:''' Display the first value from table {{code|&quot;tbl1&quot;}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: table(&quot;tbl1&quot;, 1)]
&lt;/source&gt;

'''Example 3:''' Display one of the first four values from {{code|&quot;tbl1&quot;}}, chosen randomly:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: table(&quot;tbl1&quot;, &quot;1d4&quot;)]
&lt;/source&gt;

'''Example 4:''' Display a table row that corresponds to a token property's value (the value must be numeric):
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: table(&quot;tbl1&quot;, Intelligence)]
[r: table(&quot;tbl1&quot;, getProperty(&quot;PCLevel&quot;))]
&lt;/source&gt;

'''Example 5:''' Evaluate the outcome of a table entry. The table entry '''must''' thus be something that can be evaluated, like {{code|1d10}} or {{code|roll(1,6)}} or {{code|3+5}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: eval(table(&quot;tbl1&quot;))]
&lt;/source&gt;

'''Example 5:''' Evaluate the outcome of a table entry that contains code. The table entry '''can''' thus contain code, but its not required. 'code' in this case is anything between [brackets]. An example table entry could be ''[h:roll=1d20]You [r:if(roll&lt;10, 'hit', 'miss')] your target.'' :
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: evalMacro(table(&quot;tbl1&quot;))]
&lt;/source&gt;

|also=
{{func|tableImage}}

There is a tool available to import tables from excel. You can find more about this [http://forums.rptools.net/viewtopic.php?f=3&amp;t=11568#p124557 here]

}}
[[Category:Table Function]]</text>
      <sha1>e44fy78f9evhy4o89axbu3pzdvs5txe</sha1>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:tbl</title>
    <ns>0</ns>
    <id>198</id>
    <redirect title="table" />
    <revision>
      <id>2022</id>
      <parentid>1779</parentid>
      <timestamp>2009-03-10T22:03:36Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[table (function)]] has been moved, it is now a redirect to [[table]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[table]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>tableImage</title>
    <ns>0</ns>
    <id>199</id>
    <revision>
      <id>6718</id>
      <parentid>6657</parentid>
      <timestamp>2016-05-03T12:59:20Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1353">{{MacroFunction
|name=tableImage
|version=1.3b40
|description=
Gets the image asset value from the specified [[Table|table]]. If the row is not specified then the default [[Roll|roll]] for the [[Table|table]] is used.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
tableImage(name)
tableImage(name, row)
tableImage(name, row, size)
tblImage(name)
tblImage(name, row)
tblImage(name, row, size)
&lt;/source&gt;
'''Parameters'''
* {{code|name}} - A string containing the name of the [[Table|table]].
* {{code|row}} - The row of the [[Table|table]] that should have the image asset returned.
* {{code|size}} - The size the image asset returned should be. If the image is not square, this will be the size of the height.

|examples=
'''Example 1:''' Display a random image from [[Table|table]] {{code|&quot;tbl1&quot;}} using default [[Roll|roll]]:
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;image src='[r: tableImage(&quot;tbl1&quot;)]'&gt;&lt;/image&gt;
&lt;/source&gt;

'''Example 1:''' Display the first image from [[Table|table]] {{code|&quot;tbl1&quot;}}: 
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;image src='[r: tableImage(&quot;tbl1&quot;, 1)]'&gt;&lt;/image&gt;
&lt;/source&gt;

'''Example 2:''' Display one of the first four images, resized to {{code|40}} pixels tall, from {{code|&quot;tbl1&quot;}}, chosed randomly:
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;image src='[r: tableImage(&quot;tbl1&quot;, &quot;1d4&quot;, 40)]'&gt;&lt;/image&gt;
&lt;/source&gt;

|also=
{{func|table}}
}}
[[Category:Table Function]]</text>
      <sha1>tgr5n5rqga82l03qpvnsmd62egcg0f4</sha1>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:tblImage</title>
    <ns>0</ns>
    <id>200</id>
    <redirect title="tableImage" />
    <revision>
      <id>1784</id>
      <parentid>458</parentid>
      <timestamp>2009-03-09T05:35:11Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[Macros:Functions:tableImage]] has been moved, it is now a redirect to [[tableImage]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[tableImage]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>trim</title>
    <ns>0</ns>
    <id>201</id>
    <revision>
      <id>3350</id>
      <parentid>1925</parentid>
      <timestamp>2009-05-11T07:55:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="634">{{MacroFunction
|name=trim
|version=1.3b48
|description=
Returns a copy of the string that is passed in with the leading and trailing white space removed.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
trim(str)
&lt;/source&gt;
'''Parameter'''
{{param|str|The string that has its leading and trailing white space removed.}}

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: &quot;:&quot; + trim(&quot;     this is a test&quot;) + &quot;:&quot;]
[r: &quot;:&quot; + trim(&quot;this is a test      &quot;) + &quot;:&quot;]
[r: &quot;:&quot; + trim(&quot;     this is a test       &quot;) + &quot;:&quot;]
&lt;/source&gt;
Returns 
    :this is a test:
    :this is a test:
    :this is a test:

|also=
{{func|substring}}

}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>upper</title>
    <ns>0</ns>
    <id>202</id>
    <revision>
      <id>2215</id>
      <parentid>1921</parentid>
      <timestamp>2009-03-25T07:54:31Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="504">{{MacroFunction
|name=upper
|version=1.3b48
|description=
Returns the upper case version of a string. If the number of characters is not specified then the whole string is converted to upper case.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
upper(str)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
upper(str, numChars)
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: upper(&quot;this Is a Test&quot;)]
[r: upper(&quot;this Is a Test&quot;, 1)]
&lt;/source&gt;
Returns 
   THIS IS A TEST
   This Is a Test
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>varsFromStrProp</title>
    <ns>0</ns>
    <id>203</id>
    <revision>
      <id>2149</id>
      <parentid>1910</parentid>
      <timestamp>2009-03-23T00:02:17Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="840">{{stub|Documentation on how the decor(suffixed/unsuffixed) parameter works.}}
{{MacroFunction
|name=varsFromStrProp
|version=1.3b42
|description=
Creates variables from a [[Macros:string property list|string property list]] with the values assigned to variables with the names of the keys in the [[Macros:string property list|string property list]]. The function returns the number of variables that were created.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
varsFromStrProp(props)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
varsFromStrProp(props, decor)
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [h: varsFromStrProp(&quot;a=blah; b=doh; c=meh&quot;)][r: a] [r: b] [r: c]
&lt;/source&gt;
Returns 
    blah doh meh

|changes=
{{change|1.3b49|Added {{code|suffixed}} or {{code|unsuffixed}} parameter option.}}

}}
[[Category:String Property List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:list of functions</title>
    <ns>0</ns>
    <id>204</id>
    <redirect title="Category:Macro Function" />
    <revision>
      <id>2067</id>
      <parentid>464</parentid>
      <timestamp>2009-03-11T01:12:09Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated redirect.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[:Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:list of functions by area</title>
    <ns>0</ns>
    <id>205</id>
    <redirect title="Category:Macro Function" />
    <revision>
      <id>1796</id>
      <parentid>875</parentid>
      <timestamp>2009-03-09T05:49:12Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirected to Category:Macro Function</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[:Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Tutorials</title>
    <ns>0</ns>
    <id>206</id>
    <redirect title="Category:Tutorial" />
    <revision>
      <id>2587</id>
      <parentid>2361</parentid>
      <timestamp>2009-04-01T04:12:58Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to Tutorial category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[:Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:FirstDailog.png</title>
    <ns>6</ns>
    <id>207</id>
    <revision>
      <id>471</id>
      <timestamp>2008-12-14T13:03:49Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:FirstDialog.png</title>
    <ns>6</ns>
    <id>208</id>
    <revision>
      <id>472</id>
      <timestamp>2008-12-14T13:05:19Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:FirstFrame.png</title>
    <ns>6</ns>
    <id>209</id>
    <revision>
      <id>473</id>
      <timestamp>2008-12-14T13:08:25Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:FirstFrame-Docked.png</title>
    <ns>6</ns>
    <id>210</id>
    <revision>
      <id>474</id>
      <timestamp>2008-12-14T13:10:14Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:DialogTitle.png</title>
    <ns>6</ns>
    <id>211</id>
    <revision>
      <id>475</id>
      <timestamp>2008-12-14T13:12:59Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:DialogRefresh.png</title>
    <ns>6</ns>
    <id>212</id>
    <revision>
      <id>476</id>
      <timestamp>2008-12-14T13:15:56Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:CharSheetDialog1.png</title>
    <ns>6</ns>
    <id>213</id>
    <revision>
      <id>477</id>
      <timestamp>2008-12-14T13:25:04Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:CharSheetDialog2.png</title>
    <ns>6</ns>
    <id>214</id>
    <revision>
      <id>478</id>
      <timestamp>2008-12-14T13:33:59Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:CharSheetDialog3.png</title>
    <ns>6</ns>
    <id>215</id>
    <revision>
      <id>479</id>
      <timestamp>2008-12-14T13:36:31Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:CharSheetDialog4.png</title>
    <ns>6</ns>
    <id>216</id>
    <revision>
      <id>480</id>
      <timestamp>2008-12-14T13:51:17Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Dialogs and Frames</title>
    <ns>0</ns>
    <id>217</id>
    <revision>
      <id>6905</id>
      <parentid>5644</parentid>
      <timestamp>2017-09-25T06:36:57Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34462">[[Category:Tutorial]]{{Advanced}}
==An Introduction to MapTool Macro Dialogs and Frames==
Please note I will be using CSS and HTML in this tutorial but I will not really be explaining them, if you need a refresher on either a search on [http://www.google.com.au/search?q=HTML+and+CSS+Tutorials google] will point you to many resources that do a better job than I could.


The {{roll|dialog}} and {{roll|frame}} [[Macros:Roll:types|roll types]] create a new dialog or frame where all the output from the commands within the
{} will be displayed. dialog create a dialog box that hovers over other windows. frame creates a frame that can be docked like the other maptool windows. The dialog and frame windows can be used to display HTML and rolls the same as the chat output window.

This tutorial starts with the standard blank campaign you get when you start MapTool, anything else we need we will add along the way.

===First Steps===
So lets jump in and create your first dialog, you can use the code below to create a dialog.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[dialog(&quot;Test&quot;): {
  Your first dialog!
}]
&lt;/source&gt;
[[Image:FirstDialog.png|frame|center|Example Dialog]]

I know its pretty boring but before we start adding more to it lets create a frame so that you can see the difference
&lt;source lang=&quot;mtmacro&quot; line&gt;
[frame(&quot;Test&quot;): {
  Your first frame!
}]
&lt;/source&gt;
[[Image:FirstFrame.png|frame|center|Example Frame]]


And a picture of your first frame docked.


[[Image:FirstFrame-Docked.png|frame|center|Example Docked Frame]]

Back to the dialog you can spice it up a little with some [[Macros:Roll:types|dice rolls]] and HTML formatting.


&lt;source lang=&quot;mtmacro&quot; line&gt;
[dialog(&quot;Test&quot;): {
  &lt;b&gt;1d4&lt;/b&gt; -&gt; [1d4]&lt;br&gt;
  &lt;b&gt;1d6&lt;/b&gt; -&gt; [1d6]&lt;br&gt;
  &lt;b&gt;1d8&lt;/b&gt; -&gt; [1d8]&lt;br&gt;
  &lt;b&gt;1d10&lt;/b&gt; -&gt; [1d10]&lt;br&gt;
  &lt;b&gt;1d12&lt;/b&gt; -&gt; [1d12]&lt;br&gt;
  &lt;b&gt;1d20&lt;/b&gt; -&gt; [1d20]&lt;br&gt;
  &lt;b&gt;1d100&lt;/b&gt; -&gt; [1d100]&lt;br&gt;
}]
&lt;/source&gt;


===Adding Some HTML===
This will create a dialog box with some HTML formatting and [[Macros:Roll:types|dice rolls]]. The [[Macros:Roll:types|dice rolls]] will have all the tooltips that you would normally get in the chat output.

Still the title is boring (it defaults to the name of the dialog). You can use the HTML &lt;title&gt; tag to change the title. Run the
code below, there is no need to close the dialog from the code above.


&lt;source lang=&quot;mtmacro&quot; line&gt;
[dialog(&quot;Test&quot;): {
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Dice Roll Dialog&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;b&gt;1d4&lt;/b&gt; -&gt; [1d4]&lt;br&gt;
      &lt;b&gt;1d6&lt;/b&gt; -&gt; [1d6]&lt;br&gt;
      &lt;b&gt;1d8&lt;/b&gt; -&gt; [1d8]&lt;br&gt;
      &lt;b&gt;1d10&lt;/b&gt; -&gt; [1d10]&lt;br&gt;
      &lt;b&gt;1d12&lt;/b&gt; -&gt; [1d12]&lt;br&gt;
      &lt;b&gt;1d20&lt;/b&gt; -&gt; [1d20]&lt;br&gt;
      &lt;b&gt;1d100&lt;/b&gt; -&gt; [1d100]&lt;br&gt;
    &lt;/body&gt;
  &lt;/html&gt;
}]
&lt;/source&gt;

[[Image:DialogTitle.png|frame|center|Example Dice Roll Dialog]]

Notice that the dialog command did not open a new dialog window, instead it replaced the contents of the dialog you had open. When
you use [dialog()] with the name of a dialog that already exists the contents of that dialog are replaced, ([[frame_(roll_option)|[frame()]]] works the same way). You can use this behavior to update your dialogs. Create a token called [[Library_Token|Lib:Test]] with a macro (created on that lib:Test token) called Test

Copy the following code into the Test macro.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[dialog(&quot;Test&quot;): {
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Dice Roll Dialog&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;b&gt;1d4&lt;/b&gt; -&gt; [1d4]&lt;br&gt;
      &lt;b&gt;1d6&lt;/b&gt; -&gt; [1d6]&lt;br&gt;
      &lt;b&gt;1d8&lt;/b&gt; -&gt; [1d8]&lt;br&gt;
      &lt;b&gt;1d10&lt;/b&gt; -&gt; [1d10]&lt;br&gt;
      &lt;b&gt;1d12&lt;/b&gt; -&gt; [1d12]&lt;br&gt;
      &lt;b&gt;1d20&lt;/b&gt; -&gt; [1d20]&lt;br&gt;
      &lt;b&gt;1d100&lt;/b&gt; -&gt; [1d100]&lt;br&gt;
      &lt;br&gt;
      [macroLink(&quot;Refresh&quot;, &quot;Test@Lib:Test&quot;)]
    &lt;/body&gt;
  &lt;/html&gt;
}]
&lt;/source&gt;

[[Image:DialogRefresh.png|frame|center|Example Dice Roll Dialog with Refresh macroLink]]


The above macro uses the [[Macros:Functions:macroLink|macroLink()]] function to create a link that will call Test on [[Library_Token|Lib:Test]] when ever it is clicked (which will update the dialog with new rolls).

The above would be really useful if you needed a window that provided you with a bunch of dice rolls all the time. But I assume that is not
what most people will want to do with the dialogs.

Drag another [[Token|token]] out on to the map, and fill in the [[Token:token_property|token properties]]. We can create a simple character sheet with a dialog. On the [[Library_Token|Lib:Test]] token create a macro called CharSheet and paste the following code into it.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: propNames = &quot;Strength, Dexterity, Constitution, Intelligence, Wisdom, Charisma&quot;]
[dialog(&quot;CharSheetTest&quot;): {
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Character Sheet&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;table&gt;
        [foreach(prop, propNames, &quot;&quot;), code: {
          &lt;tr&gt;
            &lt;td&gt;[r: prop]&lt;/td&gt;
            &lt;td&gt;[r: getProperty(prop)]&lt;/td&gt;
          &lt;/tr&gt;
        }]
      &lt;/table&gt;
    &lt;/body&gt;
  &lt;/html&gt;
}]
&lt;/source&gt;

On the new [[Token]] that you placed on the map create a [[Macro_Button|macro button]] called CharSheet and paste the following into it.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[macro(&quot;CharSheet@Lib:Test&quot;): &quot;&quot;]
[abort(0)]
&lt;/source&gt;

Click on the new [[Macro_Button|macro button]].

===Now for a dash of CSS===

Again we are not going to set the world on fire with this character sheet dialog. Lets spice it up a little, I will show you how to use some CSS for formatting.

To use CSS you insert a link like the following into the HTML to be displayed.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[dialog(&quot;Test&quot;): {
    &lt;link rel='stylesheet' type='text/css' href='myCSS@Lib:Test'&gt;&lt;/link&gt;
}]
&lt;/source&gt;


Although you can (and probably should) use the [[Macros:Functions:getMacroLocation|getMacroLocation()]] function to make sure it comes from the same [[Library_Token|Lib:Token]] as the macro. So,

&lt;source lang=&quot;mtmacro&quot; line&gt;
[dialog(&quot;Test&quot;): {
    &lt;link rel='stylesheet' type='text/css' href='myCSS@[r: getMacroLocation()]'&gt;&lt;/link&gt;
}]
&lt;/source&gt;

Edit the CharSheet macro on the [[Library_Token|Lib:Test]] [[Token|Token]] and paste in the following.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: propNames = &quot;Strength, Dexterity, Constitution, Intelligence, Wisdom, Charisma&quot;]
[dialog(&quot;CharSheetTest&quot;): {
  &lt;html&gt;
    &lt;head&gt;
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;CharSheet_css@[r: getMacroLocation()]&quot;&gt;
      &lt;title&gt;Character Sheet&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;table id=&quot;stats&quot;&gt;
        &lt;tr&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Score&lt;/th&gt;
        &lt;/tr&gt;
        [h: class = &quot;oddRow&quot;]
        [foreach(prop, propNames, &quot;&quot;), code: {
          &lt;tr class=&quot;[r:class]&quot;&gt;
            &lt;td&gt;[r: prop]&lt;/td&gt;
            &lt;td&gt;[r: getProperty(prop)]&lt;/td&gt;
          &lt;/tr&gt;
          [h: class = if(class==&quot;oddRow&quot;, &quot;evenRow&quot;, &quot;oddRow&quot;)]
        }]
      &lt;/table&gt;
    &lt;/body&gt;
  &lt;/html&gt;
}]
&lt;/source&gt;

Also create a new [[Macro_Button|macro button]] on [[Library_Token|Lib:Test]] called CharSheet_css and paste the following CSS code into it.

&lt;source lang=&quot;mtmacro&quot; line&gt;
.oddRow { background-color: #FFFFFF }
.evenRow { background-color: #EEEEAA }
#stats th { background-color: #113311; color: #FFFFFF }
&lt;/source&gt;

Click on the CharSheet [[Macro_Button|macro button]] on your [[Token|Token]].

[[Image:CharSheetDialog2.png|frame|center|Simple Character Sheet with a Style Sheet]]

Looks much better already!

Getting better... Lets make some more changes.
Change the CharSheet macro on [[Library_Token|Lib:Test]] to

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: propNames = &quot;Strength, Dexterity, Constitution, Intelligence, Wisdom, Charisma&quot;]
[dialog(&quot;CharSheetTest&quot;): {
  &lt;html&gt;
    &lt;head&gt;
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;CharSheet_css@[r: getMacroLocation()]&quot;&gt;
      &lt;title&gt;Character Sheet&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;table&gt;
        &lt;tr&gt;
          &lt;td&gt;
            &lt;img src='[r: getTokenImage(100)]'&gt;&lt;/img&gt;
          &lt;/td&gt;
          &lt;td&gt;
            &lt;table id=&quot;stats&quot;&gt;
              &lt;tr&gt;
                &lt;th&gt;Name&lt;/th&gt;
                &lt;th&gt;Score&lt;/th&gt;
              &lt;/tr&gt;
              [h: class = &quot;oddRow&quot;]
              [foreach(prop, propNames, &quot;&quot;), code: {
                &lt;tr class=&quot;[r:class]&quot;&gt;
                  &lt;td&gt;[r: prop]&lt;/td&gt;
                  &lt;td&gt;[r: getProperty(prop)]&lt;/td&gt;
                &lt;/tr&gt;
                [h: class = if(class==&quot;oddRow&quot;, &quot;evenRow&quot;, &quot;oddRow&quot;)]
              }]
            &lt;/table&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
      &lt;hr&gt;
      &lt;table&gt;
        &lt;tr&gt;
          &lt;th&gt;Hit Points:&lt;/th&gt;
          &lt;td&gt;[r: HP]&lt;/td&gt;
          &lt;th&gt;Armor Class:&lt;/th&gt;
          &lt;td&gt;[r: AC]&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
    &lt;/body&gt;
  &lt;/html&gt;
}]
&lt;/source&gt;

[[Image:CharSheetDialog3.png|frame|center|Simple Character Sheet with Token Image]]

Looks much better already!

===And a Touch more formatting===


Ok in Edit-&gt;Campaign Properties, Token Properties Tab, Basic Token type, add the following properties
* *@MaxHP
* *@XP
* *@NextLevelXP


Then edit your [[Token]] and set some values in your new [[Token_Property|properties]].

Time to create a new  [[Macro_Button|macro button]] on the [[Library_Token|Lib:Test]] called TrafficLightBar and paste the following code into it.
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- ======================================================================
     ====
     ==== Outputs a red/yellow/green bar
     ====
     ==== Parameters (accepts a string property list with following keys)
     ====
     ====   MaxLen - Maximum length of status bar.
     ====   MaxValue - The &quot;Full&quot; value for the bar.
     ====   Value - The current value for the bar.
     ====   Label - The label for the bar.
     ====
     ====================================================================== --&gt;
&lt;!-- Set up the colors for our &quot;Traffic Lights&quot; --&gt;
[h: r0=200] [h: g0=200] [h: b0=200]
[h: r1=200] [h: g1=0]   [h: b1=0]
[h: r2=255] [h: g2=140] [h: b2=0]
[h: r3=0]   [h: g3=200] [h: b3=0]
[h: MaxLen=getStrProp(macro.args, &quot;MaxLen&quot;)]
[h: MaxValue=getStrProp(macro.args, &quot;MaxValue&quot;)]
[h: Value=getStrProp(macro.args, &quot;Value&quot;)]
[h: Label=getStrProp(macro.args, &quot;Label&quot;)]
[h: Len=max(min(round(Value*MaxLen/MaxValue+0.4999),MaxLen),0)]
[h: Len=if(Value&gt;=MaxValue,MaxLen, Len)]
[h: c=min(round(Value*3/MaxValue+0.4999),3)]
[h: col=min(max(Len,0),1)*c]
[h: r=eval(&quot;r&quot;+col)] [h: g=eval(&quot;g&quot;+col)] [h: b=eval(&quot;b&quot;+col)]
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;span title=&quot;{Value}/{MaxValue}&quot;&gt;{Label}&lt;/span&gt;&lt;/td&gt;
    &lt;td style=&quot;background-color: rgb({r},{g},{b})&quot;&gt;
      &lt;span title=&quot;{Value}/{MaxValue}&quot;&gt;[c(Len, &quot;&quot;),r: &quot;&amp;nbsp;&quot;]&lt;/span&gt;
    &lt;/td&gt;
    [if(MaxLen-Len&gt;0), code: {
      &lt;td style=&quot;background-color: rgb({r0},{g0},{b0})&quot;&gt;
        &lt;span title=&quot;{Value}/{MaxValue}&quot;&gt;[c(MaxLen-Len,&quot;&quot;),r: &quot;&amp;nbsp;&quot;]&lt;/span&gt;
      &lt;/td&gt;
    }]
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/source&gt;

Create another [[Macro_Button|macro button]] on [[Library_Token|Lib:Test]] called StatusBar and copy the following code into it.
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- ======================================================================
     ====
     ==== Outputs a &quot;progress&quot; bar
     ====
     ==== Parameters (accepts a string property list with following keys)
     ====
     ====   MaxLen - Maximum length of status bar.
     ====   MaxValue - The &quot;Full&quot; value for the bar.
     ====   Value - The current value for the bar.
     ====   Label - The label for the bar.
     ====   Color - R,G,B color
     ====
     ====================================================================== --&gt;
[h: r0=200] [h: g0=200] [h: b0=200]
[h: MaxLen=getStrProp(macro.args, &quot;MaxLen&quot;)]
[h: MaxValue=getStrProp(macro.args, &quot;MaxValue&quot;)]
[h: Value=getStrProp(macro.args, &quot;Value&quot;)]
[h: Color=getStrProp(macro.args, &quot;Color&quot;)]
[h: Label=getStrProp(macro.args, &quot;Label&quot;)]
[h: r1=listGet(Color,0)]
[h: g1=listGet(Color,1)]
[h: b1=listGet(Color,2)]
[h: Len=max(min(round(Value*MaxLen/MaxValue+0.4999),MaxLen),0)]
[h: c=min(round(Value/MaxValue+0.4999),1)]
[h: col=min(max(Len,0),1)*c]
[h: r=eval(&quot;r&quot;+col)] [h: g=eval(&quot;g&quot;+col)] [h: b=eval(&quot;b&quot;+col)]
[h: r=eval(&quot;r&quot;+col)] [h: g=eval(&quot;g&quot;+col)] [h: b=eval(&quot;b&quot;+col)]
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;span title=&quot;{Value}/{MaxValue}&quot;&gt;{Label}&lt;/span&gt;&lt;/td&gt;
    &lt;td style=&quot;background-color: rgb({r},{g},{b})&quot;&gt;
      &lt;span title=&quot;{Value}/{MaxValue}&quot;&gt;[c(Len, &quot;&quot;),r: &quot;&amp;nbsp;&quot;]&lt;/span&gt;
    &lt;/td&gt;
    [if(MaxLen-Len&gt;0), code: {
      &lt;td style=&quot;background-color: rgb({r0},{g0},{b0})&quot;&gt;
        &lt;span title=&quot;{Value}/{MaxValue}&quot;&gt;[c(MaxLen-Len,&quot;&quot;),r: &quot;&amp;nbsp;&quot;]&lt;/span&gt;
      &lt;/td&gt;
    }]
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/source&gt;

I am really going to gloss over the previous two functions a bit as they are not important to understanding how to use dialogs or frames, but so you know what they do TrafficLightBar creates a red/yellow/green bar where the color is based on how full the bar is. StatusBar just creates a bar that is one color.

Just a quick point for those who may not know this already, but when you call a macro with [[macro_(roll_option)|[macro(&quot;name&quot;): arguments]]] the arguments are available in the macro in the variable [[macro.args]]. To return a value from the macro you read the variable [[macro.return]], the calling macro can then read [[macro.return]] to get this value.

Then we change the CharSheet macro on [[Library_Token|Lib:Test]] to
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: propNames = &quot;Strength, Dexterity, Constitution, Intelligence, Wisdom, Charisma&quot;]
[dialog(&quot;CharSheetTest&quot;): {
  &lt;html&gt;
    &lt;head&gt;
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;CharSheet_css@[r: getMacroLocation()]&quot;&gt;
      &lt;title&gt;Character Sheet&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;table&gt;
        &lt;tr&gt;
          &lt;td&gt;
            &lt;img src='[r: getTokenImage(100)]'&gt;&lt;/img&gt;
          &lt;/td&gt;
          &lt;td&gt;
            &lt;table id=&quot;stats&quot;&gt;
              &lt;tr&gt;
                &lt;th&gt;Name&lt;/th&gt;
                &lt;th&gt;Score&lt;/th&gt;
              &lt;/tr&gt;
              [h: class = &quot;oddRow&quot;]
              [foreach(prop, propNames, &quot;&quot;), code: {
                &lt;tr class=&quot;[r:class]&quot;&gt;
                  &lt;td&gt;[r: prop]&lt;/td&gt;
                  &lt;td&gt;[r: getProperty(prop)]&lt;/td&gt;
                &lt;/tr&gt;
                [h: class = if(class==&quot;oddRow&quot;, &quot;evenRow&quot;, &quot;oddRow&quot;)]
              }]
            &lt;/table&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
      &lt;hr&gt;
      &lt;table&gt;
        &lt;tr&gt;
          &lt;td&gt;
            [h: hpBarArgs = strformat(&quot;MaxLen=50; Value=%{HP}; MaxValue=%{MaxHP}; Label=HP&quot;)]
            [macro(&quot;TrafficLightBar@this&quot;): hpBarArgs]
          &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;
            [h: hpBarArgs = strformat(&quot;MaxLen=50; Value=%{XP}; MaxValue=%{NextLevelXP}; Label=XP; Color=120,120,255&quot;)]
            [macro(&quot;StatusBar@this&quot;): hpBarArgs]
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
    &lt;/body&gt;
  &lt;/html&gt;
}]
&lt;/source&gt;


Click on the CharSheet [[Macro_Button|macro button]] on your [[Token]] again and you will have a new character sheet.

[[Image:CharSheetDialog4.png|frame|center|Simple Character Sheet with Progress Bars]]


The above example uses [[Macros:Functions:strformat|strformat()]] which allows you to insert variables in a string using the %{''var''} syntax. It also has other flags that can be used to format variable output

===Creating Support Functions===

Lets leave the character sheet at this for the moment and move on to a new example.

Edit-&gt;Campaign Properties, Token Properties Tab, Basic Token type, add the following properties
* Weapons
* Items


We are going to store our weapons in a [[String_Property_List|string property list]] with the following keys.
* NumWeapons - The number of weapons in our property list.
* UsingWeapon - The weapon we are currently using.
* WeaponXName - The name of weapon number X
* WeaponXDamage - The damage of weapon number X
* WeaponXBonus - The bonus of weapon number X

We could add a lot more, but lest keep it semi simple for this post.

The first thing we need is a way to enter weapons, we could use the [[input|input()]] function but since this is a tutorial on frames and dialogs, I should probably show you how to do it in a dialog.

But first we need to do some set up, when the player creates a new weapon we will need to get NumWeapons add 1 to it, save it back to the property and use that number (lets not worry about what happens if a player cancels the entry of the weapon as we are not really that worried if we have gaps in our numbering scheme). One problem is though what do we do first time around since the [[String_Property_List|string property list]] would be empty so trying to use the [[Token_Property|token property]] Weapons in strProp*() functions would result in the user being prompted for a value. We could add a default value in the campaign for the token, but there are also other methods. One thing we can do is use the [[isPropertyEmpty|isPropertyEmpty()]] function to check if the [[Token_Property|property]] is empty and if so use a initial value for it, or the [[getProperty|getProperty()]] function that will just return an empty string (&quot;&quot;) not
prompt if there is no [[Token_Property|property]].

So lets create a macro that returns the number of a new weapon. Create a [[Macro_Button|macro button]] called NextWeaponNumber and then paste the following code into it.

&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!--
  Returns the number for the next weapon as well as updating the
  the counter.
  --&gt;

&lt;!-- If Weapons token property is empty set it to a default value --&gt;
[h,if(isPropertyEmpty(&quot;Weapons&quot;)): Weapons = &quot;NumWeapons=0;&quot;]

[h: numWeapons = getStrProp(Weapons, &quot;NumWeapons&quot;) + 1]

&lt;!-- Now update our property --&gt;
[h: Weapons = setStrProp(Weapons, &quot;NumWeapons&quot;, numWeapons)]

&lt;!-- Finally set out return value --&gt;
[h: macro.return = numWeapons]
&lt;/source&gt;


You can test it by running the following code from chat a few times
&lt;source lang=&quot;mtmacro&quot; line&gt;
[macro(&quot;NextWeaponNumber@Lib:Test&quot;): &quot;&quot;] [macro.return]
&lt;/source&gt;


When you are done you can reset the weapon count simply by editing the [[Token_Property|token properties]] and clearing out the text for weapons.

Lets also make a [[Macro_Button|macro button]] called AddWeapon which takes a [[Macros:string property list|string property list]] with the following keys
* Name
* Damage
* Bonus
* Number

And adds or updates the weapon in the [[Macros:string property list|string property list]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!--
  Adds a weapon to the Weapons property list

  Parameters (in a string property list)
 
  Name = Name of Weapon
  Damage = Damage Weapon does
  Bonus = Bonus of Weapon
  Number = The index number of the Weapon
--&gt;
[h: num = getStrProp(macro.args, &quot;Number&quot;)]
[h: damage = getStrProp(macro.args, &quot;Damage&quot;)]
[h: name = getStrProp(macro.args, &quot;Name&quot;)]
[h: bonus = getStrProp(macro.args, &quot;Bonus&quot;)]
[h: Weapons = setStrProp(Weapons, strformat(&quot;Weapon%{num}Name&quot;), name)]
[h: Weapons = setStrProp(Weapons, strformat(&quot;Weapon%{num}Damage&quot;), damage)]
[h: Weapons = setStrProp(Weapons, strformat(&quot;Weapon%{num}Bonus&quot;), bonus)]
&lt;/source&gt;

You can test this macro too by a little typing at the command line.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[macro(&quot;AddWeapon@Lib:Test&quot;): &quot;Number=1; Damage=1d8; Name=LongSword; Bonus=0&quot;]
&lt;/source&gt;

Look at the Weapons [Token_Property|property]] and see how its built up our [[Macros:string property list|string property list]] for us. It wont have modified NumWeapons but that is ok we are going to assume that NextWeaponNumber is always used before adding a new weapon. Before clearing out the Weapons [[Token_Property|property]] to reset it lets write a function to retrieve a weapon.

Create a [[Macro_Button|macro button]] called GetWeapon on your [[Library_Token|Lib:Test]] [[Token]] and paste the following into it.
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!--
  Retrieves a weapon from the Weapons Property list.

  Parameters
    Weapon Number

  Returns
    A string property list with following keys
      Name = Name of Weapon
      Damage = Damage Weapon does
      Bonus = Bonus of Weapon
      Number = The index number of the Weapon
    If the weapon is not found then an empty string (&quot;&quot;) is returned.
--&gt;
[h: num = macro.args]
[h: damage = getStrProp(Weapons, strformat(&quot;Weapon%{num}Damage&quot;))]
[h: name = getStrProp(Weapons, strformat(&quot;Weapon%{num}Name&quot;))]
[h: bonus = getStrProp(Weapons, strformat(&quot;Weapon%{num}Bonus&quot;))]
[h, if(name == &quot;&quot;):
   macro.return = &quot;&quot;
;
   macro.return = strformat(&quot;Number=%{num}; Damage=%{damage}; Bonus=%{bonus}; Name=%{name}&quot;)
]
&lt;/source&gt;


Test it with
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h, macro(&quot;GetWeapon@Lib:Test&quot;): 1] [macro.return]
&lt;/source&gt;

Lets add a way to delete items. Create a [[Macro_Button|macro button]] called DeleteWeapon and paste the following code.
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- ============================================================ --&gt;
&lt;!-- ============================================================ --&gt;
&lt;!-- ============================================================ --&gt;
&lt;!--
  Deletes a weapon from the Weapons property List.

  Parameters
    The weapon number
--&gt;
[h: num = macro.args]
[h: Weapons = deleteStrProp(Weapons, strformat(&quot;Weapon%{num}Damage&quot;))]
[h: Weapons = deleteStrProp(Weapons, strformat(&quot;Weapon%{num}Name&quot;))]
[h: Weapons = deleteStrProp(Weapons, strformat(&quot;Weapon%{num}Bonus&quot;))]
&lt;/source&gt;

One more &quot;setup&quot; function then we should be good to go. Lets create a function that returns a [[Macros:string list|string list]] of all the item numbers
(remember we can have gaps because a user could cancel the addition of the item after calling NextWeaponNumber or they could delete a weapon).
Create a [[Macro_Button|macro button]] on [[Library_Token|Lib:Test]] called GetWeaponNumbers

&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!--
  Gets a string list of the valid weapon numbers
--&gt;
&lt;!-- If Weapons token property is empty set it to a default value --&gt;
[h,if(isPropertyEmpty(&quot;Weapons&quot;)): Weapons = &quot;NumWeapons=0;&quot;]

[h: maxNum = getStrProp(Weapons, &quot;NumWeapons&quot;)]
[h: wnumList=&quot;&quot;]
[h,c(maxNum), code: {
  [h: wnum = roll.count+1]
  [h: name = getStrProp(Weapons, strformat(&quot;Weapon%{wnum}Name&quot;))]
  [if(name != &quot;&quot;):
    wnumList = listAppend(string(wnumList), string(wnum))
  ]
}]
[h: macro.return = wnumList]
&lt;/source&gt;


The [[Macros:Functions:string|string()]] around the arguments in [[Macros:Functions:listAppend|listAppend()]] is to convert the
arguments to strings, as of b48 [[Macros:Functions:listAppend|listAppend()]] seems to have problems with arguments that could be interpreted as numbers.

===Input Dialogs===

So now we can get back to the dialogs. Lets create a dialog to edit weapons. Create a [[Macro_Button|macro button]] on your [[Library_Token|Lib:Test]] called EditWeaponDialog and paste the following into it.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[dialog(&quot;weaponInput&quot;): {
  [h: weaponNum = getStrProp(macro.args, &quot;Number&quot;)]
  [h: name = getStrProp(macro.args, &quot;Name&quot;)]
  [h: bonus = getStrProp(macro.args, &quot;Bonus&quot;)]
  [h: damage = getStrProp(macro.args, &quot;Damage&quot;)]
  &lt;!-- If we do not have a weapon number grab the next one --&gt;
  [h, if(weaponNum == &quot;&quot;), code: {
    [h,macro(&quot;NextWeaponNumber@this&quot;): &quot;&quot;]
    [h: weaponNum = macro.return]
  }]
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Edit Weapon Dialog&lt;/title&gt;
      &lt;meta name=&quot;input&quot; content=&quot;true&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;form name=&quot;weaponInput&quot; action=&quot;[r:macroLinkText('AddWeapon@Lib:Test')]&quot;&gt;
        &lt;table&gt;
          &lt;tr&gt;
            &lt;th&gt;
              &lt;label for=&quot;Name&quot;&gt;Weapon Name&lt;/label&gt;
            &lt;/th&gt;
            &lt;td&gt;
              &lt;input type=&quot;text&quot; name=&quot;Name&quot; value=&quot;[r: name]&quot;&gt;&lt;/input&gt; &lt;br&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;th&gt;
              &lt;label for=&quot;Damage&quot;&gt;Weapon Damage&lt;/label&gt;
            &lt;/th&gt;
            &lt;td&gt;
              &lt;input type=&quot;text&quot; name=&quot;Damage&quot; value=&quot;[r: damage]&quot;&gt;&lt;/input&gt; &lt;br&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;th&gt;
              &lt;label for=&quot;Bonus&quot;&gt;Weapon Bonus&lt;/label&gt;
            &lt;/th&gt;
            &lt;td&gt;
              &lt;input type=&quot;text&quot; name=&quot;Bonus&quot; value=&quot;[r: bonus]&quot;&gt;&lt;/input&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
          &lt;/table&gt;
        &lt;!-- hidden input with the weapon number --&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;Number&quot; value=&quot;[r: weaponNum]&quot;&gt;&lt;/input&gt;

        &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;Save&quot;&gt; &lt;/input&gt;
      &lt;/form&gt;
    &lt;/body&gt;
  &lt;/html&gt;
}]
&lt;/source&gt;

[[image:EditWeaponDialog1.png|frame|center|Edit Weapon Dialog]]


One thing to note is @this will not work in a macro link, so we build the @ portion of the macro to call when the form is submitted.

The action=... portion of the form tag specifies which macro to call when any submit button is pushed for the form. If the dialog is specified as a input dialog, the close button down the bottom is not displayed and when any form on the dialog is submitted it is closed.

The arguments to the macro that is called when the form is submitted is a string property list with the names of the input fields as the keys and the entered value as the values. Since I named all my inputs the same as the keys in the parameter for the AddWeaponMacro I can call that straight from the submit action on the form (some times is seems like I almost know what I am doing).

The only problem is our edit weapon is kinda plain compared to our character sheet so time to add a little bling.

Change your EditWeaponDialog [[Macro_Button|macro button]] on [[Library_Token|Lib:Test]] to
&lt;source lang=&quot;mtmacro&quot; line&gt;
[dialog(&quot;weaponInput&quot;): {
  [h: weaponNum = getStrProp(macro.args, &quot;Number&quot;)]
  [h: name = getStrProp(macro.args, &quot;Name&quot;)]
  [h: bonus = getStrProp(macro.args, &quot;Bonus&quot;)]
  [h: damage = getStrProp(macro.args, &quot;Damage&quot;)]
  &lt;!-- If we do not have a weapon number grab the next one --&gt;
  [h, if(weaponNum == &quot;&quot;), code: {
    [h,macro(&quot;NextWeaponNumber@this&quot;): &quot;&quot;]
    [h: weaponNum = macro.return]
  }]
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Edit Weapon Dialog&lt;/title&gt;
      &lt;meta name=&quot;input&quot; content=&quot;true&quot;&gt;
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;EditWeapon_css@[r: getMacroLocation()]&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;form name=&quot;weaponInput&quot; action=&quot;[r:macroLinkText('AddWeapon@Lib:Test')]&quot;&gt;
        &lt;table&gt;
          &lt;tr&gt;
            &lt;td&gt;
              &lt;table&gt;
                &lt;tr&gt;
                  &lt;th&gt;
                    &lt;label for=&quot;Name&quot;&gt;Weapon Name&lt;/label&gt;
                  &lt;/th&gt;
                  &lt;td&gt;
                    &lt;input type=&quot;text&quot; name=&quot;Name&quot; value=&quot;[r: name]&quot;&gt;
                    &lt;/input&gt; &lt;br&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;th&gt;
                    &lt;label for=&quot;Damage&quot;&gt;Weapon Damage&lt;/label&gt;
                  &lt;/th&gt;
                  &lt;td&gt;
                    &lt;input type=&quot;text&quot; name=&quot;Damage&quot; value=&quot;[r: damage]&quot;&gt;
                    &lt;/input&gt; &lt;br&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;th&gt;
                    &lt;label for=&quot;Bonus&quot;&gt;Weapon Bonus&lt;/label&gt;
                  &lt;/th&gt;
                  &lt;td&gt;
                    &lt;input type=&quot;text&quot; name=&quot;Bonus&quot; value=&quot;[r: bonus]&quot;&gt;
                    &lt;/input&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
              &lt;/table&gt;
            &lt;/td&gt;
            &lt;td&gt;
              &lt;img src='[r: getTokenImage(100)]'&gt;&lt;/img&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
        &lt;!-- hidden input with the weapon number --&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;Number&quot; value=&quot;[r: weaponNum]&quot;&gt;
        &lt;/input&gt;
        &lt;input id=&quot;saveButton&quot; type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;Save&quot;&gt;
        &lt;/input&gt;
      &lt;/form&gt;
    &lt;/body&gt;
  &lt;/html&gt;
}]
&lt;/source&gt;

And add [[Macro_Button|macro button]] EditWeapon_css to [[Library_Token|Lib:Test]] that contains
&lt;source lang=&quot;mtmacro&quot; line&gt;
body {
   background-color: #CCBBBB
}
&lt;/source&gt;

And you might as well add a AddWeapon [[Macro_Button|macro button]] to your [[Token]] that contains
&lt;source lang=&quot;mtmacro&quot; line&gt;
[macro(&quot;EditWeaponDialog@Lib:Test&quot;): &quot;&quot; ]
[abort(0)]
&lt;/source&gt;

Now our dialog looks like
[[Image:EditWeaponDialog2.png|frame|center|Edit Weapon Dialog with a Style Sheet]]

Ok now lets make a quick dialog to display our weapons. Create a new [[Macro_Button|macro button]] on your [[Library_Token|Lib:Test]] called ViewWeapons and paste in the following
&lt;source lang=&quot;mtmacro&quot; line&gt;
[dialog(&quot;Weapons&quot;): {
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Weapons&lt;/title&gt;
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ViewWeapon_css@[r: getMacroLocation()]&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
      [h,macro(&quot;GetWeaponNumbers@this&quot;): &quot;&quot;]
      [h: wpList = macro.return]
      &lt;table&gt;
        [foreach(weapon, wpList, &quot;&quot;), code: {
          [h,macro(&quot;GetWeapon@this&quot;): weapon]
          [h: wProp = macro.return]
          &lt;tr class=&quot;WeaponName&quot;&gt;
            &lt;th&gt;
              [r: getStrProp(wProp, &quot;Name&quot;)]
            &lt;/th&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;th&gt;Damage&lt;/th&gt;
            &lt;td&gt;[r: getStrProp(wProp, &quot;Damage&quot;)]&lt;/td&gt;
            &lt;th&gt;Bonus&lt;/th&gt;
            &lt;td&gt;[r: getStrProp(wProp, &quot;Bonus&quot;)]&lt;/td&gt;
          &lt;/tr&gt;
        }]
      &lt;/table&gt;
    &lt;/body&gt;
  &lt;/html&gt;
}]
&lt;/source&gt;

For good measure create a [[Macro_Button|macro button]] called ViewWeapon_css on [[Library_Token|Lib:Test]] paste in the following.
&lt;source lang=&quot;mtmacro&quot; line&gt;
.WeaponName {
    background-color: #55AA55;
    color: white;
    text-align: center;
}
&lt;/source&gt;

Add a [[Macro_Button|macro button]] to your [[Token]] called ViewWeapons which contains.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[macro(&quot;ViewWeapons@Lib:Test&quot;): &quot;&quot;]
[abort(0)]
&lt;/source&gt;


And this is what it looks like.
[[Image:ViewWeapons.png|frame|center|Weapon List Dialog]]

===Creating a Simple Character Sheet Frame===

Up until now I havent talked at all about frames, but don't worry , change {{roll|dialog}} to {{roll|frame}} above and it will work (except you cant have a frame that closes when you submit a form, what would be the point?).

But lets make some final changes to show some frames, I am going to make all of these in one go as everything in them has been discussed previously in this post.

First we are going to completely change the CharSheet [[Macro_Button|macro button]] on [[Library_Token|Lib:Test]] to 
&lt;source lang=&quot;mtmacro&quot; line&gt;
[frame(&quot;CharSheet&quot;): {
  [h: page = getStrProp(macro.args, &quot;Page&quot;)]
  [h,if(page==&quot;&quot;): page=&quot;Main&quot;]
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Character Sheet&lt;/title&gt;
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;CharSheet_css@[r: getMacroLocation()]&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
      [macro(&quot;CharSheetHeader@this&quot;): page]
      &lt;br&gt;
      [macro(&quot;CharSheet&quot;+page+&quot;@this&quot;): &quot;&quot;]
    &lt;/body&gt;
  &lt;/html&gt;
}]
&lt;/source&gt;

Create a CharSheetHeader [[Macro_Button|macro button]] on [[Library_Token|Lib:Test]] and paste the following into it.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: currentPage = macro.args]
[h: pages = &quot;Main,Weapons&quot;]
&lt;table&gt;
  &lt;tr&gt;
    [foreach(page, pages,&quot;&quot;), code: {
      [h,if (page == currentPage): class=&quot;currentPage&quot; ; class=&quot;page&quot;]
      [h: callback = &quot;CharSheet@&quot;+getMacroLocation()]
      &lt;td class=&quot;[r: class]&quot;&gt;
        [r: macroLink(page, callback, &quot;none&quot;, &quot;Page=&quot;+page)]
      &lt;/td&gt;
    }]
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/source&gt;

Create a CharSheetMain [[Macro_Button|macro button]] on [[Library_Token|Lib:Test]] and paste the following into it.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: propNames = &quot;Strength, Dexterity, Constitution, Intelligence, Wisdom, Charisma&quot;]
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src='[r: getTokenImage(100)]'&gt;&lt;/img&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;table id=&quot;stats&quot;&gt;
        &lt;tr&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Score&lt;/th&gt;
        &lt;/tr&gt;
        [h: class = &quot;oddRow&quot;]
        [foreach(prop, propNames, &quot;&quot;), code: {
          &lt;tr class=&quot;[r:class]&quot;&gt;
            &lt;td&gt;[r: prop]&lt;/td&gt;
            &lt;td&gt;[r: getProperty(prop)]&lt;/td&gt;
          &lt;/tr&gt;
          [h: class = if(class==&quot;oddRow&quot;, &quot;evenRow&quot;, &quot;oddRow&quot;)]
        }]
      &lt;/table&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      [h: hpBarArgs = strformat(&quot;MaxLen=50; Value=%{HP}; MaxValue=%{MaxHP}; Label=HP&quot;)]
      [macro(&quot;TrafficLightBar@this&quot;): hpBarArgs]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      [h: hpBarArgs = strformat(&quot;MaxLen=50; Value=%{XP}; MaxValue=%{NextLevelXP}; Label=XP; Color=120,120,255&quot;)]
      [macro(&quot;StatusBar@this&quot;): hpBarArgs]
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/source&gt;

Create a CharSheetWeapons [[Macro_Button|macro button]] on [[Library_Token|Lib:Test]] and paste the following into it.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h,macro(&quot;GetWeaponNumbers@this&quot;): &quot;&quot;]
[h: wpList = macro.return]
&lt;table&gt;
  [foreach(weapon, wpList, &quot;&quot;), code: {
    [h,macro(&quot;GetWeapon@this&quot;): weapon]
    [h: wProp = macro.return]
    &lt;tr class=&quot;WeaponName&quot;&gt;
      &lt;th&gt;
        [h: name = getStrProp(wProp, &quot;Name&quot;)]
        [h: bonus = getStrProp(wProp, &quot;Bonus&quot;)]
        [h: damage = getStrProp(wProp, &quot;Damage&quot;)]
        [h: callback = &quot;EditWeaponDialog@&quot; + getMacroLocation()]
        [h: args = strformat(&quot;Number=%{weapon}; Name=%{name}; Damage=%{damage}; Bonus=%{bonus}&quot;)]
        [r: macroLink(name, callback, &quot;none&quot;, args)]
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Damage&lt;/th&gt;
      &lt;td&gt;[r: getStrProp(wProp, &quot;Damage&quot;)]&lt;/td&gt;
      &lt;th&gt;Bonus&lt;/th&gt;
      &lt;td&gt;[r: getStrProp(wProp, &quot;Bonus&quot;)]&lt;/td&gt;
    &lt;/tr&gt;
  }]
&lt;/table&gt;
&lt;/source&gt;

And the last change to make is the CharSheet_css [[Macro_Button|macro button]] on [[Library_Token|Lib:Test]] an paste the following into it.
&lt;source lang=&quot;mtmacro&quot; line&gt;
.oddRow { background-color: #FFFFFF }
.evenRow { background-color: #EEEEAA }
#stats th { background-color: #113311; color: #FFFFFF }
.WeaponName a {
    background-color: #55AA55;
    color: white;
    text-align: center;
}
.page a {
   background-color: #5555CC;
   color: white;
}
.currentPage a {
   background-color: #7777FF;
   color: white;
}
&lt;/source&gt;

So what does this give us? A shiny new frame. Unlike Dialogs, Frames act like any of the other maptool windows and can be docked on the sides, or with other windows (forming a tab). 

[[Image:CharSheetFrame1.png|frame|center|Simple Character Sheet in a Frame]]


Where it says Main and Weapons on the top, they are links, if you click on Weapons it will change the CharacerSheet frame to
[[Image:CharSheetFrame2.png|frame|center|Weapon List in a Frame]]

And as an added bonus, the weapon names are links, if you click on them it will open up the edit dialog where you can edit them. (note this will not update the character sheet at this time, but that is left as an exercise for the reader).

This has just been a short example of what can be done, I am sure people will come up with some great ideas how to use this.

The campaign file with the dialogs we have created can be found at [http://lmwcs.com/maptool/campaigns/B48MiniTuts.cmpgn campaign]

===Related Pages===

* [[Supported CSS Styles]]
* [[Forms tutorial]]</text>
      <sha1>arkic22ewac62r1vlm7jd8i66kvfbdm</sha1>
    </revision>
  </page>
  <page>
    <title>File:EditWeaponDialog1.png</title>
    <ns>6</ns>
    <id>218</id>
    <revision>
      <id>482</id>
      <timestamp>2008-12-14T14:10:37Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:EditWeaponDialog2.png</title>
    <ns>6</ns>
    <id>219</id>
    <revision>
      <id>483</id>
      <timestamp>2008-12-14T14:18:03Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:ViewWeapons.png</title>
    <ns>6</ns>
    <id>220</id>
    <revision>
      <id>484</id>
      <timestamp>2008-12-14T14:22:29Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:CharSheetFrame1.png</title>
    <ns>6</ns>
    <id>221</id>
    <revision>
      <id>485</id>
      <timestamp>2008-12-14T14:30:17Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:CharSheetFrame2.png</title>
    <ns>6</ns>
    <id>222</id>
    <revision>
      <id>486</id>
      <timestamp>2008-12-14T14:32:35Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>GameSystemMacrosAndSettings</title>
    <ns>0</ns>
    <id>223</id>
    <revision>
      <id>492</id>
      <timestamp>2008-12-16T01:43:31Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <comment>New page: ==Game System Macros and Settings==  To stop this page from becoming cluttered please add a new link for the system if one does not already exist. Then create a link for your macros on the...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="210">==Game System Macros and Settings==

To stop this page from becoming cluttered please add a new link for the system if one does not already exist. Then create a link for your macros on the page for that system.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Brace2Plus2.png</title>
    <ns>6</ns>
    <id>224</id>
    <revision>
      <id>495</id>
      <timestamp>2008-12-16T18:35:45Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:2Plus2ToolTip.png</title>
    <ns>6</ns>
    <id>225</id>
    <revision>
      <id>496</id>
      <timestamp>2008-12-16T18:47:05Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:2Plus2Hidden.png</title>
    <ns>6</ns>
    <id>226</id>
    <revision>
      <id>497</id>
      <timestamp>2008-12-16T19:22:32Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:2Plus2Expanded.png</title>
    <ns>6</ns>
    <id>227</id>
    <revision>
      <id>498</id>
      <timestamp>2008-12-16T19:27:56Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:2Plus2Result.png</title>
    <ns>6</ns>
    <id>228</id>
    <revision>
      <id>499</id>
      <timestamp>2008-12-16T19:36:22Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:2Plus2Unformatted.png</title>
    <ns>6</ns>
    <id>229</id>
    <revision>
      <id>500</id>
      <timestamp>2008-12-16T19:40:53Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:2Plus2T.png</title>
    <ns>6</ns>
    <id>230</id>
    <revision>
      <id>504</id>
      <parentid>501</parentid>
      <timestamp>2008-12-16T20:13:40Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:2Plus2T.png]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:2Plus2T-Four.png</title>
    <ns>6</ns>
    <id>231</id>
    <revision>
      <id>503</id>
      <parentid>502</parentid>
      <timestamp>2008-12-16T20:13:20Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:2Plus2T-Four.png]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Roll:types</title>
    <ns>0</ns>
    <id>232</id>
    <revision>
      <id>5588</id>
      <parentid>4963</parentid>
      <timestamp>2011-07-19T15:24:24Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>/* []/{} Roll Types and Options */ Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3154">{{Languages|Macros:Roll:types}}
==[]/{} Roll Types and Options==
Text that you type into MapTool or execute from a [[Macro_Button|macro button]] is scanned for [ ] and { } blocks. The text within these blocks is evaluated and the output from this evaluation is placed into the string in its place.

==={ } Rolls===
When the text is contained within { } then the text is evaluated and the output copied in its place without any special formatting.
For example {2 + 2} produces
[[Image:Brace2Plus2.png‎]]

===[ ] Rolls===
Text that is within [ ] is evaluated, the output from [ ] is inserted with a tool tip that displays the details of the evaluation -- the tool tip can be displayed by leaving the mouse pointer over the result. For example [2 + 2] produces

[[Image:2Plus2ToolTip.png]]

There are also several options that can be used within [ ] to change the formatting. Options are specified after the [ and the option string is terminated with a ':'. If you have more than one option then need to separate them with a ',' eg [opt1, opt2: ...], if there are any arguments for an option they are enclosed within (). All options are case insensitive, so [opt: ...] is the same [OPT: ...].

===[ ] Hidden Rolls===
'''[h: ]''', '''[hide: ]''', '''[hidden: ]''' evaluates the text after the ':' but completely discards the output. This is useful for setting variables or other similar tasks where you want to change something but not display any output. &lt;!-- [h: 2 + 2] would display.

[[Image:2Plus2Hidden.png]] --&gt;
&lt;!-- The above is no longer accurate due to the following, added in b58: --&gt;

If a chat message would appear empty because everything in it is hidden from the player, the message is not displayed.

===[ ] Expanded Rolls===
'''[e: ]''', '''[expanded: ]''' evaluates the text after the ':' and displays the detailed output of the evaluation. [e: 2 + 2 ] would display.


[[Image:2Plus2Expanded.png]]


===[ ] Result Rolls===
'''[r: ]''', '''[result: ]''' evaluates the text after the ':' and displays the plain output without any formatting or tool tips, the result is the same as using { }. [r: 2 + 2] would display.

[[Image:2Plus2Result.png]]


===[ ] Unformatted Rolls===
'''[u: ]''', '''[unformatted: ]''' evaluates the text after the ':' and displays the detailed output without coloring or tool tips. [u: 2 + 2 ] would display.

[[Image:2Plus2Unformatted.png]]


===[ ] Tool Tip Rolls===
'''[t: ]''', '''[tooltip: ]''' evaluates the text after the ':' and displays the result with a tool tip that displays the details of the evaluation -- the tool tip can be displayed by leaving the mouse pointer over the result. For example [t: 2 + 2] produces.

[[Image:2Plus2T.png]]

You can also specify an argument for the tooltip option. If you specify an argument then this argument is evaluated and displayed, the text after the ':' is evaluated and used as the tool tip. [t(&quot;four&quot;): 2 + 2] produces.

[[Image:2Plus2T-Four.png]]

==Related Pages==

* [[Dice_Expressions|Dice Expressions]]
* [[Macros:Roll:output|Roll Visibility Options]]
* [[Macros:Branching_and_Looping|Branching and Looping Roll Options]]
{{Languages|Macros:Roll:types}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:CodeBlock.png</title>
    <ns>6</ns>
    <id>233</id>
    <revision>
      <id>507</id>
      <timestamp>2008-12-17T04:53:00Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Branching and Looping</title>
    <ns>0</ns>
    <id>234</id>
    <revision>
      <id>7034</id>
      <parentid>5893</parentid>
      <timestamp>2019-02-12T19:21:46Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Removed bitwise operators and NE.  Changed display of OR symbols.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13936">{{Intermediate}}
== Introduction ==
This page details the branching and looping structures in MapTool. With the exception of the block {{func|if}} statement, these are all [[Macros:Roll:types | roll options]] and should follow the general form for roll options:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[option1[,option2]: body]
&lt;/source&gt;

These may be combined with other roll options (note that in some examples, they are combined with the [[Macros:Roll:types#.5B_.5D_Hidden_Rolls | Hidden Roll]] option ({{code|h}}) to hide the default output of the loop or branch). 

'''If you wish to combine roll options in a single statement, separate the roll options with a comma, and place the colon at the end of the sequence of roll options.  Note that some combinations have unpredictable results, such as using {{roll|if}} with {{roll|macro}}.''' 

For example, if you want to combine a Hidden Roll, {{roll|token}}, and {{roll|foreach}} option in a single statement, you would enter the line like so:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h,token(&quot;JoeRandom&quot;),foreach(item, TokensItemList): &quot;This item's name is &quot;+item+&quot;!&quot;]
&lt;/source&gt;


==Branching==

===IF Option===

'''Introduced''': Version 1.3.b46

This {{roll|if}} is a roll option (as mentioned above), but operates similarly to the block-style {{func|if}}.

====Usage====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[if(condition): true_body; false_body]
&lt;/source&gt;

;or
&lt;source lang=&quot;mtmacro&quot; line&gt;
[if(condition): true_body]
&lt;/source&gt;

Either the {{code|true_body}} or {{code|false_body}} will be used, depending on the value of {{code|condition}}. If the {{code|false_body}} is not given but the {{code|condition}} is {{false}}, then there is no output.

====Example====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:val=12]
[h,if(val == 12): newVal=12*12]
New Value = [r:newVal]
&lt;/source&gt;

Outputs {{code|New Value {{=}} 144}}.

====Note====
For an alternate method for evaluating &quot;if&quot; conditions, see the function {{func|if}}.  Note that the {{roll|if}} roll option cannot be (usefully) combined with the {{roll|macro}} roll option as the roll options are not guaranteed to be executed in any particular order.  This means that the {{func|if}} function is a better choice in those cases.

===SWITCH Option===

'''Introduced''': Version 1.3.b46

{{roll|switch}} chooses among several options and executes code based on the switch expression. 

*'''&lt;span style=&quot;color: #FF0000;&quot;&gt;Note&lt;/span&gt;''' that the {{code|expression}} is a regular expression, so metacharacters such as {{code|*}} and {{code|()}} will need to have backslashes in front of them if you want to match them literally.

====Usage====

&lt;source lang=&quot;mtmacro&quot; line&gt;
[switch(expression):
case case1: body1;
case case2: body2;
default: default_body]
&lt;/source&gt;
or with a code block:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[switch(expression), code:
case case1: {body1};
case case2: {body2};
default: {default_body}]
&lt;/source&gt;

====Example====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:powerType=&quot;at-will&quot;]
[switch(powerType):
  case &quot;at-will&quot;: &quot;You may use this power as much as you like&quot;;
  case &quot;encounter&quot;: &quot;You may only use this power once per encounter&quot;;
  case &quot;daily&quot;: &quot;You may only use this power once per day&quot;
]
&lt;/source&gt;

Outputs {{code|You may use this power as much as you like}}

Using a code block:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:powerType=&quot;at-will&quot;]
[switch(powerType), code:
case &quot;at-will&quot;: {
    [r:token.name]:&lt;br&gt;
    [r:&quot;You may use this power as much as you like&quot;]
  };
case &quot;encounter&quot;: {
    [r:token.name]:&lt;br&gt;
    [r:&quot;You may only use this power once per encounter&quot;]
  };
case &quot;daily&quot;: {
    [r:token.name]:&lt;br&gt;
    [r:&quot;You may only use this power once per day&quot;]
  };
]
&lt;/source&gt;

Using regex:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:powerType=&quot;.*sword.*&quot;]
[switch(powerType):
  case &quot;flail&quot;: &quot;one-handed weapon; two-handed does Str*2 damage&quot;;
  case &quot;shortsword&quot;: &quot;used for jabs, so is a puncturing weapon&quot;;
  case &quot;longsword&quot;: &quot;a slashing weapon&quot;
]
&lt;/source&gt;
Outputs {{code|used for jabs, so is a puncturing weapon}}.  Notice that the first matching clause was the one that the {{roll|switch}} option found.

===MACRO Option===

'''Introduced''': Version 1.3.b46

{{roll|macro}} runs the named macro, inserting its text into chat.

====Usage====

&lt;source lang=&quot;mtmacro&quot; line&gt;
[macro(&quot;macro_name@location&quot;): macro_arguments]
&lt;/source&gt;

The called macro sees a variable called [[Macros:Special_Variables:macro.args|{{code|macro.args}}]] which contains the value of {{code|macro_arguments}}. The called macro can set a variable called [[Macros:Special_Variables:macro.return|{{code|macro.return}}]], which becomes available to the calling macro. Other than {{code|macro.return}}, the called macro shares no variables with the calling macro.

====Examples====

&lt;source lang=&quot;mtmacro&quot; line&gt;
[macro(&quot;getDamage@Lib:combat&quot;): damageRoll]
&lt;/source&gt;

Calls the macro {{code|getDamage}} which resides on a [[Token:library_token|library token]] called {{code|Lib:combat}}, and passes the variable {{code|damageRoll}} as an argument to the called macro. 

====Location Requirements====

The {{code|location}} can be one of the following:

# {{code|TOKEN}} - the currently impersonated token (use the word {{code|TOKEN}}, not the token's name)
# {{code|Library Token}} - a [[Token:library_token|Library Token]] in the current campaign
# {{code|this}} - if the macro is calling another macro in the same library, {{code|this}} may be used instead of retyping the full library token name

====Notes====

When a token macro calls another macro, the macro instructions in the ''called'' macro are executed against the ''calling'' token (in other words, the macro uses properties available on the calling token and applies all results to that token), unless the focus is explicitly changed to another token via either a roll option, or the {{func|switchToken}} function, or the {{func|getLibProperty}} function.

Also, as of at least 1.3.b50, a variable must be given for {{code|macro_arguments}}, or the 
''&quot;Could not execute the command: Undefined function: MACRO&quot;''
error will result.  However, the variable given as {{code|macro_arguments}} doesn't have to be used.

===TOKEN Option===

'''Introduced''': Version 1.3.b48

{{roll|token}} executes a series of instructions against a token specified in the argument rather than against the token running the macro. 

This is a temporary change in the token that has the &quot;focus&quot; - only the instructions following the colon are applied to the designated token; following the end of that instruction block, operations resume being performed against the token running the macro.

To permanently switch (for the duration of the macro) the token against which macro commands are executed, see the {{func|switchToken}} function.

====Usage====

&lt;source lang=&quot;mtmacro&quot; line&gt;
[token(token_identifier): ]
&lt;/source&gt;

Executes the roll against token specified by {{code|token_identifier}}, which can either be the token name or token id.

====Examples====

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:target=&quot;Orc 5&quot;]
[h,token(target): targetAC = getProperty(&quot;AC&quot;)]
&lt;/source&gt;

Uses the {{func|getProperty}} function to retrieve the property {{code|AC}} from the token named {{code|&quot;Orc 5&quot;}}, and assigns that value to the variable {{code|targetAC}}. {{code|targetAC}} can be used in future calculations, such as determining whether an attack hits. If the {{roll|token}} option was not used, the macro would have looked for the property {{code|AC}} on the token currently ''running'' the macro. Note also that this function is considered [[Macros:TrustedMacros|trusted]].

==Looping==

===COUNT Option===

'''Introduced''': Version 1.3.b41

The {{roll|count}} option executes a statement for a specified number of times, storing the number of the current iteration in a variable called {{code|[[roll.count]]}}. 

====Usage====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[count(num): body]
[count(num, separator): body]
&lt;/source&gt;

The {{code|[[roll.count]]}} variable will take on values from {{code|0}} to {{code|(number of loops - 1)}}. The optional separator (default {{code|&quot;,&quot;}}) is printed between each iteration.

====Example====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:numHits=3]
[count(numHits): Damage = Damage + 1d12]
&lt;/source&gt;

This will iterate the {{code|Damage {{=}} Damage + 1d12}} operation 3 times, separating the result of each iteration with the default separator (a comma). An optional second argument to {{roll|count}} allows the setting of a different separator.

===FOR Option===

'''Introduced''': Version 1.3.b46

Executes a statement for a number of iterations based on a start and end value.

====Usage====

&lt;source lang=&quot;mtmacro&quot; line&gt;
[for(var, start, end): body]
[for(var, start, end, stepsize): body]
[for(var, start, end, stepsize, separator): body]
&lt;/source&gt;

The {{code|var}} variable counts from {{code|start}} to {{code|1}} short of {{code|end}} during the loop (so the {{code|end}} number will not be part of the loop). The optional {{code|stepsize}} (default {{code|+1}}) is added to {{code|var}} at each iteration. The loop does ''not'' evaluate when {{code|var}} reaches {{code|end}}.

====Example====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[for(i,10,0,-2): &quot;i is now &quot; + i]
&lt;/source&gt;

Counts down even numbers from 10 to 2.

===FOREACH Option===

'''Introduced''': Version 1.3.b46

Iterates over the contents of a string list in the format {{code|&quot;item1, item2, item3&quot;}}, the contents of a JSON Array, or the keys of a JSON Object.

====Usage====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[foreach(var, list): body]
[foreach(var, list, output_separator): body]
[foreach(var, list, output_separator, list_separator): body]
[foreach(var, jsonarray): body]
[foreach(var, jsonarray, output_separator): body]
[foreach(var, jsonobject): body]
[foreach(var, jsonobject, output_separator): body]
&lt;/source&gt;

====Example Using a List ====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: enemyList=&quot;Orcs, Goblins, Ogres, Trolls&quot;]
[foreach(enemy, enemyList, &quot;&lt;br&gt;&quot;): &quot;You really hate &quot; + enemy]
&lt;/source&gt;

Outputs:
 You really hate Orcs
 You really hate Goblins
 You really hate Ogres
 You really hate Trolls

====Example Using a JSON Array ====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: weapons = json.append(&quot;[]&quot;, &quot;Longsword&quot;, &quot;Dagger&quot;, &quot;Bow&quot;)]
[foreach(wpn, weapons): wpn]
&lt;/source&gt;

Outputs:
 Longsword, Dagger, Bow

====Example Using a JSON Object ====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: weaponData = json.set(&quot;{}&quot;,
    &quot;Name&quot;: &quot;Longsword&quot;,
    &quot;Damage&quot;: &quot;1d6&quot;,
    &quot;Type&quot;: &quot;Slashing&quot;,
    &quot;Weight&quot;: 30,
)]
[foreach(field, weaponData): field]
&lt;/source&gt;

Outputs:
 Name, Damage, Type, Weight

If you really wanted to see the key ''and'' the data, try this:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: weaponData = json.set(&quot;{}&quot;,
    &quot;Name&quot;: &quot;Longsword&quot;,
    &quot;Damage&quot;: &quot;1d6&quot;,
    &quot;Type&quot;: &quot;Slashing&quot;,
    &quot;Weight&quot;: 30,
)]
[foreach(field, weaponData):
    field + &quot;: &quot; + json.get(weaponData, field)]
&lt;/source&gt;

Outputs:
 Name: Longsword, Damage: 1d6, Type: Slashing, Weight: 30

''P.S.:  Note the trailing comma after the Weight field in the {{func|json.set}} function?  It's ignored.  But putting it in makes it easier to copy/paste new lines into the function...''

===WHILE Option===

'''Introduced''': Version 1.3.b46

Repeatedly executes a statement until a condition becomes false.

====Usage====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[while(condition): body]
[while(condition, separator): body]
&lt;/source&gt;

====Example====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:num=10]
[while(num&gt;=0): num = num-1]
&lt;/source&gt;

Outputs {{code|9,8,7,6,5,4,3,2,1}}

==Code Execution==

===CODE===

'''Introduced''': Version 1.3.b46

The {{roll|code}} option is used in conjunction with looping / branching options to execute multiple statements within a single &quot;block&quot; of a loop or branch, allowing the creation of more complex loops and branches. 

====Usage====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[code: { code_block }]
&lt;/source&gt;

The {{code|code_block}} is a collection of text and macro code, enclosed in a single {{code|{&lt;nowiki&gt;}&lt;/nowiki&gt;}} pair. Everything within the {{code|{&lt;nowiki&gt;}&lt;/nowiki&gt;}} is treated as a single block for the purposes of any looping or branching options.

====Example====

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:num=5]
[while(num &gt; 0), code:
{
  This is iteration [r:num] &lt;br&gt;
  There are [r:num-1] iterations left&lt;br&gt;
  [num=num-1]
}]
&lt;/source&gt;

Outputs:

 This is iteration 5 There are 4 iterations left
 4, This is iteration 4 There are 3 iterations left
 3, This is iteration 3 There are 2 iterations left
 2, This is iteration 2 There are 1 iterations left
 1, This is iteration 1 There are 0 iterations left
 0

'''NOTE''': the digit output at the beginning of each line is an artifact of the {{roll|while}} loop's evaluation of {{code|num}} - since this roll does not have the {{roll|h}} option active, the result of that evaluation is displayed.

====Nested CODE Blocks====

To nest {{code|code:{&lt;nowiki&gt;}&lt;/nowiki&gt;}} blocks, use a second {{roll|code}} option, like so:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:d20roll=1d20]
[h:attackRoll=d20roll+AttackBonus]
[h,if(attackRoll &gt;= 16),code:
{
  [if(d20roll == 20),code:
  {
    The attack is a critical hit!
    [h:damage=critDamage]
  };
  {
    The attack is a hit!
    [h:damage=regDamage]
  }]
};
{
  The attack misses!
}]
&lt;/source&gt;

MapTool can only handle two levels of nested code.

==Additions==

Conditional Operators:
* {{code|&gt;}} - Greater than
* {{code|&lt;}} - Less than
* {{code|&gt;{{=}}}} - Greater than or equal to
* {{code|&lt;{{=}}}} - Less than or equal to
* {{code|{{=}}{{=}}}} - Equal to
* {{code|!{{=}}}}  - Not equal

Logical Operators:
* {{code|&amp;&amp;}} - And
* {{code|&amp;brvbar;&amp;brvbar;}} - Or

It is important to note that the ''Equal'' condition operator must be two equal signs. If you are checking for a text string, place quotes around the text.

Operator Precedence:
* {{code|( )}} - Parentheses are always done first; they can be nested
* {{code|!}} - Logical NOT
* {{code|&amp;&amp;}} - Logical AND
* {{code|&amp;brvbar;&amp;brvbar;}} - Logical OR

[[Category:Tutorial]]</text>
      <sha1>cbc49mx926n0wnhmdn1tfg7ysh1098v</sha1>
    </revision>
  </page>
  <page>
    <title>Macro Introduction</title>
    <ns>0</ns>
    <id>235</id>
    <revision>
      <id>6906</id>
      <parentid>3113</parentid>
      <timestamp>2017-09-25T09:23:40Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6660">{{note|&lt;big&gt;'''This article has been flagged for removal! If you have any objections, speak up now.&lt;br&gt;
This URL will be forwarded to [[Introduction to Macro Writing]] upon removal.&lt;br&gt;
Removal date set for: 04.21.2009'''&lt;/big&gt;}}
Welcome to the Macro Documentation page for '''''MapTool''''', from the '''RPTools.net''' developers!

Macros are a way of automating tasks within MapTool.  They can be attached to tokens, allowing any owner of the token to execute them via a right-click context menu or via the various panels available from the '''Window''' menu.  (Actually, the macros can be edited by any owner of the token or by the GM, if MapTool is running as a server.)

There are also two other categories of macros that are not attached to tokens:  global and campaign.  Be aware that if these macros are going to access properties on a token, the token must be identified somehow.  The two common approaches are to apply the macro against the ''currently selected tokens'' or for the macro to be written such that it prompts for the ''user to select a token''.  The only other difference between the two categories is that global macros are stored on the local computer under your username and will exist in any campaign that you connect to (as a client) or any campaign you load (as a server).  The campaign macros, as their name implies, are saved as part of the campaign and will not be available when '''MapTool''' is not accessing that campaign (as either client or server).  In addition, campaign macros are sent to clients when they connect to a '''MapTool''' server so that they can be used on the client as well.

The '''MapTool''' macros should be supported for quite some time, but the reader should be aware that as '''MapTool''' transitions from a Java 5 application to Java 6, there is a stated goal of using Javascript as the macro language instead of these &quot;home built&quot; macros.  There are a lot of reasons for this, but suffice to say that when Javascript becomes the macro language of choice, it is unlikely that these macros will see much further development or even bug fixes.  However, '''MapTool''' is open source software so anyone moderately competent in Java will be able to download the source code and make enhancements themselves, if necessary.

== Macro Creation ==

Macros can be created in a number of ways.  In each case, the process is essentially the same although the details might vary:  open a dialog window that allows access to the macro text, add or edit the macro text, save it when finished.  Because '''MapTool''' macros have been evolving over time, there are multiple ways to edit token macros, but only a single technique used for both global and campaign macros.  So we'll start with those last two and cover token macros last.

=== Global Macros ===

These are macros created by right-clicking in the '''Global''' panel that can be turned on or off via the '''Window''' menu in '''MapTool'''.  These macros are stored under your username on the computer in a platform-dependent way by the Java runtime environment.  For example, on the Microsoft Windows platform they are stored in the registry.  On the Apple OSX platform they are stored under the user's '''Library/Preferences''' directory, and on other Unix systems they are written to an XML file under the user's '''.java/.userPrefs''' directory.

As mentioned above, global macros are available regardless of when the '''MapTool''' instance is a client or server.  They are not shared with other players who may be connected to a '''MapTool''' server.  Because they are not shared, they are often used by GMs to implement functions they don't want the players to know about, such as random chances for an encounter or the choice of which PC is targeted by a random trap being sprung.

These macros must provide some way to identify the token they should use for property values, if they are going to use any at all, so the '''Apply to selected tokens''' checkbox is often turned on when the macro is created.

=== Campaign Macros ===

These are macros created by right-clicking in the '''Campaign''' panel that can be turned on or off via the '''Window''' menu in '''MapTool'''.  These macros are stored inside the campaign file that the GM creates.  The contents of the campaign file, which includes these macros but also all images, are sent to all players when they connect to a '''MapTool''' server and select a map.

Because campaign macros are sent to the clients, they are typically used in situations where the GM wants players to have access to a library of pre-written macros.  These macros must provide some way to identify the token they should use for property values, so the '''Apply to selected tokens''' checkbox is often turned on when the macro is created.

For example, the calculations for opposed skill checks might be placed here.  The player would click on a button that executes a macro and the macro would retrieve the appropriate skill check modifiers from the selected token.  It then makes the skill check, sending the numeric result only to the GM with the player receiving a message, &quot;So-and-so rolls a skill check!&quot;

=== Token Macros ===

These are the ones that most players will be familiar with.  These macros are attached to tokens ('''MapTool''' representations of creatures, often including an image as well as a set of ''properties'' which define the attributes of the creature) which are owned by the player.  The player may edit the macros themselves, allowing them to create customized commands that they can easily execute.  These macros might access properties such as Strength or Dexterity, or information about weapons, or record damage and subsequent healing.

(In the v1.3.b48 release of '''MapTool''', there are now [[Token:library_token|&quot;library tokens&quot;]].  These are tokens that are accessible from any map within a campaign.  The tokens themselves have names that start with '''Lib:''' and they represent &quot;trusted&quot; macro code.  Only GMs may create tokens with such names or add them to maps, and the macros they contain can be referenced by players from their own macros.  This allows the GM to write standard features once and then tell the players how to invoke those features from their own macros.  These library tokens, or just '''Lib:tokens''' for short, can perform functions that player macros cannot, such as accessing or modifying the properties on tokens that the player does not own.)

Token macros can be created, edited and accessed by clicking the corresponding macro button from the '''Selection''' or '''Impersonated''' panels (accessible from the application's '''Window''' menu).</text>
      <sha1>ozb7yd6fj8qv1l4imylu7hx8n2j59ah</sha1>
    </revision>
  </page>
  <page>
    <title>Token Property</title>
    <ns>0</ns>
    <id>236</id>
    <revision>
      <id>2240</id>
      <parentid>2238</parentid>
      <timestamp>2009-03-25T12:40:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to Token category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2076">A ''token property'' is a variable (string or numeric) that resides on a particular [[Token:token|token]] within MapTool, and may be called upon or evaluated by macros.

Token properties are tailored to fit each individual campaign file and the macros contained in that campaign. Multiple sets of token properties can be created (allowing them to be applied to different classes of token - for example, PC tokens versus NPC tokens). These multiple sets are called [[Token:token_property_type | token property types]]. 

==Default Token Properties==

By default, MapTool has the following set of token properties.

 Strength (Str)
 Dexterity (Dex)
 Constitution (Con)
 Intelligence (Int)
 Wisdom (Wis)
 Charisma (Char)
 *@HP
 *@AC
 Defense (Def)
 Movement (Mov)
 *Elevation (Elv)
 Description (Des)

==Setting Campaign Properties==

Campaign properties are edited using the Campaign Properties dialog, which is found under '''Edit -&gt; Campaign Properties''' on the MapTool menu. They can be directly edited in the Campaign Properties dialog, or pasted in from a text editor of choice. 

===Token Property Format===

The format for all token properties. 

 #*@PropertyName(ShortName):default value

===Example Token Property===

 *@HealingSurges(Surges):9

Will display '''Surges: 9''' in the statsheet.

===Controlling Token Property Display===

There are three &quot;switches&quot; (shown in the format string above) that control how campaign properties are displayed in the popup ''statsheet'' when the user hovers his mouse over a token:

&lt;nowiki&gt;*&lt;/nowiki&gt; - Displays the property on the ''statsheet''

&lt;nowiki&gt;@&lt;/nowiki&gt; - Property will be visible only to the owner of that token

&lt;nowiki&gt;#&lt;/nowiki&gt; - Property will be visible only to the GM

Note that the '''*''' switch is essential for the property to be displayed on the statsheet; the '''@''' and '''#''' are optional modifiers to that display. If no switch is set in the property string, the property will be present on the token and accessible to macros but will ''not'' be displayed in the popup statsheet.
[[Category:Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token Property Type</title>
    <ns>0</ns>
    <id>237</id>
    <revision>
      <id>2609</id>
      <parentid>2606</parentid>
      <timestamp>2009-04-01T13:46:08Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Moved to Token category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="736">Token property type is the designation given for a particular [[Token:token_property | token property]] set that has been established for a particular campaign. When used in a [[Macros:Functions:list of functions | macro function]], the type must be enclosed in quotes.

By default, MapTool provides a token property set called ''Basic''. However, users may establish additional token property sets as they desire by adding new types using the Campaign Properties dialog. The ''type'' is the name given to the token property set. 

For example, in the image below, there are three token property types (visible in the left-hand column under ''Token Type''): &quot;Basic&quot;, &quot;Library&quot;, and &quot;NPC&quot;:

[[Image:Campaignprops.jpg]]
[[Category:Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Campaignprops.jpg</title>
    <ns>6</ns>
    <id>238</id>
    <revision>
      <id>531</id>
      <timestamp>2008-12-21T21:35:03Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Screenshot of the Campaign Properties window.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="45">Screenshot of the Campaign Properties window.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>String Property List</title>
    <ns>0</ns>
    <id>239</id>
    <revision>
      <id>3998</id>
      <parentid>3997</parentid>
      <timestamp>2009-10-10T19:10:23Z</timestamp>
      <contributor>
        <username>Wyrmwood</username>
        <id>41</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1109">A string property list is a delimited string containing multiple key-value pairs in the format {{code|&quot;var1{{=}}value1; var2{{=}}value2;...&quot;}}

For example:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: stringPropertyList=&quot;var1=foo; var2=bar; var3=baz;&quot;]
&lt;/source&gt;

String property lists are zero-based (''i.e.'', the first item in a string property list is item {{code|0}}). When a key-value pair is extracted from a string property list using one of the available [[:Category:String Function|String Functions]] that work with string property lists, the value of the pair is considered a string, and must be converted to or evaluated to a number to perform numeric computations.

The default delimiter in a string property list is the semicolon ({{code|&quot;;&quot;}}), however, the [[:Category:String Function|String Functions]] that work with string property lists permit the use of alternate delimiters. 

The [[:Category:String Property List Function|String Property List Functions]] only work with the default delimiter.

String property lists may be stored in a [[Token Property|token property]].
[[Category:Variable Type]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>String List</title>
    <ns>0</ns>
    <id>240</id>
    <revision>
      <id>2262</id>
      <parentid>2261</parentid>
      <timestamp>2009-03-25T13:02:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="554">A string property list is a string in the format &quot;item1, item2, item3,...&quot;

For example: 

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: stringList=&quot;foo, bar, baz&quot;]
&lt;/source&gt;

String lists are zero-based (''i.e.'', the first item in a string list is item 0). The default delimiter in a string property list is the comma (&quot;,&quot;), however, the [[:Category:String Function|String Functions]] that work with string lists allow for optional arguments to permit the use of alternate delimiters. 

String lists may be stored in a [[Token Property]].
[[Category:Variable Type]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Glossary</title>
    <ns>0</ns>
    <id>241</id>
    <redirect title="Glossary" />
    <revision>
      <id>2528</id>
      <parentid>2434</parentid>
      <timestamp>2009-04-01T02:23:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirect to Glossary.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[Glossary]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token State</title>
    <ns>0</ns>
    <id>242</id>
    <revision>
      <id>4079</id>
      <parentid>3375</parentid>
      <timestamp>2009-12-07T16:03:35Z</timestamp>
      <contributor>
        <username>Darloth</username>
        <id>135</id>
      </contributor>
      <minor/>
      <comment>wrong condition in long explanation (reversed &gt;= to &lt;=)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2747">A ''token state'' is a binary (''i.e.'', it has two possible values, on or off) condition that is set for a given [[Token:token | token]]. States are frequently used for conditions or statuses that affect a particular character in a game (for example &quot;Bloodied&quot; or &quot;Fatigued&quot; or &quot;Fighting Defensively&quot;) and frequently have images associated with them that are displayed to players and the GM. However, they can be used for any application in which a condition having only two possible values would be useful. 

The image below shows a token state with an associated image applied to the token. In this case, the state name was configured by the individual creating the campaign to be called &quot;Bloodied&quot; and to have the associated image overlay (the state image is courtesy of the RPTools forum member AidyBaby).

[[Image:State-example.jpg]]

==Setting Up Token States==

States are configured by the user and are specific to a given campaign. States are configured via the Campaign Properties window, under the '''States''' tab. See [[States:Configuring_states|Configuring States]] for details on setting up states for your campaign. 

==Getting Token States with Macros==

States are special variables that can be referenced by macros using the general format ''state.statename'' where ''statename'' is the name configured by the user for a given state.

===Examples===

States can be retrieved using macros.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:isBloodied=state.Bloodied]
[isBloodied]
&lt;/source&gt;

Will return 0 if ''state.Bloodied'' is off (in other words, the token does ''not'' currently have the state called &quot;Bloodied&quot; set), and 1 if ''state.Bloodied'' is on. 

==Setting Token States with Macros==

States can also be set using macros, by assigning a value of 1 or 0 to the token state.

===Examples===

Suppose we want to check to see if a token is &quot;dead&quot; and if so, set the &quot;Dead&quot; state on that token. We are assuming two things:

# &quot;Death&quot; occurs if the token's hit points (HP) have been reduced to 0 or below; and
# A state called &quot;Dead&quot; has been configured in the Campaign Properties.

To check for &quot;death&quot; and, if required, set the appropriate state, we write the following simple macro:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:state.Dead=if(HP &lt;= 0, 1, 0)]
&lt;/source&gt;

This statement evaluates the condition within the if() statement, and if true, assigns the value 1 to ''state.Dead''. If the condition ''HP &lt;= 0'' is false, on the other hand, the value 0 is assigned to ''state.Dead''.

Finally, if an image overlay is associated with the state called &quot;Dead&quot;, it will appear if ''state.Dead'' equals 1, and disappear if ''state.Dead'' equals 0.

Use the {{func|setState}} function instead if your state name has a space in it.
[[Category:Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Variables:list of special variables</title>
    <ns>0</ns>
    <id>243</id>
    <redirect title="Category:Special Variable" />
    <revision>
      <id>2319</id>
      <parentid>689</parentid>
      <timestamp>2009-03-25T13:58:34Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to Special Variable category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[:Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>macro.args</title>
    <ns>0</ns>
    <id>244</id>
    <revision>
      <id>4040</id>
      <parentid>4039</parentid>
      <timestamp>2009-11-10T04:48:28Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>/* 2B: Multiple parameters using JSON Array */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3918">The variable ''macro.args'' holds the value of the argument passed to a trusted macro via the [[macro (roll option)|MACRO()]] roll option. ''macro.args'' exists only within the macro that is called, and may be manipulated like any variable in a macro.

==Examples==

===1: Single parameter===

When a macro on a [[Token:library_token|library token]] is called by another macro, the calling macro may pass one argument to the called macro:

====Calling Macro====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Call the getDamage macro --&gt;
[h:damageDice=&quot;2d6&quot;]
[MACRO(&quot;getDamage@Lib:test&quot;): damageDice]
&lt;/source&gt;

====Called Macro====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- getDamage Macro --&gt;
[h:damageRoll = eval(macro.args) + 9]
You hit your target for [r:damageRoll] damage!
&lt;/source&gt;

In the example above, ''damageDice'' is the argument being passed to the macro '''getDamage''', which resides on the '''Lib:test''' [[Token:library_token|library token]].  Within the '''getDamage''' macro, the variable {{code|macro.args}} is automatically generated and assigned the value of ''damageDice''.

It's important to note that only a &lt;u&gt;single&lt;/u&gt; parameter can be passed to a macro and that parameter appears in the {{code|macro.args}} variable.  If more than a single parameter needs to be sent to a macro, you may use string property lists, a JSON array or object, or a {{code|[[defineFunction|user-defined function]]}}.  The first two techniques are demonstrated below.

===2A: Multiple parameters using String Property List===

A string property list essentially bundles multiple values into a single string which would then be split back apart inside the macro body.

====Calling Macro====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Call the doDamage macro --&gt;
[h:damageDice=&quot;2d6&quot;]
[h:theToken = &quot;Bobo Fett&quot;]
[MACRO(&quot;getDamage@Lib:test&quot;): &quot;Damage=&quot;+damageDice+&quot;; Token=&quot;+theToken]
&lt;/source&gt;

====Called Macro====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- doDamage Macro --&gt;
[h:dmg   = getStrProp(macro.args, &quot;Damage&quot;)]
[h:tokid = getStrProp(macro.args, &quot;Token&quot;)]
You hit [r: tokid] for [r:dmg] damage!
&lt;/source&gt;

===2B: Multiple parameters using JSON Array===

The second way to pass multiple parameters is to use a [[JSON Array]] or [[JSON Object]].

Using a JSON data type passes multiple values as a single unit.  When using JSON data types, there will be a single parameter coming into the macro but because it's either an array or an object you can retrieve individual fields quite easily.

As the {{func|json.append}} is being passed {{code|&quot;[]&quot;}} as the first parameter in this next code block, it's creating an empty [[JSON Array]] and then appending two new values to it.

====Calling Macro using JSON Array====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Call the doDamage macro --&gt;
[h:damageDice=&quot;2d6&quot;]
[h:theToken = &quot;Bobo Fett&quot;]
[h:jsonData = json.append(&quot;[]&quot;, damageDice, theToken)]
[MACRO(&quot;getDamage@Lib:test&quot;): jsonData]
&lt;/source&gt;

====Called Macro using JSON Array====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- doDamage Macro --&gt;
[h:dmg   = json.get(macro.args, 0)]
[h:tokid = json.get(macro.args, 1)]
You hit [r: tokid] for [r:dmg] damage!
&lt;/source&gt;

===2C: Multiple parameters using JSON Object===

Notice that in this next example, the {{func|json.set}} is being passed {{code|&quot;{}&quot;}} as the first parameter.  This indicates to the function that we want a [[JSON Object]].

====Calling Macro using JSON Object====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Call the doDamage macro --&gt;
[h:damageDice=&quot;2d6&quot;]
[h:theToken = &quot;Bobo Fett&quot;]
[h:jsonData = json.set(&quot;{}&quot;, &quot;Damage&quot;, damageDice, &quot;Token&quot;, theToken)]
[MACRO(&quot;getDamage@Lib:test&quot;): jsonData]
&lt;/source&gt;

====Called Macro using JSON Object====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- doDamage Macro --&gt;
[h:dmg   = json.get(macro.args, &quot;Damage&quot;)]
[h:tokid = json.get(macro.args, &quot;Token&quot;)]
You hit [r: tokid] for [r:dmg] damage!
&lt;/source&gt;

==See Also==
[[macro.return]],
{{roll|macro}}

[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Library Token</title>
    <ns>0</ns>
    <id>245</id>
    <revision>
      <id>7347</id>
      <parentid>7343</parentid>
      <timestamp>2019-03-31T12:29:49Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3046">{{Languages|Library Token}}
Introduced in MapTool version 1.3b46, the Library Token is a special token type that acts as a library of properties and trusted macros that may be accessed and called by other macros. 

==Library Token Naming==

All library tokens must have a name in the format &quot;Lib:''name''&quot;, to indicate that they are to serve as a Library Token and not a &quot;normal&quot; token. Example library token names might be:

*Lib:test
*Lib:combat
*Lib:gamemaster

==Creating a Library Token==

To create a Library Token, do the following:

# Drag a new token on to one of the maps in your campaign.  The map does not need to be visible to players.
# Rename it with a name in the format '''Lib''':''name'' (''e.g.'', '''Lib:DnD''', '''Lib:GameRules''', etc.). 
# Right click on the token and make sure that '''Visible to Players''' is checked.
# Set the token type to NPC (upper right corner of the Token Configuration dialog).

After that, you have a Library Token. Note that you cannot have two library tokens with the same name in the same campaign (even if they're on different maps!). 

Once again, the requirements are:

* The library token must be visible to players (make sure Visible to Players is set in the right-click context menu).
* The library token need not be on the &quot;Token&quot; layer (you can keep it on the &quot;Hidden&quot; layer to hide it from players, although &quot;Visible to Players&quot; must still be set to true).
* The library token must have a name in the format &quot;Lib:''name''&quot;
* The library token must be present on ''only one'' map in the campaign file.

==Library Tokens and Trusted Macros==

Library Tokens may run [[Trusted Macro|Trusted Macros]] or utilize trusted macro functions provided they meet one of the following criteria:
* The library token is '''not owned by any players''', OR
* The macros on the library token are '''not player-editable'''.

If the Library Token does not meet at least one of those criteria, ''it cannot run trusted macros.'' This allows players to create their own personal library tokens for various ''un''trusted macros they wish to run, while at the same time preventing players from altering or manipulating any token or other element of the campaign for which they do not have permission to do so.

==Library Token Macros==

Library token macros are created and edited like macros on any token. Macros on a library token may be called using the [[Macros:Branching_and_Looping#MACRO_Option| [MACRO(): ]]] roll option. Since Library token macros are trusted, they may perform operations not available to regular tokens.

==Library Token Properties==

Library token properties can be accessed by using the {{func|getLibProperty}} function.  Note that default property values do '''NOT''' work using that function.

==Library Token onCampaignLoad==

Most users will find it worthwhile to add an [[onCampaignLoad]] macro to your Lib token that will use {{func|defineFunction}} to make your Lib macros accessible like the built-in macro functions and recognized by the macro editor.

[[Category:Token]]</text>
      <sha1>r0aply94297tx039gyqlsl9o0fcxr2y</sha1>
    </revision>
  </page>
  <page>
    <title>Trusted Macro</title>
    <ns>0</ns>
    <id>246</id>
    <revision>
      <id>5499</id>
      <parentid>5222</parentid>
      <timestamp>2011-03-30T08:25:27Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <comment>/* A macro is trusted when ... */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4331">A Trusted Macro is a macro that fits certain criteria, allowing it access to [[:Category:Macro Function|functions]] and [[:Category:Roll Option|roll options]] that are protected from normal use.

[[:Category:Macro Function|Functions]] and [[:Category:Roll Option|roll options]] that require a Trusted Macro will have the following note on their article:
{{TrustedFunction}}
Some parameters are only usable within a Trusted Macro, they will have the following note on their description:
{{TrustedParameter}}

In order for a macro to be trusted it must adhere to three requirements. '''If a macro is typed into the chat window, and not attached to a macro button, the only requirement is that the GM is the person who typed the macro.'''

===First Requirement===
A trusted macro must not be editable by players. Allowing players to edit trusted macros is tantamount to making all of their macros trusted. To make it so players cannot edit a macro, you must uncheck the Allow Players to Edit Macro checkbox on the Options tab of the macro window. This setting defaults to being checked, allowing players access to edit any macro. As of 1.3b54 the default can be changed in the Preferences.

[[Image:trustedMacro1.jpg|frame|center|View of the Macro Options tab.]]

===Second Requirement===
A trusted macro must not call another macro that is not trusted, any such call will cause the originating macro be considered an untrusted macro.

===Third Requirement===
After satisfying the first and second requirements, the third requirement can be satisfied in two ways:
* Clicking the macro button as a GM.
* Placing the macro on a [[Library Token|library token]] and having a player call it using a [[:Category:Roll Option|roll option]] or [[macroLink|macro link]].

===Why trusted macros?===

Using trusted macros can, for example, allow gamemasters to set up macros on [[Library Token|library tokens]] that can be called by players, but edited only by GMs, and which can access functions that players would not normally be able to access. Such macros can use trusted-only options or functions (such as the [[token (roll option)|[token():]]] roll option or the [[switchToken|switchToken()]] function) to modify or read values from NPC tokens that players do not own.
==A macro is trusted when ...==
  * Anything the GM types into the input box is trusted

  * Anything a non GM types into the input box is not trusted.

  * Any auto execute macro that is non player editable is trusted.

  * Any auto execute macro that is player editable is not trusted.

  * Any non auto execute macro gets copied into the input box to be edited, so results in one of the first two rules

''quoted Craig([http://forums.rptools.net/memberlist.php?mode=viewprofile&amp;u=1338])''

Lets test macros under certain combinations of macro location, player or gm, auto-execution and if it is player-editable or not. The test was performed using {{func|isTrusted}} and the campaign macro was &quot;applied to token&quot;.

{| class=&quot;wikitable&quot; border=&quot;1&quot;

! Macro location !! clicked by !! auto-execute !! player-editable !! is trusted
|- bgcolor=white
| campaign || GM || &amp;bull; || &amp;bull; || &amp;#10003;
|-  bgcolor=white
| campaign || GM || &amp;bull; || - || &amp;#10003;
|-  bgcolor=white
| campaign || GM || - || &amp;bull; || &amp;#10003;
|- bgcolor=white
| campaign || GM || - || - || &amp;#10003;
|- bgcolor=lightgrey
| lib:token || GM || &amp;bull; || &amp;bull; || -
|- bgcolor= lightgrey
| lib:token || GM || &amp;bull; || - || &amp;#10003;
|- bgcolor= lightgrey
| lib:token || GM || - || &amp;bull; || &amp;#10003;
|- bgcolor= lightgrey
| lib:token || GM || - || - || &amp;#10003;
|-
| pc token || GM || &amp;bull; || &amp;bull; || -
|-
| pc token || GM || &amp;bull; || - || &amp;#10003;
|-
| pc token || GM || - || &amp;bull; || &amp;#10003;
|-
| pc token || GM || - || - || &amp;#10003;
|- bgcolor= lightgrey
| campaign || player || &amp;bull; || &amp;bull; * || &amp;#10003;
|- bgcolor= lightgrey
| campaign || player || &amp;bull; || - || &amp;#10003;
|- bgcolor= lightgrey
| campaign || player || - || &amp;bull; || -
|- bgcolor= lightgrey
| campaign || player || - || - || -
|-
| pc token || player || &amp;bull; || &amp;bull; || -
|-
| pc token || player || &amp;bull; || - || &amp;#10003;
|-
| pc token || player || - || &amp;bull; || -
|-
| pc token || player || - || - || -

|}
''*: This is actually not editable by the player since its a campaign macro.''

[[Category:Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>macro.return</title>
    <ns>0</ns>
    <id>247</id>
    <revision>
      <id>2286</id>
      <parentid>2284</parentid>
      <timestamp>2009-03-25T13:46:13Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to Special Variable category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1812">The variable ''macro.return'' holds the value returned from a called macro to the calling macro.  Other than ''macro.return'', a called variable shares no other variables with the calling macro.

==Examples==

When a macro on a [[Token:library_token|library token]] is called by another macro, the called macro may return a value to the called macro by assigning that value to the variable ''macro.args''. 

===Calling Macro===

The macro below calls a macro called '''getDamage''' on the [[Token:library_token|library token]] &quot;Lib:combat&quot;, passing the variable ''damageDice'' as an argument. It also sets 

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
|-
!Calling Macro
!Called Macro
|-
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:damageDice=&quot;2d6&quot;]
[MACRO(&quot;getDamage@Lib:combat&quot;):damageDice]
[h:damageProperties=macro.return]
[h:varsFromStrProp(damageProperties)]
&lt;/source&gt;
|&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- getDamage Macro --&gt;
[h:returnData = &quot;&quot;]
[h:damageRoll = eval(macro.args) + 9]
[h:damageType = &quot;piercing&quot;]
You hit your target for [r:damageRoll] damage!
[h:returnData=setStrProp(returnData,&quot;damType&quot;, damageType)]
[h:returnData=setStrProp(returnData,&quot;damage&quot;, damageRoll)]
[h:macro.return=returnData]
&lt;/source&gt;
|}

In the example above, we assume that the '''getDamage''' macro was called by another macro (for example, a token macro) and has received some value in the form of ''macro.args''. The statements in '''getDamage''' are executed, and the final statement assigns the value of returnData to the variable ''macro.return''. 

When execution of the '''getDamage''' macro is complete and control is handed back to the calling macro, ''macro.return'' is also passed back to the calling macro, where it can be manipulated like any other variable.
[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:ShortRest1MacroButton.png</title>
    <ns>6</ns>
    <id>248</id>
    <revision>
      <id>579</id>
      <timestamp>2008-12-22T07:25:58Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:ButtonSomethingOrOtherDefault.png</title>
    <ns>6</ns>
    <id>249</id>
    <revision>
      <id>580</id>
      <timestamp>2008-12-22T07:30:39Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:ButtonSomethingOrOtherBlue.png</title>
    <ns>6</ns>
    <id>250</id>
    <revision>
      <id>581</id>
      <timestamp>2008-12-22T07:31:25Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:PowerUsedDialog.png</title>
    <ns>6</ns>
    <id>251</id>
    <revision>
      <id>582</id>
      <timestamp>2008-12-22T08:54:01Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Updating Macro Buttons Using Macros</title>
    <ns>0</ns>
    <id>252</id>
    <revision>
      <id>5552</id>
      <parentid>2568</parentid>
      <timestamp>2011-07-05T13:45:33Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1234">==Dynamically Updating a Token's Macro Buttons==
Some times you want to modify what a [[Token]]'s [[Macro_Button|macro button]] from within a macro, this could be to visually represent a spell or power as having been used or even indicating that it is available for use. 

A quick note on some of these examples, before 1.3b51 it is only possible to have 2 levels deep of code: blocks, so some of the examples do things a little differently than you would if you could have multiple levels of code: blocks to avoid running into the problem. Also before 1.3b50 there is no way to get the index of the button that has been pressed, these tutorials show you how to &quot;guess&quot; the button that is pressed. As of 1.3b50 you can use the function {{func|getMacroButtonIndex}} to determine exactly which macro button has been clicked on the token.

This tutorial is broken into several parts, although DnD4e is used to explain the concepts they are just as valid for any other system where you want to track if a skill has already been used or not.

* [[Updating Macro Buttons Using a Macro (Prefix Method)]]
* [[Updating Macro Buttons Using a Macro (Group Method)]]
* [[Updating Macro Buttons Using a Macro (Label Method)]]
[[Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Updating Macro Buttons Using a Macro (Prefix Method)</title>
    <ns>0</ns>
    <id>253</id>
    <revision>
      <id>5600</id>
      <parentid>5599</parentid>
      <timestamp>2011-07-19T16:03:26Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10638">==Updating color of our macro buttons using DnD4e as an example==
For an example I will use DnD4e powers, when a power is used it will then update the button to show this. Although this is example is for DnD4e the technique is applicable for many other systems.

For the first set up lets assume that we have prefixed our powers with &quot;Daily:&quot; for daily powers and &quot;Encounter:&quot; for encounter powers, and we want to set the color of the [[Macro_Button|macro button]] to blue if the power has been used. If you want another way to do this without having to place &quot;Daily:&quot; or &quot;Encounter:&quot; in front of your power see [[Tutorials:Macros:UpdatingMacroButtons:DnD4ePowersGroup | Tracking Used DnD 4e Powers (Macro Group Method)]]


'''Version update:''' 
This tutorial was written before 1.3b50. As of 1.3b50 you can use [[Macros:Functions:getMacroButtonIndex|getMacroButtonIndex]] to determine the index of the button that was pressed instead of setting/getting the properties of the button by name you can use the index of the button in place of the name, this way you will not run the risk of updating buttons with the same name.


===Short Rest, resetting color of buttons starting with &quot;Encounter:&quot;===
So first we will create a [[Macro_Button|macro button]] called &quot;Short Rest&quot;, for this tutorial I will assume you just create it as a [[Introduction_to_Macro_Writing#Campaign Macros|campaign macro]] --just remember to check the [[Macros:Apply to Selected Tokens|Apply to Selected Tokens]] check mark-- you can just as easily create these as macros in [[Token:library token|library token]] macros and call them from from [[Macro_Button|macro buttons]] on your [[Token|tokens]].

[[image:ShortRest1MacroButton.png]]

So create the &quot;Short Rest&quot; [[Macro_Button|macro button]] and copy the following code into it.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[abort(hasImpersonated())] &lt;!-- Abort macro if no token is impersonated --&gt;

[h,foreach(macro, getMacros()), code: {
  &lt;!-- 
    == each label can appear more than once (i.e. more than one
    == button with same label, so we need to get all the button
    == indexes for a label
  --&gt;

  [h,foreach(index, getMacroIndexes(macro)), code: {
    [props = getMacroProps(index)]
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                   matches(macro, &quot;Encounter:.*&quot;),  1, 0)]
    [h,if(isBlue): setMacroProps(index, &quot;color=default&quot;)]
  }]
}]
[abort(0)] &lt;!-- Suppress output text --&gt;
&lt;/source&gt;
The way the above macro works is by getting a list of the macros [[Macros:Functions:getMacros|getMacros()]] which will return all the labels of the [[Macro_Button|macro buttons]] on the [[Current Token]]. Since a [[Token|token]] can contain multiple [[Macro_Button|macro buttons]] with the same label the function [[Macros:Functions:getMacroIndexes|getMacroIndexes()]] is used to return the unique index of each [[Macro_Button|macro button]] for each of the labels. Then we use [[Macros:Functions:getMacroProps|getMacroProps()]] to get the properties of the [[Macro_Button|macro button]] in a [[Macros:string property list|string property list]]. The color of the [[Macro_Button|macro button]] is extracted from this using [[Macros:Functions:getStrProp|getStrProp()]] and we check to see if it is &quot;blue&quot;, if it is we also check to see if the label of the button starts with &quot;Encounter:&quot; and set the value of isBlue based on this. Then if isBlue is true (non zero) we use [[Macros:Functions:setMacroProps|setMacroProps()]] to change the color back to the default. 

You can test this macro by dragging a [[Token|token]] onto the map and adding a [[Macro_Button|macro button]] to it called &quot;Encounter:Something or other&quot; and set it to blue in the creation dialog.

[[image:ButtonSomethingOrOtherBlue.png]] [[image:ButtonSomethingOrOtherDefault.png]]

===Extended Rest, resetting color of buttons starting with &quot;Encounter:&quot; or &quot;Daily:&quot;===
For an extended rest we want to reset the color of any [[Macro_Button|macro buttons]] that start with either &quot;Encounter:&quot; or &quot;Daily:&quot;. So create a [[Introduction_to_Macro_Writing#Campaign Macros|campaign macro]] called &quot;Extended Rest&quot; (don't forget to check the [[Macros:Apply to Selected Tokens|Apply to Selected Tokens]] check box) and copy the following code into it.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[abort(hasImpersonated())] &lt;!-- Abort macro if no token is impersonated --&gt;

[h,foreach(macro, getMacros()), code: {
  &lt;!-- 
    == each label can appear more than once (i.e. more than one
    == button with same label, so we need to get all the button
    == indexes for a label
  --&gt;

  [h,foreach(index, getMacroIndexes(macro)), code: {
    [props = getMacroProps(index)]
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                   matches(macro, &quot;(Daily|Encounter):.*&quot;),  1, 0)]
    [h,if(isBlue): setMacroProps(index, &quot;color=default&quot;)]
  }]
}]
[abort(0)] &lt;!-- Suppress output text --&gt;
&lt;/source&gt;

The only difference between this macro and the previous one is where it checks the prefix of the [[Macro_Button|macro button]]. In the &quot;Short Rest&quot; [[Macro_Button|macro button]] we had 
&lt;source lang=&quot;mtmacro&quot; line start=12&gt;
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                   matches(macro, &quot;Encounter:.*&quot;),  1, 0)]
&lt;/source&gt;
Where as in the &quot;Extended Rest&quot; [[Macro_Button|macro button]] it is
&lt;source lang=&quot;mtmacro&quot; line start=12&gt;
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                   matches(macro, &quot;(Daily|Encounter):.*&quot;),  1, 0)]
&lt;/source&gt;
The pattern ''(Daily|Encounter):.*'' matches a string that starts with either &quot;Daily:&quot; or &quot;Encounter:&quot;. 
Hopefully from this you can see how to add powers with different durations, say you wanted to add powers that could be used once per round and you prefix them with &quot;Round:&quot;, for your &quot;New Round&quot; macro which resets the color you would change the lines to
&lt;source lang=&quot;mtmacro&quot; line start=12&gt;
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                   matches(macro, &quot;Round:.*&quot;),  1, 0)]
&lt;/source&gt;

And for your &quot;Short Rest&quot; you would change it to refresh encounter and round powers.
&lt;source lang=&quot;mtmacro&quot; line start=12&gt;
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                   matches(macro, &quot;(Round|Encounter):.*&quot;),  1, 0)]
&lt;/source&gt;
And for your &quot;Extended Rest&quot; you would change it to refresh daily, encounter and round powers.
&lt;source lang=&quot;mtmacro&quot; line start=12&gt;
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                   matches(macro, &quot;(Round|Encounter|Daily):.*&quot;),  1, 0)]
&lt;/source&gt;

===Using Powers, or getting the blues...===
So now all that is left is to set the color of the buttons when they are used. As of 1.3b48 there is no way to determine which button has been pressed from a macro,  but what you can do is to add code like the following to your power macros.

&lt;source lang=&quot;mtmacro&quot; line&gt;
    [h: setMacroProps(&quot;Encouner:Burning Hands&quot;, &quot;color=blue&quot;)]
&lt;/source&gt;
Replacing the &quot;Encounter:Burning Hands&quot; with the label of your [[Macro_Button|macro button]].
So lets try it, on your token create a [[Macro_Button|macro button]] called &quot;Daily:Sleep&quot; and in the button place the following code
&lt;source lang=&quot;mtmacro&quot; line&gt;
Watch, the watch, you are getting sleepy, your eyelids are getting heavy.... [h: setMacroProps(&quot;Daily:Sleep&quot;, &quot;color=blue&quot;)]
&lt;/source&gt; 
Click on the button and hopefully you should see it changE to blue.

===Multiple Power Buttons with the same name===
A word of warning though the above method will change the color of all buttons with that label so if you have duplicates and only want to set one (you may want to implement multi use per day powers as multiple buttons for example)

Drag a new [[Token:token|token]] onto the map and change its name to Lib:DnD4ePowers, and create a [[Macro_Button|macro button]] called &quot;UsePower&quot;, then copy in the following code.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: found = 0]
[h: indexes = getMacroIndexes(macro.args)]
[h, foreach(button, indexes), code: {
    [if(found==0), code: {
        [color = getStrProp(getMacroProps(button), &quot;color&quot;)]
        [if(color==&quot;default&quot;): setMacroProps(button, &quot;color=blue&quot;)]
        [if(color==&quot;default&quot;): found=1]
    }]
}]
&lt;/source&gt;
This will loop through all of the indexes for the [[Macro_Button|macro button]]s with the specified name searching for one that is the default color, once it finds one it sets its color to blue and sets found=1 so no other buttons are changed (as of 1.3b48 there is no way to break out of a loop).

Now create a [[Macro_Button|macro button]] called &quot;Daily:Lay On Hands&quot; and copy the following in.

&lt;source lang=&quot;mtmacro&quot; line&gt;
    Oooh tingly!
    [h,macro(&quot;UsePower@Lib:DnD4ePowers&quot;): &quot;Daily:Lay On Hands&quot;]
&lt;/source&gt;
Duplicate that a few times and then when you click on on of the buttons then one of the &quot;Daily:Lay On Hands&quot; buttons will turn blue.

Fine you say but I would like to stop players using powers that are blue (or in the case of multi use powers where there are no non blue ones remaining).

We can do that by changing the &quot;UsePower&quot; macro we created above on the Lib:DnD4ePowers [[Token:library token|library token]].
Change it to the following

===Sorry Sir/Madam, you have already used that!===
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: found = 0]
[h: indexes = getMacroIndexes(macro.args)]
[h, foreach(button, indexes), code: {
    [if(found==0), code: {
        [color = getStrProp(getMacroProps(button), &quot;color&quot;)]
        [if(color==&quot;default&quot;): setMacroProps(button, &quot;color=blue&quot;)]
        [if(color==&quot;default&quot;): found=1]
    }]
}]
&lt;!-- if &quot;free&quot; one is not found then inform user they can't do it --&gt;
[if(found==0), code: {
    [dialog(&quot;PowerUsed&quot;):  {
        &lt;title&gt;Can Not Use Power&lt;/title&gt;
        &lt;meta name=&quot;temporary&quot; content=&quot;true&quot;&gt;
        You have already used [r: macro.args]
    }]
}]
[abort(found)] &lt;!-- Abort the macro if an unused power was not found --&gt;
&lt;/source&gt;

And change the [[Token:token]]'s &quot;Daily:Lay On Hands&quot; macro code (don't forget to change all the duplicates too).
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [h,macro(&quot;UsePower@Lib:DnD4ePowers&quot;): &quot;Daily:Lay On Hands&quot;]
    Oooh tingly!
&lt;/source&gt;

Then clickity, clickity, click on the &quot;Daily:Lay On Hands&quot; buttons and when you have none left you should get the following dialog.

[[image:PowerUsedDialog.png]]

It ain't pretty but the concept is there and you can easily expand on it to pretty it up.

You can also use this for cases where there is only a single button for a power.

You can download this part of the tutorial in in a [http://lmwcs.com/maptool/campaigns/ButtonChange1.cmpgn campaign file] which was made using MapTool 1.3b48.
[[Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:ButtonSomethingOrOtherBlueGroup.png</title>
    <ns>6</ns>
    <id>254</id>
    <revision>
      <id>586</id>
      <timestamp>2008-12-22T11:13:10Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:ButtonSomethingOrOtherDefaultGroup.png</title>
    <ns>6</ns>
    <id>255</id>
    <revision>
      <id>587</id>
      <timestamp>2008-12-22T11:13:36Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:PowerUsedDialogGroup.png</title>
    <ns>6</ns>
    <id>256</id>
    <revision>
      <id>588</id>
      <timestamp>2008-12-22T12:10:47Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Updating Macro Buttons Using a Macro (Group Method)</title>
    <ns>0</ns>
    <id>257</id>
    <revision>
      <id>5601</id>
      <parentid>5596</parentid>
      <timestamp>2011-07-19T16:06:29Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12097">==Updating color of our macro buttons using DnD4e as an example==
For an example I will use DnD4e powers, when a power is used it will then update the button to show this. Although this is example is for DnD4e the technique is applicable for many other systems.

Lets assume that you have a macro groups named &quot;Daily Powers&quot; and &quot;Encounter Powers&quot; where we place all of our powers, and we want to set the color of the [[Macro_Button|macro button]] to blue if the power has been used. If you want another way to do this without using different groups see [[Tutorials:Macros:UpdatingMacroButtons:DnD4ePowersPrefix | Tracking Used DnD 4e Powers (Macro Prefix Method)]]



'''Version update:''' 
This tutorial was written before 1.3b50. As of 1.3b50 you can use [[Macros:Functions:getMacroButtonIndex|getMacroButtonIndex]] to determine the index of the button that was pressed instead of setting/getting the properties of the button by name you can use the index of the button in place of the name, this way you will not run the risk of updating buttons with the same name.


===Short Rest, resetting color of buttons in the &quot;Encounter Powers&quot; group===
So first we will create a [[Macro_Button|macro button]] called &quot;Short Rest&quot;, for this tutorial I will assume you just create it as a [[Introduction_to_Macro_Writing#Campaign Macros|campaign macro]] --just remember to check the [[Macros:Apply to Selected Tokens|Apply to Selected Tokens]] check mark-- you can just as easily create these as macros in [[Token:library token|library token]] macros and call them from from [[Macro_Button|macro buttons]] on your [[Token|tokens]].

[[image:ShortRest1MacroButton.png]]

So create the &quot;Short Rest&quot; [[Macro_Button|macro button]] and copy the following code into it.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[abort(hasImpersonated())] &lt;!-- Abort macro if no token is impersonated --&gt;

[h,foreach(macro, getMacros()), code: {
  &lt;!-- 
    == each label can appear more than once (i.e. more than one
    == button with same label, so we need to get all the button
    == indexes for a label
  --&gt;

  [h,foreach(index, getMacroIndexes(macro)), code: {
    [props = getMacroProps(index)]
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                 getStrProp(props, &quot;group&quot;) == &quot;Encounter Powers&quot;, 1, 0)]
    [h,if(isBlue): setMacroProps(index, &quot;color=default&quot;)]
  }]
}]
[abort(0)] &lt;!-- Suppress output text --&gt;
&lt;/source&gt;
The way the above macro works is by getting a list of the macros [[Macros:Functions:getMacros|getMacros()]] which will return all the labels of the [[Macro_Button|macro buttons]] on the [[Current Token]]. Since a [[Token|token]] can contain multiple [[Macro_Button|macro buttons]] with the same label the function [[Macros:Functions:getMacroIndexes|getMacroIndexes()]] is used to return the unique index of each [[Macro_Button|macro button]] for each of the labels. Then we use [[Macros:Functions:getMacroProps|getMacroProps()]] to get the properties of the [[Macro_Button|macro button]] in a [[Macros:string property list|string property list]]. The color of the [[Macro_Button|macro button]] is extracted from this using [[Macros:Functions:getStrProp|getStrProp()]] and we check to see if it is &quot;blue&quot;, if it is we also check to see if it is in the &quot;Encounter Powers&quot; group, and set the value of isBlue based on this. Then if isBlue is true (non zero) we use [[Macros:Functions:setMacroProps|setMacroProps()]] to change the color back to the default. 

You can test this macro by dragging a [[Token|token]] onto the map and adding a [[Macro_Button|macro button]] to it called &quot;Something or other&quot; in the &quot;Encounter Powers&quot; group and set it to blue in the creation dialog.

[[image:ButtonSomethingOrOtherBlueGroup.png]] [[image:ButtonSomethingOrOtherDefaultGroup.png]]

===Extended Rest, resetting color of buttons starting with &quot;Encounter Powers&quot; or &quot;Daily Powers&quot;===
For an extended rest we want to reset the color of any [[Macro_Button|macro buttons]] that start with either &quot;Encounter Powers&quot; or &quot;Daily Powers&quot;. So create a [[Introduction_to_Macro_Writing#Campaign Macros|campaign macro]] called &quot;Extended Rest&quot; (don't forget to check the [[Macros:Apply to Selected Tokens|Apply to Selected Tokens]] check box) and copy the following code into it.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[abort(hasImpersonated())] &lt;!-- Abort macro if no token is impersonated --&gt;

[h,foreach(macro, getMacros()), code: {
  &lt;!-- 
    == each label can appear more than once (i.e. more than one
    == button with same label, so we need to get all the button
    == indexes for a label
  --&gt;

  [h,foreach(index, getMacroIndexes(macro)), code: {
    [props = getMacroProps(index)]
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                   matches(getStrProp(props, &quot;group&quot;),
                          &quot;(Daily|Encounter) Powers&quot;), 1, 0)]
    [h,if(isBlue): setMacroProps(index, &quot;color=default&quot;)]
  }]
}]
[abort(0)] &lt;!-- Suppress output text --&gt;
&lt;/source&gt;

The only difference between this macro and the previous one is where it checks the group of the [[Macro_Button|macro button]]. In the &quot;Short Rest&quot; [[Macro_Button|macro button]] we had 
&lt;source lang=&quot;mtmacro&quot; line start=12&gt;
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                 getStrProp(props, &quot;group&quot;) == &quot;Encounter Powers&quot;, 1, 0)]
&lt;/source&gt;
Where as in the &quot;Extended Rest&quot; [[Macro_Button|macro button]] it is
&lt;source lang=&quot;mtmacro&quot; line start=12&gt;
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                   matches(getStrProp(props, &quot;group&quot;),
                          &quot;(Daily|Encounter) Powers&quot;), 1, 0)]
&lt;/source&gt;
The pattern ''(Daily|Encounter) Powers'' matches both the &quot;Daily Powers&quot; and &quot;Encounter Powers&quot; strings.
Hopefully from this you can see how to add powers with different durations, say you wanted to add powers that could be used once per round and place them in the &quot;Round Group&quot;, for your &quot;New Round&quot; macro which resets the color you would change the lines to
&lt;source lang=&quot;mtmacro&quot; line start=12&gt;
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                 getStrProp(props, &quot;group&quot;) == &quot;Round Powers&quot;, 1, 0)]
&lt;/source&gt;

And for your &quot;Short Rest&quot; you would change it to refresh encounter and round powers.
&lt;source lang=&quot;mtmacro&quot; line start=12&gt;
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                   matches(getStrProp(props, &quot;group&quot;),
                          &quot;(Round|Encounter) Powers&quot;), 1, 0)]
&lt;/source&gt;
And for your &quot;Extended Rest&quot; you would change it to refresh daily, encounter and round powers.
&lt;source lang=&quot;mtmacro&quot; line start=12&gt;
    [isBlue = if(getStrProp(props, &quot;color&quot;) == &quot;blue&quot; &amp;&amp;
                   matches(getStrProp(props, &quot;group&quot;),
                          &quot;(Round|Encounter|Daily) Powers&quot;), 1, 0)]
&lt;/source&gt;

===Using Powers, or getting the blues...===
So now all that is left is to set the color of the buttons when they are used. As of 1.3b48 there is no way to determine which button has been pressed from a macro,  but what you can do is to add code like the following to your power macros.

&lt;source lang=&quot;mtmacro&quot; line&gt;
    [h: setMacroProps(&quot;Burning Hands&quot;, &quot;color=blue&quot;)]
&lt;/source&gt;
Replacing the &quot;Burning Hands&quot; with the label of your [[Macro_Button|macro button]].
So lets try it, on your token create a [[Macro_Button|macro button]] called &quot;Sleep&quot; in the group called &quot;Daily Powers&quot; and in the button place the following code
&lt;source lang=&quot;mtmacro&quot; line&gt;
Watch, the watch, you are getting sleepy, your eyelids are getting heavy.... [h: setMacroProps(&quot;Sleep&quot;, &quot;color=blue&quot;)]
&lt;/source&gt; 
Click on the button and hopefully you should see it change to blue.

===Multiple Power Buttons with the same name===
A word of warning though the above method will change the color of all buttons with that label so if you have duplicates and only want to set one (you may want to implement multi use per day powers as multiple buttons for example)

Drag a new [[Token|token]] onto the map and change its name to Lib:DnD4ePowers, and create a [[Macro_Button|macro button]] called &quot;UseDailyPower&quot;, then copy in the following code.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: found = 0]
[h: indexes = getMacroIndexes(macro.args)]
[h, foreach(button, indexes), code: {
    [if(found==0), code: {
        [props = getMacroProps(button)]
        [group = getStrProp(props, &quot;group&quot;)]
        [color = getStrProp(props, &quot;color&quot;)]
        [if(color==&quot;default&quot; &amp;&amp; group == &quot;Daily Powers&quot;): 
            setMacroProps(button, &quot;color=blue&quot;)
        ]
        [if(color==&quot;default&quot; &amp;&amp; group == &quot;Daily Powers&quot;): found=1]
    }]
}]
&lt;/source&gt;
This will loop through all of the indexes for the [[Macro_Button|macro button]]s with the specified name searching for one that is the default color and a daily power, once it finds one it sets its color to blue and sets found=1 so no other buttons are changed (as of 1.3b48 there is no way to break out of a loop).

Now create a [[Macro_Button|macro button]] called &quot;Lay On Hands&quot; and copy the following in.

&lt;source lang=&quot;mtmacro&quot; line&gt;
    Oooh tingly!
    [h,macro(&quot;UseDailyPower@Lib:DnD4ePowers&quot;): &quot;Lay On Hands&quot;]
&lt;/source&gt;
Duplicate that a few times and then when you click on on of the buttons then one of the &quot;Lay On Hands&quot; buttons will turn blue.

Fine you say but I would like to stop players using powers that are blue (or in the case of multi use powers where there are no non blue ones remaining).

We can do that by changing the &quot;UseDailyPower&quot; macro we created above on the Lib:DnD4ePowers [[Token:library token|library token]].
Change it to the following

===Sorry Sir/Madam, you have already used that!===
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: found = 0]
[h: indexes = getMacroIndexes(macro.args)]
[h, foreach(button, indexes), code: {
    [if(found==0), code: {
        [props = getMacroProps(button)]
        [group = getStrProp(props, &quot;group&quot;)]
        [color = getStrProp(props, &quot;color&quot;)]
        [if(color==&quot;default&quot; &amp;&amp; group == &quot;Daily Powers&quot;): 
            setMacroProps(button, &quot;color=blue&quot;)
        ]
        [if(color==&quot;default&quot; &amp;&amp; group == &quot;Daily Powers&quot;): found=1]
    }]
}]
&lt;!-- if &quot;free&quot; one is not found then inform user they can't do it --&gt;
[if(found==0), code: {
    [dialog(&quot;PowerUsed&quot;):  {
        &lt;title&gt;Can Not Use Power&lt;/title&gt;
        &lt;meta name=&quot;temporary&quot; content=&quot;true&quot;&gt;
        You have already used [r: macro.args]
    }]
}]
[abort(found)] &lt;!-- Abort the macro if an unused power was not found --&gt;
&lt;/source&gt;

And change the [[Token|token]]'s &quot;Lay On Hands&quot; macro code (don't forget to change all the duplicates too).
&lt;source lang=&quot;mtmacro&quot; line&gt;
    [h,macro(&quot;UsePower@Lib:DnD4ePowers&quot;): &quot;Daily:Lay On Hands&quot;]
    Oooh tingly!
&lt;/source&gt;

Then clickity, clickity, click on the &quot;Daily:Lay On Hands&quot; buttons and when you have none left you should get the following dialog.

[[image:PowerUsedDialogGroup.png]]

It ain't pretty but the concept is there and you can easily expand on it to pretty it up.

While we are at it we should add a &quot;UseEncounterPower&quot; macro to Lib:DnD4ePowers.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: found = 0]
[h: indexes = getMacroIndexes(macro.args)]
[h, foreach(button, indexes), code: {
    [if(found==0), code: {
        [props = getMacroProps(button)]
        [group = getStrProp(props, &quot;group&quot;)]
        [color = getStrProp(props, &quot;color&quot;)]
        [if(color==&quot;default&quot; &amp;&amp; group == &quot;Encounter Powers&quot;): 
            setMacroProps(button, &quot;color=blue&quot;)
        ]
        [if(color==&quot;default&quot; &amp;&amp; group == &quot;Encounter Powers&quot;): found=1]
    }]
}]
&lt;!-- if &quot;free&quot; one is not found then inform user they can't do it --&gt;
[if(found==0), code: {
    [dialog(&quot;PowerUsed&quot;):  {
        &lt;title&gt;Can Not Use Power&lt;/title&gt;
        &lt;meta name=&quot;temporary&quot; content=&quot;true&quot;&gt;
        You have already used [r: macro.args]
    }]
}]
[abort(found)] &lt;!-- Abort the macro if an unused power was not found --&gt;
&lt;/source&gt;

You can also use this for cases where there is only a single button for a power.

You can download this part of the tutorial in in a [http://lmwcs.com/maptool/campaigns/ButtonChange2.cmpgn campaign file] which was made using MapTool 1.3b48.
[[Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:ButtonSomethingOrOtherNotUsed.png</title>
    <ns>6</ns>
    <id>258</id>
    <revision>
      <id>590</id>
      <timestamp>2008-12-22T13:11:51Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:ButtonSomethingOrOtherUsed.png</title>
    <ns>6</ns>
    <id>259</id>
    <revision>
      <id>591</id>
      <timestamp>2008-12-22T13:12:03Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Glossary</title>
    <ns>0</ns>
    <id>260</id>
    <revision>
      <id>3995</id>
      <parentid>3446</parentid>
      <timestamp>2009-10-10T15:09:11Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <comment>/* T */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5030">__NOTOC__
==B==
;Bar
:One, two, or multi-image graphical elements displayed on a token used to indicate the status of a consumable resource such as Hit Points.

==C==

;Campaign or Campaign file
:A zipped XML file with the '''.cmpgn''' file extension containing tokens, maps, token macros, campaign macros, campaign properties, and [[Token Property|token properties]]

;Campaign Macro
:A macro specific to a campaign file. These macros are available to players and the GM, and are displayed in the Campaign Macros window.

==D==

;Dialog
:A modeless (''i.e.'', does not require user interaction) popup generated by the [[Tutorials:Macros:DialogsAndFramesIntro | dialog]] roll option. 

==F==

;Frame
:A dockable MapTool window that can be generated via the [[Tutorials:Macros:DialogsAndFramesIntro | frame]] roll option.

==G==

;Global Macro
:Macros that are available regardless of the campaign file currently loaded in MapTool, and regardless of whether the instance of MapTool is a server or a client. Global macros are ''only'' available to the running instance.

==H==

;Halo
:A colored border that appears around a token on the map. The Halo can be set via the right-click menu to one of several pre-set colors, or set and changed via macro by changing the variable [[token.halo]].

==I==

;Image token
:A special token that contains an image that may be referenced by other macros. 

;Initiative Panel
:A dockable panel in MapTool that provides simple initiative tracking functionality. 

==L==

;Library Token
:A special token designed to hold a library of macros (similar to a function library) that can be called by token macros, campaign macros, and global macros. Often called &quot;Lib:tokens.&quot;

==M==

;Macro
:A series of text instructions used to automate processes in MapTool. See [[Macros:introduction | Macro Introduction]] for more details.

;Map
:An image file displayed in the map display area in MapTool. This image is shared among all connected players and the GM. 

==P==
;Pion
:Marqueur visuel représentant habituellement un personnage, un PNJ ou un monstre.

;Property
:Generic term for a variable contained in a token; a more explicit term is [[Token Property]].

==R==

;Resource Library
:The library of images, tokens, and other resources that MapTool can access. The Resource Library appears as a set of folders in the Library window in MapTool's main interface. These folders are links that point to locations on your computer's hard drive - if you add a folder to the resource library, MapTool becomes aware of that folder's contents, and they can be dragged from the Library window onto a MapTool map, or selected via several different dialogs.

;Roll Option
:One of several &quot;switches&quot; that alter how the macro code following the switch is executed. Roll options (also called roll formatting options) are always in the format [option(''arguments''): ''body of roll'']. Simple options include [[Macros:Roll:types|[h: ]]] (hides output of roll) or [[Macros:Roll:types|[t: ]]] (creates a &quot;tooltip roll&quot;), while more complex options include [[Macros:Branching_and_Looping|[SWITCH(): ]]] and [[Macros:Branching_and_Looping|[IF(): ]]].

==S==

;State
:Also called a [[Token:state|token state]], a state is a binary condition that is set for a given token.

;String List
:A string containing a list of items in the format &quot;item1, item2, item3,...&quot;

;String Property List
:A string containing key-value pairs in the format &quot;key1=value1; key2=value2; key3=value3;...&quot;

==T==

;Token
:A visual marker that is dropped on a MapTool map. Tokens usually represent characters, monsters, or NPCs, and often including an image as well as a set of [[Token Property|token properties]] which define the attributes of the creature or character.

;Token Bar
:One, two, or multi-image graphical elements displayed on a token that are typically used to visually indicate the status of consumable or expendable resource such as Hit Points or Ammunition.

;Token Id
:A string that uniquely identifies a specific token.  Many macro functions operate on the current token by default but allow a '''token id''' to be given so that operations are applied against that token instead.  When a token id is provided MapTool checks the string against (1) the token name, (2) the token's ''''GM Name'''', and (3) the internal identifier for the token.  The first two are self-explanatory, but the third one is not normally visible anywhere within MapTool.  Token ids can be obtained by calling [[getTokens]], for example, and will appear as a long string of uppercase letters and digits.

;Token State
:A binary (i.e., it has two possible values, 1 or 0) variable that is set for a given token, frequently used for conditions or statuses that affect a particular character in a game (for example &quot;Bloodied&quot; or &quot;Fatigued&quot;). Token states often have images associated with them that appear as overlays on the token.

;Trusted Macro
:A macro run from a Library token or run by the GM, that cannot be edited by a player.
[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:Glossary</title>
    <ns>1</ns>
    <id>261</id>
    <revision>
      <id>599</id>
      <timestamp>2008-12-22T15:25:00Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>New page: Craig, there's another glossary page in action - do you want to merge or move one of them? ~~~~</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="147">Craig, there's another glossary page in action - do you want to merge or move one of them? [[User:Cclouser|Cclouser]] 15:25, 22 December 2008 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Edittoken-name-and-label.jpg</title>
    <ns>6</ns>
    <id>262</id>
    <revision>
      <id>608</id>
      <parentid>600</parentid>
      <timestamp>2008-12-22T17:15:58Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:Edittoken-name-and-label.jpg]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>token.gm name</title>
    <ns>0</ns>
    <id>263</id>
    <revision>
      <id>4188</id>
      <parentid>2316</parentid>
      <timestamp>2010-04-13T15:16:35Z</timestamp>
      <contributor>
        <username>Jasper Phule</username>
        <id>176</id>
      </contributor>
      <minor/>
      <comment>Added comment that this is only valid in a trusted macro.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="735">The variable ''token.gm_name'' allows programmatic querying and setting of the token's [[Token:GM_Name|GM Name]] (the second text field in the screenshot of the Edit Token dialog).

''token.gm_name'' is only a valid expression in a trusted macro.

[[Image:Edittoken-name-and-label.jpg]]

==Examples==

===Getting the Token GM Name===
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:secretName=token.gm_name]
GM's Name: [secretName]
&lt;/source&gt;

Outputs the value of ''token.gm_name''.

===Setting the Token GM Name===
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:token.gm_name = &quot;Soldier&quot;]
&lt;/source&gt;

Sets the value of ''token.gm_name'' to &quot;Soldier.&quot;

==Related Pages==

* [[token.name]]
* [[token.label]]
[[Category:Special Variable]]
{{DISPLAYTITLE:token.gm_name}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>token.name</title>
    <ns>0</ns>
    <id>264</id>
    <revision>
      <id>2311</id>
      <parentid>2306</parentid>
      <timestamp>2009-03-25T13:52:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="629">The variable ''token.name'' allows programmatic querying and setting of the token's [[Token:Token_name|Name]] (the first text field in the screenshot of the Edit Token dialog). 

[[Image:Edittoken-name-and-label.jpg]]

==Examples==

===Getting the Token Name===
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:charName=token.name]
Token Name: [charName]
&lt;/source&gt;

Outputs the value of ''token.name''.

===Setting the Token Name===
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:token.name = &quot;Marok the Red&quot;]
&lt;/source&gt;

Sets the value of ''token.name'' to &quot;Marok the Red.&quot;

==Related Pages==

* [[token.gm_name]]
* [[token.label]]
[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Updating Macro Buttons Using a Macro (Label Method)</title>
    <ns>0</ns>
    <id>265</id>
    <revision>
      <id>5605</id>
      <parentid>5604</parentid>
      <timestamp>2011-07-19T16:15:11Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>/* Multiple Power Buttons with the same name */ Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11036">==Updating the Label of our macro buttons using DnD4e as an Example.==

For an example I will use DnD4e powers, when a power is used it will then update the button to show this. Although this is example is for DnD4e the technique is applicable for many other systems. 

Lets assume that you have a macro groups named &quot;Daily Powers&quot; and &quot;Encounter Powers&quot; where we place all of our powers, and we want to set the color of the macro button to blue if the power has been used. If you want another way to do this without using different groups see Tracking Used DnD 4e Powers (Macro Prefix Method)


'''Version update:''' 
This tutorial was written before 1.3b50. As of 1.3b50 you can use [[Macros:Functions:getMacroButtonIndex|getMacroButtonIndex]] to determine the index of the button that was pressed instead of setting/getting the properties of the button by name you can use the index of the button in place of the name, this way you will not run the risk of updating buttons with the same name.


===Short Rest, resetting label of buttons in the &quot;Encounter Powers&quot; group===
So first we create a [[Macro_Button|macro button]] called &quot;Short Rest&quot;, for this tutorial I will assume that you create it as a [[Introduction_to_Macro_Writing#Campaign Macros|campaign macro]] --just remember to check the [[Macros:Apply to Selected Tokens|Apply to Selected Tokens]] check mark-- you can just as easily create these as macros in [[Token:library token|library token]] macros and call them from from [[Macro_Button|macro buttons]] on your [[Token|tokens]].

[[image:ShortRest1MacroButton.png]]

So create the &quot;Short Rest&quot; [[Macro_Button|macro button]] and copy the following code into it.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[abort(hasImpersonated())] &lt;!-- Abort macro if no token is impersonated --&gt;

[foreach(macro,getMacros()), code: {
  &lt;!-- 
    == each label can appear more than once (i.e. more than one
    == button with same label, so we need to get all the button
    == indexes for a label
  --&gt;

    [foreach(index, getMacroIndexes(macro)), code: {
        [h:props = getMacroProps(index)]
        [label = getStrProp(props, &quot;label&quot;)]
        [isUsed = matches(label, &quot;.* \\(Used\\)&quot;)]
        [isEnc = matches(getStrProp(props, &quot;group&quot;), &quot;Encounter Powers&quot;)]
        [if(isUsed &amp;&amp; isEnc): setMacroProps(index, &quot;label=&quot;+
            replace(label, &quot; \\(Used\\)&quot;, &quot;&quot;))]
    }]
}]
[abort(0)] &lt;!-- Suppress the macros output --&gt;
&lt;/source&gt;
This macro will get the labels of all the macros with [[Macros:Functions:getMacros|getMacros()]]. It will then loop through all of these labels and get the index for each [[Macro_Button|macro button]] with that label. Then it will check to see if the macro label ends with the text &quot;(Used)&quot; if it does and it is in the &quot;Encounter Powers&quot; group it will use the [[Macros:Functions:replace|replace()]] function to replace the &quot; (Used)&quot; with nothing (&quot;&quot;) there by removing it from the label.

You can test this by creating a macro on your [[Token|token]] called &quot;Something or other (Used)&quot; with a group of &quot;Encounter Powers&quot;, impersonating the token and clicking on the &quot;Short Rest&quot; [[Macro_Button|macro button]]. 


[[image:ButtonSomethingOrOtherUsed.png]] [[image:ButtonSomethingOrOtherNotUsed.png]]

===Extended Rest, resetting label of buttons in the &quot;Encounter Powers&quot; and &quot;Daily Powers&quot;group===
For an extended rest we want to reset the color of any [[Macro_Button|macro buttons]] that start with either &quot;Encounter:&quot; or &quot;Daily:&quot;. So create a [[Introduction_to_Macro_Writing#Campaign Macros|campaign macro]] called &quot;Extended Rest&quot; (don't forget to check the [[Macros:Apply to Selected Tokens|Apply to Selected Tokens]] check box) and copy the following code into it.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[abort(hasImpersonated())] &lt;!-- Abort macro if no token is impersonated --&gt;

[foreach(macro,getMacros()), code: {
  &lt;!-- 
    == each label can appear more than once (i.e. more than one
    == button with same label, so we need to get all the button
    == indexes for a label
  --&gt;

    [foreach(index, getMacroIndexes(macro)), code: {
        [h:props = getMacroProps(index)]
        [label = getStrProp(props, &quot;label&quot;)]
        [isUsed = matches(label, &quot;.* \\(Used\\)&quot;)]
        [isEnc = matches(getStrProp(props, &quot;group&quot;), &quot;(Encounter|Daily) Powers&quot;)]
        [if(isUsed &amp;&amp; isEnc): setMacroProps(index, &quot;label=&quot;+
            replace(label, &quot; \\(Used\\)&quot;, &quot;&quot;))]
    }]
}]
[abort(0)] &lt;!-- Suppress the macros output --&gt;
&lt;/source&gt;

The only difference between this macro and the previous one is where it checks the group.
For &quot;Short Rest&quot; it is.
&lt;source lang=&quot;mtmacro&quot; line start=14&gt;
        [isEnc = matches(getStrProp(props, &quot;group&quot;), &quot;Encounter Powers&quot;)]
&lt;/source&gt;

Where as for &quot;Extended Rest&quot; it is.
&lt;source lang=&quot;mtmacro&quot; line start=14&gt;
        [isEnc = matches(getStrProp(props, &quot;group&quot;), &quot;(Encounter|Daily) Powers&quot;)]
&lt;/source&gt;

The pattern (Daily|Encounter) Powers matches both the &quot;Daily Powers&quot; and &quot;Encounter Powers&quot; strings. Hopefully from this you can see how to add powers with different durations, say you wanted to add powers that could be used once per round and place them in the &quot;Round Group&quot;, for your &quot;New Round&quot; macro which resets the label you would change the lines to 

&lt;source lang=&quot;mtmacro&quot; line start=14&gt;
        [isEnc = matches(getStrProp(props, &quot;group&quot;), &quot;Round Powers&quot;)]
&lt;/source&gt;

And for your &quot;Short Rest&quot; you would change it to refresh encounter and round powers.
&lt;source lang=&quot;mtmacro&quot; line start=14&gt;
        [isEnc = matches(getStrProp(props, &quot;group&quot;), &quot;(Round|Encounter) Powers&quot;)]
&lt;/source&gt;

And for your &quot;Extended Rest&quot; you would change it to refresh daily, encounter and round powers.
&lt;source lang=&quot;mtmacro&quot; line start=14&gt;
        [isEnc = matches(getStrProp(props, &quot;group&quot;), &quot;(Round|Encounter|Daily) Powers&quot;)]
&lt;/source&gt;

===Marking Powers as Used===
So now all that is left is to set the color of the buttons when they are used. As of 1.3b48 there is no way to determine which button has been pressed from a macro, but what you can do is to add code like the following to your power macros. 


&lt;source lang=&quot;mtmacro&quot; line&gt;
    [h: setMacroProps(&quot;Burning Hands&quot;, &quot;Burning Hands (Used)&quot;]
&lt;/source&gt;
Replacing both occurrences of &quot;Burning Hands&quot; with the label of your [[Macro_Button|macro button]]. So lets try it, on your [[Token|token]] create a [[Macro_Button|macro button]] called &quot;Sleep
&quot; in the group called &quot;Daily Powers&quot; and in the button place the following code.
&lt;source lang=&quot;mtmacro&quot; line&gt;
      Watch, the watch, you are getting sleepy, your eyelids are getting heavy.... [h: setMacroProps(&quot;Sleep&quot;, &quot;label=Sleep (Used)&quot;)] 
&lt;/source&gt;
Click on the button and hopefully you should see it change.

===Multiple Power Buttons with the same name===
A word of warning though the above method will change the color of all buttons with that label so if you have duplicates and only want to set one (you may want to implement multi use per day powers as multiple buttons for example) 

Drag a new [[Token|token]] onto the map and change its name to Lib:DnD4ePowers, and create a [[Macro_Button|macro button]] called &quot;UseDailyPower&quot;, then copy in the following code.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[found = 0]
[indexes = getMacroIndexes(macro.args)]
[foreach(button, indexes), code: {
    [if(found==0), code: {
        [props = getMacroProps(button)]
        [label = getStrProp(props, &quot;label&quot;)]
        [isPower = matches(label, macro.args)]
        [isDay = matches(getStrProp(props, &quot;group&quot;), 
                               &quot;Daily Powers&quot;)]
        [if(isPower == 1 &amp;&amp; isDay == 1 &amp;&amp; found == 0): 
            setMacroProps(button, &quot;label=&quot; + label + &quot; (Used)&quot;)
        ]
        [if(isPower == 1 &amp;&amp; isDay == 1 &amp;&amp; found == 0): found=1]
    }]
}]
&lt;/source&gt;
This will loop through all of the indexes for the [[Macro_Button|macro buttons]] with the specified name and if it finds one and it is in the &quot;Daily Powers&quot; group it will append &quot; (Used)&quot; to it. If you have more than one button it will append &quot; (Used)&quot; to each one as you push one of the buttons.

Now create a [[Macro_Button|macro button]] called &quot;Lay On Hands&quot; and copy the following in.
&lt;source lang=&quot;mtmacro&quot; line&gt;
    Oooh tingly!
    [h, macro(&quot;UseDailyPower@Lib:DnD4ePowers&quot;): &quot;Lay On Hands&quot;]
&lt;/source&gt;

Duplicate that a few times and then when you click on on of the buttons then one of the &quot;Lay On Hands&quot; buttons will change to &quot;Lay On Hands (Used)&quot;.

Fine you say but I would like to stop players using powers that are used (or in the case of multi use powers where there are no non used ones remaining).

We can do that by changing the &quot;UseDailyPower&quot; macro we created above on the Lib:DnD4ePowers [[Token:library token|library token]]. Change it to the following 
&lt;source lang=&quot;mtmacro&quot; line&gt;
[found = 0]
[indexes = getMacroIndexes(macro.args)]
[foreach(button, indexes), code: {
    [if(found==0), code: {
        [props = getMacroProps(button)]
        [label = getStrProp(props, &quot;label&quot;)]
        [isPower = matches(label, macro.args)]
        [isDay = matches(getStrProp(props, &quot;group&quot;), 
                               &quot;Daily Powers&quot;)]
        [if(isPower == 1 &amp;&amp; isDay == 1 &amp;&amp; found == 0): 
            setMacroProps(button, &quot;label=&quot; + label + &quot; (Used)&quot;)
        ]
        [if(isPower == 1 &amp;&amp; isDay == 1 &amp;&amp; found == 0): found=1]
    }]
}]
&lt;!-- if &quot;free&quot; one is not found then inform user they can't do it --&gt;
[if(found==0), code: {
    [dialog(&quot;PowerUsed&quot;):  {
        &lt;title&gt;Can Not Use Power&lt;/title&gt;
        &lt;meta name=&quot;temporary&quot; content=&quot;true&quot;&gt;
        You have already used [r: macro.args]
    }]
}]
[abort(found)] &lt;!-- Abort the macro if an unused power was not found --&gt;
&lt;/source&gt;
[[image:PowerUsedDialogGroup.png]]

It ain't pretty but the concept is there and you can easily expand on it to pretty it up.

While we are at it we should add a &quot;UseEncounterPower&quot; macro to Lib:DnD4ePowers. 
&lt;source lang=&quot;mtmacro&quot; line&gt;
[found = 0]
[indexes = getMacroIndexes(macro.args)]
[foreach(button, indexes), code: {
    [if(found==0), code: {
        [props = getMacroProps(button)]
        [label = getStrProp(props, &quot;label&quot;)]
        [isPower = matches(label, macro.args)]
        [isEnc = matches(getStrProp(props, &quot;group&quot;), 
                               &quot;Daily Powers&quot;)]
        [if(isPower == 1 &amp;&amp; isEnc == 1 &amp;&amp; found == 0): 
            setMacroProps(button, &quot;label=&quot; + label + &quot; (Used)&quot;)
        ]
        [if(isPower == 1 &amp;&amp; isEnc == 1 &amp;&amp; found == 0): found=1]
    }]
}]
&lt;!-- if &quot;free&quot; one is not found then inform user they can't do it --&gt;
[if(found==0), code: {
    [dialog(&quot;PowerUsed&quot;):  {
        &lt;title&gt;Can Not Use Power&lt;/title&gt;
        &lt;meta name=&quot;temporary&quot; content=&quot;true&quot;&gt;
        You have already used [r: macro.args]
    }]
}]
[abort(found)] &lt;!-- Abort the macro if an unused power was not found --&gt;
&lt;/source&gt;

You can also use this for cases where there is only a single button for a power.

You can download this part of the tutorial in in a [http://lmwcs.com/maptool/campaigns/ButtonChange3.cmpgn campaign file] which was made using MapTool 1.3b48.
[[Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Token-halo.jpg</title>
    <ns>6</ns>
    <id>266</id>
    <revision>
      <id>607</id>
      <parentid>605</parentid>
      <timestamp>2008-12-22T17:09:26Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:Token-halo.jpg]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>token.halo</title>
    <ns>0</ns>
    <id>267</id>
    <revision>
      <id>2315</id>
      <parentid>2296</parentid>
      <timestamp>2009-03-25T13:54:22Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1239">The variable ''token.halo'' allows programmatic querying and setting of the token's '''Halo''', a colored border that, if set, appears around the token. In the image below, the yellow border around the token is the token's halo.

[[Image:Token-halo.jpg]]

==Examples==

===Getting the Token Halo Color===
&lt;source lang=&quot;mtmacro&quot; line&gt;
Halo color: [token.halo]
&lt;/source&gt;

Outputs the hexadecimal value for the token halo color. In the case of the example image above, it would output ''#ffff00''. 

===Setting the Token Halo Color===
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:token.halo = &quot;red&quot;]
&lt;/source&gt;

or

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:token.halo = #ff0000]
&lt;/source&gt;

Sets the color of the token.halo to red (or the hexadecimal value ''#ff0000'').

===Removing the Token Halo===

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:token.halo=&quot;None&quot;]
&lt;/source&gt;

===Color Names and Standard Colors===

The ''token.halo'' variable accepts the following named colors (if using a named color, enclose the value in quotes): 

* Black
* Green
* Yellow
* Orange
* Red
* Blue
* Cyan
* DarkGray
* Magenta
* Pink
* White

The variable will also accept any hexadecimal color value. Hexadecimal color values do not need to be enclosed in quotes.
[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>token.label</title>
    <ns>0</ns>
    <id>268</id>
    <revision>
      <id>2312</id>
      <parentid>2304</parentid>
      <timestamp>2009-03-25T13:53:19Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="619">The variable ''token.label'' allows programmatic querying and setting of the token's [[Token:Token_label|Label]] (the third text field in the screenshot of the Edit Token dialog). 

[[Image:Edittoken-name-and-label.jpg]]

==Examples==

===Getting the Token Label===
&lt;source lang=&quot;mtmacro&quot; line&gt;
Token Name: [token.label]
&lt;/source&gt;

Outputs the value of ''token.label''.

===Setting the Token Label===
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:token.label = &quot;Random Passerby&quot;]
&lt;/source&gt;

Sets the value of ''token.label'' to &quot;Random Passerby&quot;.

==Related Pages==

* [[token.gm_name]]
* [[token.name]]
[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>roll.count</title>
    <ns>0</ns>
    <id>269</id>
    <revision>
      <id>2290</id>
      <parentid>2288</parentid>
      <timestamp>2009-03-25T13:48:08Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to Special Variable category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="486">The special variable ''roll.count'' holds the current iteration of the [[ Macros:Branching_and_Looping#COUNT_Option | [COUNT(): ] ]] roll option. ''roll.count'' begins at 0. 

==Examples==

&lt;source lang=&quot;mtmacro&quot; line&gt;
[COUNT(5, &quot;&lt;br&gt;&quot;): &quot;This is roll &quot; + roll.count]
&lt;/source&gt;

Outputs:

 This is roll 0
 This is roll 1
 This is roll 2
 This is roll 3
 This is roll 4

==Related Pages==

* [[Macros:Branching_and_Looping | Branching and Looping Options ]]
[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>token.visible</title>
    <ns>0</ns>
    <id>270</id>
    <revision>
      <id>2310</id>
      <parentid>2308</parentid>
      <timestamp>2009-03-25T13:51:59Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Begin add to Special Variable category...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="915">The variable ''token.visible'' controls the visibility of the token to players during a game. The variable can take two values, 0 (not visible) or 1 (visible to players). This is equivalent to the &quot;Visible to players&quot; option on the right-click menu for tokens.

==Examples==

===Getting Token Visibility===

&lt;source lang=&quot;mtmacro&quot; line&gt;
[token.visible]
&lt;/source&gt;

Will return 1 if the token is currently &quot;Visible to players,&quot; and 0 if it is not. 

===Setting Token Visibility===

&lt;source lang=&quot;mtmacro&quot; line&gt;
[token.visible = 0]
&lt;/source&gt;

Will set ''token.visible'' to 0 - ''e.g.'', making the token invisible to players. A more useful approach might be:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[token.visible = 1 - token.visible]
&lt;/source&gt;

This creates a &quot;toggle&quot; macro that will alternate ''token.visible'' between its two possible values each time the button is clicked.

==Related Pages==

[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Tooltip-rollresult-example.jpg</title>
    <ns>6</ns>
    <id>271</id>
    <revision>
      <id>639</id>
      <timestamp>2008-12-23T02:44:57Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>roll.result</title>
    <ns>0</ns>
    <id>272</id>
    <revision>
      <id>4187</id>
      <parentid>3024</parentid>
      <timestamp>2010-04-13T12:00:10Z</timestamp>
      <contributor>
        <username>Jasper Phule</username>
        <id>176</id>
      </contributor>
      <minor/>
      <comment>Error in the code example of a custom tooltip. The [t:] parameter needs to come before the &quot;:&quot;.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1204">The special variable {{code|roll.result}} is used within the parameter of the {{roll|tooltip}} roll option. 

===Examples===
====Example Mimicking the Default Display====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:AtkBonus=6]
[h:AbilBonus=4]
Attack Result: [t(roll.result): 1d20+AtkBonus+AbilBonus]
&lt;/source&gt;

[[Image:Tooltip-rollresult-example.jpg|frame|right]]
Evaluates {{code|1d20+AtkBonus+AbilBonus}}, assigns that value to {{code|roll.result}}, and then displays the final result with a tooltip containing the value of {{code|roll.result}}.

The parameter for the {{roll|tooltip}} roll option is evaluated after the roll itself is evaluated, so that {{code|roll.result}} is available for display.

====Example of a Custom Tooltip Based on the {{code|roll.result}}====
To illustrate how the order of evaluation can be useful, consider the following short example:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[t( if(roll.result &gt; 10, &quot;Hit&quot;, &quot;Miss&quot;) ): d20]
&lt;/source&gt;
This example will display {{code|Hit}} or {{code|Miss}} depending on the result of the d20 roll, and the tooltip when hovering over either word will be the actual numeric result of the d20 roll.

===See Also===
{{roll|tooltip}}

[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Bar-example.jpg</title>
    <ns>6</ns>
    <id>273</id>
    <revision>
      <id>644</id>
      <timestamp>2008-12-23T02:55:21Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>bar.name</title>
    <ns>0</ns>
    <id>274</id>
    <revision>
      <id>2385</id>
      <parentid>2318</parentid>
      <timestamp>2009-03-27T20:00:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>DISPLAYTITLE test</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1593">The ''bar.[bar_name]'' variable permits the getting and setting of the [[Token:bar|token bar]] value (and the corresponding image displayed on the token) programmatically. Token bars are one, two, or multi-image graphical elements displayed on a token that are used (typically) to visually indicate the status of consumable or expendable items or character traits (such as Hit Points, Ammunition, Health, or the like). 

Bars, like [[Token:state|token states]], are configured via the Campaign Properties dialog and are specific to the campaign in which they exist. In the screenshot shown below, the green-on-black line across the top of the token is a token bar.

[[Image:Bar-example.jpg]]

==Usage==

&lt;source lang=&quot;mtmacro&quot; line&gt;
[bar.[bar_name] = value]
&lt;/source&gt;

Sets the value of the token bar named ''bar_name'' to the desired value. ''bar_name'' is set when the bar is created, and may be any name, provided it contains no spaces or special characters except the underscore. ''Value'' must be a number between 0 and 1.

==Examples==

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: HP = HP - DamageTaken]
[h: bar.Health = HP / MaxHP]
&lt;/source&gt;

Sets the value of ''bar.Health'' to the result of ''HP / MaxHP''.

==Notes==

Two functions, [[Macros:Functions:setBar|setBar()]] and [[Macros:Functions:getBar|getBar()]] also exist to get and set the value of the token bar.

==Related Pages==

* [[Macros:Variables:list_of_special_variables|List of Special Variables]]
* [[Macros:Functions:list_of_functions_by_area#Token_Bars|Token Bar Functions]]

[[Category:Special Variable]]
{{DISPLAYTITLE:foobar}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Simple-input.jpg</title>
    <ns>6</ns>
    <id>275</id>
    <revision>
      <id>661</id>
      <timestamp>2008-12-23T04:07:14Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Input-checksntext.jpg</title>
    <ns>6</ns>
    <id>276</id>
    <revision>
      <id>662</id>
      <timestamp>2008-12-23T04:07:26Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Input-lists.jpg</title>
    <ns>6</ns>
    <id>277</id>
    <revision>
      <id>663</id>
      <timestamp>2008-12-23T04:07:38Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>input</title>
    <ns>0</ns>
    <id>278</id>
    <revision>
      <id>6293</id>
      <parentid>6292</parentid>
      <timestamp>2014-06-11T21:26:27Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21729">{{MacroFunction
|name=input
|version=1.3b42
|description=
Allows the user to input several values at once via a modal dialog. The function takes one or more string arguments, one for each variable requiring assignment. Execution of the calling macro is paused while waiting for the user to interact with the input dialog.

Returns {{code|1}} if the user clicked the '''''OK''''' button, or {{code|0}} if they clicked '''''Cancel''''' (or hit '''''Esc''''' to exit the dialog). If {{code|input()}} returns {{code|0}}, no variable assignments were made. 

Note that there are no built-in mechanisms for input validation for {{code|TEXT}} input types.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
input(inputField, ..., ...)
&lt;/source&gt;
'''Parameters'''
{{param|inputField|A string containing various 'sub-parameters' that set the type and options of each {{code|inputField}}; requires at least one {{code|inputField}} but will accept a reasonably large amount. The {{code|inputField}}s can be set using a series of individual parameters, or as one or more [[String List]]s. If a [[String List]] is used, the delimiter must be {{code|&quot;##&quot;}}. This allows, among other things, for more dynamic input menus, with the number and type of input requests customized to the circumstances. Normally, each line is described by a string, wrapped in quotes, and the strings are separated by commas. The input function looks for unquoted commas to determine which strings are intended to be read as line entries. The function, however, can also recognize {{code|##}} as a denotation of such a line break. Since this denotation can be surrounded by quotes more easily, it is possible to have a single string, wrapped in quotes, describe multiple input requests. The strings can be compiled in any number of ways: for instance using {{func|listAppend}} and setting the delimiter to {{code|&quot;##&quot;}}. Strings involving these {{code|##}}'s can be intermixed with other standard strings. See the example below.

You declare the 'sub-parameters' of each {{code|inputField}} in the following manner:
* {{code|&quot;variableName{{!}}value{{!}}prompt{{!}}inputType{{!}}options&quot;}} }}
'''Sub-Parameters
{{param|variableName|The name of the variable to which the value of the {{code|inputField}} is assigned.}}
{{param|value|The initial value present in the dialog box. If not present, it defaults to {{code|0}}. In some cases you use a special syntax to indicate multiple values.}}
{{param|prompt|The prompt displayed to the user to indicate the meaning of the {{code|inputField}}.}}
{{param|inputType|Describes the type of input control presented to the user. Each of the different types are described in more detail below.}}
{{param|options|Contains one or more options that control the appearance of the input control or how information entered in the control is treated; options are given in the format {{code|option{{=}}value}} and separated by a space.}}

===Input Types and Options===

====TEXT====

Creates a text box containing the {{code|value}} or {{code|0}}. The contents typed in the box are assigned to the variable, and there is no limit to the length of the data that can be entered.

=====TEXT Options=====
{{param|WIDTH{{=}}nnn|Sets the width of the text box; defaults to {{code|WIDTH{{=}}16}}.}}
{{param|SPAN{{=}}TRUE|Causes the {{code|prompt}} to be hidden and allows the {{code|inputField}} to span the width of the dialog; defaults to {{code|SPAN{{=}}FALSE}}. If hidden the {{code|prompt}} text is used as a tooltip.}}

----
====LIST====

Creates a drop-down list of choices. The variable is assigned the index (starting at {{code|0}}) of the item that was selected. The {{code|value}} sub-parameter is a comma delimited list of the values that can be chosen.

=====LIST Options=====
{{param|SELECT{{=}}nnn|Sets the index of the initial selection in the drop-down list (the first item is number {{code|0}}); defaults to {{code|SELECT{{=}}0}}.}}
{{param|VALUE{{=}}STRING|The variable is assigned the string contents of the selected item instead of the index; defaults to {{code|VALUE{{=}}NUMBER}}.}}
{{param|ICON{{=}}TRUE|If the string for the item contains a space and then an image asset URL, the image is displayed in the entry; defaults to {{code|ICON{{=}}FALSE}}. Text before the URL is used for the entry's text. The {{func|getTokenImage}} and {{func|getStateImage}} functions can be used to obtain asset URLs.}}
{{param|ICONSIZE{{=}}nnn|The size the icons; defaults to {{code|ICONSIZE{{=}}50}}. All icons are stretched to fit a square this size. If the asset URL points to an image that is not square, some distortion will occur.}}
{{param|TEXT{{=}}FALSE|No text is shown in the list entries next to the icons; defaults to {{code|TEXT{{=}}TRUE}}, and is ignored if no icon is set.}}
{{param|SPAN{{=}}TRUE|Causes the {{code|prompt}} to be hidden and allows the {{code|inputField}} to span the width of the dialog; defaults to {{code|SPAN{{=}}FALSE}}. If hidden the {{code|prompt}} text is used as a tooltip.}}

----
====CHECK====

Creates a checkbox. The variable is assigned either {{code|0}} (unchecked) or {{code|1}} (checked).

=====CHECK Options=====
{{param|SPAN{{=}}TRUE|Causes the {{code|prompt}} to be hidden and allows the {{code|inputField}} to span the width of the dialog; defaults to {{code|SPAN{{=}}FALSE}}. If hidden the {{code|prompt}} text is used as a tooltip.}}

----
====RADIO====

Creates a group of radio buttons. This option works much like {{code|LIST}}, returning the index of the choice that was selected.

=====RADIO Options=====
{{param|ORIENT{{=}}H|Arranges the radio buttons horizontally on a single line; defaults to {{code|ORIENT{{=}}V}}.}}
{{param|SELECT{{=}}nnn|Sets the initially selected radio button (the first item is number {{code|0}}); defaults to {{code|SELECT{{=}}0}}.}}
{{param|VALUE{{=}}STRING|The variable is assigned the string contents of the selected item instead of the index; defaults to {{code|VALUE{{=}}NUMBER}}.}}
{{param|SPAN{{=}}TRUE|Causes the {{code|prompt}} to be hidden and allows the {{code|inputField}} to span the width of the dialog; defaults to {{code|SPAN{{=}}FALSE}}. If hidden the {{code|prompt}} text is used as title placed in the border of the radio button group.}}

----
====LABEL====

Creates a static label. The {{code|variableName}} is ignored, and nothing is assigned to it.

=====LABEL Options=====
{{param|ICON{{=}}TRUE|If the string for the {{code|value}} contains a space and then an image asset URL, the image is displayed; defaults to {{code|ICON{{=}}FALSE}}.}}
{{param|ICONSIZE{{=}}nnn|The size the icon; defaults to {{code|ICONSIZE{{=}}50}}. The icon is stretched to fit a square this size. If the asset URL points to an image that is not square, some distortion will occur.}}
{{param|TEXT{{=}}FALSE|The {{code|value}} is not shown; defaults to {{code|TEXT{{=}}TRUE}}.}}
{{param|SPAN{{=}}TRUE|Causes the {{code|prompt}} to be hidden and allows the {{code|inputField}} to span the width of the dialog; defaults to {{code|SPAN{{=}}FALSE}}. If hidden the {{code|prompt}} text is used as a tooltip.}}

----
====PROPS====

Creates a bordered sub-area containing multiple text boxes, one for each entry in a [[String Property List]] stored in {{code|value}}. The {{code|variableName}} is assigned a new string property containing all the entries with their updated values.

=====PROPS Options=====
{{param|SETVARS{{=}}SUFFIXED|Makes a variable assignment for each of the sub-values, with an underscore appended to the name; defaults to {{code|SETVARS{{=}}NONE}}.}}
{{param|SETVARS{{=}}UNSUFFIXED|Makes variable assignments to unmodified variable names. {{code|SUFFIXED}} is usually preferred, unless you are not using variable names that match [[Token Property|Token Properties]] or if you specifically intend to overwrite them.}}
{{param|SPAN{{=}}TRUE|Causes the {{code|prompt}} to be hidden and allows the {{code|inputField}} to span the width of the dialog; defaults to {{code|SPAN{{=}}FALSE}}. If hidden the {{code|prompt}} text is used as title placed in the border of the {{code|PROPS}} group.}}

----
====TAB====
Creates a tab for a tabbed dialog box. The {{code|variableName}} variable gets assigned a [[String Property List]] containing all the variable assignments made on this tab. Since some of the variables may be property strings themselves, the tab property string uses the non-default delimiter {{code|&quot;##&quot;}}. When using tabs, the first {{code|inputField}} must be a {{code|TAB}}.
=====TAB Options=====
{{param|SELECT{{=}}TRUE|Causes this tab to be displayed when the dialog appears; defaults to {{code|SELECT{{=}}FALSE}}.}}
----

'''TAB Example'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[H: input(
     &quot;tab0 | Info || TAB&quot;, 
     &quot;Name ## Rank ## Serial number | 1,2,3 || LIST&quot;,
     &quot;tab1 | Abilities || TAB&quot;, 
     &quot;Strength ## Dexterity ## Wisdom&quot;
)]
&lt;/source&gt;

|examples=

'''1. A simple input() requesting 3 different text variables.'''

&lt;source lang=&quot;mtmacro&quot; line&gt;
[input(&quot;AtkBonus&quot;, &quot;DmgBonus&quot;, &quot;CombatAdvantage&quot;)]
&lt;/source&gt;

Displays:

[[Image:simple-input.jpg]]

Note that only the {{code|variableName}} is required to generate an input dialog - if that is all that is provided, {{code|input()}} assumes that each {{code|variableName}} will be assigned using a text field.

'''2. A more complex input, including LABEL, CHECK, and TEXT fields.'''

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:status=input(
    &quot;junkVar|&quot;+powerClicked+&quot;|Selected Power|LABEL&quot;,
    &quot;ComAdv|0|Combat Advantage|CHECK&quot;,
    &quot;MarkPenalty|0|Marked by an enemy other than your target|CHECK&quot;,
    &quot;TargetConcealed|0|Target has Concealment|CHECK&quot;,
    &quot;MiscBonus|0|Miscellaneous BONUSES to your attack roll&quot;,
    &quot;MiscPenalty|0|Miscellaneous PENALTIES to your attack roll&quot;,
    &quot;mdb|0|Miscellaneous BONUS to Damage&quot;)]
[h:abort(status)]
&lt;/source&gt;

Displays:

[[Image:Input-checksntext.jpg]]

Recall that {{code|junkVar}}, as the {{code|variableName}} for a {{code|LABEL}} control, has no value assigned to it. In this example, we assume {{code|powerClicked}} is a variable that is passed in some fashion to the macro generating this input. It is incorporated using the standard method of concatenating a variable into a string ({{code|&quot;string text&quot;+''variable''+&quot;more string text&quot;}}). Finally, observe that the variable {{code|status}} is assigned the value returned by the {{code|input()}} function, and the {{func|abort}} function is called using the value of {{code|status}}. In this fashion, the macro is terminated if the user clicks the '''''Cancel''''' button or hits the '''''ESC''''' key. 

'''3. An input showing several LIST boxes, as well as the VALUE=STRING option.'''

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:status=input(
    &quot;targetNum|&quot;+imgList+&quot;|Select Target|LIST|SELECT=0 ICON=TRUE ICONSIZE=30&quot;,
    &quot;feature|Hunter's Quarry, Sneak Attack, Warlock's Curse|Type of Striker Damage|LIST|SELECT=0 VALUE=STRING&quot;,
    &quot;CQSDice|1d6,1d8,2d6,2d8,3d6,3d8|Curse, Quarry, or Sneak Attack Dice|LIST|SELECT=0 VALUE=STRING&quot;,
    &quot;critAttack|0|Was the attack a critical hit?|CHECK&quot;
)]
&lt;/source&gt;

Displays:

[[Image:Input-lists.jpg]]

Note that the {{code|prompt}} section for each list contains a list of items, ''or'' a variable containing a [[String List]] (''e.g.'', the variable {{code|imgList}}). In the first list, the {{code|ICON}} and {{code|ICONSIZE}} options are set, because that list contains image asset URLs for token images. In the second two lists, the {{code|VALUE{{=}}STRING}} option is set so that the value in the corresponding variable is the actual string (''e.g.'' {{code|&quot;Sneak Attack&quot;}}) rather than the index of the list item.

'''4. An input using the &quot;##&quot; delimiter trick.'''

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:inptext=&quot;&quot;]
[h:num=1]

[h,foreach(entry,&quot;SPD1,SPD2,SPD3,SPD4,SPD5,SPD6,SPD7,SPD8,SPD9&quot;),code:{
  [if(num&lt;=CMSL),code:{
    [inptext=listAppend(inptext,entry+&quot;|&quot;+eval(entry)+&quot;|Level &quot;+num,&quot;##&quot;)]
  }]
  [num=num+1]
}]

[h:screen0=input(
  &quot;junkvar|Include any bonus spells from high Wisdom|Enter your Cleric spells per day|LABEL&quot;,
  inptext
)]

&lt;/source&gt;

In this example, variables {{code|SPD1-SPD9}} and {{code|CMSL}} are called earlier from a token and represent spells per day for spell levels 1-9 and the maximum spell level accessible by the token at the moment for the class in question. The macro is intended to allow manual changing of the number of spells per day for the token, but the input is cleaned up and prevents complications by not allowing for inputs to spell levels beyond what is available. The first line in the input is a standard string, followed by a comma. The second is a {{code|&quot;##&quot;}}-containing string set by the {{roll|foreach}} function above, which will contain just the number of input requests, separated by {{code|##}}'s, needed in the situation.

'''5. A much more elegant and way more sophisticated way to example no. 4 is aliasmaks(?) strformat/json.evaluate trick'''
If you are in need of an {{code|input()}} function where the number of inputs can vary like in ex. 4, you can also opt to use a json array and use {{func|json.evaluate}}. This will look as follows:

&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Define local vars --&gt;
[H: Strength = 12]
[H: Toughness = 14]
[H: Hitpoints = 20]
[H: statList = &quot;Strength, Toughness, Hitpoints&quot;]
[H: inputStr = &quot;[]&quot;]

&lt;!-- Build input form simple --&gt;
[H: inputStr = json.append(inputStr,&quot;junk|&lt;html&gt;&lt;b&gt;A simple example&lt;/b&gt;&lt;/html&gt;|-|LABEL|SPAN=TRUE&quot;)]
[H: inputStr = json.append(inputStr, &quot;Strength|&quot;+Strength+&quot;|Enter Strenght value&quot;)]
[H: inputStr = json.append(inputStr, &quot;Toughness|&quot;+Toughness+&quot;|Enter Toughness value&quot;)]
[H: inputStr = json.append(inputStr, &quot;Hitpoints|&quot;+Hitpoints+&quot;|Entere number of Hitpoints&quot;)]

&lt;!-- Build input form advanced --&gt;
[H: inputStr = json.append(inputStr,&quot;junk|&lt;html&gt;&lt;b&gt;A complex example&lt;/b&gt;&lt;/html&gt;|-|LABEL|SPAN=TRUE&quot;)]
[H, foreach(stat,statList): inputStr = json.append(inputStr,strformat(&quot;%{stat}|%s|&lt;html&gt;&lt;b&gt;&lt;font color=blue&gt;Enter %{stat} value&lt;/b&gt;&lt;/font&gt;&lt;/html&gt;|TEXT|WIDTH=6&quot;, eval(stat)))]

&lt;!-- put local variables in input form --&gt;
[H: inputStr = json.evaluate(inputStr)]

&lt;!-- get user input --&gt;
[H: hasInput = input(json.toList(inputStr,&quot;##&quot;))]
&lt;/source&gt;

'''6. An input using aliasmask's no-zero-trick'''
Usually, when you leave a value blank for input it puts that annoying {{code|0}} in it's place.  Here's one way to avoid that.
The only limitation, I suppose is that the variable name is visible as the prompt (and the variable name/contents must be StrProp-compatible).

''(thanks to aliasmask for the trick and biodude for stating the limits.)''

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:abort(input(
	&quot;junk|&lt;html&gt;&lt;b&gt;Enter player names. These should match the user names:&lt;br&gt;&lt;font color='red'&gt;&quot;+getAllPlayerNames()+&quot;&lt;/font&gt;&lt;/html&gt;|-|LABEL|SPAN=TRUE&quot;,
	&quot;Enter Player Names|player0=;player1=;player2=||PROPS|SPAN=TRUE SETVARS=UNSUFFIXED&quot;
))]
&lt;/source&gt;

'''7. An input using Wolph42's tooltip-trick'''
It is possible to use HTML mark up by just adding HTML tags around the input text.  This makes it possible to use e.g. bold and italic tags, but also the {{code|span}} tag.  This span tag allows tooltips to be added anywhere via its {{code|title}} attribute.  Here's an example:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[H: hasInput = input(
&quot;junk|&lt;html&gt;Some title text&lt;/html&gt;|&lt;html&gt;here comes the tooltip text&lt;/html&gt;|LABEL|SPAN=TRUE&quot;,
&quot;someVariable|0|&lt;html&gt;&lt;span title='&lt;html&gt;This text will be shown as a tooltip if you hover with your mouse over the text&lt;/html&gt;'&gt;Do you wish to turn the &lt;b&gt;setting&lt;/b&gt; on?&lt;/span&gt;&lt;/html&gt;|CHECK&quot;
)]
&lt;/source&gt;
Another interesting trick is adding pictures to the input. This example show the image of the selected token:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:input(
	&quot;junk|&lt;html&gt;&lt;b&gt;Show picture of token&lt;br&gt;&lt;/html&gt;|-|LABEL|SPAN=TRUE&quot;,
	&quot;junk|&lt;html&gt;&lt;img src='&quot;+getTokenImage(60)+&quot;'&gt;&lt;/img&gt;&lt;/html&gt;|-|LABEL|SPAN=TRUE&quot;
)]
&lt;/source&gt;

{{note|'''b89 (b90 also ?)''': {{func|input}} no longer ''eats'' the colon {{code|':'}}. And as the {{func|getTokenImage}} will return {{code|'asset://....'}} this will fail.}}
: {{mark}} It might get fixed in '''b90''' but if not there is a workaround. Just change the last line into:
&lt;source lang=&quot;mtmacro&quot; line&gt;
&quot;junk|&lt;html&gt;&lt;img src='&quot;+replace(getTokenImage(), &quot;:&quot;, &quot;&amp;#58;&quot;)+&quot;' height=60 width=60&gt;&lt;/img&gt;&lt;/html&gt;|-|LABEL|SPAN=TRUE&quot;
&lt;/source&gt;

If you really want to go full monty on the tooltip INSIDE the input, here's an example of what is possible (the wiki can't properly handle all the code here so it comes out a bit funky):
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:hasInput 	= input('
	someVariable|0|&lt;html&gt;&lt;span title=&quot;&lt;html&gt;
	This setting allows for more advanced use of the movement limiter. First off: &lt;b&gt;In order for this to work &lt;i&gt;Limit Movement&lt;/i&gt; must be&lt;br&gt;
	set to a number other then 0(the actual number wont be used).&lt;/b&gt; If you enter 0 here then this setting will be ignored and the movement&lt;br&gt;
	will be limited to what you have set in &lt;i&gt;Limit Movement&lt;/i&gt;.&lt;br&gt;
	&lt;br&gt;
	&lt;b&gt;Example of how to use this setting:&lt;/b&gt;&lt;br&gt;
	Let say that all the tokens have a characteristic: &lt;i&gt;Dexterity&lt;/i&gt; and the max amount of cells a token is allowed to move is 4 x &lt;i&gt;Dexterity&lt;/i&gt;.&lt;br&gt;
	Then what you set here is: &lt;font bgcolor=white color=gray&gt;[r:4*Dexterity]&lt;/font&gt; You can enter any piece of code in here, as long as the output of that code&lt;br&gt;
	results in a number. The token that is moved will be the currentToken for this code! Note that if multiple tokens are moved, the first selected&lt;br&gt;
	token will be the currentToken.&lt;br&gt;
	&lt;br&gt;
	&lt;b&gt;Adding states and changing the output message&lt;/b&gt;.&lt;br&gt;
	You can take this code even a step further and also change the output to the chat. This can be done by setting the predefined message variable to&lt;br&gt;
	something else. Here you can make use of other predefined variables as well. The default message is:&lt;br&gt;
	&lt;font bgcolor=white color=gray&gt;[h:message	= &amp;quot;You moved %{tok} %{usedMove} cells. The maximum allowed movement is %{limitMovement} cells.&amp;quot;]&lt;/font&gt;&lt;br&gt;
	(HTML make up can be used, but is removed from this example cause it does not show in a tool-tip) Here:&lt;br&gt;
	&lt;font bgcolor=white color=gray&gt;message&lt;/font&gt; is the actual message to the ouput. Note that strformat is used.&lt;br&gt;
	&lt;font bgcolor=white color=gray&gt;tok&lt;/font&gt; is the name of the selected token&lt;br&gt;
	&lt;font bgcolor=white color=gray&gt;usedMove&lt;/font&gt; is the amount of cells the token moved&lt;br&gt;
	&lt;font bgcolor=white color=gray&gt;limitMovement&lt;/font&gt; is the max amount the token is allowed to move.&lt;br&gt;
	These you can use to create your own message type &lt;b&gt;as long as the resulting output is a number&lt;/b&gt;. E.g.:&lt;br&gt;
	&lt;font bgcolor=white color=gray&gt;
	[r,if(getState(&amp;quot;Dead&amp;quot;) &amp;#124;&amp;#124; getState(&amp;quot;Incapacitated&amp;quot;), CODE:{
		[r:0]	
		[h:message	= &amp;quot;%{tok} is incapacitated and cannot move&amp;quot;]
	};{
		[r:4*Dexterity]
	}]
	&lt;/font&gt;&lt;/html&gt;&quot;&gt;
	Enter code here (hover over this for more info)
	&lt;/html&gt;&lt;/span&gt;&lt;/html&gt;
')]
&lt;/source&gt;
For this to work I had to replace the quotes (&amp;quot;) and the OR bars (&amp;#124;&amp;#124;) by there ASCII representation.
This is the result:

[[Image:Advanced Example Tooltip.jpg]]

Note that this technique isn't perfect, because HTML tags inside the {{code|title}} may be interpreted as ending tags in the outer {{code|&lt;html&gt;}} block as the {{code|input()}} function is merely processing text and not looking at the content.
}}

'''8. Images in Input'''
It requires a bit of fiddling, but because HTML is allowed it's possible to add images to your input functions as well (besides the LIST trick described above).
This can simply be done with the {{code|&lt;html&gt;&lt;img&gt;}} tags. However the preset image size, e.g. from {{code|getTokenHandout(90)}} which retrieves the asset ID of the token handout and presets it to a max width or height (whichever is bigger) of 90 pixels, does work for {{code|LABEL}} but not for the rest! Example use:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:input(&quot;junk|&lt;html&gt;&lt;img src='&quot;+getTokenHandout(90)+&quot;'&gt;&lt;/img&gt;&lt;/html&gt;|-|LABEL|SPAN=TRUE&quot;)]
&lt;/source&gt;
{{note|'''b89 (and  possibly b90)''': this will not work anymore.}}
: {{mark}} As a workaround, use this: 
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:input(&quot;junk|&lt;html&gt;&lt;img src='&quot;+replace(getTokenHandout(), &quot;:&quot;, &quot;&amp;#58;&quot;)+&quot;' height=90 width=90&gt;&lt;/img&gt;&lt;/html&gt;|-|LABEL|SPAN=TRUE&quot;)]
&lt;/source&gt;

[[Image:LABEL Picture.jpg]]

For other uses, e.g. choosing a picture from a {{code|RADIO}} option, you will need to limit the image sizes using the image tags:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:me = getSelected()]
[h, token(me),CODE:{
	[image		= &quot;&lt;html&gt;&lt;table&gt;&lt;tr&gt;&lt;td height='100'&gt;&lt;img width=90 height=90 src='&quot;+getTokenImage()+&quot;'&gt;&lt;/img&gt;	&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align='center'&gt;Image&lt;/td&gt;	&lt;/tr&gt;&lt;/table&gt;&lt;/html&gt;&quot;]
	[portrait	= &quot;&lt;html&gt;&lt;table&gt;&lt;tr&gt;&lt;td height='100'&gt;&lt;img width=90 height=90 src='&quot;+getTokenPortrait()+&quot;'&gt;&lt;/img&gt;	&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align='center'&gt;Portrait&lt;/td&gt;	&lt;/tr&gt;&lt;/table&gt;&lt;/html&gt;&quot;]
	[handout	= &quot;&lt;html&gt;&lt;table&gt;&lt;tr&gt;&lt;td height='100'&gt;&lt;img width=90 height=90 src='&quot;+getTokenHandout()+&quot;'&gt;&lt;/img&gt;	&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align='center'&gt;Handout&lt;/td&gt;	&lt;/tr&gt;&lt;/table&gt;&lt;/html&gt;&quot;]
}] 

[H: abort(input(
	&quot;junk|&lt;html&gt;&lt;b&gt;Choose picture to show to players:&lt;br&gt;&lt;/html&gt;|-|LABEL|SPAN=TRUE&quot;,
	&quot;picChoice|&quot;+image+&quot;,&quot;+portrait+&quot;,&quot;+handout+&quot;|Which picture|RADIO|ORIENT=H SELECT=2&quot;,
	&quot;picSize|100|Size of picture (px)&quot;
))]

[r,token(me), if(picChoice == 0): &quot;&lt;img src='&quot;+getTokenImage(picSize)+&quot;'&gt;&lt;/img&gt;&quot;]
[r,token(me), if(picChoice == 1): &quot;&lt;img src='&quot;+getTokenPortrait(picSize)+&quot;'&gt;&lt;/img&gt;&quot;]
[r,token(me), if(picChoice == 2): &quot;&lt;img src='&quot;+getTokenHandout(picSize)+&quot;'&gt;&lt;/img&gt;&quot;]
&lt;/source&gt;
[[Image:RADIO Picture.jpg]]

'''9. Using PROPS'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: abort(input(&quot;resultVars|strength=0;toughness=0;willpower=0|Enter values|PROPS|SPAN=TRUE SETVARS=UNSUFFIXED&quot;))]
[r:resultVars]
&lt;/source&gt;

[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Variable Types</title>
    <ns>0</ns>
    <id>279</id>
    <redirect title="Category:Variable Type" />
    <revision>
      <id>2270</id>
      <parentid>2254</parentid>
      <timestamp>2009-03-25T13:10:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to Variable Type category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[:Category:Variable Type]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>String</title>
    <ns>0</ns>
    <id>280</id>
    <revision>
      <id>2264</id>
      <parentid>2255</parentid>
      <timestamp>2009-03-25T13:06:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to Variable Type category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="234">A string in MapTool is a series of alphanumeric characters enclosed in single or double quotation marks. 

==Example==

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:exampleString = &quot;This is an example string.&quot;]
&lt;/source&gt;
[[Category:Variable Type]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>token.init</title>
    <ns>0</ns>
    <id>281</id>
    <revision>
      <id>2314</id>
      <parentid>2299</parentid>
      <timestamp>2009-03-25T13:54:05Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1188">The variable ''token.init'' holds the value of the token's initiative when the token is present in the Initiative Panel. Note that ''token.init'' is only valid for tokens that are added to the Initiative Panel (querying ''token.init'' when the token is not in the Initiative Panel will return an error). 

==Usage==

To set a token's ''token.init'' value, do the following:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[token.init=value]
&lt;/source&gt;

where ''value'' is a number. 

==Examples==

After adding the token to the Initiative Panel (either by right-clicking on the token and selecting '''Add to Initiative''', or by using the [[Macros:Functions:addToInitiative|addToInitiative()]] function), you can set the token's initiative via a macro such as the following:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:token.init = 1d20 + initBonus]
&lt;/source&gt;

where ''initBonus'' is assumed to be a variable passed to the initiative macro, or a [[Token:token_property|token property]] of the token being added. The new initiative value will appear in the initiative panel next to the token name.

==Related Pages==

* [[Initiative:initiative_panel|Initiative Panel]]
* [[token.initHold]]
[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:InitHold-example.jpg</title>
    <ns>6</ns>
    <id>282</id>
    <revision>
      <id>681</id>
      <timestamp>2008-12-23T17:35:44Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>token.initHold</title>
    <ns>0</ns>
    <id>283</id>
    <revision>
      <id>2313</id>
      <parentid>2301</parentid>
      <timestamp>2009-03-25T13:53:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1098">The variable ''token.initHold'' is a binary variable that indicates whether a token in the [[Initiative:initiative_panel|Initiative Panel]] is on hold, or is part of the normal initiative cycle. ''token.initHold'' can take a value of 1 (token is on hold) or 0 (token is not on hold). 

==Usage==

&lt;source lang=&quot;mtmacro&quot; line&gt;
[token.initHold = value]
&lt;/source&gt;

Where ''value'' is either 1 or 0.

==Example==

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:status=input(
    &quot;hold|Yes,No|Put token on hold in initiative order?|RADIO|SELECT=0 ORIENT=H VALUE=STRING&quot;
    )]
[h:abort(status)]

[h:token.initHold = if(hold==&quot;Yes&quot;, 1, 0)]
&lt;/source&gt;

Presents the following dialog using the [[Macros:Functions:input|input()]] function:

[[Image:InitHold-example.jpg]]

and, based on the user's selection, sets ''token.initHold'' to either 1 or 0. When this macro is executed, the token's image or line in the [[Initiative:initiative_panel|Initiative Panel]] will be altered to reflect its new status. 

==Related Pages==

* [[Initiative:initiative_panel|Initiative Panel]]
* [[token.init]]
[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>state.name</title>
    <ns>0</ns>
    <id>284</id>
    <revision>
      <id>2277</id>
      <parentid>2275</parentid>
      <timestamp>2009-03-25T13:19:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to Special Variable category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="385">The variable ''state.[state_name]'' is used to reference and control the value of a particular [[Token:state|token state]]. Controlling token states via macro is explained at the [[Token:state|token state]] page and will not be repeated here. 

==Related Pages==

* [[Macros:Special_Variables:bar.bar_name|bar.''bar_name'']]
* [[Token:state|Token States]]
[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:State-example.jpg</title>
    <ns>6</ns>
    <id>285</id>
    <revision>
      <id>691</id>
      <timestamp>2008-12-23T17:49:23Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Creating Macro Buttons Using a Macro</title>
    <ns>0</ns>
    <id>286</id>
    <revision>
      <id>3726</id>
      <parentid>2571</parentid>
      <timestamp>2009-07-23T03:19:45Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9243">==Introduction==

The following tutorial illustrates one method of creating macro buttons for a token based on user input. In this particular case, the macros illustrated below are used to configure a new token with several buttons illustrating different powers that the character represented by the token possesses. The tutorial is directly applicable to the ''Dungeons &amp; Dragons 4th Edition'' game system, but the concepts in it may be applicable to other game systems. This tutorial may also be useful in conjunction with the tutorials on changing macro buttons. 

===Assumptions===

The button creation macro illustrated below is actually one component of a much larger sequence of macros, so in order to understand what is happening, there are a few assumptions to be made.

1. Powers in this campaign setup are stored in a series of [[Token:token_property|token properties]] with the names &quot;Power0&quot;, &quot;Power1&quot;, &quot;Power2&quot;, and so on. These token properties contain power information in the form of a [[Macros:string_property_list|string property list]] with the format:

&lt;source lang=&quot;mtmacro&quot; line&gt;
powername=Melee Basic Attack ; action=standard ; usage=at-will ; attack=5 ;
against=AC ; targets=one creature ; damage=1d6+5 ; critdamage=11 ; damtype= ;
hitEffect=--none-- ; missEffect=--none-- ; atktype=melee ;
range=weapon ; expended=Available ; reliable=0 ; special=--none-- ;
&lt;/source&gt;

2. This macro will receive from a calling macro an argument called [[Macros:Special_Variables:macro.args|''macro.args'']] that contains a number (which will be used to determine which power - Power0, Power1, etc. - will have a new button created). 

3. This macro in particular is the final step in a macro sequence, so it is assumed that when this macro is called, the string property list for the power in question has already been populated.

==Macro Code and Explanation==

The [[Tutorials:Macros:create_buttons_full_code|full macro code]] is broken down and explained below.

===Receiving Arguments and Assigning Variables===

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:powerSlot=macro.args]
[h:pname=getStrProp(eval(&quot;Power&quot;+powerSlot),&quot;powername&quot;)]
[h:use=getStrProp(eval(&quot;Power&quot;+powerSlot),&quot;usage&quot;)]
&lt;/source&gt;

This section of the macro simply assigns the value of ''macro.args'' to a new variable, ''powerSlot''. The variable ''powerSlot'' is then used in line 2 to extract the name of the power (the ''powername'' key in the string property) and assign it to ''pname'', and to extract the ''usage'' value from the string property as well.

===Requesting User Input===

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:status=input(
	&quot;addButtons|Yes,No|Add Macro Buttons to your token?|RADIO|ORIENT=H SELECT=1&quot;
)]
[h:abort(status)]
&lt;/source&gt;

This section is a simple [[Macros:Functions:input|input()]] function that confirms whether the user wants to add the button to their token's macro set. This is important because if a macro button is already present, this macro will create a duplicate. Frequently, however, users will want to simply update their power information, rather than create a new button. 

===Checking for the Power's Use Limits and Setting Colors===

&lt;source lang=&quot;mtmacro&quot; line&gt;
[IF(addButtons==0),CODE:
{
[h,SWITCH(use),CODE:
case &quot;at-will&quot;:
{
  [bcolor=&quot;green&quot;]
  [fcolor=&quot;black&quot;]
  [group=&quot;1: Powers - At-Will&quot;]
  [grayout=0]
};
case &quot;encounter&quot;:
{
  [bcolor=&quot;red&quot;]
  [fcolor=&quot;white&quot;]
  [group=&quot;2: Powers - Encounter&quot;]
  [grayout=1]
};
case &quot;daily&quot;:
{
  [bcolor=&quot;black&quot;]
  [fcolor=&quot;white&quot;]
  [group=&quot;3: Powers - Daily&quot;]
  [grayout=1]
};
case &quot;recharge&quot;:
{
  [bcolor=&quot;blue&quot;]
  [fcolor=&quot;white&quot;]
  [group=&quot;3: Powers - Recharging&quot;]
  [grayout=1]
};]
&lt;/source&gt;

This is probably the most complex piece of the macro: a [[Macros:Branching_and_Looping#SWITCH_Option|SWITCH()]] roll option nested inside an [[Macros:Branching_and_Looping#IF_Option|IF()]] option, both of which use the [[Macros:Branching_and_Looping#CODE|CODE:{ }]] option to execute multiple macro commands as a single block. 

However, functionally, this segment's purpose is to assign several variables (to be used later) based on whether the power is an at-will, encounter, daily, or rechargeable power; remember that this entire SWITCH() block is contained within the first code block of the IF() statement. 

===Building the Macro Button Contents===

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:macroProps=&quot;autoexec=true;&quot;]
[h:macroProps=setStrProp(macroProps,&quot;color&quot;,bcolor)]
[h:macroProps=setStrProp(macroProps,&quot;fontColor&quot;,fcolor)]
[h:macroProps=setStrProp(macroProps,&quot;group&quot;,group)]
[h:grayoutString=&quot;&quot;]
[h,IF(grayout): grayoutString=encode(&quot;[h:setMacroProps(&quot; + &quot;'&quot; +pname+ &quot;'&quot; + &quot;,'color=gray;' &quot; + &quot;)]&quot;)]
[h:command=encode(&quot;[h:thisPower=&quot;+&quot;'&quot;+pname+&quot;'&quot;+&quot;]&quot;)]
[h:command=command+encode(&quot;[h:index=getMacroIndexes(thisPower)]&quot;)]
[h:command=command+encode(&quot;[h:mProps=getMacroProps(index)]&quot;)]
[h:command=command+encode(&quot;[h:color=getStrProp(mProps,'color')]&quot;)]
[h:command=command+encode(&quot;[h:used=if(color=='gray', 0, 1)]&quot;)]
[h:command=command+encode(&quot;[h:abort(used)]&quot;)]
[h:command=command + encode(&quot;[MACRO('AttackMain@Lib:test'):thisPower]&quot;)]
[h:command=command+grayoutString]
&lt;/source&gt;

This sequence may appear confusing, but it is conceptually relatively simple. Because a macro button must contain macro instructions, this segment of macro code builds a string using the [[Macros:Functions:encode|encode()]] function. 

In this case, '''encode()''' is used because macro commands require the square bracket ([ ]), but the macro parser has a tendency to attempt to evaluate anything in square brackets as a command, which - if you get a quotation mark out of place - will cause various frustrating and eldritch errors. To prevent this, we use single and double quotation marks to ensure that each element of the final string is treated as a string, and then '''encode()''' the whole result to a single string.

Specifically:

* Lines 1-4 set the macro properties based on the output of the earlier '''SWITCH()''' statement, each step adding an additional key-value pair to the macro property string.
* Lines 5-6 check to see if the ''grayout'' variable is true, and if so create an encoded string adding a command to change the color of the button to gray when the button is clicked. 
* Lines 7-1 iteratively assemble the ''command'' variable as an encoded string (the steps are broken down to make sure that the strings are handled properly by the parser). These steps create a sequence of commands that will, when the user clicks the button:

# Call a macro on a [[Token:library_token|library token]] to resolve the use of the power
# If the macro is an encounter or daily power, change the macro button color to gray
# If the macro is an encounter or daily power, prevent the macro from executing if the button is clicked again

===Creating the Macro Button===

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:createMacro(pname, decode(command), macroProps)]
Buttons added.
};
&lt;/source&gt;

This step is the easy part! We call the [[Macros:Functions:createMacro|createMacro()]] function and pass the arguments ''pname'' (containing the power's name), the [[Macros:Functions:decode|decoded]] ''command'' string (containing all of the macro commands we wish the new button to contain), and the variable ''macroProps'' (which sets the initial button and font colors, group, and other properties we wish the new button to have). 

Note that line three contains the closing brace of this CODE() block - be sure to close your CODE blocks properly!

===Mop-Up===

&lt;source lang=&quot;mtmacro&quot; line&gt;
{
No buttons added to token.
};]
&lt;/source&gt;

This tiny section at the very end is what is executed if the user does ''not'' wish to add buttons to their token. It is the ''false_body'' of the IF(), and will simply echo &quot;No buttons added to token.&quot; to the chat window.

==The Result==

When this macro is finished processing, the end result is that the token in question should have a new macro button generated containing the command sequence we assembled in the ''command'' variable. An example of the output - using the sample string property list shown in the [[Tutorials:Macros:CreatingMacroButtons#Assumptions|Assumptions]] section - is shown below:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:thisPower='Melee Basic Attack']
[MACRO('AttackMain@Lib:test'):thisPower]
&lt;/source&gt;

Another sample, this one including the ''grayout'' power information as well as the additional code to prevent repeat execution of the macro:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:thisPower='Chain Lightning']
[h:index=getMacroIndexes(thisPower)]
[h:mProps=getMacroProps(index)]
[h:color=getStrProp(mProps,'color')]
[h:used=if(color=='gray', 0, 1)]
[h:abort(used)]
[MACRO('AttackMain@Lib:test'):thisPower]
[h:setMacroProps('Chain Lightning','color=gray;' )]
&lt;/source&gt;

'''NOTE''': Although I have introduced line breaks in the examples above for ease of reading, the actual commands in the macro button do not have any line breaks between them. It requires some relatively convoluted use of strings and string concatenation to create easy-to-read command sequences via {{func|createMacro}}. Future builds of MapTool should remedy this situation.

==See Also==
{{func|createMacro}}, 
{{func|setMacroCommand}}, 
{{func|setMacroProps}}

[[Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Create Macro Buttons with a Macro</title>
    <ns>0</ns>
    <id>287</id>
    <revision>
      <id>2628</id>
      <parentid>2626</parentid>
      <timestamp>2009-04-01T14:04:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to Cookbook category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1775">This is the full macro code from the [[Creating Macro Buttons Using a Macro]] tutorial.

&lt;source lang=&quot;mtmacro&quot;&gt;
[h:powerSlot=macro.args]
[h:pname=getStrProp(eval(&quot;Power&quot;+powerSlot),&quot;powername&quot;)]
[h:use=getStrProp(eval(&quot;Power&quot;+powerSlot),&quot;usage&quot;)]

[h:status=input(
    &quot;addButtons|Yes,No|Add Macro Buttons to your token?|RADIO|ORIENT=H SELECT=1&quot;
)]
[h:abort(status)]

[IF(addButtons==0),CODE:
{
[h,SWITCH(use),CODE:
case &quot;at-will&quot;:
{
  [bcolor=&quot;green&quot;]
  [fcolor=&quot;black&quot;]
  [group=&quot;1: Powers - At-Will&quot;]
  [grayout=0]
};
case &quot;encounter&quot;:
{
  [bcolor=&quot;red&quot;]
  [fcolor=&quot;white&quot;]
  [group=&quot;2: Powers - Encounter&quot;]
  [grayout=1]
};
case &quot;daily&quot;:
{
  [bcolor=&quot;black&quot;]
  [fcolor=&quot;white&quot;]
  [group=&quot;3: Powers - Daily&quot;]
  [grayout=1]
};
case &quot;recharge&quot;:
{
  [bcolor=&quot;blue&quot;]
  [fcolor=&quot;white&quot;]
  [group=&quot;3: Powers - Recharging&quot;]
  [grayout=1]
};]

[h:macroProps=&quot;autoexec=true;&quot;]
[h:macroProps=setStrProp(macroProps,&quot;color&quot;,bcolor)]
[h:macroProps=setStrProp(macroProps,&quot;fontColor&quot;,fcolor)]
[h:macroProps=setStrProp(macroProps,&quot;group&quot;,group)]
[h:grayoutString=&quot;&quot;]
[h,IF(grayout): grayoutString=encode(&quot;[h:setMacroProps(&quot; + &quot;'&quot;
                +pname+ &quot;'&quot; + &quot;,'color=gray;' &quot; + &quot;)]&quot;)]
[h:command=encode(&quot;[h:thisPower=&quot;+&quot;'&quot;+pname+&quot;'&quot;+&quot;]&quot;)]
[h:command=command+encode(&quot;[h:index=getMacroIndexes(thisPower)]&quot;)]
[h:command=command+encode(&quot;[h:mProps=getMacroProps(index)]&quot;)]
[h:command=command+encode(&quot;[h:color=getStrProp(mProps,'color')]&quot;)]
[h:command=command+encode(&quot;[h:used=if(color=='gray', 0, 1)]&quot;)]
[h:command=command+encode(&quot;[h:abort(used)]&quot;)]
[h:command=command + encode(&quot;[MACRO('AttackMain@Lib:test'):thisPower]&quot;)]
[h:command=command+grayoutString]
[h:createMacro(pname, decode(command), macroProps)]
Buttons added.
};
{
No buttons added to token.
};]
&lt;/source&gt;
[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Tutorial-names-and-images.jpg</title>
    <ns>6</ns>
    <id>288</id>
    <revision>
      <id>718</id>
      <parentid>714</parentid>
      <timestamp>2008-12-24T02:16:26Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:Tutorial-names-and-images.jpg]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Creating a List Input with Names and Images</title>
    <ns>0</ns>
    <id>289</id>
    <revision>
      <id>4001</id>
      <parentid>2714</parentid>
      <timestamp>2009-10-15T08:47:52Z</timestamp>
      <contributor>
        <username>Shpena</username>
        <id>111</id>
      </contributor>
      <minor/>
      <comment>/* Modify imgList to Contain Token Images */  &quot;line 4&quot; -&gt; &quot;line 5&quot; since line 4 is a brace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6704">==Introduction==
[[Image:Tutorial-names-and-images.jpg|frame|right|Example of a List Input with Images and Names]]
This short macro tutorial illustrates how to combine several string list functions and token functions to generate a dialog that presents both the names and token images for a list of tokens. The resulting macro will generate an [[Macros:Functions:input|input()]] dialog similar to the one shown to the right; which, in this macro, is used to select a token and change its name. The macro illustrated here is based on a macro example provided by RPTool forum member (and MapTool contributor!) '''Knizia.fan'''.

===Assumptions===

This macro requires a [[Macros:string_list|string list]] containing the names of a collection of tokens. This list can be generated in numerous ways; in this tutorial it is generated using [[Macros:Functions:getExposedTokenNames|getExposedTokenNames()]].

We will also assume that there are 4 tokens visible on the map, named (imaginatively) &quot;Token 1&quot;, &quot;Token 2&quot;, &quot;Token 3&quot;, and &quot;Token 4&quot;.

==Macro Code and Explanation==

The [[Tutorials:Macros:List_with_images_fullcode|full macro code]] is broken into functional groupings and explained below.

===Get and Assign String Lists===

&lt;source lang=&quot;mtmacro&quot; line&gt;
[H: tokenList=getExposedTokenNames()]
[H: imgList = tokenList]
&lt;/source&gt;

Uses [[Macros:Functions:getExposedTokenNames|getExposedTokenNames()]] to create a [[Macros:string_list|string list]] containing the token names of all tokens that are not hidden by [[Map:fog_of_war|fog of war]], and assigning the output of getExposedTokenNames() to the variable ''tokenList''. 

The variable ''imgList'' is also assigned the value of ''tokenList'', because for this macro to work, we will be working with a copy of the originally generated list of token names (this copy will be altered to include token images, but the original will be left alone). The variables ''tokenList'' and ''imgList'' now contain:

====Variable Values====

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! list index
! tokenList
! imgList
|-
| 0 || Token 1 || Token 1
|-
| 1 || Token 2 || Token 3
|-
| 2 || Token 3 || Token 3
|-
| 3 || Token 4 || Token 4
|}

===Modify ''imgList'' to Contain Token Images===

&lt;source lang=&quot;mtmacro&quot; line&gt;
[H: Num = listCount(imgList)]

[h,COUNT(Num),CODE:
{
[h:tokenName=listGet(imgList,roll.count)]
[h,token(tokenName): image=getTokenImage()]
[h:imgList=listReplace(imgList,roll.count,tokenName+&quot; &quot;+image)]
}]
&lt;/source&gt;

The first line in this segment uses the [[Macros:Functions:listCount|listCount()]] function to get the number of entries in ''imgList''. Following that, a [[Macros:Branching_and_Looping|[COUNT(): ]]] roll option is used along with the [[Macros:Branching_and_Looping|CODE:{ }]] option to execute the three commands for each entry in the ''imgList''. The code in lines 5-7 do the following:

* Line 5 uses [[Macros:Functions:listGet|listGet()]] to get the value of the entry in ''imgList'' with the index ''roll.count'' (in other words, for the first loop, ''roll.count'' is 0; thus, listGet() retrieves entry 0 in ''imgList''). The value returned is assigned to the variable ''tokenName''.
* Line 6 uses the [[Macros:Branching_and_Looping|[token(): ]]] roll option to execute the function [[Macros:Functions:getTokenImage|getTokenImage()]] against the token identified in line 5. The result of this line of code is to obtain the image asset URL of the token's image and assign that value to the variable ''image'' (image asset URLs are internal MapTool identifiers that point to the location of a specific image (be it a map, a state, or a token image). 
* Line 7 then modifies ''imgList'' using [[Macros:Functions:listReplace|listReplace()]] to replace the current entry in ''imgList'' with a new entry composed of the token name and the token's image (in other words, each line in ''imgList'' contains both a name and an asset URL). 

====Variables====

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! list index
! tokenList
! imgList
|-
| 0 || Token 1 || Token 1 asset://7bc4e037058d908a6bdbe7ba172f0729
|-
| 1 || Token 2 || Token 3 asset://7bc4e037058d908a6bdbe7ba172f0729
|-
| 2 || Token 3 || Token 3 asset://a78f12b8d3df1b2e660dfa95b8a92cf1
|-
| 3 || Token 4 || Token 4 asset://a78f12b8d3df1b2e660dfa95b8a92cf1
|}

===Create Input Dialog===

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:status=input(
		&quot;Target|&quot;+imgList+&quot;|Select Target|LIST|SELECT=0 ICON=TRUE ICONSIZE=30&quot;,
		&quot;newName| |Enter a new name for this token&quot;
)]
[h:abort(status)]
&lt;/source&gt;

This segment uses the value in ''imgList'' in conjunction with the [[Macros:Functions:input|input()]] function to present a dialog with a drop-down list showing both token names and token images. 

You will note that the ICON and ICONSIZE options are set for the LIST input control - this allows the images to be displayed within the list. If you don't set this, you'll see the image asset URL instead. 

===Process Input From User===

&lt;source lang=&quot;mtmacro&quot; line&gt;

[h:targetName = listGet(tokenList,Target)]

[h:switchToken(targetName)]

[h:token.name=newName]
The token's name has been changed to &lt;i&gt;[r:newName]&lt;/i&gt;.
&lt;/source&gt;

For the purposes of this tutorial, the end result of the macro is simply to change the token name of the token selected in the drop-down list. This sequence of code does three things.:

# Since we can't use the ''imgList'' variable to get the token name by itself (because that list also contains the image asset URL!), we instead return to the original ''tokenList'' variable (this is why we have two lists!). We retrieve the selected token's name via the [[Macros:Functions:listGet|listGet()]] function, telling it to look in the list ''tokenList'' for the item with the corresponding index. 
##We can do this because even though we added the image asset URL to ''imgList'', we didn't change the order of anything - so the first entry in each list still points to the same token, and we can rest assured that if we know from ''imgList'' that Token 1 is the first item in ''imgList'' (in programming terms, it has index 0), then we know Token 1 is also the first item in ''tokenList''.
# We then use the [[Macros:Functions:switchToken|switchToken()]] function to change the &quot;focus&quot; of all subsequent macro commands to the token selected by the user.
# The final two lines change the token name to the value entered by the user, and outputs a message to chat confirming the change.

==Comments==

There is not currently a function available that will sort a string list, so the order in which tokens appear in the lists will not be in any particular order. This can be rather frustrating.
[[Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>eval</title>
    <ns>0</ns>
    <id>290</id>
    <revision>
      <id>4282</id>
      <parentid>3400</parentid>
      <timestamp>2010-06-18T10:07:37Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1345">{{MacroFunction
|name=eval
|version=pre-1.3
|description=
Evaluates an expression in a string and returns the result. The string contains the same type of expression that is usually located between macro brackets (e.g '''{ }''' or '''[r: 2+2]'''). {{func|eval}} is commonly used to evaluate dynamically built {{func|input}} parameters, or dice expressions stored in token properties.

For more complex evaluation functions, see {{func|evalMacro}} and {{func|execMacro}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
eval(expr)
&lt;/source&gt;
'''Parameter'''
{{param|expr|A string containing the expression to be evaluated.}}

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: eval(&quot;1+1&quot;)]
&lt;/source&gt;
Returns {{code|2}}

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: eval(&quot;3d6&quot;)]
&lt;/source&gt;
Returns a random number from {{code|3}} to {{code|18}}.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: eval(&quot;TestVar = 2&quot;)]
&lt;/source&gt;
Returns {{code|2}}

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: TestVar = 2][r: eval(&quot;TestVar/2&quot;)]
&lt;/source&gt;
Returns {{code|1}}


'''Tip'''
Since {{code|eval()}} only accepts strings as parameter and it happens quite often that you have either numbers or strings following code is a good method to make it work in any case.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: foo = eval(string(bar))]
&lt;/source&gt;
|also=
{{func|evalMacro}}, 
{{func|execMacro}}

}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>evalMacro</title>
    <ns>0</ns>
    <id>291</id>
    <revision>
      <id>6288</id>
      <parentid>6283</parentid>
      <timestamp>2014-05-17T07:42:59Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Typographical tweaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2767">{{MacroFunction
|name=evalMacro
|trusted=true
|version=1.3b49
|description=
Evaluates and &quot;executes&quot; the macro in a string and returns the result. The string contains the same type of macro commands that you would put in a token macro with the exception that it can not contain slash commands.

If you are performing rolls in the macro that create tool tips or use {{code|[e: ]}} then you will have to use either {{code|{ &lt;nowiki&gt;}&lt;/nowiki&gt;}} or {{code|[r: ]}} to display the output otherwise you will get incorrect formatting. 

The {{func|evalMacro}} function executes the macro in the same variable scope (i.e. the executed macro can read and alter variables from the current macro), where as {{func|execMacro}} creates a new variable scope (i.e. the executed macro can neither read nor alter varaibles from the current macro).

The advantage of this function over {{func|eval}} is that with {{func|eval}} you can only give a string as parameter that can be evaluated (e.g. {{code|&quot;3+5&quot;}}), while with {{func|evalMacro}} you can give anything as parameter but only the parts between {{code|[}}brackets{{code|]}} will be evaluated. (e.g. {{code|&quot;Your resulting roll is [r:1d10]&quot;}})

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
evalMacro(macroString)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
execMacro(macroString)
&lt;/source&gt;
'''Parameter'''
{{param|macroString|The string containing the macro script that is evaluated/executed.}}

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setNotes(evalMacro('[r,macro(&quot;CreateNotes@Lib:Notes&quot;): &quot;&quot;]'))]
&lt;/source&gt;
Sets the Notes of a [[Token]] to the output of the {{code|CreateNotes}} macro located on the {{code|Lib:Notes}} [[Library Token]].


&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: evalMacro(&quot;[h: TestVar1 = 5][h: TestVar2 = 10][TestVar1+TestVar2]&quot;)]
&lt;/source&gt;
Returns {{code|15}}


&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: TestVar3 = 10]
[h: TestVar4 = 20]
[r: evalMacro(&quot;[TestVar3+TestVar4]&quot;)]
&lt;/source&gt;
Returns {{code|30}}


&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: TestVar3 = 15]
[h: TestVar4 = 30]
[h: evalMacro(&quot;[TestVar5 = TestVar3+TestVar4]&quot;)]
[TestVar5]
&lt;/source&gt;
Returns {{code|45}}


&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: TestVar6 = 20]
[h: TestVar7 = 40]
[r: execMacro(&quot;[TestVar6+TestVar7]&quot;)]
&lt;/source&gt;
Prompts for the values of {{code|TestVar6}} and {{code|TestVar7}}, then it returns the sum of those two values.


&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: TestVar8 = 50]
[h: TestVar9 = 100]
[h: TestVar10 = 0]
[h: execMacro(&quot;[TestVar10 = TestVar8+TestVar9]&quot;)]
[TestVar10]
&lt;/source&gt;
Returns {{code|0}}


&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: evalMacro(&quot;[h:roll=1d20]You roll [r:roll] and you [r:if(roll&lt;10, 'hit', 'miss')] your target.&quot;)]
&lt;/source&gt;
Returns {{code|You roll 3 and you hit your target.}}


|also=
{{func|eval}}

}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:execMacro</title>
    <ns>0</ns>
    <id>292</id>
    <redirect title="evalMacro" />
    <revision>
      <id>1153</id>
      <parentid>729</parentid>
      <timestamp>2009-03-07T02:02:00Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[Macros:Functions:evalMacro]] has been moved, it is now a redirect to [[evalMacro]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[evalMacro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>endsWith</title>
    <ns>0</ns>
    <id>293</id>
    <revision>
      <id>1145</id>
      <parentid>1144</parentid>
      <timestamp>2009-03-07T01:51:21Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:endsWith]] moved to [[endsWith]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="391">{{MacroFunction
|name=endsWith
|version=1.3b49
|description=Returns 1 if the string ends with a certain sub string.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: result = endsWith(str, substr)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: endsWith(&quot;Test&quot;, &quot;t&quot;)]
[r: endsWith(&quot;Test&quot;, &quot;st&quot;)]
[r: endsWith(&quot;Test&quot;, &quot;z&quot;)]
&lt;/source&gt;

Returns
    1
    1
    0
}}
[[Category:String Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>startsWith</title>
    <ns>0</ns>
    <id>294</id>
    <revision>
      <id>7138</id>
      <parentid>7137</parentid>
      <timestamp>2019-03-01T14:17:10Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="541">{{MacroFunction
|name=startsWith
|version=1.3b49
|description=
Returns {{true}} if the first parameter starts with the contents of the second parameter.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: result = startsWith(string, substring)]
&lt;/source&gt;

Returns {{true}} if the string starts with a certain substring and {{false}} if not.

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: startsWith(&quot;Test&quot;, &quot;T&quot;)]
[r: startsWith(&quot;Test&quot;, &quot;Te&quot;)]
[r: startsWith(&quot;Test&quot;, &quot;Tez&quot;)]
&lt;/source&gt;

'''Returns'''
&lt;pre&gt;  1
  1
  0&lt;/pre&gt;
}}
[[Category:String Function]]</text>
      <sha1>43gup1w9eegp53fr7b7b308g40qju9c</sha1>
    </revision>
  </page>
  <page>
    <title>getVisibleTokenNames</title>
    <ns>0</ns>
    <id>295</id>
    <revision>
      <id>7211</id>
      <parentid>7156</parentid>
      <timestamp>2019-03-06T21:51:04Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1070">{{MacroFunction
|name=getVisibleTokenNames
|version=1.3b49
|description=
Returns a [[Macros:string list|string list]] or [[JSON Array]] of [[Token:token]] names for the [[Token:token|token]]s that are ''visible'' to the player. The type of the value returned depends on the delimiter parameter.
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;
&lt;!-- The above 'nbsp' is needed so the DIV is closed --&gt;
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: tokens = getVisibleTokenNames()]
[h: tokens = getVisibleTokenNames(delim)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: tokens = getVisibleTokenNames()]
&lt;/source&gt;

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: tokens = getVisibleTokenNames(&quot;json&quot;)]
&lt;/source&gt;

|changes=
{{change|1.3b51|No longer a trusted function.}}

}}
[[Category:Find Function]]
[[Category:Token Function]]</text>
      <sha1>f0pbn3g1avuhwr9tm013catygmhqxw6</sha1>
    </revision>
  </page>
  <page>
    <title>getVisibleTokens</title>
    <ns>0</ns>
    <id>296</id>
    <revision>
      <id>7212</id>
      <parentid>7158</parentid>
      <timestamp>2019-03-06T21:51:51Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1068">{{MacroFunction
|name=getVisibleTokens
|version=1.3b49
|description=
Returns a [[Macros:string list|string list]] or [[JSON Array]] of [[Glossary#Token Id|token id]]s for the [[Token:token|token]]s that are ''visible'' to the player. The type of the value returned depends on the delimiter parameter.
* If the delimiter is not specified then a [[Macros:string list|string list]] is returned with the default value of {{code|&quot;,&quot;}} is used.
* If the delimiter {{code|json}} then a [[JSON Array]] is returned.
* Otherwise a [[Macros:string list|string list]] is returned with the delimiter passed in.
&amp;nbsp;
&lt;!-- The above 'nbsp' is needed to close the DIV --&gt;
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getVisibleTokens()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getVisibleTokens(delim)
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: tokens = getVisibleTokens()]
&lt;/source&gt;


&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: tokens = getVisibleTokens(&quot;json&quot;)]
&lt;/source&gt;

|changes=
{{change|1.3b51|No longer a trusted function.}}

}}
[[Category:Find Function]]
[[Category:Token Function]]</text>
      <sha1>5skio366ws5zo9j05wmy377yhzj729t</sha1>
    </revision>
  </page>
  <page>
    <title>json.fromStrProp</title>
    <ns>0</ns>
    <id>297</id>
    <revision>
      <id>5867</id>
      <parentid>5821</parentid>
      <timestamp>2012-02-11T12:25:12Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Typographical tweaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="576">{{MacroFunction
|name=json.fromStrProp
|version=1.3b49
|description=
Creates a [[JSON Object|json object]] from a [[Macros:string property list|string property list]]. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.fromStrProp(propList)
json.fromStrProp(propList,delim)
&lt;/source&gt;
'''Parameters'''
{{param|propList|String property list to extract data from.}} 
{{param|delim|Delimiter between fields (default is {{code|&quot;;&quot;}}).}}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:json.fromStrProp(&quot;a=1;b=44;c=12&quot;)]
&lt;/source&gt;

Returns
   {&quot;a&quot;:1,&quot;c&quot;:12,&quot;b&quot;:44}
}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.fromList</title>
    <ns>0</ns>
    <id>298</id>
    <revision>
      <id>3333</id>
      <parentid>3332</parentid>
      <timestamp>2009-04-28T09:52:41Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="604">{{MacroFunction
|name=json.fromList
|version=1.3b49
|description=
Returns a [[JSON Array]] from a [[String List]]. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.fromList(strList)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.fromList(strList, delim)
&lt;/source&gt;
'''Parameters'''
{{param|strList|The [[String List]] that is converted to a [[JSON Array]].}}
{{param|delim|The delimiter used in the [[String List]], defaults to {{code|&quot;,&quot;}}.}}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:json.fromList(&quot;a,1,g,4&quot;)]
&lt;/source&gt;
Returns {{code|[&quot;a&quot;,1,&quot;g&quot;,4]}}

|also=
{{func|json.toList}}

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.toStrProp</title>
    <ns>0</ns>
    <id>299</id>
    <revision>
      <id>5613</id>
      <parentid>1532</parentid>
      <timestamp>2011-07-24T09:12:45Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="624">{{MacroFunction
|name=json.toStrProp
|version=1.3b49
|description=
Creates a [[Macros:string property list|string list]] from a [[JSON Object|json object]]. With the specified delimiter, if a delimiter is not provided then the default value of ';' is used.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: strProp = json.toStrProp(jobj)]
[h: strProp = json.toStrProp(jobj, delim)]
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h:a=json.fromStrProp(&quot;a=1;b=44;c=12&quot;)] [r:json.toStrProp(a)]
  [h:a=json.fromList(&quot;a,1,g,4&quot;)][r:json.toStrProp(a)]
&lt;/source&gt;

Returns
  a=1;c=12;b=44
  0=a;1=1;2=g;3=4
}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.toList</title>
    <ns>0</ns>
    <id>300</id>
    <revision>
      <id>4004</id>
      <parentid>2918</parentid>
      <timestamp>2009-10-15T21:04:39Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="474">{{MacroFunction
|name=json.toList
|version=1.3b49
|description=
Creates a [[Macros:string list|string list]] from a [[JSON Array]]. If the delimiter is not specified then the default value of ',' is used.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: jarr = json.toList(jarr)]
[h: jarr = json.toList(jarr, delim)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h:a=json.fromList(&quot;a,1,g,4&quot;)]
  [json.toList(a)]
&lt;/source&gt;

Returns
     a,1,g,4
}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.type</title>
    <ns>0</ns>
    <id>301</id>
    <revision>
      <id>7161</id>
      <parentid>5614</parentid>
      <timestamp>2019-03-02T23:35:01Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="679">{{MacroFunction
|name=json.type
|version=1.3b49
|description=
Returns a string which contains the type of JSON variable that is passed in.
Return values are
* {{code|ARRAY}} - The object is a [[JSON Array]].
* {{code|OBJECT}} - The object is a [[JSON Object]].
* {{code|UNKNOWN}} - It is neither a [[JSON Array]] nor [[JSON Object]].
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: jarr = json.type(val)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h:a=json.fromStrProp(&quot;a=1;b=44;c=12&quot;)] [r:json.type(a)]
  [h:a=json.fromList(&quot;a,1,g,4&quot;)][r:json.type(a)]
  [r:json.type(&quot;some thing or other&quot;)]
&lt;/source&gt;

Returns
  OBJECT
  ARRAY
  UNKNOWN
}}
[[Category:JSON Function]]</text>
      <sha1>mqucnntv6rjuj8p7h96uxm0n85t2asx</sha1>
    </revision>
  </page>
  <page>
    <title>json.get</title>
    <ns>0</ns>
    <id>302</id>
    <revision>
      <id>6848</id>
      <parentid>5888</parentid>
      <timestamp>2016-08-21T21:14:54Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3432">{{MacroFunction
|name=json.get
|version=1.3b49
|description=
Returns the value in a [[JSON Array]] at the specified index, returns a slice of a [[JSON Array]] from the specified indexes, or returns the value from [[JSON Object]] for the specified key.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.get(array, index)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.get(array, start, end)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.get(object, key, key, ...)
&lt;/source&gt;
'''Parameters'''
{{param|array|The [[JSON Array]] to retrieve the element from.}}
{{param|index|The numerical index of the element you want returned.}}
{{param|start|The starting index of the element you wish the slice to begin at.}}
{{param|end|The ending index of the element you wish the slice to end at.}}
{{param|object|The [[JSON Object]] to retrieve the element from.}}
{{param|key|The name of a field that should be returned. This parameter can exist more than once, if it does then a [[JSON Object]] is returned with all the specified elements.}}

When extracting slices: Negative numbers can be used as the offsets from the end of the array, {{code|-1}} is the last element in the array, {{code|-2}} is the second to last, and so on.  If the {{code|end}} index is smaller than the {{code|start}} index then the array slice is returned in reverse.  This does not work for single indices, so if you want to retrieve a single index, say the last one in an array, you do that like this: json.get(array, -1,-1). This way you take a ''slice'' of 1 index. To get the last element you thus need to do: json.get(json.get(array, -1,-1),0) as you get a ''slice'' and you want an ''element''.

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
  a) [h: jo = json.fromStrProp(&quot;a=1; b=44; cat=meow&quot;)] [r: json.get(jo, &quot;b&quot;)] &lt;br&gt;
  b) [h: jo = json.fromStrProp(&quot;a=1; b=44; cat=meow&quot;)] [r: json.get(jo, &quot;XX&quot;)] &lt;br&gt;
  c) [h: jo = json.fromStrProp(&quot;a=1; b=44; cat=meow&quot;)] [r: json.get(jo, &quot;cat&quot;, &quot;a&quot;)] &lt;br&gt;
  d) [h: jo = json.fromStrProp(&quot;a=1; b=44; cat=meow&quot;)] [r: json.get(jo, &quot;b&quot;, &quot;XX&quot;)] &lt;br&gt;
  e) [h: ja = json.fromList(&quot;1,44,meow&quot;)] [r: json.get(ja, 1)] &lt;br&gt;
  f) [h: ja = json.fromList(&quot;1,44,meow&quot;)] [r: json.get(ja, 2)] &lt;br&gt;
  g) [h: ja = json.fromList(&quot;1,44,meow&quot;)] [r: json.get(ja, 1, 2)] &lt;br&gt;
  h) [h: ja = json.fromList(&quot;1,44,meow&quot;)] [r: json.get(ja, 0, -1)] &lt;br&gt;
  i) [h: ja = json.fromList(&quot;1,44,meow&quot;)] [r: json.get(ja, 2, 0)] &lt;br&gt; 
  j) [h: ja = json.fromList(&quot;1,44,meow&quot;)] [r: json.get(ja, -1, 0)] &lt;br&gt;
  ERROR a) [h: ja = json.fromList(&quot;1,44,meow&quot;)] [r: json.get(ja, -1)] &lt;br&gt;
  ERROR b) [h: ja = json.fromList(&quot;1,44,meow&quot;)] [r: json.get(ja, 3)] &lt;br&gt;
  
&lt;/source&gt;

Returns
  a) 44 -- a value
  b)    -- empty string &quot;&quot;, as XX does not exist
  c) {&quot;cat&quot;:&quot;meow&quot;,&quot;a&quot;:1} -- a JSON object
  d) {&quot;b&quot;:44,&quot;XX&quot;:&quot;&quot;} -- a JSON object
  e) 44 -- a value
  f) meow -- a value
  g) [1,44,&quot;meow&quot;] -- an array slice of 0..2  
  h) [&quot;meow&quot;,44] -- an array slice from 2..1 
  i) [1,44,&quot;meow&quot;] -- an array slice from 0..end
  j) [&quot;meow&quot;,44] -- an array slice from end..1

  ERROR a) -- java.lang.ArrayIndexOutOfBoundsException, can't use negatives with a single index param (works OK with slices). 
  ERROR a) -- java.lang.ArrayIndexOutOfBoundsException, the last valid index is 2
|changes=
{{change|1.3b51|Added ability to return [[JSON Array]] slices.}}
{{change|1.3b51|Added ability to return [[JSON Object]]s of select fields from other [[JSON Object]]s.}}

}}
[[Category:JSON Function]]</text>
      <sha1>ad2guous2fxiuyurgjh889te1q3ssqv</sha1>
    </revision>
  </page>
  <page>
    <title>json.contains</title>
    <ns>0</ns>
    <id>303</id>
    <revision>
      <id>2509</id>
      <parentid>1504</parentid>
      <timestamp>2009-03-31T05:31:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1281">{{MacroFunction
|name=json.contains
|version=1.3b49
|description=
Returns {{true}} if the [[JSON Object]] contains the specified key, or if the [[JSON Array]] contains the specified value.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.contains(object, key)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.contains(array, value)
&lt;/source&gt;
'''Parameters'''
{{param|object|The [[JSON Object]] to test for the key.}}
{{param|key|The key to check the object for.}}
{{param|array|The [[JSON Array]] to test for the value.}}
{{param|value|The value to check the array for.}}

|examples=
Check if the [[JSON Object]] {{code|a}} contains the key {{code|&quot;b&quot;}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:a=json.fromStrProp(&quot;a=1;b=44;c=12&quot;)]
[json.contains(a,&quot;b&quot;)]
&lt;/source&gt;
Returns {{true}}

Check if the [[JSON Object]] {{code|a}} contains the key {{code|&quot;z&quot;}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:a=json.fromStrProp(&quot;a=1;b=44;c=12&quot;)]
[json.contains(a,&quot;z&quot;)]
&lt;/source&gt;
Returns {{false}}

Check if the [[JSON Array]] {{code|a}} contains the value {{code|&quot;b&quot;}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:a=json.fromList(&quot;1,b,3,d&quot;)]
[json.contains(a,&quot;b&quot;)]
&lt;/source&gt;
Returns {{true}}

|also=
{{func|json.type}}

|changes=
{{change|1.3b51|Added ability for function to work with [[JSON Array]]s.}}

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.set</title>
    <ns>0</ns>
    <id>304</id>
    <revision>
      <id>4828</id>
      <parentid>4827</parentid>
      <timestamp>2010-11-04T03:16:09Z</timestamp>
      <contributor>
        <username>Raphael diSanto</username>
        <id>246</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2150">{{MacroFunction
|name=json.set
|version=1.3b49
|description=
Sets the value in at the specified index in a [[JSON Array]] or for the specified key in a [[JSON Object]]. You can use an empty string ({{code|&quot;&quot;}}) to represent a new [[JSON Array]] or [[JSON Object]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
newarr=json.set(jarr, [])
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
newarr=json.set(jarr, index, value)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
newarr=json.set(jarr, index, value, ..., ...)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
newobj=json.set(jobj, key, value)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
newobj=json.set(jobj, key, value, ..., ...)
&lt;/source&gt;
'''Parameters'''
{{param|jarr|The [[JSON Array]] that has an index's value set.}}
{{param|index|The numeric index which has its value set.}}
{{param|jobj|The [[JSON Object]] that has a key's value set.}}
{{param|key|The named key which has its value set.}}
{{param|value|The content that is set to the {{code|index}} or {{code|key}}.}}

'''Note:''' The {{code|index}} and {{code|value}} parameters or {{code|key}} and {{code|value}} parameters can be repeated in pairs.

'''Note:''' {{code|newarr}} or {{code|newobj}} can be equal to {{code|jarr}} or {{code|jobj}}. In this case, the object/array will simply be updated.

'''Note:''' The word &quot;class&quot; is a reserved word in JavaScript; it is therefore not possible to create a JSON object containing a ''key'' named &quot;Class,&quot; &quot;class,&quot; or any mix of upper- and lower-case. MapTool will ignore any instructions to set a JSON object key with that name.


|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
  [json.set(&quot;{}&quot;, &quot;a&quot;, 5)]
  [json.set(&quot;&quot;, &quot;a&quot;, 5, &quot;b&quot;, 8)]
  [json.set(json.fromList(&quot;1,3&quot;), 0, 8)]
&lt;/source&gt;

Returns
  {&quot;a&quot;:5}
  {&quot;a&quot;:5, &quot;b&quot;:8}
  [8, 3]

To save the new value in the [[JSON Array]] or [[JSON Object]] so that you can reference it later in a macro, you must set the array equal to the result of json.set().

&lt;source lang=&quot;mtmacro&quot; line&gt;
   [myArray = json.append(&quot;&quot;, 1, 2, 3)]
   [myArray = json.set(myArray, 0, 5)]
   [myArray]
&lt;/source&gt;

Returns
   [1,2,3] 
   [5,2,3] 
   [5,2,3]

|also=
{{func|json.get}}
}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.fields</title>
    <ns>0</ns>
    <id>305</id>
    <revision>
      <id>5866</id>
      <parentid>5865</parentid>
      <timestamp>2012-02-10T13:03:15Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Layout tweaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1201">{{MacroFunction
|name=json.fields
|version=1.3b49
|description=
Returns the fields (keys) for a [[JSON Object]] or the indexes for a [[JSON Array]] as a string list. The type of the value returned depends on the delimiter parameter. 

&lt;u&gt;Note&lt;/u&gt;: Because [[JSON Object]]s are unordered, ''json.fields'' will not reflect the order they were set in.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.fields(jobj)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.fields(jobj, delim)
&lt;/source&gt;

'''Parameters'''
* {{code|delim}} =
** {{code|unspecified}}: a standard [[Macros:string list|string list]] is returned, with its default {{code|&quot;,&quot;}} delimiter.
** {{code|&quot;json&quot;}}: a [[JSON Array]] is returned.
** {{code|&quot;x&quot;}}: a [[Macros:string list|string list]] is returned with {{code|&quot;x&quot;}} used as a delimiter.

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: a=json.fromStrProp(&quot;a=1;b=44;c=12&quot;)]
[r: json.fields(a)]
&lt;/source&gt;
Returns
  b,c,a


&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: a=json.fromList(&quot;a,1,g,4&quot;)]
[r: json.fields(a,&quot;;&quot;)]
&lt;/source&gt;
Returns
  0;1;2;3


&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: a=json.fromStrProp(&quot;a=1;b=44;c=12&quot;)]
[r: json.fields(a, &quot;json&quot;)]
&lt;/source&gt;
Returns
  [&quot;a&quot;,&quot;c&quot;,&quot;b&quot;]
}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.length</title>
    <ns>0</ns>
    <id>306</id>
    <revision>
      <id>5615</id>
      <parentid>4005</parentid>
      <timestamp>2011-07-24T09:15:37Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="490">{{MacroFunction
|name=json.length
|version=1.3b49
|description=
Returns the number of fields in a [[JSON Object|json object]] or number of elements in a [[JSON Array|json array]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: len = json.length(jobj)]
[h: len = json.length(jarr)]
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h:a=json.fromStrProp(&quot;a=1;b=44;c=12&quot;)] [json.length(a)]
  [h:a=json.fromList(&quot;a,1,g,4&quot;)][json.length(a)]
&lt;/source&gt;

Returns
  3
  4
}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.append</title>
    <ns>0</ns>
    <id>307</id>
    <revision>
      <id>2921</id>
      <parentid>1501</parentid>
      <timestamp>2009-04-05T00:36:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Correcting JSON Array link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="510">{{MacroFunction
|name=json.append
|version=1.3b49
|description=
Appends values to the end of a [[JSON Array]]. An empty string (&quot;&quot;) can be used to represent an empty [[JSON Array]] to append the values to.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: jarr = json.append(jarr, value, ...)]
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h:a=json.fromList(&quot;a,1,g,4&quot;)][r: json.append(a, 55)]
  [r: json.append(&quot;&quot;, 1, 5, 8, 33)]
&lt;/source&gt;

Returns
   [&quot;a&quot;,1,&quot;g&quot;,4,55]
   [1,5,8,33]
}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.remove</title>
    <ns>0</ns>
    <id>308</id>
    <revision>
      <id>2922</id>
      <parentid>1535</parentid>
      <timestamp>2009-04-05T00:36:32Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Correcting JSON Array link.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="522">{{MacroFunction
|name=json.remove
|version=1.3b49
|description=
Removes a field from a [[JSON Object]], or the value at the specified index from a [[JSON Array]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: jarr = json.remove(jarr, index)]
[h: jarr = json.remove(jobj, key)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h:a=json.fromStrProp(&quot;a=1;b=44;c=12&quot;)] [r:json.remove(a, &quot;c&quot;)]
  [h:a=json.fromList(&quot;a,1,g,4&quot;)][r:json.remove(a,3)]
&lt;/source&gt;

Returns
  {&quot;a&quot;:1,&quot;b&quot;:44}
  [&quot;a&quot;,1,&quot;g&quot;]
}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Macrobuttons.jpg</title>
    <ns>6</ns>
    <id>309</id>
    <revision>
      <id>801</id>
      <timestamp>2008-12-24T14:41:25Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macro Button</title>
    <ns>0</ns>
    <id>310</id>
    <revision>
      <id>2711</id>
      <parentid>2599</parentid>
      <timestamp>2009-04-02T07:35:11Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Framed image.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="654">[[Image:Macrobuttons.jpg|frame|Sample View of Macro Buttons]]
Macro Buttons are user-clickable buttons that executes a macro with a single click (as opposed to having to type the entire macro to chat). When a macro is created, it automatically generates a labeled button (the label is the name given by the macro author to the macro).

The screenshot below shows some example macro buttons. Note that buttons can have varying button and font colors, and can be sorted and arranged in various ways. 

When the macro button is clicked, the contents of the macro are populated to the Chat Panel and the commands are parsed and executed.
[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>closeDialog</title>
    <ns>0</ns>
    <id>311</id>
    <revision>
      <id>4652</id>
      <parentid>4567</parentid>
      <timestamp>2010-10-05T15:02:03Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1277">{{MacroFunction
|name=closeDialog
|version=1.3b49
|description=Closes the specified macro dialog that was previously created using {{roll | dialog}}.  If the 
[[dialog]] is not open then the function has no effect. 

The most common use for this function is closing a [[dialog]] based from a macro that is run when clicking on a link or button for the 
[[dialog]] that has no close button. 

'''NOTE''' In later versions of maptool (tested in b74) this works only for dialogs opened with {{roll|dialog}}. Frames cant be closed with this. But there is a new analog function available for that, too. See {{func|closeFrame}}


|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: closeDialog(name)]
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: closeDialog(&quot;CharacterSheet&quot;)]  
&lt;/source&gt;

Assuming a [[dialog]] called &quot;Name Entry&quot; has been created without the input flag but containing a form. In the macro called when the
form is submitted you can use the following logic to check that the &quot;name&quot; field is not blank and close the [[dialog]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h, if(listGet(macro.args, &quot;name&quot;)), code: {
    [closeDialog(&quot;Name Entry&quot;)]
} ; {
    &lt;!-- otherwise we would do something here to tell the user to provide a name --&gt;
}]
&lt;/source&gt;
}}
[[Category:Dialog Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isDialogVisible</title>
    <ns>0</ns>
    <id>312</id>
    <revision>
      <id>1443</id>
      <parentid>1442</parentid>
      <timestamp>2009-03-08T20:42:41Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:isDialogVisible]] moved to [[isDialogVisible]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="263">{{stub}}
{{MacroFunction
|name=isDialogVisible
|version=1.3b49
|description=
Returns 1 if the specified dialog is visible, or 0 if it is not visible.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: vis =  isDialogVisible(name)]
&lt;/source&gt;
}}
[[Category:Dialog Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isFrameVisible</title>
    <ns>0</ns>
    <id>313</id>
    <revision>
      <id>1447</id>
      <parentid>1446</parentid>
      <timestamp>2009-03-08T20:48:51Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:isFrameVisible]] moved to [[isFrameVisible]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="259">{{stub}}
{{MacroFunction
|name=isFrameVisible
|version=1.3b49
|description=
Returns 1 if the specified frame is visible, or 0 if it is not visible.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: vis =  isFrameVisible(name)]
&lt;/source&gt;
}}
[[Category:Frame Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token Types</title>
    <ns>0</ns>
    <id>314</id>
    <revision>
      <id>4596</id>
      <parentid>2613</parentid>
      <timestamp>2010-09-29T01:46:03Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <minor/>
      <comment>Added &quot;Languages:&quot; bar.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="198">{{Languages|Token Types}}
There are various token types available in MapTool, each with a different purpose.

* [[Image Token]]
* [[Library Token]]
* [[PC Tokens]]
* [[NPC Token]]
[[Category:Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>List Input with Images</title>
    <ns>0</ns>
    <id>315</id>
    <revision>
      <id>2625</id>
      <parentid>2623</parentid>
      <timestamp>2009-04-01T14:00:28Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to Cookbook category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="740">The following is the full code for the [[Creating a List Input with Names and Images]] tutorial.
&lt;source lang=&quot;mtmacro&quot;&gt;
[H: tokenList=getExposedTokenNames()]
[H: imgList = tokenList]

[H: Num = listCount(imgList)]

[h,COUNT(Num),CODE:
{
[h:tokenName=listGet(imgList,roll.count)]
[h,token(tokenName): image=getTokenImage()]
[h:imgList=listReplace(imgList,roll.count,tokenName+&quot; &quot;+image)]
}]

[h:status=input(
    &quot;Target|&quot;+imgList+&quot;|Select Target|LIST|SELECT=0 ICON=TRUE ICONSIZE=30&quot;,
    &quot;newName| |Enter a new name for this token&quot;
)]
[h:abort(status)]


[h:targetName = listGet(tokenList,Target)]

[h:switchToken(targetName)]

[h:token.name=newName]
The token's name has been changed to &lt;i&gt;[r:newName]&lt;/i&gt;.
&lt;/source&gt;
[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokenHandout</title>
    <ns>0</ns>
    <id>316</id>
    <revision>
      <id>4904</id>
      <parentid>4901</parentid>
      <timestamp>2010-11-19T07:49:34Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="395">{{MacroFunction
|name=getTokenHandout
|description=
Returns the [[Asset ID|asset id]] of the handout image for the for the [[Current Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: assetId = getTokenHandout(size)]
&lt;/source&gt;

|example=
To display the image for the current [[Token]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;img src='[r:getTokenHandout()]'&gt;&lt;/img&gt;
&lt;/source&gt;
}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokenPortrait</title>
    <ns>0</ns>
    <id>317</id>
    <revision>
      <id>6261</id>
      <parentid>4903</parentid>
      <timestamp>2014-01-18T07:31:09Z</timestamp>
      <contributor>
        <username>True Hitoare</username>
        <id>579</id>
      </contributor>
      <comment>Size of the image available as a parameter, reformatted usage to conform to more standard design</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="642">{{MacroFunction
|name=getTokenPortrait
|description=
Returns the [[Asset ID|asset id]] of the portrait image for the for the [[Current Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenPortrait()
getTokenPortrait(size)
&lt;/source&gt;

|examples=
To display the image for the current [[Token]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;img src='[r:getTokenPortrait()]'&gt;&lt;/img&gt;
&lt;/source&gt;
}}
===Version Notes===
In versions before v1.3b51 an attempt to retrieve a portrait image when none was present produced an error.  In 1.3b51 and later builds the function returns an empty string if no portrait is associated with the image.
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:DialogEx1.png</title>
    <ns>6</ns>
    <id>318</id>
    <revision>
      <id>847</id>
      <timestamp>2009-01-09T07:32:18Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <comment>Example of [[Macros:Functions:dialog]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">Example of [[Macros:Functions:dialog]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>dialog (roll option)</title>
    <ns>0</ns>
    <id>319</id>
    <revision>
      <id>5620</id>
      <parentid>4326</parentid>
      <timestamp>2011-07-24T10:16:03Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3185">{{RollOption
|name=dialog
|description=Opens a dialog window.  This window can be named; attempts to open another dialog with the same name cause the old contents to be removed and new contents displayed.  The initial size of the dialog can be specified as well, but once the named dialog is opened and resized by the user, that size becomes its default opening size in the future.

Dialogs are not dockable panels as a {{roll|frame}} is.  Dialogs also have at least one button for dismissing the dialog.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h, dialog(dialogName [,size; input; temporary; title; noframe] )]
&lt;/source&gt;

The first parameter, shown as '''dialogName''', should be a double-quoted string that specifies the internal name of the dialog window.  (Note that the title that appears in the titlebar of the window is set separately, using HTML that appears inside the dialog itself.) (use '''title''' parameter from b50 forward)

The second parameter is optional, it is a semicolon separated [[String Property List]], which could include the following parameters:

The '''size''' parameter is a [[String Property List]] that contains two values, ''width'' and ''height''.  Those values can be measured in pixels ('''px''' and the default) or other HTML units, such as ems ('''em''') or screen width percentages ('''%''').

The following parameters work from v1.3b50 forward:

The '''input''' parameter dictates whether the dialog has a ''close'' button or is closed with an &lt;input submit&gt; button custom coded into the dialog.  '''input''' is set to 1 or 0 within double quotes.  example: &quot;input=1&quot;

The '''temporary''' parameter dictates whether Maptool remembers the size of the dialog window between displays.  Setting this value to 1 causes Maptool to forget the window size.  Example &quot;temporary=1&quot;

The '''noframe''' parameter dictates whether the window has a frame or not.  Example &quot;noframe=1&quot; removes the frame from the dialog window.

The '''title''' parameter sets the title of the dialog box and replaces the need to set the title from within the HTML code.

|examples=
The following code opens up a dialog window that contains the HTML as shown here:

[[Image:DialogEx1.png]]

&lt;source lang=&quot;mtmacro&quot; line&gt;
[dialog(&quot;Dialog Test&quot;): {
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Test of Dialog Windows&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;table border=&quot;1&quot;&gt;
    &lt;tr&gt;&lt;th&gt;Column 1&lt;/th&gt;&lt;th&gt;Column 2&lt;/th&gt;&lt;th&gt;Column 3&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Line 1, Col 1&lt;/td&gt;&lt;td colspan=&quot;2&quot;&gt;Line 1, Cols 2 and 3&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td rowspan=&quot;2&quot;&gt;Lines 2 and 3, Col 1&lt;/td&gt;&lt;td&gt;Line 2, Col 2&lt;/td&gt;&lt;td&gt;Line 2, Col 3&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Line 3, Col 3&lt;/td&gt;&lt;td&gt;Line 3, Col 3&lt;/td&gt;&lt;/tr&gt;
    &lt;/table&gt;
    &lt;/body&gt;
  &lt;/html&gt;
} ]
&lt;/source&gt;

To create a dialog that initially opens with a width of 300 pixels and height of 200 pixels, change the first line of the previous example to:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[dialog(&quot;Dialog Test&quot;, &quot;width=300; height=200; temporary=1; input=0; noframe=1&quot;): {
&lt;/source&gt;

Did you try it?  It didn't change size from the previous example, did it?  Do you remember why?  If not, go back to the top of the page and read that first paragraph again!
}}
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:Macros:Branching and Looping</title>
    <ns>1</ns>
    <id>320</id>
    <revision>
      <id>947</id>
      <parentid>852</parentid>
      <timestamp>2009-02-23T12:53:47Z</timestamp>
      <contributor>
        <username>Kludge42</username>
        <id>19</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="301">Made change pointed out by Krenig - removed h: to make the if() example actually work. [[User:Cclouser|Rumble]] 02:01, 10 January 2009 (UTC)

Added &quot;Also- as of at least 1.3.b50- an argument must be given[...]&quot; to MACRO NOTES for clarification.
[[User:Kludge42|Kludge42]] 12:56, 23 February 2009 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>assert</title>
    <ns>0</ns>
    <id>321</id>
    <revision>
      <id>7274</id>
      <parentid>7273</parentid>
      <timestamp>2019-03-16T23:55:26Z</timestamp>
      <contributor>
        <username>Naciron</username>
        <id>664</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2171">{{MacroFunction
|name=assert
|version=1.3b49
|description=
Halts execution and prints a custom error message if a condition is {{false}}.  Note that the error message will be displayed in chat even if the command itself is in a {{code|[H:&amp;nbsp;]}} block.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
assert(condition, message)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
assert(condition, message, prefix)
&lt;/source&gt;
'''Parameters'''
{{param|condition|The test condition that must evaluate to {{true}} for the macro to continue.}}
{{param|message|The custom error message that is presented if the macro is halted due to the {{false}} condition.}}
{{param|prefix|Determines if the error message should have the message prefix {{code|&quot;Macro defined error: &quot;}}. Defaults to {{true}}, set to {{false}} if you do not wish your custom error message to have the message prefix.}}

|examples=
Checks to see if a player is a GM, and if they are not halts execution of the macro and displays output.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: assert(isGM(),&quot;This macro is for GM use only.&quot;,0)]
&lt;/source&gt;
Chat output (if player is not GM): {{code|This macro is for GM use only.}}


Halts execution of the macro if {{code|var}} is a number.  This is useful for making sure the variables you work with are the variable type you expect.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: assert(! isNumber(var), &quot;The variable is a number.&quot;,1)]
&lt;/source&gt;
Chat output (if {{code|var}} is a number): {{code|Macro defined error: The variable is a number.}}

Bear in mind, {{code|isNumber(var)}} returns {{true}} when var is a number, but assert continues when condition is {{true}}.  Using {{code|! isNumber(var)}} inverts the boolean value.

===Usage Notes===
When aborting a macro called from another macro (for example, a library token), all macros are aborted, not just the one executing. 
Since 1.5.0 you can change that behaviour by using macro.catchAssert. 

|also=
{{ func|isGM}}
{{ func|isNumber}}
{{ func|abort}}
[[ macro.catchAssert|macro.catchAssert]]

|changes=
{{change|1.3b51|Added {{code|prefix}} parameter option.}}
{{change|1.5.0|catch an assert with macro.catchAssert}}


}}

[[Category:Miscellaneous Function]]</text>
      <sha1>k7xvseu4mhl7lg92ll4tzqomf9bdkva</sha1>
    </revision>
  </page>
  <page>
    <title>listSort</title>
    <ns>0</ns>
    <id>322</id>
    <revision>
      <id>2191</id>
      <parentid>2190</parentid>
      <timestamp>2009-03-25T02:08:44Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <minor/>
      <comment>Boxed example return</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="991">{{stub}}
{{MacroFunction
|name=listSort
|description=
Returns a sorted list.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[listSort(list, sortType)]
&lt;/source&gt;
The sortType determines the type of sort to use.
If sortType is &quot;A&quot;, normal alphabetic sorting is used, and &quot;Monster11&quot; comes before &quot;Monster3&quot;. (Default behavior)
If sortType is &quot;N&quot;, the first number in each entry is effectively padded to 4 digits, so that &quot;Monster3&quot; comes before &quot;Monster11&quot;.
The sortType can have a second character of &quot;+&quot; or &quot;-&quot; to specify an ascending or descending sort.

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: UnsortedList = &quot;Monster11,Monster3,Monster12,Monster66,Monster87,Monster71&quot;]
[h: SortedList = listSort(UnsortedList,'N')]

Unsorted list: [r: UnsortedList]&lt;br&gt;
Sorted list: [r: SortedList]
&lt;/source&gt;

Returns:
  Unsorted list: Monster11,Monster3,Monster12,Monster66,Monster87,Monster71
  Sorted list: Monster3, Monster11, Monster12, Monster66, Monster71, Monster87

}}
[[Category:String List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>listFormat</title>
    <ns>0</ns>
    <id>323</id>
    <revision>
      <id>4155</id>
      <parentid>4154</parentid>
      <timestamp>2010-03-23T18:05:09Z</timestamp>
      <contributor>
        <username>Biodude</username>
        <id>51</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1920">{{MacroFunction
|name=listFormat
|description=
Returns a custom-formatted version of the list.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[ listFormat(list, listFormat, itemFormat, separator) ]
[ listFormat(list, listFormat, itemFormat, separator, delim) ]
&lt;/source&gt;
* listFormat is a string that is emitted once. It should contain the text &quot;%list&quot;, which is replaced with the formatted items.
* itemFormat is emitted once per item. Each instance of &quot;%item&quot; in the string is replaced with the value of the list item.
* separator is emitted in between the formatted items.

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[ listFormat(&quot;apple,bear,cat&quot;, &quot;BEGIN LIST&lt;br&gt;%list&lt;br&gt;END LIST&quot;, &quot;This item is: %item&quot;, &quot;&lt;br&gt;&quot;) ]
&lt;/source&gt;
(prints items on separate lines)

Convert a string list to html list:&lt;source lang=&quot;mtmacro&quot; line&gt;
[R: listFormat( &quot;apple, bear, cat&quot;, &quot;&lt;ul&gt;%list&lt;/ul&gt;&quot;, &quot;&lt;li&gt;%item&lt;/li&gt;&quot;, &quot;&quot; ) ]
&lt;/source&gt;
Produces:&lt;ul&gt;
&lt;li&gt;apple&lt;/li&gt;
&lt;li&gt;bear&lt;/li&gt;
&lt;li&gt;cat&lt;/li&gt;
&lt;/ul&gt;


Create an option list input (drop-down list selection) for an html form, with the names of selected tokens:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[R: listFormat( getSelectedNames( &quot;%%&quot; ), 
    &quot;&lt;select name='test'&gt;%list&lt;/select&gt;&quot;, 
    &quot;&lt;option value='%item'&gt;%item&lt;/option&gt;&quot;, 
    &quot;&quot;,  
    &quot;%%&quot; ) 
]
&lt;/source&gt;
The first argument is the list, returned by {{func|getSelectedNames}}: it has a delimiter specified (&quot;%%&quot;), to avoid PC names with commas or anything other than &quot;%%&quot; from appearing as more than one item.  The second argument specifies html (text) to go around the entire formatted ''list'', and the third is html to wrap around each ''item'' in the list.  The fourth argument is blank (empty), since no separator between items is needed in this case.  The fifth argument is usually optional, but in this case is the same delimiter specified in getSelectedNames(), to allow listFormat to find each item in the list.
}}
[[Category:String List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>listContains</title>
    <ns>0</ns>
    <id>324</id>
    <revision>
      <id>3389</id>
      <parentid>3388</parentid>
      <timestamp>2009-06-02T03:11:36Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Completed the article.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="837">{{MacroFunction
|name=listContains
|version=1.3b42
|description=
Returns the number of occurrences of a value in a [[String List]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
listContains(list, value)
listContains(list, value, delim)
&lt;/source&gt;
'''Parameters'''
{{param|list|The [[String List]] that is checked for occurrences of the {{code|value}}.}}
{{param|value|The value to search the [[String List]] for occurrences.}}
{{param|delim|The delimiter that separates the values in the [[String List]]; defaults to {{code|&quot;,&quot;}}.}}

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: listContains(&quot;a,b,c,a,b,a&quot;, &quot;a&quot;)]
&lt;/source&gt;
Returns {{code|3}}

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: MyStringList = &quot;1#2#3#4#1#2#3#1#2&quot;]
[r: listContains(MyStringList, &quot;3&quot;, &quot;#&quot;)]
&lt;/source&gt;
Returns {{code|2}}

|also=
{{func|listFind}}

}}
[[Category:String List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>strPropFromVars</title>
    <ns>0</ns>
    <id>325</id>
    <revision>
      <id>1764</id>
      <parentid>1763</parentid>
      <timestamp>2009-03-09T05:22:38Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Macros:Functions:strPropFromVars]] moved to [[strPropFromVars]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="772">{{MacroFunction
|name=strPropFromVars
|description=
Creates a property string from the names and values of the variables listed in the varList string.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: strPropFromVars(varList, varStyle) ]
&lt;/source&gt;
* varStyle is either &quot;SUFFIXED&quot; or &quot;UNSUFFIXED&quot;. When fetching the values of the variables, the &quot;SUFFIXED&quot; option will look for variables with underscores appended to the given names. The output property string does not contain the underscores.

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[H: props = &quot;a=3 ; b=bob ; c=cow ; &quot;]
[H: varsFromStrProp(props, &quot;SUFFIXED&quot;)] &lt;!-- creates variables a_, b_, c_ --&gt;
[strPropFromVars(&quot;c,a,b&quot;, &quot;SUFFIXED&quot;)]
&lt;/source&gt;
(returns &quot;c=cow ; a=3 ; b=bob ; &quot;):
}}
[[Category:String Property List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>formatStrProp</title>
    <ns>0</ns>
    <id>326</id>
    <revision>
      <id>4007</id>
      <parentid>1162</parentid>
      <timestamp>2009-10-18T03:14:19Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Added output for example.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1166">{{MacroFunction
|name=formatStrProp
|description=Returns a custom-formatted version of the property string.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: formatStrProp(props, listFormat, entryFormat, separator) ]
&lt;/source&gt;
* listFormat is a string that is emitted once. It should contain the text &quot;%list&quot;, which is replaced with the formatted items.
* entryFormat is emitted once per item. Any instances of &quot;%key&quot; and &quot;%value&quot; in the string are replaced with the key or value for that setting.
* separator is emitted in between the formatted items.

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: props = &quot;Strength=14 ; Constitution=8 ; Dexterity=13 ; Intelligence=4 ; Wisdom=18 ; Charisma=9&quot;]
[formatStrProp(props, &quot;&lt;table border=1&gt;%list&lt;/table&gt;&quot;, &quot;&lt;tr&gt; &lt;td&gt;&lt;b&gt;%key&lt;/b&gt;&lt;/td&gt; &lt;td&gt;%value&lt;/td&gt; &lt;/tr&gt;&quot;, &quot;&quot;)]  
&lt;/source&gt;

Outputs:

&lt;table border=1&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Strength&lt;/b&gt;&lt;/td&gt;&lt;td&gt;14&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Constitution&lt;/b&gt;&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Dexterity&lt;/b&gt;&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Intelligence&lt;/b&gt;&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Wisdom&lt;/b&gt;&lt;/td&gt;&lt;td&gt;18&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Charisma&lt;/b&gt;&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

}}
[[Category:String Property List Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Dice Expressions</title>
    <ns>0</ns>
    <id>327</id>
    <revision>
      <id>5829</id>
      <parentid>4202</parentid>
      <timestamp>2011-12-04T12:41:48Z</timestamp>
      <contributor>
        <username>Bone White</username>
        <id>617</id>
      </contributor>
      <minor/>
      <comment>/* General Dice Expressions */  updated to better explain XdYrL repeated re-rolling as per forum post.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6396">MapTool's chat window and macro system supports several of the most common dice expressions based on the formats '''XdY''' and '''dY'''.

In the tables below, the variable ''Y'' is described as the &quot;number of sides&quot; on the dice being rolled; in reality the dice roller is picking a random number between 1 and ''Y''. The end result is the same. 

Additionally, in the expressions, capital letters signify an argument you must provide, while the lower-case letters are a fixed part of the dice expression. For example, in the expression '''XdYsS''', you replace ''X'', ''Y'', and ''S'' with numbers to indicate the number of dice, how many sides the dice have, and what number indicates a success, respectively. The lower case &quot;d&quot; and &quot;s&quot; are left alone. Also, only one expression may be used at a time.  For example, you could not combine the expressions of dropping low dice and keeping high dice.

Finally, note that when entering a dice roll directly in chat, you need to use the /roll [[Chat:Commands|Chat Command]] to execute the roll. In a macro, you would enclose the roll expression in square brackets. For example, if you wanted to roll one twenty sided die, one six sided die, and add 8 to the result:

''Directly in chat'': &lt;pre&gt;/roll 1d20+1d6+8&lt;/pre&gt;

''In a [[Macros:introduction|macro]]'': &lt;pre&gt;[1d20+1d6+8]&lt;/pre&gt;

You may also access these dice expressions directly using macro functions, see [[:Category:Dice Function]].

==General Dice Expressions==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |Expression 
! style=&quot;background-color:#e0ddd5;&quot; |Function
! style=&quot;background-color:#e0ddd5;&quot; |Description
! style=&quot;background-color:#e0ddd5;&quot; |Example
|-
| '''XdY''' || || Roll ''X'' dice with ''Y'' sides each. If X is not included, roll 1 die with ''Y'' sides and present the sum of all rolls in chat || ''/roll 1d20'' rolls one twenty-sided die and presents the total roll in chat
|-
| '''XdYdN''' || drop || Roll ''X'' dice with ''Y'' sides each, and drop the lowest ''N'' dice afterwards || ''/roll 4d6d1'' rolls four six-sided dice, drops the lowest roll, and presents the total in the chat window
|-
| '''XdYkN''' || keep || Roll ''X'' dice with ''Y'' sides each, and keep the highest ''N'' dice afterwards || ''/roll 4d6k3'' rolls four six-sided dice, keeps the highest 3 rolls, and presents the total in the chat window
|-
| '''XdYrL''' || reroll || Roll ''X'' dice with ''Y'' sides each, rerolling any results lower than ''L'' || ''/roll 3d8r2'' rolls three eight-sided dice, repeatedly rerolls any dice that are lower than 2 until all dice rolls are higher than or equal to 2, and then sums and presents the total in chat
|-
| '''XdYsT''' || success || Roll ''X'' dice with ''Y'' sides each, and count any rolls that meet or exceed ''T'' (the &quot;target number&quot;)|| ''/roll 4d6s4'' rolls four six-sided dice, and counts any individual roll that exceeds four, presenting the number of &quot;successes&quot; in chat
|-
| '''XdYe''' || explode || Roll ''X'' dice with ''Y'' sides each, and reroll any dice that roll ''Y'', add the new roll to the total || ''/roll 2d6e'' rolls two six-sided dice, and if either rolls a 6, it is rerolled and added to the total (this continues until neither die rolls a 6).
|-
| '''XdYesT''' || exploding success || As success rolls, above, but the individual dice can &quot;explode&quot; (''i.e.'', they are rerolled if they roll their maximum value) || ''/roll 4d6es8'' will roll 4 six-sided dice, explode any that roll their maximum, and then total the rolls that exceed 8
|-
| '''XdYo''' || open || Roll ''X'' dice with ''Y'' sides each, and explode any dice that roll ''Y'', then return the value of all rolls, as well as the highest roll || ''/roll 5d6o'' rolls 5 six-sided dice, and explodes any that roll 6
|}

==Game-Specific Dice Expressions==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |Expression
! style=&quot;background-color:#e0ddd5;&quot; |Game&amp;nbsp;System
! style=&quot;background-color:#e0ddd5;&quot; |Function
! style=&quot;background-color:#e0ddd5;&quot; |Description
|-
| '''XdYh''' || Hero || Stun Dice || Rolls ''X'' dice with ''Y'' sides each, keeping track of the results for hero rolls for body damage. Where a roll of 1 = 0 body damage, a roll of ''Y'' = 2 body damage and a roll in between these two values = 1 body damage.
|-
| '''XdYb''' || Hero || Body Dice || Returns the body damage from the last XdYb Hero Stun Dice roll as long as ''X'' and ''Y''
matches the Stun Dice roll
|-
| '''Xdf''' || Fudge || Fudge Dice || Rolls ''X'' [http://www.fudgerpg.com/fudge.html Fudge] dice (which return -1, 0, or 1), summing the dice and returning the sum
|-
| '''Xdu''' || Ubiquity || Ubiquity Dice || Rolls ''X'' Ubiquity dice, which return 0 or 1, summing the result and returning that value to chat
|-
| '''Xsr4''' || Shadowrun 4th Ed. || Shadowrun Basic Roll || Roll ''X'' number of 6 sided dice. Output the number of Hits (Rolls 5 or above) and the numbers of Ones rolled. If the number of Ones is half or more of ''X'', display '''Glitch'''. If the number of Ones is half or more of ''X'' and there are no Hits, display '''Critical Glitch'''.
|-
| '''Xsr4gT''' || Shadowrun 4th Ed. || Shadowrun Gremlin Roll || Roll ''X'' number of 6 sided dice. Output the number of Hits (Rolls 5 or above) and the numbers of Ones rolled. If the number of Ones is half or more of ''X'' minus ''T'', display '''Glitch'''. If the number of Ones is half or more of ''X'' minus ''Y'' and there are no Hits, display '''Critical Glitch'''.
|-
| '''Xsr4e''' || Shadowrun 4th Ed. || Shadowrun Exploding Roll || Roll ''X'' number of 6 sided dice. Output the number of Hits (Rolls 5 or above) and the numbers of Ones rolled. Reroll any 6 adding it to the pool. If the number of Ones is half or more of ''X'', display '''Glitch'''. If the number of Ones is half or more of ''X'' and there are no Hits, display '''Critical Glitch'''.
|-
| '''Xsr4egT''' || Shadowrun 4th Ed. || Shadowrun Exploding Gremlin Roll || Roll ''X'' number of 6 sided dice. Output the number of Hits (Rolls 5 or above) and the numbers of Ones rolled. Reroll any 6 adding it to the pool. If the number of Ones is half or more of ''X'' minus ''T'', display '''Glitch'''. If the number of Ones is half or more of ''X'' minus ''T'' and there are no Hits, display '''Critical Glitch'''.
|}
[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Chat Commands</title>
    <ns>0</ns>
    <id>328</id>
    <revision>
      <id>3999</id>
      <parentid>3976</parentid>
      <timestamp>2009-10-11T02:28:47Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Point out related macro functions</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3784">{{Languages|Chat Commands}}

MapTool's chat system supports a number of &quot;slash commands&quot; (that is, commands preceded by a &quot;/&quot; character) that execute particular actions when typed directly into chat.

==General Usage==

To use a chat command, you type directly into the chat window, using the following format: 

&lt;source lang=&quot;mtmacro&quot; line&gt;
/command argument
&lt;/source&gt;

where ''command'' is one of the commands in the table below, and ''argument'' is an appropriate argument (a dice roll, or a string of text, etc.) upon which the command acts.

'''NOTE''':  Remember, the commands shown below are always preceded by a forward slash ('''/''') character.

'''NOTE''':  Slash commands will only work correctly in a MapTool macro if they are the first text in the macro.  This is a result of macros simply being text that is &quot;stored up&quot; until it's pushed into the chat window where it's executed.  However, many chat commands have related macro functions that can achieve the same effect within only a part of a chat message.  Those functions are pointed out below where applicable.

==Built-in Commands==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#abcdef;&quot; |Command
! style=&quot;background-color:#abcdef;&quot; |Built-in Alias (if any)
! style=&quot;background-color:#abcdef;&quot; |Description
|-
| addtokenstate || tsa || Add a new token state that can be set on tokens
|-
| alias || alias || Create a command alias
|-
| clear || clr || Clear the chat window
|-
| clearaliases || || Clear all aliases
|-
| color || cc || Change your chat text color. Color must be in hexadecimal format, e.g. ''/cc #ff0099''
|-
| emit || e || Broadcast text to all connected players without revealing who sent it (GM-only command)
|-
| emote || me || Broadcast an emote to all connected players
|- 
| gm || togm || Send text to GM exclusively (see {{roll|g}})
|-
| goto || g || Go to location or go to token, e.g. ''/goto X,Y'' or ''/goto tokenname'' (see {{func|goto}})
|-
| help || h || Display a list of available commands
|-
| impersonate || im || Speak as if you were someone or something else (typically, speak as if you were a token) 
|- 
| loadaliases || || Load a file that contains aliases, one per line, with a : between the name and the value (just as if you were typing it in)
|-
| loadtokenstates || tsl || Load all of the token states to a file
|-
| ooc || || Out-of-character chat (chat is enclosed in double parentheses)
|-
| reply || rep || Reply to the last player to whisper to you
|- 
| roll || r || Roll dice (using a [[Chat:Dice | Dice Expression]]) and broadcast result to all players (see {{func|roll}})
|-
| rollgm || rgm || Roll dice and broadcast result only to yourself and the GM
|-
| rollme || rme || Roll dice and show the result only to yourself
|-
| rollsecret || rsec|| Roll dice and show the result only to the GM (hiding the result from even yourself)
|-
| savealiases || || Save all current aliases to a file
|-
| savetokenstates || tss || Save the current set of token states to a file
|-
| say || s || Broadcast a message to all connected players
|-
| self || || Send a message only to yourself (see {{roll|s}})
|-
| settokenproperty || stp || Set the value of a [[Token:token_property|Token Property]] (see {{func|setProperty}})
|-
| settokenstate || sts || Set the value of a [[Token:state|Token State]] (see {{func|setState}})
|-
| table || tbl || Run a table lookup, e.g. ''/tbl tablename value-to-lookup'' (see {{func|table}})
|-
| tmacro || tm || Run the given macro on the selected token (see {{roll|macro}})
|-
| tsay || ts || Say the given speech on the selected token (see {{func|getSpeech}})
|-
| whisper || w || Send a message to a specific player (see {{roll|w}})
|}
[[Category:MapTool]]
{{Languages|Chat Commands}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token</title>
    <ns>0</ns>
    <id>329</id>
    <revision>
      <id>4597</id>
      <parentid>3390</parentid>
      <timestamp>2010-09-29T01:47:59Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5289">{{Languages|Token}}
=Token: token=

Every object that can be dropped down on a map and manipulated by the GM or the players is a ''token'' of some type.  The possible token types are [[Image Token]], [[Library Token]], [[PC Token]], and [[NPC Token]].  In addition, when images are dropped onto a [[map layer]] other than the '''Token''' layer, they take on the name ''object'' or ''stamp'' instead.  (The term ''stamp'' is often used to denote an image that is placed repeatedly, sometimes in a pattern, whereas ''object'' means a less often used image.  A forest would be full of '''tree stamps''' but an office building would have ''table and chair objects''.)

This page discusses how tokens and objects are saved externally; the overall file format as well as some specifics about how to manipulate the contents of the '''.rptok''' file.

==Overall File Format==

Tokens can be saved by the token owner by right-clicking on the token and choosing '''Save As...''', then navigating to a directory and entering a filename.  The filename will automatically have '''.rptok''' appended to the end to indicate that contents.  The actual format of the file, however, is an ordinary ZIP file!  This means you can rename the file to end with '''.zip''' and treat it as any other ZIP file.  There are a number of features related to this:

* All tokens are automatically stored in a compressed format.
* All tokens can contain multiple data files inside
** One file is called '''content.xml'''
** Another one is '''properties.xml'''
** A directory is also included called '''assets'''
*** The token image is stored here,
*** The token portrait is stored here, and
*** The token handout is stored here.
** The last file is called '''thumbnail'''

==Examining the Contents of a Token File==

Because the token files are ZIP files, you can easily extract the images or other data from the token.  To do so, unpack the ZIP file into a directory on your computer.  Look inside the '''assets''' directory and you'll see multiple filenames.  They will appear to be random strings of letters and numbers, but actually the are checksums of the image they contain.  You can think of a checksum as a ''summary'' of the content.  These files don't have filename extensions so you may not be able to view the content unless you use a program that ignores the filename extension and looks at the content instead.  One example utility that does that is the GNU Image Manipulation Program, or GIMP for short.

Note that some versions of MapTool (which ones?) store the asset as the image data encoded in XML.  This makes the image unviewable using _any_ standard graphics tool.  Trevor has said that this is a bug and future versions will use the actual graphics image format (JPG or PNG).

==Modifying the Images or Other Data Inside a Token File==

Modifying the images used in the token is more complex, however.  Here are the required pieces of the puzzle:

# Locate the new image(s) to be stored in the token,
# Calculate the checksum of the image (it's an MD5 checksum),
# Rename the image file to be the checksum, removing any filename extension in the process,
# Move the new file into the '''assets''' directory,
# Record the name of the old image from the '''assets''' directory, and
# Remove the old image from the '''assets''' directory.

Sounds easy, right?  But that's only half of it.  It turns out that just dumping images into the '''assets''' directory wouldn't tell MapTool enough about the image, such as what size to scale it to and whether it represented the portrait or handout image.  Those details are stored in the '''content.xml''' file.  This file is '''NOT''' in the '''assets''' directory, but is at the top level of the unpacked ZIP file.

If you open the '''content.xml''' file use a text editor.  Do not use a word processor or saving the file could corrupt the contents with extra information created by the word processor.  Use a program such as Notepad or TextPad to perform any editing.  Obviously, an editor that understands the XML syntax can make editing much easier.

You need to locate the portion of the XML file that refers to the portrait image (if you were planning to replace the portrait) and replace the 16-character checksum from the old asset with the 16-character checksum of the new asset.  Fortunately, you recorded that information as you performed the steps given above!  But fear not -- if you did not record the old checksum value, you can simply delete the entire top-level directory and unpack the ZIP archive again, starting from the beginning.

The simplest way to make the change, is to perform a string search for the old checksum, replacing it with the new one whenever you find it.

After you've made all of your replacements, use a ZIP utility to create a ZIP file containing the contents of the top-level directory and everything below it in the directory structure (which currently means the '''assets''' directory).  Be sure that the directory structure is preserved because the '''assets''' directory must be there.  Now the file can be dragged and dropped into MapTool!  You can change the filename extension to '''.rptok''' if you like, but MapTool isn't particular about the name of the file, only about the contents.
[[Category:Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getMacroButtonIndex</title>
    <ns>0</ns>
    <id>330</id>
    <revision>
      <id>2993</id>
      <parentid>2056</parentid>
      <timestamp>2009-04-06T13:43:02Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Removed proposed note, linkified some text, added see also.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="750">{{stub|Expanded examples of usage.}}
{{MacroFunction
|name=getMacroButtonIndex
|version=1.3b50
|description=
Returns the index of the [[Token]] macro button that was clicked on. The macro button must have the auto-execute check box selected. If the macro is not running from a [[Token]] macro button then {{code|-1}} is returned.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroButtonIndex()
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: ind = getMacroButtonIndex()]
&lt;/source&gt;
If the macro is not run from an auto-execute macro button on a [[Token]], {{code|ind}} is set to {{code|-1}}. Otherwise {{code|ind}} is set to a non-negative number which is the index of the button.

|also=
{{func|getMacroIndexes}}

}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:MacroFunction</title>
    <ns>10</ns>
    <id>331</id>
    <revision>
      <id>7197</id>
      <parentid>7157</parentid>
      <timestamp>2019-03-06T07:52:54Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2307">&lt;noinclude&gt;
=Template Usage=
''You should always write the description as though the words &quot;This function...&quot; are automatically supplied by the template.''

Refer to [[Help:Editing]] for more detailed documentation.
==Example==
&lt;pre&gt;{{MacroFunction
|name=exampleFunction
|proposed=true
|deprecated=
[[newFunction|newFunction()]]
|trusted=true
|version=1.3b50
|compatibility=1.3b52
|description=
This is an example function.  It doesn't actually exist as a function in MapTool.
If you put a bulleted list here, don't end the description with the list.
MediaWiki encloses this parameter inside a DIV block and it will put the close
DIV tag inside the last LI.  For this reason, you may see description
parameters whose values contain a bulleted list followed by a line
that contains only, &quot;&amp;amp;nbsp;&quot;
{{__TOC__}}
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
exampleFunction(param1, param2)
&lt;/source&gt;

|example=
This example doesn't really do anything.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: exampleVariable = &quot;a,b,c&quot;]
[r: exampleFunction(exampleVariable, reverse)]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
c,b,a
&lt;/source&gt;

|also=
[[linkToRelatedArticle|Display Name of Related Article]]

|changes=
* '''1.3b52''' - Added reverse parameter.
}}&lt;/pre&gt;
=Source=
&lt;/noinclude&gt;{{#ifeq: {{{proposed|}}} | true | {{ProposedChange}} |}}{{#if: {{{deprecated|}}} | {{Deprecated|{{{deprecated}}} |}} |}}
=={{{name}}}() Function==
{{#ifeq: {{{trusted|}}} | true | {{TrustedFunction}} |}}
{{#if: {{{version|}}} | &lt;div class=&quot;template_version&quot;&gt;• '''Introduced in version {{{version|}}}'''&lt;/div&gt; |}}
{{#if: {{{compatibility|}}} | &lt;div class=&quot;template_compatibility&quot;&gt;• '''Last checked for compatibility with version {{{compatibility|}}}'''&lt;/div&gt; |}}&lt;div class=&quot;template_description&quot;&gt;{{{description|}}}&lt;/div&gt;
===Usage===
{{{usage}}}
{{#if: {{{example|}}} |

===Example===
&lt;div class=&quot;template_example&quot;&gt;{{{example|}}}&lt;/div&gt; |}}
{{#if: {{{examples|}}} |

===Examples===
&lt;div class=&quot;template_examples&quot;&gt;{{{examples|}}}&lt;/div&gt; |}}
{{#if: {{{also|}}} |
===See Also===
&lt;div class=&quot;template_also&quot;&gt;{{{also|}}}&lt;/div&gt; |}}
{{#if: {{{changes|}}} |
===Version Changes===
&lt;div class=&quot;template_changes&quot;&gt;
{{{changes|}}}
&lt;/div&gt; |}}
&lt;includeonly&gt;[[Category:Macro Function]]__NOEDITSECTION__&lt;/includeonly&gt;
&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1>tvd3bntgp5k0y4k6vd9zi7jz49ajk8s</sha1>
    </revision>
  </page>
  <page>
    <title>User:Merkuri</title>
    <ns>2</ns>
    <id>332</id>
    <revision>
      <id>1264</id>
      <parentid>980</parentid>
      <timestamp>2009-03-07T16:08:33Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>Replacing page with 'Nothing to see here. :)'</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">Nothing to see here. :)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Verisimilar</title>
    <ns>2</ns>
    <id>333</id>
    <revision>
      <id>3140</id>
      <parentid>3105</parentid>
      <timestamp>2009-04-16T03:14:15Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="375">==Basics==
Known as zEal on the [http://forums.rptools.net/ RPTools Forums].  

==Subpages==
* [[/Sandbox]] - Where I play with stuff.
* [[/Projects]] - Where I keep track of wiki projects I'm working on, or notes related to such projects.

==Stuff I've Created==
* [[Queued Conditional Output]] Cookbook Macros&lt;br&gt;
* [[Zero-Proof eval|Zero-Proof eval()]] Cookbook Macros&lt;br&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Supported CSS Styles</title>
    <ns>0</ns>
    <id>334</id>
    <revision>
      <id>5127</id>
      <parentid>3125</parentid>
      <timestamp>2011-01-12T03:25:46Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Replaced all instances of image.jpg with a random asset URI to alleviate any confusion on how images are referenced in CSS within MapTool.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7949">[[Category:Macro]]{{Advanced}}
MapTool supports a subset of the CSS level 1 specification. These styles can be used in-line, and also as external styles within dialogs and frames. This is not meant to be an exhaustive reference, nor an introduction to CSS, this page is only a collection of which properties are supported and to what extent. If you are looking for an introduction to CSS, visit [http://www.w3schools.com/css/css_intro.asp W3Schools CSS Tutorial]

=Font Properties=
==font==
{|
|'''Value:'''||font-style, font-weight, font-size, font-family
|-
|'''Initial:'''|| none
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| yes
|-
|'''Relative Size:'''|| only font-size
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
font: bold italic 12pt Arial, Helvetica, sans-serif;
&lt;/source&gt;
|}
 
==font-family==
{|
|'''Value:'''||''family-name'', ''generic-name''
|-
|'''Initial:'''|| system default
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| yes
|-
|'''Relative Size:'''|| N/A
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
font-family: Arial, Helvetica, sans-serif;
&lt;/source&gt;
|}
 
==font-size==
{|
|'''Value:'''||''absolute-size'', ''relative-size'', ''length'', ''percentage''
|-
|'''Initial:'''|| medium
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| yes
|-
|'''Relative Size:'''|| relative to parent element's font-size
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
font-size: 12pt;
&lt;/source&gt;
|}
 
==font-style==
{|
|'''Value:'''||normal, italic, oblique
|-
|'''Initial:'''|| normal
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| yes
|-
|'''Relative Size:'''|| N/A
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
font-style: italic;
&lt;/source&gt;
|}
 
==font-weight==
{|
|'''Value:'''||normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900
|-
|'''Initial:'''|| normal
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| yes
|-
|'''Relative Size:'''|| N/A
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
font-weight: bold;
&lt;/source&gt;
|}
 
=Color and Background Properties=
==color==
{|
|'''Value:'''||''color name'', ''color code''
|-
|'''Initial:'''|| element specific
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| yes
|-
|'''Relative Size:'''|| N/A
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
color: #FF0000;
&lt;/source&gt;
|}
 
==background==
{|
|'''Value:'''||background-color, background-image, background-repeat, background-position
|-
|'''Initial:'''|| none
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
background: #0000FF url(asset://de05e42d2eb43fe53a542db116da8083) no-repeat right top;
&lt;/source&gt;
|}
 
==background-color==
{|
|'''Value:'''||''color name'', ''color code''
|-
|'''Initial:'''|| transparent
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| N/A
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
background-color: #0000FF;
&lt;/source&gt;
|}
 
==background-image==
{|
|'''Value:'''||none, ''url''
|-
|'''Initial:'''|| none
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| N/A
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
background-image: url(asset://de05e42d2eb43fe53a542db116da8083);
&lt;/source&gt;
|}
 
==background-repeat==
{|
|'''Value:'''||repeat, repeat-x, repeat-y, no-repeat
|-
|'''Initial:'''|| repeat
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| N/A
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
background-repeat: no-repeat;
&lt;/source&gt;
|}
 
==background-position==
{|
|'''Value:'''||top, center, bottom, left, center, right
|-
|'''Initial:'''|| top left
|-
|'''Applies To:'''|| block-level and replaced elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
background-position: bottom right;
&lt;/source&gt;
|}
 
=Text Properties=
==text-align==
{|
|'''Value:'''||left, right, center
|-
|'''Initial:'''|| element specific
|-
|'''Applies To:'''|| block-level elements
|-
|'''Inherited:'''|| yes
|-
|'''Relative Size:'''|| N/A
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
text-align: right;
&lt;/source&gt;
|}
 
==text-decoration==
{|
|'''Value:'''||none, underline, line-through
|-
|'''Initial:'''|| none
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
text-decoration: line-through;
&lt;/source&gt;
|}
 
==vertical-align==
{|
|'''Value:'''||baseline, sub, super
|-
|'''Initial:'''|| baseline
|-
|'''Applies To:'''|| inline elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
vertical-align: super;
&lt;/source&gt;
|}
 
=Box Properties=
==border-style==
{|
|'''Value:'''||none, inset, outset
|-
|'''Initial:'''|| none
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| N/A
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
border-style: inset;
&lt;/source&gt;
|}
 
==margin==
{|
|'''Value:'''||''length'', auto
|-
|'''Initial:'''|| none
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
margin: 10px;
&lt;/source&gt;
|}
 
==margin-top==
{|
|'''Value:'''||''length'', auto
|-
|'''Initial:'''|| 0
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
margin-top: 10px;
&lt;/source&gt;
|}
 
==margin-right==
{|
|'''Value:'''||''length'', auto
|-
|'''Initial:'''|| 0
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
margin-right: 10px;
&lt;/source&gt;
|}
 
==margin-bottom==
{|
|'''Value:'''||''length'', auto
|-
|'''Initial:'''|| 0
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
margin-bottom: 10px;
&lt;/source&gt;
|}
 
==margin-left==
{|
|'''Value:'''||''length'', auto
|-
|'''Initial:'''|| 0
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
margin-left: 10px;
&lt;/source&gt;
|}
 
==padding==
{|
|'''Value:'''||''length''
|-
|'''Initial:'''|| 0
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
padding: 10px;
&lt;/source&gt;
|}
 
==padding-top==
{|
|'''Value:'''||''length''
|-
|'''Initial:'''|| 0
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
padding-top: 10px;
&lt;/source&gt;
|}
 
==padding-right==
{|
|'''Value:'''||''length''
|-
|'''Initial:'''|| 0
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
padding-right: 10px;
&lt;/source&gt;
|}
 
==padding-bottom==
{|
|'''Value:'''||''length''
|-
|'''Initial:'''|| 0
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
padding-bottom: 10px;
&lt;/source&gt;
|}
 
==padding-left==
{|
|'''Value:'''||''length''
|-
|'''Initial:'''|| 0
|-
|'''Applies To:'''|| all elements
|-
|'''Inherited:'''|| no
|-
|'''Relative Size:'''|| no
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
padding-left: 10px;
&lt;/source&gt;
|}
 
=Classification Properties=
==list-style-type==
{|
|'''Value:'''||none, disc, circle, square, decimal, lower-roman, upper-roman, lower-alpha, upper-alpha
|-
|'''Initial:'''|| disc
|-
|'''Applies To:'''|| list-item elements
|-
|'''Inherited:'''|| yes
|-
|'''Relative Size:'''|| N/A
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
list-style-type: square;
&lt;/source&gt;
|}
 
==list-style-position==
{|
|'''Value:'''||inside, outside
|-
|'''Initial:'''|| outside
|-
|'''Applies To:'''|| list-item elements
|-
|'''Inherited:'''|| yes
|-
|'''Relative Size:'''|| N/A
|-
|'''Example:'''||
&lt;source lang=&quot;css&quot;&gt;
list-style-position: inside;
&lt;/source&gt;
|}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:FunctionUsage</title>
    <ns>10</ns>
    <id>335</id>
    <revision>
      <id>976</id>
      <timestamp>2009-03-06T00:52:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: &lt;noinclude&gt;This is a subtemplate for use with [[Template:MacroFunction]]&lt;/noinclude&gt; {{#if: {{{name|}}} | ===={{{name}}}==== }} {{#if: {{{description|}}} | {{{description}}} }} &lt;source lan...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="228">&lt;noinclude&gt;This is a subtemplate for use with [[Template:MacroFunction]]&lt;/noinclude&gt;
{{#if: {{{name|}}} |
===={{{name}}}====
}}
{{#if: {{{description|}}} |
{{{description}}} }}
&lt;source lang=&quot;mtmacro&quot; line&gt;
{{{syntax}}}
&lt;/source&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:FunctionExample</title>
    <ns>10</ns>
    <id>336</id>
    <revision>
      <id>997</id>
      <parentid>977</parentid>
      <timestamp>2009-03-06T05:40:56Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="287">&lt;noinclude&gt;This is a subtemplate for use with [[Template:MacroFunction]]&lt;/noinclude&gt;
{{#if: {{{name|}}} |
===={{{name}}}====
}}
{{#if: {{{description|}}} |
{{{description}}} }}
{{MTbegin}}
{{{syntax}}}
{{MTend}}
{{#if: {{{return|}}} |
'''Returns:'''
{{MTbegin}}
{{{return}}}
{{MTend}} }}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:TrustedFunction</title>
    <ns>10</ns>
    <id>337</id>
    <revision>
      <id>7108</id>
      <parentid>7106</parentid>
      <timestamp>2019-02-20T05:11:46Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="234">&lt;div class=&quot;template_trusted_function&gt;
&lt;p style=&quot;background-color: #EDDD75; color: #000000; font-weight: bold&quot;&gt;
&amp;nbsp;Note: This function can only be used in a [[Trusted Macro]]
&lt;/p&gt;
&lt;/div&gt;&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1>oksuxebiaahq84sjd4p8aixzo1sluaw</sha1>
    </revision>
  </page>
  <page>
    <title>User:Verisimilar/Sandbox</title>
    <ns>2</ns>
    <id>338</id>
    <revision>
      <id>3512</id>
      <parentid>2932</parentid>
      <timestamp>2009-06-17T03:38:27Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1080">==Highlight Test==
&lt;source lang=&quot;mtmacro&quot; highlight=&quot;5&quot; line&gt;
Function outside of the brackets:
defineFunction()

Function within square brackets:
[assert()]

Function within curly brackets:
{abort(0)}

Roll options:
[h: abort(0)]
[t: abort(0)]
[e,if(0): ]
[macro(): ]
[token(): ]

Numbers:

[h: 1 2 34 567 ]

Symbols:
[h: &gt; = ! &amp; / : ; ]

Strings:
[h: &quot;This is a double quoted string&quot; ]
[h; &quot;This is a single quoted string&quot; ]

&lt;/source&gt;


==prop macros==
&lt;source lang=&quot;mtmacro&quot; line&gt;
@onCampaignLoad
[defineFunction(&quot;get&quot;, &quot;get@this&quot;)]

@get
[h: checkProp = json.contains(getPropertyNames('json'), arg(0))]
[h,assert(checkProp, '&lt;b&gt;ERROR:&lt;/b&gt; get(&quot;'+arg(0)+'&quot;) '+
                     '- That property does not exist.', 0)]
[h, macro.return = getProperty(arg(0))]

@onCampaignLoad
[defineFunction(&quot;set&quot;, &quot;set@this&quot;)]

@set
[h: checkProp = json.contains(getPropertyNames('json'), arg(0))]
[h,assert(checkProp, '&lt;b&gt;ERROR:&lt;/b&gt; set('+arg(0)+', '+arg(1)+') '+
                     '- That property does not exist.', 0)]
[h: setProperty(arg(0), arg(1))]
[h, macro.return = 1]
&lt;/source&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template talk:MacroFunction</title>
    <ns>11</ns>
    <id>339</id>
    <revision>
      <id>1000</id>
      <parentid>999</parentid>
      <timestamp>2009-03-06T05:46:16Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="580">Added a couple optional components to the beginning of the template, added the option to provide a single example, and also changed the Version Changes parameter to keep in line with the rest... 'changes', feel free to change that back if you're like.  I also propose the use of two subtemplates I created for the usage and example sections. [[User:Verisimilar|verisimilar]] 04:38, 6 March 2009 (UTC)

Bah, there's no way to fool MediaWiki into parsing a template parameter within a source block. So much for subtemplates.[[User:Verisimilar|verisimilar]] 05:46, 6 March 2009 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:MTbegin</title>
    <ns>10</ns>
    <id>340</id>
    <revision>
      <id>1006</id>
      <parentid>996</parentid>
      <timestamp>2009-03-06T06:38:56Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="55">&lt;includeonly&gt;&lt;source lang=&quot;mtmacro&quot; line&gt;&lt;/includeonly&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:MTend</title>
    <ns>10</ns>
    <id>341</id>
    <revision>
      <id>1007</id>
      <parentid>995</parentid>
      <timestamp>2009-03-06T06:39:54Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">&lt;includeonly&gt;&lt;/source&gt;&lt;/includeonly&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:HowTo:howto</title>
    <ns>0</ns>
    <id>342</id>
    <redirect title="Category:How To" />
    <revision>
      <id>2542</id>
      <parentid>2362</parentid>
      <timestamp>2009-04-01T02:58:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to How To category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[:Category:How To]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:abort</title>
    <ns>0</ns>
    <id>343</id>
    <redirect title="abort" />
    <revision>
      <id>1012</id>
      <timestamp>2009-03-06T21:45:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:abort]] moved to [[abort]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[abort]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Miscellaneous Function</title>
    <ns>14</ns>
    <id>344</id>
    <revision>
      <id>1013</id>
      <timestamp>2009-03-06T21:47:28Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:assert</title>
    <ns>0</ns>
    <id>345</id>
    <redirect title="assert" />
    <revision>
      <id>1016</id>
      <timestamp>2009-03-06T21:50:02Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:assert]] moved to [[assert]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[assert]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Macro Function</title>
    <ns>14</ns>
    <id>346</id>
    <revision>
      <id>1795</id>
      <parentid>1497</parentid>
      <timestamp>2009-03-09T05:43:31Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Removed WIP note, added Category:Macro</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">[[Category:Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:absolutevalue</title>
    <ns>0</ns>
    <id>347</id>
    <redirect title="absolutevalue" />
    <revision>
      <id>1020</id>
      <timestamp>2009-03-06T21:53:59Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:absolutevalue]] moved to [[absolutevalue]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[absolutevalue]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:abs</title>
    <ns>0</ns>
    <id>348</id>
    <redirect title="absolutevalue" />
    <revision>
      <id>1671</id>
      <parentid>1023</parentid>
      <timestamp>2009-03-09T04:02:00Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Fixed double redirect.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[absolutevalue]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Mathematical Function</title>
    <ns>14</ns>
    <id>349</id>
    <revision>
      <id>1025</id>
      <timestamp>2009-03-06T22:05:48Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:add</title>
    <ns>0</ns>
    <id>350</id>
    <redirect title="add" />
    <revision>
      <id>1030</id>
      <timestamp>2009-03-06T22:09:37Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:add]] moved to [[add]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">#REDIRECT [[add]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:sum</title>
    <ns>0</ns>
    <id>351</id>
    <redirect title="add" />
    <revision>
      <id>1038</id>
      <parentid>1037</parentid>
      <timestamp>2009-03-06T22:16:50Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[add]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">#REDIRECT [[add]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:concat</title>
    <ns>0</ns>
    <id>352</id>
    <redirect title="add" />
    <revision>
      <id>1044</id>
      <parentid>1040</parentid>
      <timestamp>2009-03-06T22:21:51Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[add]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">#REDIRECT [[add]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:String Function</title>
    <ns>14</ns>
    <id>353</id>
    <revision>
      <id>1043</id>
      <timestamp>2009-03-06T22:21:08Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:addAllNPCsToInitiative</title>
    <ns>0</ns>
    <id>354</id>
    <redirect title="addAllNPCsToInitiative" />
    <revision>
      <id>1047</id>
      <timestamp>2009-03-06T22:25:05Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:addAllNPCsToInitiative]] moved to [[addAllNPCsToInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[addAllNPCsToInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Initiative Function</title>
    <ns>14</ns>
    <id>355</id>
    <revision>
      <id>1048</id>
      <timestamp>2009-03-06T22:25:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:addAllPCsToInitiative</title>
    <ns>0</ns>
    <id>356</id>
    <redirect title="addAllPCsToInitiative" />
    <revision>
      <id>1052</id>
      <timestamp>2009-03-06T22:32:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:addAllPCsToInitiative]] moved to [[addAllPCsToInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35">#REDIRECT [[addAllPCsToInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:TrustedMacros</title>
    <ns>0</ns>
    <id>357</id>
    <redirect title="Trusted Macro" />
    <revision>
      <id>1054</id>
      <timestamp>2009-03-06T22:35:22Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:TrustedMacros]] moved to [[Trusted Macro]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[Trusted Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:addAllToInitiative</title>
    <ns>0</ns>
    <id>358</id>
    <redirect title="addAllToInitiative" />
    <revision>
      <id>1059</id>
      <timestamp>2009-03-06T22:42:43Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:addAllToInitiative]] moved to [[addAllToInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[addAllToInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:stub</title>
    <ns>10</ns>
    <id>359</id>
    <revision>
      <id>7096</id>
      <parentid>5672</parentid>
      <timestamp>2019-02-20T04:56:36Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="577">&lt;noinclude&gt;This template is used to mark an article lacking important informations.&lt;br&gt;
* First parameter &lt;nowiki&gt;{{{1}}}&lt;/nowiki&gt; allows you to detail what you think is missing.
----&lt;/noinclude&gt;
&lt;div class=&quot;template_stub&quot;&gt;
&lt;p style=&quot;background-color: #009966; color: #FFFFFF;&quot;&gt;
&lt;b&gt;&amp;nbsp;This article is a stub, you can help the RPTools Wiki project by contributing content to expand this article.&lt;/b&gt;{{#if: {{{1|}}} | &lt;br&gt;&lt;b&gt;&amp;nbsp;This article needs:&lt;/b&gt;&lt;i&gt;  {{{1}}}&lt;/i&gt;|}}
&lt;/p&gt;
&lt;/div&gt;
&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;
&lt;includeonly&gt;[[Category:Stub]]&lt;/includeonly&gt;</text>
      <sha1>ityi20rizisv55uu45ralf4y8c234tt</sha1>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:addToInitiative</title>
    <ns>0</ns>
    <id>360</id>
    <redirect title="addToInitiative" />
    <revision>
      <id>1063</id>
      <timestamp>2009-03-06T22:53:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:addToInitiative]] moved to [[addToInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[addToInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:average</title>
    <ns>0</ns>
    <id>361</id>
    <redirect title="average" />
    <revision>
      <id>1066</id>
      <timestamp>2009-03-06T22:58:09Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:average]] moved to [[average]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[average]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>avg</title>
    <ns>0</ns>
    <id>362</id>
    <redirect title="average" />
    <revision>
      <id>1068</id>
      <timestamp>2009-03-06T23:00:14Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[average]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="84">#REDIRECT [[average]]
[[Category:Macro Function]]
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>mean</title>
    <ns>0</ns>
    <id>363</id>
    <redirect title="average" />
    <revision>
      <id>1071</id>
      <timestamp>2009-03-06T23:02:51Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[average]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="84">#REDIRECT [[average]]
[[Category:Macro Function]]
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:!</title>
    <ns>10</ns>
    <id>364</id>
    <revision>
      <id>3181</id>
      <parentid>1072</parentid>
      <timestamp>2009-04-17T16:08:16Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to templates category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="135">|&lt;noinclude&gt; Used in place of broken bars when entering a table in a template.&lt;/noinclude&gt;&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:bitwiseand</title>
    <ns>0</ns>
    <id>365</id>
    <redirect title="bitwiseand" />
    <revision>
      <id>1075</id>
      <timestamp>2009-03-06T23:13:52Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:bitwiseand]] moved to [[bitwiseand]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[bitwiseand]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Logical Function</title>
    <ns>14</ns>
    <id>366</id>
    <revision>
      <id>1077</id>
      <timestamp>2009-03-06T23:14:41Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>band</title>
    <ns>0</ns>
    <id>367</id>
    <redirect title="bitwiseand" />
    <revision>
      <id>1079</id>
      <timestamp>2009-03-06T23:16:24Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[bitwiseand]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="82">#REDIRECT [[bitwiseand]]
[[Category:Macro Function]]
[[Category:Logical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:bitwisenot</title>
    <ns>0</ns>
    <id>368</id>
    <redirect title="bitwisenot" />
    <revision>
      <id>1082</id>
      <timestamp>2009-03-06T23:21:00Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:bitwisenot]] moved to [[bitwisenot]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[bitwisenot]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>bnot</title>
    <ns>0</ns>
    <id>369</id>
    <redirect title="bitwisenot" />
    <revision>
      <id>1084</id>
      <timestamp>2009-03-06T23:21:53Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[bitwisenot]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="82">#REDIRECT [[bitwisenot]]
[[Category:Macro Function]]
[[Category:Logical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:bitwiseor</title>
    <ns>0</ns>
    <id>370</id>
    <redirect title="bitwiseor" />
    <revision>
      <id>1087</id>
      <timestamp>2009-03-06T23:25:50Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:bitwiseor]] moved to [[bitwiseor]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[bitwiseor]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>bor</title>
    <ns>0</ns>
    <id>371</id>
    <redirect title="bitwiseor" />
    <revision>
      <id>1089</id>
      <timestamp>2009-03-06T23:26:38Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[bitwiseor]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="81">#REDIRECT [[bitwiseor]]
[[Category:Macro Function]]
[[Category:Logical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:bitwisexor</title>
    <ns>0</ns>
    <id>372</id>
    <redirect title="bitwisexor" />
    <revision>
      <id>1092</id>
      <timestamp>2009-03-06T23:30:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:bitwisexor]] moved to [[bitwisexor]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[bitwisexor]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>bxor</title>
    <ns>0</ns>
    <id>373</id>
    <redirect title="bitwisexor" />
    <revision>
      <id>1094</id>
      <timestamp>2009-03-06T23:31:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[bitwisexor]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="82">#REDIRECT [[bitwisexor]]
[[Category:Macro Function]]
[[Category:Logical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:bringToFront</title>
    <ns>0</ns>
    <id>374</id>
    <redirect title="bringToFront" />
    <revision>
      <id>1097</id>
      <timestamp>2009-03-06T23:37:22Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:bringToFront]] moved to [[bringToFront]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[bringToFront]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Token Function</title>
    <ns>14</ns>
    <id>375</id>
    <revision>
      <id>1098</id>
      <timestamp>2009-03-06T23:37:49Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:ceiling</title>
    <ns>0</ns>
    <id>376</id>
    <redirect title="ceiling" />
    <revision>
      <id>1101</id>
      <timestamp>2009-03-06T23:42:49Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:ceiling]] moved to [[ceiling]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[ceiling]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>ceil</title>
    <ns>0</ns>
    <id>377</id>
    <redirect title="ceiling" />
    <revision>
      <id>1103</id>
      <timestamp>2009-03-06T23:44:57Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[ceiling]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="84">#REDIRECT [[ceiling]]
[[Category:Macro Function]]
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>token (roll option)</title>
    <ns>0</ns>
    <id>378</id>
    <revision>
      <id>4189</id>
      <parentid>3468</parentid>
      <timestamp>2010-04-14T15:18:13Z</timestamp>
      <contributor>
        <username>Jasper Phule</username>
        <id>176</id>
      </contributor>
      <minor/>
      <comment>Small typo: &quot;gobling&quot; instead of &quot;goblin&quot;.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1867">{{RollOption
|name=token
|trusted=true
|version=1.3.b48
|description=

'''token''' is a macro function that allows an associated code block to be executed as though it were executing with a specified token as the context.  This allows the code block to use properties of the token without special coding.

This &quot;context&quot; function lasts only for the given code block.  References to variables within the code block will still be available when the code block finishes.  (Variables belong to the macro, while properties belong to the token.)

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[token(identifier): single_statement]
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[token(identifier), code: {
   statement1
   statement2
}]
&lt;/source&gt;

The ''identifier'' is the name of the token.  The search first checks to see if the specified string is the Name of any token (i.e. matches [[token.name]]), then it checks GMName (i.e. matches [[token.gm_name]]), and last it checks the unique [[TokenID|token id]] (this is a 32-character string generated by MapTool).

If there are multiple tokens with the same name, such as '''Goblin''', then the ''GM Name'' field of the token should be unique so that it can be used to select tokens.  Note that the [[Macros:Functions:getAllTokens()|getAllTokens()]] and related functions return a list of token ids.
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h, token(&quot;Goblin 21&quot;): health = floor(100*HP/HPmax)]
The healthbar of &lt;b&gt;Goblin 21&lt;/b&gt; should be at [r: health]%.
&lt;/source&gt;
If '''Goblin 21''' has 32 hit points and a maximum hit points of 40 (and these numbers are stored in '''HP''' and '''HPmax''' properties, respectively), the output produced will be:

:&lt;tt&gt;The healthbar of &lt;b&gt;Goblin 21&lt;/b&gt; should be at 80%.&lt;/tt&gt;

|also=
[[currentToken|currentToken()]], [[switchToken|switchToken()]],
[[floor|floor()]].
}}
[[Category:Branching Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:clearLights</title>
    <ns>0</ns>
    <id>379</id>
    <redirect title="clearLights" />
    <revision>
      <id>1108</id>
      <timestamp>2009-03-07T00:49:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:clearLights]] moved to [[clearLights]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[clearLights]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Light Function</title>
    <ns>14</ns>
    <id>380</id>
    <revision>
      <id>1109</id>
      <timestamp>2009-03-07T00:49:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Dialog Function</title>
    <ns>14</ns>
    <id>381</id>
    <revision>
      <id>1112</id>
      <timestamp>2009-03-07T01:00:46Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:closeDialog</title>
    <ns>0</ns>
    <id>382</id>
    <redirect title="closeDialog" />
    <revision>
      <id>1114</id>
      <timestamp>2009-03-07T01:01:00Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:closeDialog]] moved to [[closeDialog]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[closeDialog]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:countStrProp</title>
    <ns>0</ns>
    <id>383</id>
    <redirect title="countStrProp" />
    <revision>
      <id>1117</id>
      <timestamp>2009-03-07T01:04:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:countStrProp]] moved to [[countStrProp]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[countStrProp]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:String Property List Function</title>
    <ns>14</ns>
    <id>384</id>
    <revision>
      <id>1118</id>
      <timestamp>2009-03-07T01:04:31Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:createMacro</title>
    <ns>0</ns>
    <id>385</id>
    <redirect title="createMacro" />
    <revision>
      <id>1121</id>
      <timestamp>2009-03-07T01:11:14Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:createMacro]] moved to [[createMacro]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[createMacro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Metamacro Function</title>
    <ns>14</ns>
    <id>386</id>
    <revision>
      <id>1122</id>
      <timestamp>2009-03-07T01:14:22Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: Metamacro functions are a case of metaprogramming; macro functions that work with macros. [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="117">Metamacro functions are a case of metaprogramming; macro functions that work with macros.
[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:currentToken</title>
    <ns>0</ns>
    <id>387</id>
    <redirect title="currentToken" />
    <revision>
      <id>1126</id>
      <timestamp>2009-03-07T01:25:58Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:currentToken]] moved to [[currentToken]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[currentToken]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:decode</title>
    <ns>0</ns>
    <id>388</id>
    <redirect title="decode" />
    <revision>
      <id>1129</id>
      <timestamp>2009-03-07T01:28:57Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:decode]] moved to [[decode]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[decode]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:deleteStrProp</title>
    <ns>0</ns>
    <id>389</id>
    <redirect title="deleteStrProp" />
    <revision>
      <id>1132</id>
      <timestamp>2009-03-07T01:30:53Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:deleteStrProp]] moved to [[deleteStrProp]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[deleteStrProp]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:dialog</title>
    <ns>0</ns>
    <id>390</id>
    <redirect title="dialog (roll option)" />
    <revision>
      <id>3040</id>
      <parentid>1137</parentid>
      <timestamp>2009-04-13T17:03:16Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[dialog]] has been moved, it is now a redirect to [[dialog (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[dialog (roll option)]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:divide</title>
    <ns>0</ns>
    <id>391</id>
    <redirect title="divide" />
    <revision>
      <id>1139</id>
      <timestamp>2009-03-07T01:42:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:divide]] moved to [[divide]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[divide]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:encode</title>
    <ns>0</ns>
    <id>392</id>
    <redirect title="encode" />
    <revision>
      <id>1143</id>
      <timestamp>2009-03-07T01:48:03Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:encode]] moved to [[encode]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[encode]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:endsWith</title>
    <ns>0</ns>
    <id>393</id>
    <redirect title="endsWith" />
    <revision>
      <id>1146</id>
      <timestamp>2009-03-07T01:51:21Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:endsWith]] moved to [[endsWith]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[endsWith]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:eval</title>
    <ns>0</ns>
    <id>394</id>
    <redirect title="eval" />
    <revision>
      <id>1149</id>
      <timestamp>2009-03-07T01:53:25Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:eval]] moved to [[eval]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">#REDIRECT [[eval]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:evalMacro</title>
    <ns>0</ns>
    <id>395</id>
    <redirect title="evalMacro" />
    <revision>
      <id>1152</id>
      <timestamp>2009-03-07T02:02:00Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:evalMacro]] moved to [[evalMacro]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[evalMacro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>execMacro</title>
    <ns>0</ns>
    <id>396</id>
    <redirect title="evalMacro" />
    <revision>
      <id>1154</id>
      <timestamp>2009-03-07T02:03:09Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to [[evalMacro]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="87">#REDIRECT [[evalMacro]]
[[Category:Macro Function]]
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:findToken</title>
    <ns>0</ns>
    <id>397</id>
    <redirect title="findToken" />
    <revision>
      <id>1157</id>
      <timestamp>2009-03-07T02:09:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:findToken]] moved to [[findToken]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[findToken]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:floor</title>
    <ns>0</ns>
    <id>398</id>
    <redirect title="floor" />
    <revision>
      <id>1160</id>
      <timestamp>2009-03-07T02:32:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:floor]] moved to [[floor]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[floor]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:formatStrProp</title>
    <ns>0</ns>
    <id>399</id>
    <redirect title="formatStrProp" />
    <revision>
      <id>1163</id>
      <timestamp>2009-03-07T02:35:21Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:formatStrProp]] moved to [[formatStrProp]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[formatStrProp]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getAllPlayerNames</title>
    <ns>0</ns>
    <id>400</id>
    <redirect title="getAllPlayerNames" />
    <revision>
      <id>1166</id>
      <timestamp>2009-03-07T02:38:26Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getAllPlayerNames]] moved to [[getAllPlayerNames]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[getAllPlayerNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getAllPropertyNames</title>
    <ns>0</ns>
    <id>401</id>
    <redirect title="getAllPropertyNames" />
    <revision>
      <id>1169</id>
      <timestamp>2009-03-07T02:41:39Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getAllPropertyNames]] moved to [[getAllPropertyNames]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[getAllPropertyNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getBar</title>
    <ns>0</ns>
    <id>402</id>
    <redirect title="getBar" />
    <revision>
      <id>1172</id>
      <timestamp>2009-03-07T02:45:00Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getBar]] moved to [[getBar]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[getBar]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Token Bar Function</title>
    <ns>14</ns>
    <id>403</id>
    <redirect title="Category:Bar Function" />
    <revision>
      <id>2331</id>
      <parentid>1482</parentid>
      <timestamp>2009-03-25T14:13:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirect to real category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[:Category:Bar Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getCurrentInitiative</title>
    <ns>0</ns>
    <id>404</id>
    <redirect title="getCurrentInitiative" />
    <revision>
      <id>1178</id>
      <timestamp>2009-03-07T02:50:50Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getCurrentInitiative]] moved to [[getCurrentInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[getCurrentInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getExposedTokenNames</title>
    <ns>0</ns>
    <id>405</id>
    <redirect title="getExposedTokenNames" />
    <revision>
      <id>1181</id>
      <timestamp>2009-03-07T02:57:06Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getExposedTokenNames]] moved to [[getExposedTokenNames]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[getExposedTokenNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Token Find Function</title>
    <ns>14</ns>
    <id>406</id>
    <redirect title="Category:Find Function" />
    <revision>
      <id>2332</id>
      <parentid>1494</parentid>
      <timestamp>2009-03-25T14:14:27Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirect to real category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[:Category:Find Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getExposedTokens</title>
    <ns>0</ns>
    <id>407</id>
    <redirect title="getExposedTokens" />
    <revision>
      <id>1185</id>
      <timestamp>2009-03-07T03:01:43Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getExposedTokens]] moved to [[getExposedTokens]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[getExposedTokens]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getFindCount</title>
    <ns>0</ns>
    <id>408</id>
    <redirect title="getFindCount" />
    <revision>
      <id>1188</id>
      <timestamp>2009-03-07T03:04:11Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getFindCount]] moved to [[getFindCount]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[getFindCount]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getGMName</title>
    <ns>0</ns>
    <id>409</id>
    <redirect title="getGMName" />
    <revision>
      <id>1192</id>
      <timestamp>2009-03-07T03:06:33Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getGMName]] moved to [[getGMName]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[getGMName]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getGMNotes</title>
    <ns>0</ns>
    <id>410</id>
    <redirect title="getGMNotes" />
    <revision>
      <id>1195</id>
      <timestamp>2009-03-07T03:08:13Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getGMNotes]] moved to [[getGMNotes]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[getGMNotes]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getGroup</title>
    <ns>0</ns>
    <id>411</id>
    <redirect title="getGroup" />
    <revision>
      <id>1198</id>
      <timestamp>2009-03-07T03:10:15Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getGroup]] moved to [[getGroup]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[getGroup]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getGroupCount</title>
    <ns>0</ns>
    <id>412</id>
    <redirect title="getGroupCount" />
    <revision>
      <id>1202</id>
      <timestamp>2009-03-07T03:12:03Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getGroupCount]] moved to [[getGroupCount]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[getGroupCount]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getGroupEnd</title>
    <ns>0</ns>
    <id>413</id>
    <redirect title="getGroupEnd" />
    <revision>
      <id>1205</id>
      <timestamp>2009-03-07T03:14:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getGroupEnd]] moved to [[getGroupEnd]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[getGroupEnd]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getGroupStart</title>
    <ns>0</ns>
    <id>414</id>
    <redirect title="getGroupStart" />
    <revision>
      <id>1208</id>
      <timestamp>2009-03-07T03:15:57Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getGroupStart]] moved to [[getGroupStart]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[getGroupStart]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getHalo</title>
    <ns>0</ns>
    <id>415</id>
    <redirect title="getHalo" />
    <revision>
      <id>1213</id>
      <timestamp>2009-03-07T03:22:50Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getHalo]] moved to [[getHalo]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[getHalo]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getImage</title>
    <ns>0</ns>
    <id>416</id>
    <redirect title="getImage" />
    <revision>
      <id>1216</id>
      <timestamp>2009-03-07T03:26:08Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getImage]] moved to [[getImage]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[getImage]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getImpersonated</title>
    <ns>0</ns>
    <id>417</id>
    <redirect title="getImpersonated" />
    <revision>
      <id>1219</id>
      <timestamp>2009-03-07T03:28:13Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getImpersonated]] moved to [[getImpersonated]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[getImpersonated]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getImpersonatedName</title>
    <ns>0</ns>
    <id>418</id>
    <redirect title="getImpersonatedName" />
    <revision>
      <id>1222</id>
      <timestamp>2009-03-07T03:31:01Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getImpersonatedName]] moved to [[getImpersonatedName]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[getImpersonatedName]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getInitiative</title>
    <ns>0</ns>
    <id>419</id>
    <redirect title="getInitiative" />
    <revision>
      <id>1225</id>
      <timestamp>2009-03-07T03:33:37Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getInitiative]] moved to [[getInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[getInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getInitiativeHold</title>
    <ns>0</ns>
    <id>420</id>
    <redirect title="getInitiativeHold" />
    <revision>
      <id>1228</id>
      <timestamp>2009-03-07T03:39:23Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getInitiativeHold]] moved to [[getInitiativeHold]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[getInitiativeHold]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getInitiativeRound</title>
    <ns>0</ns>
    <id>421</id>
    <redirect title="getInitiativeRound" />
    <revision>
      <id>1231</id>
      <timestamp>2009-03-07T03:44:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getInitiativeRound]] moved to [[getInitiativeRound]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[getInitiativeRound]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getLabel</title>
    <ns>0</ns>
    <id>422</id>
    <redirect title="getLabel" />
    <revision>
      <id>1234</id>
      <timestamp>2009-03-07T03:46:39Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getLabel]] moved to [[getLabel]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[getLabel]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getLayer</title>
    <ns>0</ns>
    <id>423</id>
    <redirect title="getLayer" />
    <revision>
      <id>1237</id>
      <timestamp>2009-03-07T03:48:34Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getLayer]] moved to [[getLayer]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[getLayer]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getLibProperty</title>
    <ns>0</ns>
    <id>424</id>
    <redirect title="getLibProperty" />
    <revision>
      <id>1240</id>
      <timestamp>2009-03-07T03:51:23Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getLibProperty]] moved to [[getLibProperty]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[getLibProperty]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Token Library Function</title>
    <ns>14</ns>
    <id>425</id>
    <revision>
      <id>1241</id>
      <timestamp>2009-03-07T03:51:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getLights</title>
    <ns>0</ns>
    <id>426</id>
    <redirect title="getLights" />
    <revision>
      <id>1244</id>
      <timestamp>2009-03-07T03:57:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getLights]] moved to [[getLights]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[getLights]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getMacroButtonIndex</title>
    <ns>0</ns>
    <id>427</id>
    <redirect title="getMacroButtonIndex" />
    <revision>
      <id>1247</id>
      <timestamp>2009-03-07T04:01:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getMacroButtonIndex]] moved to [[getMacroButtonIndex]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[getMacroButtonIndex]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getMacroCommand</title>
    <ns>0</ns>
    <id>428</id>
    <redirect title="getMacroCommand" />
    <revision>
      <id>1250</id>
      <timestamp>2009-03-07T04:04:06Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getMacroCommand]] moved to [[getMacroCommand]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[getMacroCommand]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getMacroIndexes</title>
    <ns>0</ns>
    <id>429</id>
    <redirect title="getMacroIndexes" />
    <revision>
      <id>1253</id>
      <timestamp>2009-03-07T04:07:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getMacroIndexes]] moved to [[getMacroIndexes]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[getMacroIndexes]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getMacroLocation</title>
    <ns>0</ns>
    <id>430</id>
    <redirect title="getMacroLocation" />
    <revision>
      <id>1256</id>
      <timestamp>2009-03-07T04:11:38Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getMacroLocation]] moved to [[getMacroLocation]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[getMacroLocation]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getMacroName</title>
    <ns>0</ns>
    <id>431</id>
    <redirect title="getMacroName" />
    <revision>
      <id>1266</id>
      <timestamp>2009-03-07T16:10:11Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:getMacroName]] moved to [[getMacroName]]: Taking it out of Macros namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[getMacroName]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getMacroProps</title>
    <ns>0</ns>
    <id>432</id>
    <redirect title="getMacroProps" />
    <revision>
      <id>1270</id>
      <timestamp>2009-03-07T16:17:25Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:getMacroProps]] moved to [[getMacroProps]]: Taking page out of Macros namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[getMacroProps]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:token</title>
    <ns>0</ns>
    <id>433</id>
    <redirect title="token (roll option)" />
    <revision>
      <id>2060</id>
      <parentid>1273</parentid>
      <timestamp>2009-03-11T00:53:20Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[token]] has been moved, it is now a redirect to [[token (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[token (roll option)]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getMacros</title>
    <ns>0</ns>
    <id>434</id>
    <redirect title="getMacros" />
    <revision>
      <id>1277</id>
      <timestamp>2009-03-07T18:35:55Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:getMacros]] moved to [[getMacros]]: Moving out of Macros namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[getMacros]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getNPCNames</title>
    <ns>0</ns>
    <id>435</id>
    <redirect title="getNPCNames" />
    <revision>
      <id>1280</id>
      <timestamp>2009-03-07T18:42:11Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:getNPCNames]] moved to [[getNPCNames]]: Moved out of Macros namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[getNPCNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:code</title>
    <ns>10</ns>
    <id>436</id>
    <revision>
      <id>7112</id>
      <parentid>7100</parentid>
      <timestamp>2019-02-20T05:27:09Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="119">&lt;includeonly&gt;&lt;code&gt;&lt;/includeonly&gt;{{{1}}}&lt;includeonly&gt;&lt;/code&gt;&lt;/includeonly&gt;&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1>9w5fn7otzdb8dk6wz7sfms2mzktnjue</sha1>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getNPCs</title>
    <ns>0</ns>
    <id>437</id>
    <redirect title="getNPC" />
    <revision>
      <id>2397</id>
      <parentid>1293</parentid>
      <timestamp>2009-03-29T08:40:07Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[getNPCs]] has been moved, it is now a redirect to [[getNPC]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[getNPC]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getName</title>
    <ns>0</ns>
    <id>438</id>
    <redirect title="getName" />
    <revision>
      <id>1296</id>
      <timestamp>2009-03-08T02:40:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getName]] moved to [[getName]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[getName]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getNotes</title>
    <ns>0</ns>
    <id>439</id>
    <redirect title="getNotes" />
    <revision>
      <id>1299</id>
      <timestamp>2009-03-08T02:42:38Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getNotes]] moved to [[getNotes]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[getNotes]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getOwned</title>
    <ns>0</ns>
    <id>440</id>
    <redirect title="getOwned" />
    <revision>
      <id>1302</id>
      <timestamp>2009-03-08T02:50:46Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getOwned]] moved to [[getOwned]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[getOwned]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getOwnedNames</title>
    <ns>0</ns>
    <id>441</id>
    <redirect title="getOwnedNames" />
    <revision>
      <id>1305</id>
      <timestamp>2009-03-08T02:56:05Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getOwnedNames]] moved to [[getOwnedNames]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[getOwnedNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getOwners</title>
    <ns>0</ns>
    <id>442</id>
    <redirect title="getOwners" />
    <revision>
      <id>1308</id>
      <timestamp>2009-03-08T03:03:02Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getOwners]] moved to [[getOwners]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[getOwners]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getPCNames</title>
    <ns>0</ns>
    <id>443</id>
    <redirect title="getPCNames" />
    <revision>
      <id>1311</id>
      <timestamp>2009-03-08T03:11:22Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getPCNames]] moved to [[getPCNames]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[getPCNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getPCs</title>
    <ns>0</ns>
    <id>444</id>
    <redirect title="getPC" />
    <revision>
      <id>2402</id>
      <parentid>1314</parentid>
      <timestamp>2009-03-29T08:45:34Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[getPCs]] has been moved, it is now a redirect to [[getPC]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[getPC]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getPlayerName</title>
    <ns>0</ns>
    <id>445</id>
    <redirect title="getPlayerName" />
    <revision>
      <id>1317</id>
      <timestamp>2009-03-08T03:23:13Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getPlayerName]] moved to [[getPlayerName]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[getPlayerName]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getProperty</title>
    <ns>0</ns>
    <id>446</id>
    <redirect title="getProperty" />
    <revision>
      <id>1320</id>
      <timestamp>2009-03-08T03:26:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getProperty]] moved to [[getProperty]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[getProperty]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getPropertyDefault</title>
    <ns>0</ns>
    <id>447</id>
    <redirect title="getPropertyDefault" />
    <revision>
      <id>1323</id>
      <timestamp>2009-03-08T03:28:17Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getPropertyDefault]] moved to [[getPropertyDefault]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[getPropertyDefault]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getPropertyNames</title>
    <ns>0</ns>
    <id>448</id>
    <redirect title="getPropertyNames" />
    <revision>
      <id>1327</id>
      <timestamp>2009-03-08T03:34:37Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getPropertyNames]] moved to [[getPropertyNames]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[getPropertyNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getPropertyType</title>
    <ns>0</ns>
    <id>449</id>
    <redirect title="getPropertyType" />
    <revision>
      <id>1330</id>
      <timestamp>2009-03-08T03:36:28Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getPropertyType]] moved to [[getPropertyType]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[getPropertyType]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getSelected</title>
    <ns>0</ns>
    <id>450</id>
    <redirect title="getSelected" />
    <revision>
      <id>1333</id>
      <timestamp>2009-03-08T03:40:19Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getSelected]] moved to [[getSelected]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[getSelected]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getSelectedNames</title>
    <ns>0</ns>
    <id>451</id>
    <redirect title="getSelectedNames" />
    <revision>
      <id>1336</id>
      <timestamp>2009-03-08T03:44:03Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getSelectedNames]] moved to [[getSelectedNames]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[getSelectedNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getSightType</title>
    <ns>0</ns>
    <id>452</id>
    <redirect title="getSightType" />
    <revision>
      <id>1339</id>
      <timestamp>2009-03-08T03:46:06Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getSightType]] moved to [[getSightType]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[getSightType]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Sight Function</title>
    <ns>14</ns>
    <id>453</id>
    <revision>
      <id>1340</id>
      <timestamp>2009-03-08T03:46:33Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getSize</title>
    <ns>0</ns>
    <id>454</id>
    <redirect title="getSize" />
    <revision>
      <id>1343</id>
      <timestamp>2009-03-08T03:49:39Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getSize]] moved to [[getSize]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[getSize]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getSpeech</title>
    <ns>0</ns>
    <id>455</id>
    <redirect title="getSpeech" />
    <revision>
      <id>1346</id>
      <timestamp>2009-03-08T03:51:17Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getSpeech]] moved to [[getSpeech]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[getSpeech]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getSpeechNames</title>
    <ns>0</ns>
    <id>456</id>
    <redirect title="getSpeechNames" />
    <revision>
      <id>1349</id>
      <timestamp>2009-03-08T03:55:19Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getSpeechNames]] moved to [[getSpeechNames]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[getSpeechNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getState</title>
    <ns>0</ns>
    <id>457</id>
    <redirect title="getState" />
    <revision>
      <id>1351</id>
      <timestamp>2009-03-08T03:56:47Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:getState]] moved to [[getState]]: Moving out of the Macros namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[getState]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getStrProp</title>
    <ns>0</ns>
    <id>458</id>
    <redirect title="getStrProp" />
    <revision>
      <id>1355</id>
      <timestamp>2009-03-08T04:00:22Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getStrProp]] moved to [[getStrProp]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[getStrProp]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:hasImpersonated</title>
    <ns>0</ns>
    <id>459</id>
    <redirect title="hasImpersonated" />
    <revision>
      <id>1357</id>
      <timestamp>2009-03-08T04:02:04Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:hasImpersonated]] moved to [[hasImpersonated]]: Moved out of Macros namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[hasImpersonated]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getTokenHandout</title>
    <ns>0</ns>
    <id>460</id>
    <redirect title="getTokenHandout" />
    <revision>
      <id>1360</id>
      <timestamp>2009-03-08T04:02:25Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getTokenHandout]] moved to [[getTokenHandout]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[getTokenHandout]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:hasLightSource</title>
    <ns>0</ns>
    <id>461</id>
    <redirect title="hasLightSource" />
    <revision>
      <id>1363</id>
      <timestamp>2009-03-08T04:04:26Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:hasLightSource]] moved to [[hasLightSource]]: Moved out of Macros namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[hasLightSource]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getTokenImage</title>
    <ns>0</ns>
    <id>462</id>
    <redirect title="getTokenImage" />
    <revision>
      <id>1366</id>
      <timestamp>2009-03-08T04:05:03Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getTokenImage]] moved to [[getTokenImage]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[getTokenImage]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getTokenNames</title>
    <ns>0</ns>
    <id>463</id>
    <redirect title="getTokenNames" />
    <revision>
      <id>1370</id>
      <timestamp>2009-03-08T04:09:09Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getTokenNames]] moved to [[getTokenNames]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[getTokenNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:hasMacro</title>
    <ns>0</ns>
    <id>464</id>
    <redirect title="hasMacro" />
    <revision>
      <id>1373</id>
      <timestamp>2009-03-08T04:10:33Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:hasMacro]] moved to [[hasMacro]]: Moved out of Macros namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[hasMacro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getTokenPortrait</title>
    <ns>0</ns>
    <id>465</id>
    <redirect title="getTokenPortrait" />
    <revision>
      <id>1376</id>
      <timestamp>2009-03-08T04:11:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getTokenPortrait]] moved to [[getTokenPortrait]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[getTokenPortrait]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getTokens</title>
    <ns>0</ns>
    <id>466</id>
    <redirect title="getTokens" />
    <revision>
      <id>1379</id>
      <timestamp>2009-03-08T04:14:41Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getTokens]] moved to [[getTokens]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[getTokens]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:hasProperty</title>
    <ns>0</ns>
    <id>467</id>
    <redirect title="hasProperty" />
    <revision>
      <id>1381</id>
      <timestamp>2009-03-08T04:15:46Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:hasProperty]] moved to [[hasProperty]]: Moved out of the Macros namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[hasProperty]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getVisible</title>
    <ns>0</ns>
    <id>468</id>
    <redirect title="getVisible" />
    <revision>
      <id>1384</id>
      <timestamp>2009-03-08T04:16:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getVisible]] moved to [[getVisible]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[getVisible]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:hasSight</title>
    <ns>0</ns>
    <id>469</id>
    <redirect title="hasSight" />
    <revision>
      <id>1387</id>
      <timestamp>2009-03-08T04:17:40Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:hasSight]] moved to [[hasSight]]: Moved out of Macros namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[hasSight]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:hex</title>
    <ns>0</ns>
    <id>470</id>
    <redirect title="hex" />
    <revision>
      <id>1390</id>
      <timestamp>2009-03-08T04:19:45Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:hex]] moved to [[hex]]: Moved out of Macro namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">#REDIRECT [[hex]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getVisibleTokenNames</title>
    <ns>0</ns>
    <id>471</id>
    <redirect title="getVisibleTokenNames" />
    <revision>
      <id>1393</id>
      <timestamp>2009-03-08T04:20:11Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getVisibleTokenNames]] moved to [[getVisibleTokenNames]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[getVisibleTokenNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getVisibleTokens</title>
    <ns>0</ns>
    <id>472</id>
    <redirect title="getVisibleTokens" />
    <revision>
      <id>1397</id>
      <timestamp>2009-03-08T04:23:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getVisibleTokens]] moved to [[getVisibleTokens]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[getVisibleTokens]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:hypot</title>
    <ns>0</ns>
    <id>473</id>
    <redirect title="hypotenuse" />
    <revision>
      <id>1415</id>
      <parentid>1400</parentid>
      <timestamp>2009-03-08T19:47:48Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to hypotenuse.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[hypotenuse]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getWithState</title>
    <ns>0</ns>
    <id>474</id>
    <redirect title="getWithState" />
    <revision>
      <id>1404</id>
      <timestamp>2009-03-08T04:26:21Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getWithState]] moved to [[getWithState]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[getWithState]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:getWithStateNames</title>
    <ns>0</ns>
    <id>475</id>
    <redirect title="getWithStateNames" />
    <revision>
      <id>1407</id>
      <timestamp>2009-03-08T04:29:39Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:getWithStateNames]] moved to [[getWithStateNames]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[getWithStateNames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Sample Ruleset</title>
    <ns>0</ns>
    <id>476</id>
    <revision>
      <id>2595</id>
      <parentid>2392</parentid>
      <timestamp>2009-04-01T13:39:25Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to MapTool category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5467">This is a small roleplaying game system created by Phergus for use in examples and samples for RPTools applications. As noted on the original thread, this is not meant to be a mature and balanced system, but rather a system that contains enough aspects to highlight a good selection of application features. See the [http://forums.rptools.net/viewtopic.php?f=12&amp;t=6343 original thread] for more details.

==Characters==
===Primary Attributes===
Primary attributes are determined using a point system. Starting characters are given {{code|14}} points to distribute among their four primary attributes. Each primary attribute must at least have a value of {{code|1}}, but can be no higher than {{code|6}}.
* '''Strength (Str)'''
* '''Dexterity (Dex)'''
* '''Intelligence (Int)'''
* '''Endurance (End)'''
'''Summary:''' Total of {{code|14}} points.  Minimum of {{code|1}}.  Maximum of {{code|6}}.

===Derived Attributes===
Character possess three derived attributes. ''Hit Points'' are determined multiplying ''Endurance'' by {{code|6}}. Each character class has a different ''Armor'' score; ''Armor'' can also be increased by powers. Base ''Movement'' is equal to a character's ''Dexterity''.
* '''Hit Points (HP)'''
* '''Armor (AR)'''
* '''Movement (MV)'''
'''Summary:''' (''Endurance'')x{{code|6}} ''Hit Points''. ''Armor'' determined by class. ''Movement'' equals ''Dexterity''.

===Classes===
At character creation, players get to choose a class for their character. The chosen class determines beginning powers and ''Armor''.
{| cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|- bgcolor=#e0ddd5 align=left
! Class !! Beginning Powers !! Armor
|-
| Warrior || Sword, Shield Bash, Bow, Shield, Torch ||align=center| 6
|- bgcolor=#eeede9
| Rogue || Dagger, Hide, Backstab, Pick Lock, Torch ||align=center| 2
|-
| Wizard || Dagger, Staff, Light, Lightning Bolt, Fire Ball ||align=center| 1
|- bgcolor=#eeede9
| Priest || Mace, Heal, Protect, Banish Undead, Torch ||align=center| 4
|}

==Combat==
===Initiative===
Each combatant rolls for initiative at the beginning of each round.  Initiative roll is {{code|1d6}} + ''Dexterity''.  Each combatant acts in order of initiative, highest to lowest, each round.

===Movement===
Combatants can use a power or move each round. When moving, a combatant can move a number of squares/hexes equal to their ''Movement''.

===Attack Roll===
An attack power requires a roll to determine if it succeeds.  If the roll is {{code|15}} or higher after applying any bonuses, the attack power succeeds.
* '''Melee Attacks''' - Roll {{code|1d20}} + ''Strength'' + Power Attack Bonus
* '''Ranged Attack''' - Roll {{code|1d20}} + ''Dexterity'' + Power Attack Bonus
* '''Spell Attack''' - Roll {{code|1d10}} + ''Intelligence'' + Power Attack Bonus
'''Summary:''' A {{code|15+}} on the attack roll succeeds.

===Damage Roll===
If an attack power succeeds in hitting the target, determined damage by rolling {{code|1d6}}, apply the power damage bonus, add the relevant attack attribute, and finally subtract the target's ''Armor''. Subtract the result from the target's ''Hit Points''.&lt;br&gt;
'''Summary:''' {{code|1d6}} + (Power Damage Bonus) + (Attack Attribute Bonus) - Armor

==Powers==
PCs/NPCs have Powers that represent their attacks and abilities.  Beginnning PCs have 5 powers.  NPCs will have a variable number but at least 1.  Two types of powers: Attack &amp; Other. During any combat round a PC/NPC may have 1 non-attack Power active and may use 1 Power to attack.

====Attack Powers====
{| cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|- bgcolor=#e0ddd5 align=left
! Name !! Attack Bonus !! Damage Bonus !! Range !! Special
|-
| Backstab || +4 || 2x || - || Must attack from rear and have been hidden previous round.
|- bgcolor=#eeede9
| Banish Undead || +0 || +8 || 4 || Only works on Undead. With a roll of 6 on a d6 the Undead is Enraged and gains +2 damage for 3 rounds.
|-
| Bite I || -1 || -2 || - || 
|- bgcolor=#eeede9
| Bite II || -1 || -1 || - || Infects target on a roll of 5+, reduces Strength by 2.
|-
| Bow || +0 || +1 || 8 || 
|- bgcolor=#eeede9
| Chilling Touch || -1 || +2 || - || Freezing touch does damage and reduces Dexterity by 2.
|-
| Claw || -2 || +2 || - || 
|- bgcolor=#eeede9
| Curse || +0 || +0 || 3 || Pain from attack reduces Intelligence by 2.
|-
| Dagger || +0 || -1 || 2 || Melee or ranged.
|- bgcolor=#eeede9
| Fire Ball || -1 || +0 || 4 || Does damage to target and all in the immediately adjacent squares/hexes.
|-
| Heal || * || - || 4 || Heals target (self/other) for 2d6. *No roll to hit.
|- bgcolor=#eeede9
| Lightning Bolt || +1 || +4 || 6 || Single target
|-
| Mace || +1 || +1 || - || 
|- bgcolor=#eeede9
| Shield Bash || -1 || 1/2 || - || Stuns foe with a 4+ on a d6 for 3 rounds.
|-
| Staff  || +0 || +0 || - || 
|- bgcolor=#eeede9
| Summon Undead || - || - || 2 || Summons 1 zombie.
|-
| Sword || +2 || +2 || - || 
|}

====Other Powers====
{| cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|- bgcolor=#e0ddd5 align=left
! Name !! Range !! Special
|-
| Hide || - || Hides Rogue from enemies. Cannot attack except for Backstab.
|- bgcolor=#eeede9
| Light || - || Illuminates a 6 square/hex radius around Wizard.
|-
| Pick Lock || - || Opens Lock on 1d6 + Dexterity &gt; Lock Difficulty.
|- bgcolor=#eeede9
| Protect || 4 || Gives +4 Armor to target. (self/other)
|-
| Shield || - || Adds +2 Armor. Can't be used with Shield Bash.
|- bgcolor=#eeede9
| Torch || - || Illuminates a 3 square/hex radius around character.
|}
[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:hypotenuse</title>
    <ns>0</ns>
    <id>477</id>
    <redirect title="hypotenuse" />
    <revision>
      <id>1413</id>
      <timestamp>2009-03-08T19:45:19Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:hypotenuse]] moved to [[hypotenuse]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[hypotenuse]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:if</title>
    <ns>0</ns>
    <id>478</id>
    <redirect title="if" />
    <revision>
      <id>1418</id>
      <timestamp>2009-03-08T19:50:45Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:if]] moved to [[if]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16">#REDIRECT [[if]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:indexKeyStrProp</title>
    <ns>0</ns>
    <id>479</id>
    <redirect title="indexKeyStrProp" />
    <revision>
      <id>1421</id>
      <timestamp>2009-03-08T19:53:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:indexKeyStrProp]] moved to [[indexKeyStrProp]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[indexKeyStrProp]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:indexOf</title>
    <ns>0</ns>
    <id>480</id>
    <redirect title="indexOf" />
    <revision>
      <id>1426</id>
      <timestamp>2009-03-08T20:04:01Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:indexOf]] moved to [[indexOf]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[indexOf]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:indexValueStrProp</title>
    <ns>0</ns>
    <id>481</id>
    <redirect title="indexValueStrProp" />
    <revision>
      <id>1429</id>
      <timestamp>2009-03-08T20:06:38Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:indexValueStrProp]] moved to [[indexValueStrProp]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[indexValueStrProp]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:initiativeSize</title>
    <ns>0</ns>
    <id>482</id>
    <redirect title="initiativeSize" />
    <revision>
      <id>1432</id>
      <timestamp>2009-03-08T20:09:21Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:initiativeSize]] moved to [[initiativeSize]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[initiativeSize]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:input</title>
    <ns>0</ns>
    <id>483</id>
    <redirect title="input" />
    <revision>
      <id>1435</id>
      <timestamp>2009-03-08T20:12:41Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:input]] moved to [[input]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[input]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:isBarVisible</title>
    <ns>0</ns>
    <id>484</id>
    <redirect title="isBarVisible" />
    <revision>
      <id>1439</id>
      <timestamp>2009-03-08T20:22:33Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:isBarVisible]] moved to [[isBarVisible]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[isBarVisible]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:Clarify</title>
    <ns>10</ns>
    <id>485</id>
    <revision>
      <id>7097</id>
      <parentid>5659</parentid>
      <timestamp>2019-02-20T04:57:47Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="487">&lt;noinclude&gt;This template is used to mark an article as needing clarification.  Stubs indicate that an article needs more work, but clarifications indicate that text, or part of it, needs rewriting or more information. [[Category:Templates]]&lt;/noinclude&gt;&lt;includeonly&gt;[[Category:Clarify]]&lt;/includeonly&gt;
&lt;div class=&quot;template_clarify&quot;&gt;
&lt;p style=&quot;border-color:red; background-color:lightgrey; border-width:2; border-style:solid; padding:5px&quot;&gt;
'''Needs Clarification:'''&lt;br&gt;
{{{1}}}
&lt;/p&gt;
&lt;/div&gt;</text>
      <sha1>0coj5y7pts0w26iqhx2gklcmk5utskh</sha1>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:isDialogVisible</title>
    <ns>0</ns>
    <id>486</id>
    <redirect title="isDialogVisible" />
    <revision>
      <id>1444</id>
      <timestamp>2009-03-08T20:42:41Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:isDialogVisible]] moved to [[isDialogVisible]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[isDialogVisible]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:isFrameVisible</title>
    <ns>0</ns>
    <id>487</id>
    <redirect title="isFrameVisible" />
    <revision>
      <id>1448</id>
      <timestamp>2009-03-08T20:48:51Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:isFrameVisible]] moved to [[isFrameVisible]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[isFrameVisible]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Frame Function</title>
    <ns>14</ns>
    <id>488</id>
    <revision>
      <id>1449</id>
      <timestamp>2009-03-08T20:49:26Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Added Macro Function category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:isGM</title>
    <ns>0</ns>
    <id>489</id>
    <redirect title="isGM" />
    <revision>
      <id>1452</id>
      <timestamp>2009-03-08T20:52:03Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:isGM]] moved to [[isGM]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">#REDIRECT [[isGM]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:isNPC</title>
    <ns>0</ns>
    <id>490</id>
    <redirect title="isNPC" />
    <revision>
      <id>1455</id>
      <timestamp>2009-03-08T20:54:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:isNPC]] moved to [[isNPC]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[isNPC]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:isNumber</title>
    <ns>0</ns>
    <id>491</id>
    <redirect title="isNumber" />
    <revision>
      <id>1458</id>
      <timestamp>2009-03-08T20:56:17Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:isNumber]] moved to [[isNumber]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[isNumber]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:isOwnedByAll</title>
    <ns>0</ns>
    <id>492</id>
    <redirect title="isOwnedByAll" />
    <revision>
      <id>1461</id>
      <timestamp>2009-03-08T20:58:18Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:isOwnedByAll]] moved to [[isOwnedByAll]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[isOwnedByAll]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:isOwner</title>
    <ns>0</ns>
    <id>493</id>
    <redirect title="isOwner" />
    <revision>
      <id>1464</id>
      <timestamp>2009-03-08T21:00:27Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:isOwner]] moved to [[isOwner]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[isOwner]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:isPC</title>
    <ns>0</ns>
    <id>494</id>
    <redirect title="isPC" />
    <revision>
      <id>1467</id>
      <timestamp>2009-03-08T21:01:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:isPC]] moved to [[isPC]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">#REDIRECT [[isPC]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:isPropertyEmpty</title>
    <ns>0</ns>
    <id>495</id>
    <redirect title="isPropertyEmpty" />
    <revision>
      <id>1470</id>
      <timestamp>2009-03-08T21:03:54Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:isPropertyEmpty]] moved to [[isPropertyEmpty]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[isPropertyEmpty]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:isTrusted</title>
    <ns>0</ns>
    <id>496</id>
    <redirect title="isTrusted" />
    <revision>
      <id>1473</id>
      <timestamp>2009-03-08T21:06:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:isTrusted]] moved to [[isTrusted]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[isTrusted]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Permission Function</title>
    <ns>14</ns>
    <id>497</id>
    <revision>
      <id>1475</id>
      <timestamp>2009-03-08T21:07:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: Functions that are primarily used to determine if permission should be granted. [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="107">Functions that are primarily used to determine if permission should be granted.
[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:Macros:Tutorials</title>
    <ns>1</ns>
    <id>498</id>
    <revision>
      <id>1477</id>
      <timestamp>2009-03-08T21:09:13Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>Added link to JSON info on forums</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="374">== Added link to JSON info on forums ==

For now I just added this as a link to the posts Craig made about the subject.  Eventually it would be nice if we could wikify all of that information, but for now it's just nice that there's some way to get to it from the wiki (which is where I fist looked for this information).
--[[User:Merkuri|merkuri]] 21:09, 8 March 2009 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Table Function</title>
    <ns>14</ns>
    <id>499</id>
    <revision>
      <id>1478</id>
      <timestamp>2009-03-08T21:09:46Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Bar Function</title>
    <ns>14</ns>
    <id>500</id>
    <revision>
      <id>1480</id>
      <timestamp>2009-03-08T21:11:06Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:JSON Function</title>
    <ns>14</ns>
    <id>501</id>
    <revision>
      <id>1484</id>
      <timestamp>2009-03-08T21:13:54Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Find Function</title>
    <ns>14</ns>
    <id>502</id>
    <revision>
      <id>1486</id>
      <timestamp>2009-03-08T21:14:53Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:State Function</title>
    <ns>14</ns>
    <id>503</id>
    <revision>
      <id>1492</id>
      <timestamp>2009-03-08T21:17:49Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Help:Contents</title>
    <ns>12</ns>
    <id>504</id>
    <revision>
      <id>3435</id>
      <parentid>1496</parentid>
      <timestamp>2009-06-12T19:16:49Z</timestamp>
      <contributor>
        <username>Thallaxwish</username>
        <id>70</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="500">'''Q: I want to help; where can I start?'''

After becoming familiar with our [[Help:Editing]] specifics, you can look through our tutorials and see if there is room for additions.  You could also look at which pages are [http://lmwcs.com/maptool/index.php?title=Special%3AWhatLinksHere&amp;target=Template%3Astub marked as stubs], or which pages are [http://lmwcs.com/maptool/index.php?title=Special%3AWhatLinksHere&amp;target=Template%3AClarify marked as needing clarification].
{{Languages|Help:Contents}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:Macros:Functions:list of functions</title>
    <ns>1</ns>
    <id>505</id>
    <revision>
      <id>1775</id>
      <parentid>1637</parentid>
      <timestamp>2009-03-09T05:29:24Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>/* Work Status */  Update</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="605">== Work Status ==

* Currently working on J [[User:Verisimilar|verisimilar]] 01:38, 9 March 2009 (UTC)
* Currently working on L [[User:Verisimilar|verisimilar]] 02:29, 9 March 2009 (UTC)
* Currently working on N [[User:Verisimilar|verisimilar]] 03:03, 9 March 2009 (UTC)
* Currently working on R [[User:Verisimilar|verisimilar]] 03:10, 9 March 2009 (UTC)
* Currently working on S [[User:Verisimilar|verisimilar]] 03:24, 9 March 2009 (UTC)
** Finishing up M [[User:Verisimilar|verisimilar]] 03:35, 9 March 2009 (UTC)
* Currently working on T, U, V [[User:Verisimilar|verisimilar]] 05:29, 9 March 2009 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.append</title>
    <ns>0</ns>
    <id>506</id>
    <redirect title="json.append" />
    <revision>
      <id>1502</id>
      <timestamp>2009-03-09T01:59:32Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.append]] moved to [[json.append]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[json.append]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.contains</title>
    <ns>0</ns>
    <id>507</id>
    <redirect title="json.contains" />
    <revision>
      <id>1505</id>
      <timestamp>2009-03-09T02:01:31Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.contains]] moved to [[json.contains]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[json.contains]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.fields</title>
    <ns>0</ns>
    <id>508</id>
    <redirect title="json.fields" />
    <revision>
      <id>1508</id>
      <timestamp>2009-03-09T02:03:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.fields]] moved to [[json.fields]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[json.fields]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.fromList</title>
    <ns>0</ns>
    <id>509</id>
    <redirect title="json.fromList" />
    <revision>
      <id>1511</id>
      <timestamp>2009-03-09T02:05:03Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.fromList]] moved to [[json.fromList]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[json.fromList]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.fromStrProp</title>
    <ns>0</ns>
    <id>510</id>
    <redirect title="json.fromStrProp" />
    <revision>
      <id>1514</id>
      <timestamp>2009-03-09T02:06:24Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.fromStrProp]] moved to [[json.fromStrProp]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[json.fromStrProp]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.get</title>
    <ns>0</ns>
    <id>511</id>
    <redirect title="json.get" />
    <revision>
      <id>1517</id>
      <timestamp>2009-03-09T02:09:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.get]] moved to [[json.get]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[json.get]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.length</title>
    <ns>0</ns>
    <id>512</id>
    <redirect title="json.length" />
    <revision>
      <id>1520</id>
      <timestamp>2009-03-09T02:12:06Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.length]] moved to [[json.length]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[json.length]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.set</title>
    <ns>0</ns>
    <id>513</id>
    <redirect title="json.set" />
    <revision>
      <id>1523</id>
      <timestamp>2009-03-09T02:15:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.set]] moved to [[json.set]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[json.set]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.type</title>
    <ns>0</ns>
    <id>514</id>
    <redirect title="json.type" />
    <revision>
      <id>1526</id>
      <timestamp>2009-03-09T02:17:18Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.type]] moved to [[json.type]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[json.type]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.toList</title>
    <ns>0</ns>
    <id>515</id>
    <redirect title="json.toList" />
    <revision>
      <id>1530</id>
      <timestamp>2009-03-09T02:22:21Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.toList]] moved to [[json.toList]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[json.toList]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.toStrProp</title>
    <ns>0</ns>
    <id>516</id>
    <redirect title="json.toStrProp" />
    <revision>
      <id>1533</id>
      <timestamp>2009-03-09T02:24:51Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.toStrProp]] moved to [[json.toStrProp]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[json.toStrProp]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:json.remove</title>
    <ns>0</ns>
    <id>517</id>
    <redirect title="json.remove" />
    <revision>
      <id>1536</id>
      <timestamp>2009-03-09T02:27:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:json.remove]] moved to [[json.remove]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[json.remove]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:lastIndexOf</title>
    <ns>0</ns>
    <id>518</id>
    <redirect title="lastIndexOf" />
    <revision>
      <id>1540</id>
      <timestamp>2009-03-09T02:31:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:lastIndexOf]] moved to [[lastIndexOf]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[lastIndexOf]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:length</title>
    <ns>0</ns>
    <id>519</id>
    <redirect title="length" />
    <revision>
      <id>1543</id>
      <timestamp>2009-03-09T02:34:26Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:length]] moved to [[length]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[length]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:listAppend</title>
    <ns>0</ns>
    <id>520</id>
    <redirect title="listAppend" />
    <revision>
      <id>1546</id>
      <timestamp>2009-03-09T02:39:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:listAppend]] moved to [[listAppend]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[listAppend]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:String List Function</title>
    <ns>14</ns>
    <id>521</id>
    <revision>
      <id>1547</id>
      <timestamp>2009-03-09T02:39:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:listContains</title>
    <ns>0</ns>
    <id>522</id>
    <redirect title="listContains" />
    <revision>
      <id>1550</id>
      <timestamp>2009-03-09T02:41:14Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:listContains]] moved to [[listContains]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[listContains]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:listCount</title>
    <ns>0</ns>
    <id>523</id>
    <redirect title="listCount" />
    <revision>
      <id>1553</id>
      <timestamp>2009-03-09T02:43:43Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:listCount]] moved to [[listCount]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[listCount]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:listDelete</title>
    <ns>0</ns>
    <id>524</id>
    <redirect title="listDelete" />
    <revision>
      <id>1556</id>
      <timestamp>2009-03-09T02:46:29Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:listDelete]] moved to [[listDelete]]: Moved out of the Macros namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[listDelete]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:listFind</title>
    <ns>0</ns>
    <id>525</id>
    <redirect title="listFind" />
    <revision>
      <id>1560</id>
      <timestamp>2009-03-09T02:48:22Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:listFind]] moved to [[listFind]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[listFind]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:listFormat</title>
    <ns>0</ns>
    <id>526</id>
    <redirect title="listFormat" />
    <revision>
      <id>1563</id>
      <timestamp>2009-03-09T02:49:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:listFormat]] moved to [[listFormat]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[listFormat]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:macroLink</title>
    <ns>0</ns>
    <id>527</id>
    <redirect title="macroLink" />
    <revision>
      <id>1565</id>
      <timestamp>2009-03-09T02:50:24Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:macroLink]] moved to [[macroLink]]: Moved out of Macros namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[macroLink]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:listGet</title>
    <ns>0</ns>
    <id>528</id>
    <redirect title="listGet" />
    <revision>
      <id>1568</id>
      <timestamp>2009-03-09T02:50:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:listGet]] moved to [[listGet]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[listGet]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:listInsert</title>
    <ns>0</ns>
    <id>529</id>
    <redirect title="listInsert" />
    <revision>
      <id>1571</id>
      <timestamp>2009-03-09T02:52:09Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:listInsert]] moved to [[listInsert]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[listInsert]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:macroLinkText</title>
    <ns>0</ns>
    <id>530</id>
    <redirect title="macroLinkText" />
    <revision>
      <id>1574</id>
      <timestamp>2009-03-09T02:52:48Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:macroLinkText]] moved to [[macroLinkText]]: Moved out of Macros namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[macroLinkText]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:listReplace</title>
    <ns>0</ns>
    <id>531</id>
    <redirect title="listReplace" />
    <revision>
      <id>1577</id>
      <timestamp>2009-03-09T02:53:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:listReplace]] moved to [[listReplace]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[listReplace]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:matches</title>
    <ns>0</ns>
    <id>532</id>
    <redirect title="matches" />
    <revision>
      <id>1580</id>
      <timestamp>2009-03-09T02:54:24Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:matches]] moved to [[matches]]: Moved out of Macros namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[matches]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:listSort</title>
    <ns>0</ns>
    <id>533</id>
    <redirect title="listSort" />
    <revision>
      <id>1583</id>
      <timestamp>2009-03-09T02:54:41Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:listSort]] moved to [[listSort]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[listSort]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:max</title>
    <ns>0</ns>
    <id>534</id>
    <redirect title="max" />
    <revision>
      <id>1587</id>
      <timestamp>2009-03-09T02:55:51Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:max]] moved to [[max]]: Moved out of Macros namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">#REDIRECT [[max]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:ln</title>
    <ns>0</ns>
    <id>535</id>
    <redirect title="ln" />
    <revision>
      <id>1589</id>
      <timestamp>2009-03-09T02:55:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:ln]] moved to [[ln]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16">#REDIRECT [[ln]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:median</title>
    <ns>0</ns>
    <id>536</id>
    <redirect title="median" />
    <revision>
      <id>1593</id>
      <timestamp>2009-03-09T02:58:05Z</timestamp>
      <contributor>
        <username>Merkuri</username>
        <id>21</id>
      </contributor>
      <comment>[[Macros:Functions:median]] moved to [[median]]: Moved out of Macros namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[median]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:log10</title>
    <ns>0</ns>
    <id>537</id>
    <redirect title="log10" />
    <revision>
      <id>1596</id>
      <timestamp>2009-03-09T02:58:32Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:log10]] moved to [[log10]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[log10]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>log</title>
    <ns>0</ns>
    <id>538</id>
    <redirect title="log10" />
    <revision>
      <id>1820</id>
      <parentid>1603</parentid>
      <timestamp>2009-03-09T15:19:58Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[log10]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="82">#REDIRECT [[log10]]
[[Category:Macro Function]]
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:lower</title>
    <ns>0</ns>
    <id>539</id>
    <redirect title="lower" />
    <revision>
      <id>1602</id>
      <timestamp>2009-03-09T03:01:16Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:lower]] moved to [[lower]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[lower]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:nextInitiative</title>
    <ns>0</ns>
    <id>540</id>
    <redirect title="nextInitiative" />
    <revision>
      <id>1607</id>
      <timestamp>2009-03-09T03:04:49Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:nextInitiative]] moved to [[nextInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[nextInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:number</title>
    <ns>0</ns>
    <id>541</id>
    <redirect title="number" />
    <revision>
      <id>1610</id>
      <timestamp>2009-03-09T03:08:19Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:number]] moved to [[number]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[number]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:removeAllFromInitiative</title>
    <ns>0</ns>
    <id>542</id>
    <redirect title="removeAllFromInitiative" />
    <revision>
      <id>1614</id>
      <timestamp>2009-03-09T03:12:57Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:removeAllFromInitiative]] moved to [[removeAllFromInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[removeAllFromInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:removeAllNPCsFromInitiative</title>
    <ns>0</ns>
    <id>543</id>
    <redirect title="removeAllNPCsFromInitiative" />
    <revision>
      <id>1617</id>
      <timestamp>2009-03-09T03:16:17Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:removeAllNPCsFromInitiative]] moved to [[removeAllNPCsFromInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="41">#REDIRECT [[removeAllNPCsFromInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:removeAllPCsFromInitiative</title>
    <ns>0</ns>
    <id>544</id>
    <redirect title="removeAllPCsFromInitiative" />
    <revision>
      <id>1620</id>
      <timestamp>2009-03-09T03:18:39Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:removeAllPCsFromInitiative]] moved to [[removeAllPCsFromInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[removeAllPCsFromInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:removeFromInitiative</title>
    <ns>0</ns>
    <id>545</id>
    <redirect title="removeFromInitiative" />
    <revision>
      <id>1623</id>
      <timestamp>2009-03-09T03:20:14Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:removeFromInitiative]] moved to [[removeFromInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[removeFromInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:replace</title>
    <ns>0</ns>
    <id>546</id>
    <redirect title="replace" />
    <revision>
      <id>1626</id>
      <timestamp>2009-03-09T03:21:54Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:replace]] moved to [[replace]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[replace]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:resetProperty</title>
    <ns>0</ns>
    <id>547</id>
    <redirect title="resetProperty" />
    <revision>
      <id>1629</id>
      <timestamp>2009-03-09T03:23:59Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:resetProperty]] moved to [[resetProperty]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[resetProperty]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:sendToBack</title>
    <ns>0</ns>
    <id>548</id>
    <redirect title="sendToBack" />
    <revision>
      <id>1633</id>
      <timestamp>2009-03-09T03:32:11Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:sendToBack]] moved to [[sendToBack]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[sendToBack]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:set</title>
    <ns>0</ns>
    <id>549</id>
    <redirect title="set" />
    <revision>
      <id>1636</id>
      <timestamp>2009-03-09T03:34:05Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:set]] moved to [[set]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">#REDIRECT [[set]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:min</title>
    <ns>0</ns>
    <id>550</id>
    <redirect title="min" />
    <revision>
      <id>1640</id>
      <timestamp>2009-03-09T03:36:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:min]] moved to [[min]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">#REDIRECT [[min]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:multiply</title>
    <ns>0</ns>
    <id>551</id>
    <redirect title="multiply" />
    <revision>
      <id>1643</id>
      <timestamp>2009-03-09T03:37:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:multiply]] moved to [[multiply]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[multiply]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setAllStates</title>
    <ns>0</ns>
    <id>552</id>
    <redirect title="setAllStates" />
    <revision>
      <id>1646</id>
      <timestamp>2009-03-09T03:39:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setAllStates]] moved to [[setAllStates]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[setAllStates]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setBar</title>
    <ns>0</ns>
    <id>553</id>
    <redirect title="setBar" />
    <revision>
      <id>1649</id>
      <timestamp>2009-03-09T03:41:46Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setBar]] moved to [[setBar]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[setBar]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setBarVisible</title>
    <ns>0</ns>
    <id>554</id>
    <redirect title="setBarVisible" />
    <revision>
      <id>1652</id>
      <timestamp>2009-03-09T03:43:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setBarVisible]] moved to [[setBarVisible]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[setBarVisible]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setCurrentInitiative</title>
    <ns>0</ns>
    <id>555</id>
    <redirect title="setCurrentInitiative" />
    <revision>
      <id>1655</id>
      <timestamp>2009-03-09T03:46:11Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setCurrentInitiative]] moved to [[setCurrentInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[setCurrentInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setGMName</title>
    <ns>0</ns>
    <id>556</id>
    <redirect title="setGMName" />
    <revision>
      <id>1658</id>
      <timestamp>2009-03-09T03:48:35Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setGMName]] moved to [[setGMName]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[setGMName]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setGMNotes</title>
    <ns>0</ns>
    <id>557</id>
    <redirect title="setGMNotes" />
    <revision>
      <id>1661</id>
      <timestamp>2009-03-09T03:52:26Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setGMNotes]] moved to [[setGMNotes]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[setGMNotes]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setHalo</title>
    <ns>0</ns>
    <id>558</id>
    <redirect title="setHalo" />
    <revision>
      <id>1664</id>
      <timestamp>2009-03-09T03:54:52Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setHalo]] moved to [[setHalo]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[setHalo]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setHasSight</title>
    <ns>0</ns>
    <id>559</id>
    <redirect title="setHasSight" />
    <revision>
      <id>1667</id>
      <timestamp>2009-03-09T03:58:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setHasSight]] moved to [[setHasSight]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[setHasSight]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setInitiative</title>
    <ns>0</ns>
    <id>560</id>
    <redirect title="setInitiative" />
    <revision>
      <id>1670</id>
      <timestamp>2009-03-09T04:00:34Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setInitiative]] moved to [[setInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[setInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setInitiativeHold</title>
    <ns>0</ns>
    <id>561</id>
    <redirect title="setInitiativeHold" />
    <revision>
      <id>1674</id>
      <timestamp>2009-03-09T04:04:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setInitiativeHold]] moved to [[setInitiativeHold]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[setInitiativeHold]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setInitiativeRound</title>
    <ns>0</ns>
    <id>562</id>
    <redirect title="setInitiativeRound" />
    <revision>
      <id>1677</id>
      <timestamp>2009-03-09T04:06:12Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setInitiativeRound]] moved to [[setInitiativeRound]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[setInitiativeRound]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setLabel</title>
    <ns>0</ns>
    <id>563</id>
    <redirect title="setLabel" />
    <revision>
      <id>1680</id>
      <timestamp>2009-03-09T04:07:45Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setLabel]] moved to [[setLabel]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[setLabel]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setLayer</title>
    <ns>0</ns>
    <id>564</id>
    <redirect title="setLayer" />
    <revision>
      <id>1683</id>
      <timestamp>2009-03-09T04:10:15Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setLayer]] moved to [[setLayer]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[setLayer]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setLibProperty</title>
    <ns>0</ns>
    <id>565</id>
    <redirect title="setLibProperty" />
    <revision>
      <id>1686</id>
      <timestamp>2009-03-09T04:12:17Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setLibProperty]] moved to [[setLibProperty]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[setLibProperty]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Property Function</title>
    <ns>14</ns>
    <id>566</id>
    <revision>
      <id>1687</id>
      <timestamp>2009-03-09T04:12:50Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setLight</title>
    <ns>0</ns>
    <id>567</id>
    <redirect title="setLight" />
    <revision>
      <id>1690</id>
      <timestamp>2009-03-09T04:14:52Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setLight]] moved to [[setLight]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[setLight]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setMacroCommand</title>
    <ns>0</ns>
    <id>568</id>
    <redirect title="setMacroCommand" />
    <revision>
      <id>1693</id>
      <timestamp>2009-03-09T04:17:33Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setMacroCommand]] moved to [[setMacroCommand]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[setMacroCommand]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setMacroProps</title>
    <ns>0</ns>
    <id>569</id>
    <redirect title="setMacroProps" />
    <revision>
      <id>1697</id>
      <timestamp>2009-03-09T04:21:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setMacroProps]] moved to [[setMacroProps]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[setMacroProps]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setName</title>
    <ns>0</ns>
    <id>570</id>
    <redirect title="setName" />
    <revision>
      <id>1700</id>
      <timestamp>2009-03-09T04:23:25Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setName]] moved to [[setName]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[setName]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setNotes</title>
    <ns>0</ns>
    <id>571</id>
    <redirect title="setNotes" />
    <revision>
      <id>1703</id>
      <timestamp>2009-03-09T04:24:43Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setNotes]] moved to [[setNotes]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[setNotes]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setPC</title>
    <ns>0</ns>
    <id>572</id>
    <redirect title="setPC" />
    <revision>
      <id>1706</id>
      <timestamp>2009-03-09T04:26:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setPC]] moved to [[setPC]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[setPC]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setProperty</title>
    <ns>0</ns>
    <id>573</id>
    <redirect title="setProperty" />
    <revision>
      <id>1709</id>
      <timestamp>2009-03-09T04:28:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setProperty]] moved to [[setProperty]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[setProperty]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setPropertyType</title>
    <ns>0</ns>
    <id>574</id>
    <redirect title="setPropertyType" />
    <revision>
      <id>1712</id>
      <timestamp>2009-03-09T04:30:34Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setPropertyType]] moved to [[setPropertyType]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[setPropertyType]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setSightType</title>
    <ns>0</ns>
    <id>575</id>
    <redirect title="setSightType" />
    <revision>
      <id>1715</id>
      <timestamp>2009-03-09T04:32:03Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setSightType]] moved to [[setSightType]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[setSightType]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setSize</title>
    <ns>0</ns>
    <id>576</id>
    <redirect title="setSize" />
    <revision>
      <id>1718</id>
      <timestamp>2009-03-09T04:33:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setSize]] moved to [[setSize]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[setSize]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setSpeech</title>
    <ns>0</ns>
    <id>577</id>
    <redirect title="setSpeech" />
    <revision>
      <id>1721</id>
      <timestamp>2009-03-09T04:35:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setSpeech]] moved to [[setSpeech]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[setSpeech]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setState</title>
    <ns>0</ns>
    <id>578</id>
    <redirect title="setState" />
    <revision>
      <id>1724</id>
      <timestamp>2009-03-09T04:38:19Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setState]] moved to [[setState]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[setState]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setStrProp</title>
    <ns>0</ns>
    <id>579</id>
    <redirect title="setStrProp" />
    <revision>
      <id>1727</id>
      <timestamp>2009-03-09T04:40:17Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setStrProp]] moved to [[setStrProp]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[setStrProp]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setTokenImage</title>
    <ns>0</ns>
    <id>580</id>
    <redirect title="setTokenImage" />
    <revision>
      <id>1730</id>
      <timestamp>2009-03-09T04:41:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setTokenImage]] moved to [[setTokenImage]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[setTokenImage]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:setVisible</title>
    <ns>0</ns>
    <id>581</id>
    <redirect title="setVisible" />
    <revision>
      <id>1733</id>
      <timestamp>2009-03-09T04:43:24Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:setVisible]] moved to [[setVisible]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[setVisible]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:sortInitiative</title>
    <ns>0</ns>
    <id>582</id>
    <redirect title="sortInitiative" />
    <revision>
      <id>1736</id>
      <timestamp>2009-03-09T04:44:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:sortInitiative]] moved to [[sortInitiative]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[sortInitiative]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:square</title>
    <ns>0</ns>
    <id>583</id>
    <redirect title="square" />
    <revision>
      <id>1739</id>
      <timestamp>2009-03-09T04:47:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:square]] moved to [[square]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[square]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>sqr</title>
    <ns>0</ns>
    <id>584</id>
    <redirect title="square" />
    <revision>
      <id>1747</id>
      <parentid>1741</parentid>
      <timestamp>2009-03-09T04:51:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added categories</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="83">#REDIRECT [[square]]
[[Category:Macro Function]]
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:squareroot</title>
    <ns>0</ns>
    <id>585</id>
    <redirect title="squareroot" />
    <revision>
      <id>1744</id>
      <timestamp>2009-03-09T04:49:35Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:squareroot]] moved to [[squareroot]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[squareroot]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>sqrt</title>
    <ns>0</ns>
    <id>586</id>
    <redirect title="squareroot" />
    <revision>
      <id>1746</id>
      <timestamp>2009-03-09T04:50:57Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirected to squareroot</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="87">#REDIRECT [[squareroot]]
[[Category:Macro Function]]
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:startsWith</title>
    <ns>0</ns>
    <id>587</id>
    <redirect title="startsWith" />
    <revision>
      <id>1750</id>
      <timestamp>2009-03-09T05:07:05Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:startsWith]] moved to [[startsWith]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[startsWith]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:strfind</title>
    <ns>0</ns>
    <id>588</id>
    <redirect title="strfind" />
    <revision>
      <id>1753</id>
      <timestamp>2009-03-09T05:08:56Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:strfind]] moved to [[strfind]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[strfind]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:strformat</title>
    <ns>0</ns>
    <id>589</id>
    <redirect title="strformat" />
    <revision>
      <id>1756</id>
      <timestamp>2009-03-09T05:17:51Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:strformat]] moved to [[strformat]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[strformat]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:string</title>
    <ns>0</ns>
    <id>590</id>
    <redirect title="string" />
    <revision>
      <id>1759</id>
      <timestamp>2009-03-09T05:19:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:string]] moved to [[string]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[string]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:stringToList</title>
    <ns>0</ns>
    <id>591</id>
    <redirect title="stringToList" />
    <revision>
      <id>1762</id>
      <timestamp>2009-03-09T05:21:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:stringToList]] moved to [[stringToList]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[stringToList]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:strPropFromVars</title>
    <ns>0</ns>
    <id>592</id>
    <redirect title="strPropFromVars" />
    <revision>
      <id>1765</id>
      <timestamp>2009-03-09T05:22:38Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:strPropFromVars]] moved to [[strPropFromVars]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[strPropFromVars]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:substring</title>
    <ns>0</ns>
    <id>593</id>
    <redirect title="substring" />
    <revision>
      <id>1768</id>
      <timestamp>2009-03-09T05:24:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:substring]] moved to [[substring]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[substring]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:subtract</title>
    <ns>0</ns>
    <id>594</id>
    <redirect title="subtract" />
    <revision>
      <id>1771</id>
      <timestamp>2009-03-09T05:26:34Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:subtract]] moved to [[subtract]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[subtract]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:switchToken</title>
    <ns>0</ns>
    <id>595</id>
    <redirect title="switchToken" />
    <revision>
      <id>1774</id>
      <timestamp>2009-03-09T05:27:54Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:switchToken]] moved to [[switchToken]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[switchToken]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:table</title>
    <ns>0</ns>
    <id>596</id>
    <redirect title="table" />
    <revision>
      <id>2023</id>
      <parentid>1778</parentid>
      <timestamp>2009-03-10T22:03:40Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[table (function)]] has been moved, it is now a redirect to [[table]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[table]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>tbl</title>
    <ns>0</ns>
    <id>597</id>
    <redirect title="table" />
    <revision>
      <id>2024</id>
      <parentid>1780</parentid>
      <timestamp>2009-03-10T22:03:52Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[table (function)]] has been moved, it is now a redirect to [[table]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="75">#REDIRECT [[table]]
[[Category:Macro Function]]
[[Category:Table Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:tableImage</title>
    <ns>0</ns>
    <id>598</id>
    <redirect title="tableImage" />
    <revision>
      <id>1783</id>
      <timestamp>2009-03-09T05:35:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:tableImage]] moved to [[tableImage]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[tableImage]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>tblImage</title>
    <ns>0</ns>
    <id>599</id>
    <redirect title="tableImage" />
    <revision>
      <id>1785</id>
      <timestamp>2009-03-09T05:36:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirected to tableImage</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="80">#REDIRECT [[tableImage]]
[[Category:Macro Function]]
[[Category:Table Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:trim</title>
    <ns>0</ns>
    <id>600</id>
    <redirect title="trim" />
    <revision>
      <id>1788</id>
      <timestamp>2009-03-09T05:37:37Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:trim]] moved to [[trim]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">#REDIRECT [[trim]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:upper</title>
    <ns>0</ns>
    <id>601</id>
    <redirect title="upper" />
    <revision>
      <id>1791</id>
      <timestamp>2009-03-09T05:39:51Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:upper]] moved to [[upper]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[upper]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Functions:varsFromStrProp</title>
    <ns>0</ns>
    <id>602</id>
    <redirect title="varsFromStrProp" />
    <revision>
      <id>1794</id>
      <timestamp>2009-03-09T05:41:45Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Functions:varsFromStrProp]] moved to [[varsFromStrProp]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[varsFromStrProp]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>pow</title>
    <ns>0</ns>
    <id>603</id>
    <redirect title="power" />
    <revision>
      <id>1802</id>
      <parentid>1800</parentid>
      <timestamp>2009-03-09T08:06:19Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirected to power.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="82">#REDIRECT [[power]]
[[Category:Macro Function]]
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>power</title>
    <ns>0</ns>
    <id>604</id>
    <revision>
      <id>1813</id>
      <parentid>1807</parentid>
      <timestamp>2009-03-09T14:21:22Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="954">{{MacroFunction
|name=power
|version=1.3b36
|description=
Returns a {{code|number}} raised to the power of {{code|2}}, or raised to a specific ''exponent''.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
power(num)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
power(num, exp)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
pow(num)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
pow(num, exp)
&lt;/source&gt;
'''Parameters'''
* {{code|num}} - the ''base number'' used to perform the operation.
* {{code|exp}} - the ''exponent'' used in the operation.

|examples=
'''Example 1:''' Use {{code|power()}} to raise {{code|5}} to the power of {{code|2}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: power(5)]
&lt;/source&gt;
'''Returns:''' {{code|25}}

'''Example 2:''' Use {{code|pow()}} to raise {{code|5}} to the power of {{code|3}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: pow(5, 3)]
&lt;/source&gt;
'''Returns:''' {{code|125}}

|also=
[[wp:Exponentiation|Exponentiation]], [[ln|ln()]]
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:=</title>
    <ns>10</ns>
    <id>605</id>
    <revision>
      <id>5868</id>
      <parentid>3182</parentid>
      <timestamp>2012-02-11T14:42:17Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Added explanatory text</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="145">&lt;noinclude&gt;Used to enable the inclusion of a &quot;=&quot; sign in a template parameter.&lt;br&gt;
----&lt;/noinclude&gt;=&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>removeMacro</title>
    <ns>0</ns>
    <id>606</id>
    <revision>
      <id>2460</id>
      <parentid>1821</parentid>
      <timestamp>2009-03-31T00:04:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated with recent version changes.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="430">{{stub|Examples of usage.}}
{{MacroFunction
|name=removeMacro
|version=1.3b51
|description=
Removes a macro button from a token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
removeMacro(index)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
removeMacro(index, id)
&lt;/source&gt;
'''Parameters'''
{{param|index|The index of the macro button.}}
{{param|id|The token {{code|id}} of the token the macro is located on.}}

}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Speech Function</title>
    <ns>14</ns>
    <id>607</id>
    <revision>
      <id>1823</id>
      <timestamp>2009-03-09T21:03:39Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.sort</title>
    <ns>0</ns>
    <id>608</id>
    <revision>
      <id>7128</id>
      <parentid>7119</parentid>
      <timestamp>2019-03-01T03:47:14Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2953">{{MacroFunction
|name=json.sort
|version=1.3b51
|description=
Used to sort JSON arrays. If the array contains only numbers, they are sorted numerically; otherwise, the values are sorted as strings alphabetically.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.sort(array)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.sort(array, direction)
&lt;/source&gt;
If you have a [[JSON Array]] that contains [[JSON Object]]s
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.sort(array, direction, key1, ..., keyN)
&lt;/source&gt;

'''Parameters'''
* {{code|array}} - The JSON array to sort.
* {{code|direction}} - Defaults to {{code|&quot;ascending&quot;}}, acceptable values:
** {{code|&quot;ascending&quot;}}
** {{code|&quot;descending&quot;}}
** {{code|&quot;ascend&quot;}}
** {{code|&quot;descend&quot;}}
** {{code|&quot;asc&quot;}}
** {{code|&quot;desc&quot;}}
** {{code|&quot;a&quot;}}
** {{code|&quot;d&quot;}}
* {{code|key1, ..., keyN}} - The keys in the [[JSON Object]]s contained within the [[JSON Array]] used for sorting. All [[JSON Object]]s must contain these fields.

|examples=
Sorting a [[JSON Array]] containing numbers.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[json.sort(&quot;[1,4,5,6,2,1,9,20,1]&quot;)]
&lt;/source&gt;

Produces {{code|[1,1,1,2,4,5,6,9,20]}}

Sorting a [[JSON Array]] containing strings.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[json.sort(&quot;['Hero', 'Dragon', 'Elf', 'Wolf', 'Mage', 'Eagle', 'Troll']&quot;)]
&lt;/source&gt;

Produces {{code|[&quot;Dragon&quot;,&quot;Eagle&quot;,&quot;Elf&quot;,&quot;Hero&quot;,&quot;Mage&quot;,&quot;Troll&quot;,&quot;Wolf&quot;]}}

Sorting a mixture of numbers and strings (all will be treated as string).
&lt;source lang=&quot;mtmacro&quot; line&gt;
[json.sort(&quot;['Hero', 3, 'Elf', 'Wolf', 100, 'Eagle', 'Troll']&quot;)]
&lt;/source&gt;

Produces {{code|[100,3,&quot;Eagle&quot;,&quot;Elf&quot;,&quot;Hero&quot;,&quot;Troll&quot;,&quot;Wolf&quot;]}}

Sorting objects by a single string key
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:vals = '[ {name:&quot;Hero&quot;, HP:10}, 
             {name:&quot;Wolf&quot;, HP:5}, 
             {name:&quot;Mage&quot;, HP:20}, 
             {name:&quot;Troll&quot;, HP:15}, 
             {name:&quot;Eagle&quot;, HP:5} ]'] 
[json.sort(vals, &quot;a&quot;, &quot;name&quot;)]
&lt;/source&gt;

Produces 

{{code|[{&quot;name&quot;:&quot;Eagle&quot;,&quot;HP&quot;:5},{&quot;name&quot;:&quot;Hero&quot;,&quot;HP&quot;:10},{&quot;name&quot;:&quot;Mage&quot;,&quot;HP&quot;:20},{&quot;name&quot;:&quot;Troll&quot;,&quot;HP&quot;:15},{&quot;name&quot;:&quot;Wolf&quot;,&quot;HP&quot;:5}]}}

Sorting objects by a single numeric key
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:vals = '[ {name:&quot;Hero&quot;, HP:10}, 
             {name:&quot;Wolf&quot;, HP:5}, 
             {name:&quot;Mage&quot;, HP:20}, 
             {name:&quot;Troll&quot;, HP:15}, 
             {name:&quot;Eagle&quot;, HP:5} ]'] 
[json.sort(vals, &quot;a&quot;, &quot;HP&quot;)]
&lt;/source&gt;

Produces 

{{code|[{&quot;name&quot;:&quot;Wolf&quot;,&quot;HP&quot;:5},{&quot;name&quot;:&quot;Eagle&quot;,&quot;HP&quot;:5},{&quot;name&quot;:&quot;Hero&quot;,&quot;HP&quot;:10},{&quot;name&quot;:&quot;Troll&quot;,&quot;HP&quot;:15},{&quot;name&quot;:&quot;Mage&quot;,&quot;HP&quot;:20}]}}

Sorting objects by a two keys, first HP then Name.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:vals = '[ {name:&quot;Hero&quot;, HP:10}, 
             {name:&quot;Wolf&quot;, HP:5}, 
             {name:&quot;Mage&quot;, HP:20}, 
             {name:&quot;Troll&quot;, HP:15}, 
             {name:&quot;Eagle&quot;, HP:5} ]'] 
[json.sort(vals, &quot;a&quot;, &quot;HP&quot;, &quot;name&quot;)]
&lt;/source&gt;

Produces 

{{code|[{&quot;name&quot;:&quot;Eagle&quot;,&quot;HP&quot;:5},{&quot;name&quot;:&quot;Wolf&quot;,&quot;HP&quot;:5},{&quot;name&quot;:&quot;Hero&quot;,&quot;HP&quot;:10},{&quot;name&quot;:&quot;Troll&quot;,&quot;HP&quot;:15},{&quot;name&quot;:&quot;Mage&quot;,&quot;HP&quot;:20}]}}

[[Category:JSON Function]]
}}</text>
      <sha1>b58819srfcw6hzhw3xyfswvv263yn1t</sha1>
    </revision>
  </page>
  <page>
    <title>json.shuffle</title>
    <ns>0</ns>
    <id>609</id>
    <revision>
      <id>1826</id>
      <timestamp>2009-03-09T21:19:16Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="276">{{stub}}
{{MacroFunction
|name=json.shuffle
|version=1.3b51
|description=
Randomly shuffles the values in a JSON array.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.shuffle(array)
&lt;/source&gt;
'''Parameters'''
* {{code|array}} - The array to shuffle.

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.reverse</title>
    <ns>0</ns>
    <id>610</id>
    <revision>
      <id>1827</id>
      <timestamp>2009-03-09T21:21:48Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="279">{{stub}}
{{MacroFunction
|name=json.reverse
|version=1.3b51
|description=
Reverses the order of a JSON array.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.reverse(array)
&lt;/source&gt;
'''Parameters'''
* {{code|array}} - The array to reverse the order of.

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.indent</title>
    <ns>0</ns>
    <id>611</id>
    <revision>
      <id>4878</id>
      <parentid>4877</parentid>
      <timestamp>2010-11-16T17:12:24Z</timestamp>
      <contributor>
        <username>Plothos</username>
        <id>6</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="535">{{stub}}
{{MacroFunction
|name=json.indent
|version=1.3b51
|description=
Outputs a JSON object in a nice format for debugging purposes.
Formatting will not appear unless the function is surrounded by the &quot;pre&quot; html tags, or some other method is used to preserve the formatting done by the function.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.indent(obj)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.indent(obj, spaces)
&lt;/source&gt;
'''Parameters'''
* {{code|obj}} - The object to indent.
* {{code|spaces}} - 

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getRawProperty</title>
    <ns>0</ns>
    <id>612</id>
    <revision>
      <id>6034</id>
      <parentid>2229</parentid>
      <timestamp>2012-11-20T18:44:17Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Token Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="578">{{stub}}
{{MacroFunction
|name=getRawProperty
|version=1.3b51
|description=
Gets the unevaluated value of a [[Token:token property|token property]], returns {{code|&quot;&quot;}} if the property is empty. This will not return the property's default value.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getRawProperty(prop)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getRawProperty(prop, id)
&lt;/source&gt;
'''Parameters'''
* {{code|prop}} - The name of the property to return.
* {{code|id}} - The id of the token to retrieve the property from.

}}
[[Category:Property Function]][[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getInitiativeToken</title>
    <ns>0</ns>
    <id>613</id>
    <revision>
      <id>1830</id>
      <timestamp>2009-03-09T21:39:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="262">{{stub}}
{{MacroFunction
|name=getInitiativeToken
|trusted=true
|version=1.3b51
|description=
Returns the id of the token that currently has the initiative.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getInitiativeToken()
&lt;/source&gt;

}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokenStates</title>
    <ns>0</ns>
    <id>614</id>
    <revision>
      <id>3325</id>
      <parentid>3035</parentid>
      <timestamp>2009-04-26T22:42:38Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1342">{{MacroFunction
|name=getTokenStates
|version=1.3b51
|description=
Returns the valid states in the campaign settings in either a [[String List]] or [[JSON Array]]. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenStates()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenStates(delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenStates(delim, groupName)
&lt;/source&gt;
'''Parameter'''
* {{code|delim}} - Specifies the delimiter used in the string list that is returned, defaultis {{code|&quot;,&quot;}}. If the value is set to {{code|json}}, the function returns a JSON array instead.
* {{code|groupName}} - Specifies the name of the group to get the states for. '''Note that if you wish to use the {{code|groupname}} parameter, you MUST set a delimiter.

|example=
To get a [[String List]] of the valid [[Token State]]s in the campaign.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: states = getTokenStates()]
&lt;/source&gt;

To get a [[JSON Array]] of the valid [[Token State]]s in the campaign.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: states = getTokenStates(&quot;json&quot;)]
&lt;/source&gt;

To get a [[JSON Array]] of the valid [[Token State]]s in the ''Damage'' group in the campaign in 1.3b55 or later.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: states = getTokenStates(&quot;json&quot;, &quot;Damage&quot;)]
&lt;/source&gt;



|changes=
* '''1.3b55''' - Added the {{code|groupName}} parameter.

}}
[[Category:State Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getDistance</title>
    <ns>0</ns>
    <id>615</id>
    <revision>
      <id>6352</id>
      <parentid>3056</parentid>
      <timestamp>2015-05-03T21:32:02Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2211">{{MacroFunction
|name=getDistance
|trusted=true
|version=1.3b51
|description=
Returns the distance between two tokens or objects. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDistance(target)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDistance(target, units)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDistance(target, units, source)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDistance(target, units, source, metric)
&lt;/source&gt;
'''Parameters'''
{{param|target|The id of the token that the distance is measured to.}}
{{param|units|If set to {{code|false}}({{code|0}}), the distance is given in cells, otherwise the default is to return the distance in Distance Per Cell units.}}
{{param|source|The id of the token to measure the distance from, the default is the current token.}}
{{param|metric|The movement metric to use which defaults to the movement metric in the users preferences, the metric can be one of the following strings}}
** {{code|NO_GRID}} - The grid is ignored and straight line distance between the tokens is returned.
** {{code|ONE_TWO_ONE}} - First Diagonal movement costs 1, second 2, and so on (Square grid only).
** {{code|ONE_ONE_ONE}} - Diagonal movement costs a single square (Square grid only).
** {{code|MANHATTAN}} - Diagonal movement costs 2 (Square grid only).
** {{code|NO_DIAGONALS}} - No diagonal movement is allowed (Square grid only).

|example=
To get the distance from the current token to the ''Altar''.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: dist = getDistance(&quot;Altar&quot;)]
&lt;/source&gt;

To get the distance between the ''Altar'' and the ''Sacrifice'' in the number of squares or hexes.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: dist = getDistance(&quot;Altar&quot;, 0, &quot;Sacrifice&quot;)]
&lt;/source&gt;

To get the distance between the ''Altar'' and the ''Sacrifice'' in ''map distance'' units.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: dist = getDistance(&quot;Altar&quot;, 1, &quot;Sacrifice&quot;)]
&lt;/source&gt;

To get the straight line distance between the ''Altar'' and the ''Sacrifice''.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: dist = getDistance(&quot;Altar&quot;, 1, &quot;Sacrifice&quot;, &quot;NO_GRID&quot;)]
&lt;/source&gt;

|also= {{func|getDistanceToXY}} {{func|getTokens}}
|changes=
{{change|1.3b55|Added the optional {{code|metric}} argument.}}
}}
[[Category:Distance Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Distance Function</title>
    <ns>14</ns>
    <id>616</id>
    <revision>
      <id>1833</id>
      <timestamp>2009-03-09T21:59:43Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getDistanceToXY</title>
    <ns>0</ns>
    <id>617</id>
    <revision>
      <id>3054</id>
      <parentid>3053</parentid>
      <timestamp>2009-04-14T07:18:50Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>Formating fixes</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2172">{{MacroFunction
|name=getDistanceToXY
|version=1.3b51
|description=
Gets the distance to a target grid cell.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDistanceToXY(x, y)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDistanceToXY(x, y, units)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDistanceToXY(x, y, units, source)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDistanceToXY(x, y, units, source, metric)
&lt;/source&gt;
'''Parameters'''
* {{code|x}} - The X coordinate of the target grid cell.
* {{code|y}} - The Y coordinate of the target grid cell.
* {{code|units}} - If set to {{code|false}}({{code|0}}) the distance is returned in cells. Default is returning Distance Per Cell units.
* {{code|source}} - The id of the token to measure the distance from. Default is the current token.
* {{param|metric|The movement metric to use which defaults to the movement metric in the users preferences, the metric can be one of the following strings}}
** {{code|NO_GRID}} - The grid is ignored and straight line distance between the tokens is returned.
** {{code|ONE_TWO_ONE}} - First Diagonal movement costs 1, second 2, and so on (Square grid only).
** {{code|ONE_ONE_ONE}} - Diagonal movement costs a single square (Square grid only).
** {{code|MANHATTAN}} - Diagonal movement costs 2 (Square grid only).
** {{code|NO_DIAGONALS}} - No diagonal movement is allowed (Square grid only).

|example=
To get the distance from the current token to 10,10.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: dist = getDistanceToXY(10, 10)]
&lt;/source&gt;

To get the distance between the ''Altar'' and 10, 10 in the number of squares or hexes.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: dist = getDistanceToXY(10, 10, 0, &quot;Altar&quot;)]
&lt;/source&gt;

To get the distance between the ''Altar'' and 10, 10 in ''map distance'' units.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: dist = getDistanceToXY(10, 10, 1, &quot;Altar&quot;)]
&lt;/source&gt;

To get the straight line distance between the ''Altar'' and 10, 10.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: dist = getDistanceToXY(10, 10, 1, &quot;Altar&quot;, &quot;NO_GRID&quot;)]
&lt;/source&gt;

|also=
{{func|getDistance}} {{func|getTokens}}

|changes=
{{change|1.3b55|Added the optional {{code|metric}} argument.}}
}}
[[Category:Distance Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokenX</title>
    <ns>0</ns>
    <id>618</id>
    <revision>
      <id>6335</id>
      <parentid>6334</parentid>
      <timestamp>2015-04-30T08:25:02Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2390">{{MacroFunction
|name=getTokenX
|version=1.3b51
|description=
Gets the X coordinate of a token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenX()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenX(units)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenX(units, id)
&lt;/source&gt;
'''Parameters'''
* {{code|units}} - If set to {{false}}, the coordinate is a location on the grid in number of ''cells''. Defaults to {{true}}, where the coordinate is in ''number of Pixels'' (in other words 0:distance in cells, 1: distance in pixels)'.
* {{code|id}} - The id of the token to move, defaults to the [[Current Token]].

'''Which coordinate is returned for tokens larger then one cell'''
{{ProposedChange|The {{mark}}marked exception will disappear.}}
* With the exception of {{mark}}one case the coordinates of the cell are given where the UPPER LEFT CORNER of the the image of the token is in at that moment. 
* {{mark}}The exception to this is when the token is 'Freesize' AND 'Snapped to Grid' AND '''NOT''' 'On Background Layer'. In that particular case the coordinates of the cell where the upper left corner of the FOOTPRINT (NOT image) of the token is at. The footprint can be recognized when you move the token on the Token layer, it will leave the white marker on the field. The footprint can be the same size as the image and it is if a preset size is used. With freesize however the size of the footprint is either the original size of the image OR when you have used a preset (e.g. 'large') it will have the size of the preset as footprint. 
* Note that if you rotate the image such that the image is no longer in the upper left corner, the upper left corner of its '''native position''' is still returned as its coordinate. 

|examples=
Moves the [[Current Token]] down {{code|5}} '''units''', and left {{code|10}} '''units'''.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: CurrentX = getTokenX()]
[h: CurrentY = getTokenY()]
[h: NewX = CurrentX + 5]
[h: NewY = CurrentY - 10]
[h: moveToken(NewX, NewY)]
&lt;/source&gt;

Moves the [[Current Token]] down {{code|5}} '''cells''', and left {{code|10}} '''cells'''.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: CurrentX = getTokenX(0)]
[h: CurrentY = getTokenY(0)]
[h: NewX = CurrentX + 5]
[h: NewY = CurrentY - 10]
[h: moveToken(NewX, NewY, 0)]
&lt;/source&gt;

|also=
{{func|moveToken}}, 
{{func|getTokenY}},
{{func|getZoom}},
{{func|setZoom}}.

}}
[[Category:Distance Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getDistanceToX</title>
    <ns>0</ns>
    <id>619</id>
    <redirect title="getTokenX" />
    <revision>
      <id>1837</id>
      <timestamp>2009-03-09T23:14:36Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[getDistanceToX]] moved to [[getTokenX]]: Wrong name.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[getTokenX]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokenY</title>
    <ns>0</ns>
    <id>620</id>
    <revision>
      <id>6342</id>
      <parentid>6156</parentid>
      <timestamp>2015-04-30T08:33:10Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2386">{{MacroFunction
|name=getTokenY
|version=1.3b51
|description=
Gets the Y coordinate for a token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenY()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenY(units)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenY(units, id)
&lt;/source&gt;
'''Parameters'''
* {{code|units}} - If set to {{false}}, the coordinate is a location on the grid in number of ''cells''. Defaults to {{true}}, where the coordinate is in ''number of Pixels'' (in other words 0:distance in cells, 1: distance in pixels)'.
* {{code|id}} - The id of the token to move, defaults to the [[Current Token]].

'''Which coordinate is returned for tokens larger then one cell'''
{{ProposedChange|The {{mark}}marked exception will disappear.}}
* With the exception of {{mark}}one case the coordinates of the cell are given where the UPPER LEFT CORNER of the image of the token is in at that moment. 
* {{mark}}The exception to this is when the token is 'Freesize' AND 'Snapped to Grid' AND '''NOT''' 'On Background Layer'. In that particular case the coordinates of the cell where the upper left corner of the FOOTPRINT (NOT image) of the token is at. The footprint can be recognized when you move the token on the Token layer, it will leave the white marker on the field. The footprint can be the same size as the image and it is if a preset size is used. With freesize however the size of the footprint is either the original size of the image OR when you have used a preset (e.g. 'large') it will have the size of the preset as footprint. 
* Note that if you rotate the image such that the image is no longer in the upper left corner, the upper left corner of its '''native position''' is still returned as its coordinate. 

|examples=
Moves the [[Current Token]] down {{code|5}} '''units''', and left {{code|10}} '''units'''.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: CurrentX = getTokenX()]
[h: CurrentY = getTokenY()]
[h: NewX = CurrentX + 5]
[h: NewY = CurrentY - 10]
[h: moveToken(NewX, NewY)]
&lt;/source&gt;

Moves the [[Current Token]] down {{code|5}} '''cells''', and left {{code|10}} '''cells'''.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: CurrentX = getTokenX(0)]
[h: CurrentY = getTokenY(0)]
[h: NewX = CurrentX + 5]
[h: NewY = CurrentY - 10]
[h: moveToken(NewX, NewY, 0)]
&lt;/source&gt;

|also=
{{func|moveToken}}, 
{{func|getTokenX}},
{{func|getZoom}},
{{func|setZoom}}.
}}
[[Category:Distance Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokenDrawOrder</title>
    <ns>0</ns>
    <id>621</id>
    <revision>
      <id>5095</id>
      <parentid>4686</parentid>
      <timestamp>2010-12-31T18:40:01Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>[[getDrawOrder]] moved to [[getTokenDrawOrder]]: Incorrect name</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="380">{{stub}}
{{MacroFunction
|name=getTokenDrawOrder
|version=1.3b51
|description=
Gets the draw order of a token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenDrawOrder()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenDrawOrder(id)
&lt;/source&gt;
'''Parameter'''
* {{code|id}} - The id of the token to get the draw order of, defaults to the current token.

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>moveToken</title>
    <ns>0</ns>
    <id>622</id>
    <revision>
      <id>7222</id>
      <parentid>6058</parentid>
      <timestamp>2019-03-07T04:38:42Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1332">{{MacroFunction
|name=moveToken
|version=1.3b51
|description=
Move a token to a new location.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
moveToken(x, y)
moveToken(x, y, units)
moveToken(x, y, units, id)
&lt;/source&gt;
'''Parameters'''
* {{code|x}} - The X coordinate to move the token to.
* {{code|y}} - The Y coordinate to move the token to.
* {{code|units}} - If set to {{false}}, the coordinates are a location on the grid in '''cells'''. Defaults to {{true}}, where the coordinates are in ''Distance Per Cell'' '''pixels'''.
* {{code|id}} - The id [[Macros:Variables:string|string]] of the token to move, defaults to the [[Current Token]].{{TrustedParameter}}
&amp;nbsp;
&lt;!-- The 'nbsp' is needed to close the DIV --&gt;
|examples=
Moves the [[Current Token]] down {{code|5}} '''units''', and left {{code|10}} '''units'''.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: CurrentX = getTokenX()]
[h: CurrentY = getTokenY()]
[h: NewX = CurrentX + 5]
[h: NewY = CurrentY - 10]
[h: moveToken(NewX, NewY)]
&lt;/source&gt;

Moves the [[Current Token]] down {{code|5}} '''cells''', and left {{code|10}} '''cells'''.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: CurrentX = getTokenX(0)]
[h: CurrentY = getTokenY(0)]
[h: NewX = CurrentX + 5]
[h: NewY = CurrentY - 10]
[h: moveToken(NewX, NewY, 0)]
&lt;/source&gt;

|also=
{{func|getTokenX}}, 
{{func|getTokenY}}

}}
[[Category:Token Function]]</text>
      <sha1>rer3n2pzrxi7qq7u0547lylo0h6cwau</sha1>
    </revision>
  </page>
  <page>
    <title>getMacroGroup</title>
    <ns>0</ns>
    <id>624</id>
    <revision>
      <id>1847</id>
      <parentid>1846</parentid>
      <timestamp>2009-03-10T06:16:09Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="824">{{stub}}
{{MacroFunction
|name=getMacroGroup
|trusted=true
|version=1.3b51
|description=
Gets the indexes of the macro buttons for the specified group.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroGroup(group)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroGroup(group, delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroGroup(group, delim, id)
&lt;/source&gt;
'''Parameters'''
* {{code|group}} - The name of the macro group to get the macro button indexes from.
* {{code|delim}} - The delimiter used in the string list returned, defaults to {{code|&quot;,&quot;}}. If set to {{code|json}}, then a JSON array is returned.
* {{code|id}} - The id of the token that the macro group is located on, defaults to the current token. If the id is not specified, this function does not require a Trusted Macro.

}}
[[Category:Metamacro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokenFacing</title>
    <ns>0</ns>
    <id>625</id>
    <revision>
      <id>1848</id>
      <timestamp>2009-03-10T06:21:52Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="493">{{stub}}
{{MacroFunction
|name=getTokenFacing
|trusted=true
|version=1.3b51
|description=
Gets the facing angle of the token, or {{code|&quot;&quot;}} if there is no facing.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenFacing()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenFacing(id)
&lt;/source&gt;
'''Parameters'''
* {{code|id}} - The id of the token to get the facing from, defaults to the current token. If this parameter is used, this function requires a trusted macro.

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setTokenFacing</title>
    <ns>0</ns>
    <id>626</id>
    <revision>
      <id>1851</id>
      <parentid>1849</parentid>
      <timestamp>2009-03-10T06:28:56Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="520">{{stub}}
{{MacroFunction
|name=setTokenFacing
|trusted=true
|version=1.3b51
|description=
Sets the facing angle of a token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenFacing(angle)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenFacing(angle, id)
&lt;/source&gt;
'''Parameters'''
* {{code|angle}} - The angle as which to set the facing.
* {{code|id}} - The id of the token to set the facing of, defaults to the current token. If this parameter is used, this function requires a trusted macro.

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>removeTokenFacing</title>
    <ns>0</ns>
    <id>627</id>
    <revision>
      <id>1850</id>
      <timestamp>2009-03-10T06:28:16Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="461">{{stub}}
{{MacroFunction
|name=removeTokenFacing
|trusted=true
|version=1.3b51
|description=
Removes the facing from a token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
removeTokenFacing()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
removeTokenFacing(id)
&lt;/source&gt;
'''Parameter'''
* {{code|id}} - The id of the token to remove the facing from, defaults to the current token. If a token is specified, this function requires a trusted macro.

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.isEmpty</title>
    <ns>0</ns>
    <id>628</id>
    <revision>
      <id>1852</id>
      <timestamp>2009-03-10T06:37:06Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="459">{{stub}}
{{MacroFunction
|name=json.isEmpty
|version=1.3b51
|description=
Checks to see if a JSON array, or JSON object is empty.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.isEmpty(variable)
&lt;/source&gt;
'''Parameters'''
* {{code|variable}} - The variable to test, if it contains an empty JSON array, JSON object, or an empty string it returns {{code|true}}({{code|1}}). In any other case it will return {{code|false}}({{code|0}}).

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.equals</title>
    <ns>0</ns>
    <id>629</id>
    <revision>
      <id>5842</id>
      <parentid>1853</parentid>
      <timestamp>2012-01-03T12:37:34Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="458">{{stub}}
{{MacroFunction
|name=json.equals
|version=1.3b51
|description=
Checks if two JSON arrays, or two JSON objects are equal.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.equals(array1, array2)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.equals(object1, object2)
&lt;/source&gt;
'''Parameters'''
* {{code|array1}} &amp; {{code|array2}} - The JSON arrays to compare.
* {{code|object1}} &amp; {{code|object2}} - The JSON objects to compare.

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.evaluate</title>
    <ns>0</ns>
    <id>630</id>
    <revision>
      <id>1854</id>
      <timestamp>2009-03-10T06:43:53Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="564">{{stub}}
{{MacroFunction
|name=json.evaluate
|trusted=true
|version=1.3b51
|description=
Traverses a JSON array or JSON object and evaluates any macro code or rolls contained within. All macro code and rolls are evaluated against the current token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.evaluate(array)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.evaluate(object)
&lt;/source&gt;
'''Parameters'''
* {{code|array}} - The JSON array which has its contents evaluated.
* {{code|object}} - The JSON object which has its contents evaluated.

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>defineFunction</title>
    <ns>0</ns>
    <id>631</id>
    <revision>
      <id>7005</id>
      <parentid>6855</parentid>
      <timestamp>2018-12-05T18:09:11Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2829">{{stub|Could use examples of the ignoreOutput and newScope parameters.}}
{{MacroFunction
|name=defineFunction
|trusted=true
|version=1.3b51
|description=
Defines a user function that can be used anywhere that core functions can be used. A user defined function is a link to another macro. A special macro labeled [[onCampaignLoad]] is useful for defining functions upon the loading of your campaign. This because the function will be defined AFTER the macro has been run. In case of [[onCampaignLoad]], that macro is always run when the campaign is loaded. This saves you the hassle of manually requiring to run this macro to enable the definition.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
defineFunction(function, macro)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
defineFunction(function, macro, ignoreOutput)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
defineFunction(function, macro, ignoreOutput, newScope)
&lt;/source&gt;
'''Parameters'''
{{param|function|The name of the user defined function to be defined. }}
{{param|macro|The name and location of the macro that is called when the user defined function is used.}}
{{param|ignoreOutput|If the defined function should ignore all output and only return the value of {{code|macro.return}}, defaults to {{false}}.}}
{{param|newScope|If the defined function should create a new variable scope when executed, defaults to {{true}}. A new variable scope means that the defined function can only read the variables of the macro that called it; if you do not create a new scope the defined function can read, update, and create variables in its parent's variable scope. Updating variables in the parent's scope includes over-writing any parameters that a parent might have stored within {{func|arg}}, if a user-defined function that does not create a new scope is called within another user-defined function.}}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: defineFunction(&quot;character.heal&quot;, &quot;heal@Lib:Character&quot;)]
&lt;/source&gt;

Defines a function {{code|character.heal()}} which calls {{code|heal@Lib:Character}} when evoked. Note that in this case there must exist a function called &quot;heal&quot; on a token called &quot;lib:Character&quot;. The advantage of using the prefix &quot;lib:&quot; on the token name is that it becomes a &quot;lib:token&quot; which is accessible from ANY map instead of only the map you happen to have active. 

Should you pass on any arguments e.g.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: character.heal(&quot;hello&quot;, &quot;hi&quot;)]
&lt;/source&gt;
then these parameters can be accessed inside {{code|character.heal()}} by using
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: firstArg = arg(0)]
[h: theOtherOne = arg(1)]
&lt;/source&gt;

|also=
{{func|oldFunction}}, 
{{func|arg}}, 
{{func|argCount}}, 
[[onCampaignLoad]]

|changes=
{{change|1.3b56|Added {{code|ignoreOutput}} and {{code|newScope}} parameter options.}}
}}

[[Category:User Defined Function]]</text>
      <sha1>ijsdw0cj3js3ysdw9nqed1x4xyrovnu</sha1>
    </revision>
  </page>
  <page>
    <title>isFunctionDefined</title>
    <ns>0</ns>
    <id>632</id>
    <revision>
      <id>4384</id>
      <parentid>4321</parentid>
      <timestamp>2010-09-02T09:10:18Z</timestamp>
      <contributor>
        <username>Hutchinsfairy</username>
        <id>225</id>
      </contributor>
      <minor/>
      <comment>typo</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="915">{{stub}}
{{MacroFunction
|name=isFunctionDefined
|version=1.3b51
|description=
Checks if a function has been defined using [[defineFunction|defineFunction()]]. Returns {{code|true}}({{code|1}}) if it has, or {{code|false}}({{code|0}}) if it has not.  Returns '2' if the entered function is a built-in MapTool function rather than a user-defined function.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
isFunctionDefined(name)
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: isFunctionDefined(&quot;fizzlegwip&quot;)]
&lt;/source&gt;
Returns 0.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: defineFunction(&quot;myNewFunction&quot;, &quot;myMacro@token&quot;)]
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: isFunctionDefined(&quot;myNewFunction&quot;)]
&lt;/source&gt;
Returns 1.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: isFunctionDefined(&quot;input&quot;)]
&lt;/source&gt;
Returns 2.

|also=
[[defineFunction|defineFunction()]], [[arg|arg()]], [[argCount|argCount()]]

}}
[[Category:User Defined Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>arg</title>
    <ns>0</ns>
    <id>633</id>
    <revision>
      <id>7190</id>
      <parentid>3092</parentid>
      <timestamp>2019-03-06T07:25:06Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1459">{{MacroFunction
|name=arg
|version=1.3b51
|description=
Is used to extract arguments that are passed to a macro when called as a user defined function.
User functions are defined with the [[defineFunction|defineFunction()]] function. Once you have defined a function you can
call it as you would call any of the existing functions, for example
{{code| attackRoll(Strength, -1)}}. The {{code|arg()}} function is used within the macro that is called to extract each
of these arguments. The index of the first argument is 0.


The [[argCount|{{code|argCount()}}]] function is often used in conjunction with {{code|arg()}} to determine the number 
of arguments that have been passed to the user defined function.


|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
arg(index)
&lt;/source&gt;
'''Parameters'''
* {{code|index}} - The index of the argument to return. Indexes begin at {{code|0}}.

|example=
Given a user defined function called {{code|attackRoll()}} which accepts two arguments, which are attribute value and 
bonus you could call it in the following way.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[attackRoll(12, -1)]
&lt;/source&gt;

Then inside the macro that implements the user defined function you can do the following.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: attr = arg(0)]
[h: bonus = arg(1)]
[r: 1d20 + floor(attr/2) + bonus]
&lt;/source&gt;

|also=
[[defineFunction|defineFunction()]], [[isFunctionDefined|isFunctionDefined()]], [[argCount|argCount()]]
}}
[[Category:User Defined Function]]</text>
      <sha1>pfijk1kw92ikmvdj49y7wz4uoydorqh</sha1>
    </revision>
  </page>
  <page>
    <title>argCount</title>
    <ns>0</ns>
    <id>634</id>
    <revision>
      <id>7191</id>
      <parentid>3093</parentid>
      <timestamp>2019-03-06T07:25:21Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1050">{{MacroFunction
|name=argCount
|version=1.3b51
|description=
Is used to determine the number of arguments that have been passed to a user defined function.
User functions are defined with the {{code|defineFunction()}}, once you have defined the function you can call it is you would
call any of the existing functions. You can then use the {{code|argCount()}} function to determine how many arguments were passed
when it was called.  

Once the number of arguments have been determined you can use [[arg|{{code|arg()}}]] to retrieve them.


|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
argCount()
&lt;/source&gt;


|example=
An example of a simple macro that would be defined as a user defined function. This function will add together 
all of the arguments that are passed to it.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: numArgs = argCount()]
[h: total = 0]
[h,count(numArgs): total = total + arg(roll.count)]
[r: total]
&lt;/source&gt;


|also=
[[defineFunction|defineFunction()]], [[isFunctionDefined|isFunctionDefined()]], [[arg|arg()]]
}}
[[Category:User Defined Function]]</text>
      <sha1>3vxkfgcynjixwe6kyk2ci4h257jurit</sha1>
    </revision>
  </page>
  <page>
    <title>goto</title>
    <ns>0</ns>
    <id>635</id>
    <revision>
      <id>6339</id>
      <parentid>1862</parentid>
      <timestamp>2015-04-30T08:30:53Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="577">{{stub}}
{{MacroFunction
|name=goto
|version=1.3b51
|description=
Centers the map on a token, or on a specified grid cell.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
goto(token)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
goto(x, y)
&lt;/source&gt;
'''Parameters'''
* {{code|token}} - The id of the token to center the map to.
* {{code|x}} - The X coordinate of the grid cell to center the map to.
* {{code|y}} - The Y coordinate of the grid cell to center the map to.

|also=
{{func|moveToken}}, 
{{func|getTokenY}},
{{func|getZoom}},
{{func|setZoom}}.

}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getStateImage</title>
    <ns>0</ns>
    <id>636</id>
    <revision>
      <id>2327</id>
      <parentid>2326</parentid>
      <timestamp>2009-03-25T14:08:51Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="722">{{stub}}
{{MacroFunction
|name=getStateImage
|version=1.3b40
|description=
Gets the [[Asset ID|asset id]] for the image of a state, the state must be one of the image types for this to work.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getStateImage(state)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getStateImage(state, size)
&lt;/source&gt;
'''Parameters'''
* {{code|state}} - The name of the state which has its image asset returned.
* {{code|size}} - The size that the state image will be resized to; this is the height of the final size.

|example=
To display the image for the &quot;Dead&quot; [[Token:state | token state]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;img src='[r:getStateImage(&quot;Dead&quot;)]'&gt;&lt;/img&gt;
&lt;/source&gt;

}}
[[Category:State Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokenHalo</title>
    <ns>0</ns>
    <id>637</id>
    <revision>
      <id>2115</id>
      <parentid>1868</parentid>
      <timestamp>2009-03-13T02:47:14Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="236">{{MacroFunction
|name=getTokenHalo
|deprecated=[[getHalo|getHalo()]]
|version=1.3b40
|description=
Gets the hex color code of a token's halo.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenHalo()
&lt;/source&gt;

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:Deprecated</title>
    <ns>10</ns>
    <id>638</id>
    <revision>
      <id>7101</id>
      <parentid>5660</parentid>
      <timestamp>2019-02-20T05:01:12Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="306">&lt;div class=&quot;template_deprecated&quot;&gt;
&lt;p style=&quot;background-color: #CC6600; color: #FFFFFF; font-weight: bold&quot;&gt;
&amp;nbsp;Note: This function has been deprecated. Refer to {{{1}}} for current functionality.
&lt;/p&gt;
&lt;/div&gt;
&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;
&lt;includeonly&gt;[[Category:Deprecated]]&lt;/includeonly&gt;</text>
      <sha1>3yskchmdnoftzh4fm81nq6nto663h44</sha1>
    </revision>
  </page>
  <page>
    <title>getTokenLabel</title>
    <ns>0</ns>
    <id>639</id>
    <revision>
      <id>2113</id>
      <parentid>1869</parentid>
      <timestamp>2009-03-13T02:45:08Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="234">{{MacroFunction
|name=getTokenLabel
|deprecated=[[getLabel|getLabel()]]
|version=1.3b40
|description=
Gets the label of the current token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenLabel()
&lt;/source&gt;

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setTokenLabel</title>
    <ns>0</ns>
    <id>640</id>
    <revision>
      <id>2116</id>
      <parentid>1870</parentid>
      <timestamp>2009-03-13T02:47:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="332">{{MacroFunction
|name=setTokenLabel
|deprecated=[[setLabel|setLabel()]]
|version=1.3b40
|description=
Sets the label for the current token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenLabel(label)
&lt;/source&gt;
'''Parameters'''
* {{code|label}} - This is the label you wish to set on the current token.

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getTokenGMName</title>
    <ns>0</ns>
    <id>641</id>
    <revision>
      <id>2117</id>
      <parentid>1874</parentid>
      <timestamp>2009-03-13T02:48:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="254">{{MacroFunction
|name=getTokenGMName
|deprecated=[[getGMName|getGMName()]]
|trusted=true
|version=1.3b40
|description=
Gets the GM Name of the current token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenGMName()
&lt;/source&gt;

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setTokenGMName</title>
    <ns>0</ns>
    <id>642</id>
    <revision>
      <id>2118</id>
      <parentid>1873</parentid>
      <timestamp>2009-03-13T02:48:35Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="346">{{MacroFunction
|name=setTokenGMName
|deprecated=[[setGMName|setGMName()]]
|trusted=true
|version=1.3b40
|description=
Sets the GM Name of the current token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenGMName(name)
&lt;/source&gt;
'''Parameters'''
* {{code|name}} - The name to set as the GM Name on the current token.

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:true</title>
    <ns>10</ns>
    <id>643</id>
    <revision>
      <id>3198</id>
      <parentid>1882</parentid>
      <timestamp>2009-04-17T16:19:16Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to templates category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="70">{{code|true}}({{code|1}})&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:false</title>
    <ns>10</ns>
    <id>644</id>
    <revision>
      <id>3193</id>
      <parentid>1883</parentid>
      <timestamp>2009-04-17T16:15:49Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to templates category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="71">{{code|false}}({{code|0}})&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:change</title>
    <ns>10</ns>
    <id>645</id>
    <revision>
      <id>7111</id>
      <parentid>7110</parentid>
      <timestamp>2019-02-20T05:26:22Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="70">* '''{{{1}}}''' - {{{2}}}&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1>aivy4xrzurosjig5xamu293j7761czt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:param</title>
    <ns>10</ns>
    <id>646</id>
    <revision>
      <id>3196</id>
      <parentid>1912</parentid>
      <timestamp>2009-04-17T16:17:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to templates category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="73">* {{code|{{{1}}}}} - {{{2}}}&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>table (function)</title>
    <ns>0</ns>
    <id>647</id>
    <redirect title="table" />
    <revision>
      <id>2021</id>
      <timestamp>2009-03-10T22:03:36Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[table (function)]] moved to [[table]]: I initially named this 'table (function)' because I thought it would conflict with the sort of table that this function rolls on, but that panel is labeled 'Tables' and a 'Table' could be delegated to a glossary en</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[table]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>h (roll option)</title>
    <ns>0</ns>
    <id>648</id>
    <redirect title="hidden (roll option)" />
    <revision>
      <id>2955</id>
      <parentid>2032</parentid>
      <timestamp>2009-04-05T04:20:28Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[hidden (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="92">#REDIRECT [[hidden (roll option)]]
[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Roll Option</title>
    <ns>14</ns>
    <id>649</id>
    <revision>
      <id>2028</id>
      <timestamp>2009-03-10T22:09:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>New page: [[Category:Macro]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">[[Category:Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Display Roll Option</title>
    <ns>14</ns>
    <id>650</id>
    <revision>
      <id>2029</id>
      <timestamp>2009-03-10T22:09:58Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>New page: [[Category:Roll Option]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">[[Category:Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>hide (roll option)</title>
    <ns>0</ns>
    <id>651</id>
    <redirect title="hidden (roll option)" />
    <revision>
      <id>2956</id>
      <parentid>2034</parentid>
      <timestamp>2009-04-05T04:20:59Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[hidden (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="92">#REDIRECT [[hidden (roll option)]]
[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>hidden (roll option)</title>
    <ns>0</ns>
    <id>652</id>
    <revision>
      <id>3963</id>
      <parentid>2954</parentid>
      <timestamp>2009-10-10T04:17:47Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Updates related to new output roll options in 1.3.b58</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="561">{{stub}}
===[ ] Hidden Rolls===
'''[h: ]''', '''[hide: ]''', '''[hidden: ]''' evaluates the text after the ':' but completely discards the output. This is useful for setting variables or other similar tasks where you want to change something but not display any output. Prior to 1.3.b58, [h: 2 + 2] would display.

[[Image:2Plus2Hidden.png]]

Starting with 1.3.b58, completely invisible messages, such as the result of [h: 2 + 2], are suppressed, so you see no output at all instead of a blank message.

[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>h</title>
    <ns>0</ns>
    <id>653</id>
    <redirect title="hidden (roll option)" />
    <revision>
      <id>2068</id>
      <parentid>2033</parentid>
      <timestamp>2009-03-11T01:12:31Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Updated redirect.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[hidden (roll option)]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>hide</title>
    <ns>0</ns>
    <id>654</id>
    <redirect title="hidden (roll option)" />
    <revision>
      <id>2530</id>
      <parentid>2035</parentid>
      <timestamp>2009-04-01T02:40:33Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Corrected redirect.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[hidden (roll option)]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>hidden</title>
    <ns>0</ns>
    <id>655</id>
    <redirect title="hidden (roll option)" />
    <revision>
      <id>2037</id>
      <timestamp>2009-03-10T22:13:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[hidden]] moved to [[hidden (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[hidden (roll option)]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>e (roll option)</title>
    <ns>0</ns>
    <id>656</id>
    <redirect title="expanded (roll option)" />
    <revision>
      <id>2957</id>
      <parentid>2038</parentid>
      <timestamp>2009-04-05T04:21:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[expanded (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="94">#REDIRECT [[expanded (roll option)]]
[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>expanded (roll option)</title>
    <ns>0</ns>
    <id>657</id>
    <revision>
      <id>2958</id>
      <parentid>2039</parentid>
      <timestamp>2009-04-05T04:22:13Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="267">{{stub}}
===[ ] Expanded Rolls===
'''[e: ]''', '''[expanded: ]''' evaluates the text after the ':' and displays the detailed output of the evaluation. [e: 2 + 2 ] would display.


[[Image:2Plus2Expanded.png]]

[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>r (roll option)</title>
    <ns>0</ns>
    <id>658</id>
    <redirect title="result (roll option)" />
    <revision>
      <id>2959</id>
      <parentid>2040</parentid>
      <timestamp>2009-04-05T04:22:52Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[result (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="92">#REDIRECT [[result (roll option)]]
[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>result (roll option)</title>
    <ns>0</ns>
    <id>659</id>
    <revision>
      <id>2960</id>
      <parentid>2041</parentid>
      <timestamp>2009-04-05T04:23:14Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="311">{{stub}}
===[ ] Result Rolls===
'''[r: ]''', '''[result: ]''' evaluates the text after the ':' and displays the plain output without any formatting or tool tips, the result is the same as using { }. [r: 2 + 2] would display.

[[Image:2Plus2Result.png]]

[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>u (roll option)</title>
    <ns>0</ns>
    <id>660</id>
    <redirect title="unformatted (roll option)" />
    <revision>
      <id>2961</id>
      <parentid>2042</parentid>
      <timestamp>2009-04-05T04:24:02Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[unformatted (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="97">#REDIRECT [[unformatted (roll option)]]
[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>unformatted (roll option)</title>
    <ns>0</ns>
    <id>661</id>
    <revision>
      <id>2962</id>
      <parentid>2043</parentid>
      <timestamp>2009-04-05T04:24:27Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="287">{{stub}}
===[ ] Unformatted Rolls===
'''[u: ]''', '''[unformatted: ]''' evaluates the text after the ':' and displays the detailed output without coloring or tool tips. [u: 2 + 2 ] would display.

[[Image:2Plus2Unformatted.png]]

[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>t (roll option)</title>
    <ns>0</ns>
    <id>662</id>
    <redirect title="tooltip (roll option)" />
    <revision>
      <id>2963</id>
      <parentid>2044</parentid>
      <timestamp>2009-04-05T04:25:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[tooltip (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="93">#REDIRECT [[tooltip (roll option)]]
[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>tooltip (roll option)</title>
    <ns>0</ns>
    <id>663</id>
    <revision>
      <id>2964</id>
      <parentid>2045</parentid>
      <timestamp>2009-04-05T04:25:43Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="626">{{stub}}
===[ ] Tool Tip Rolls===
'''[t: ]''', '''[tooltip: ]''' evaluates the text after the ':' and displays the result with a tool tip that displays the details of the evaluation -- the tool tip can be displayed by leaving the mouse pointer over the result. For example [t: 2 + 2] produces.

[[Image:2Plus2T.png]]

You can also specify an argument for the tooltip option. If you specify an argument then this argument is evaluated and displayed, the text after the ':' is evaluated and used as the tool tip. [t(&quot;four&quot;): 2 + 2] produces.

[[Image:2Plus2T-Four.png]]

[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>if (roll option)</title>
    <ns>0</ns>
    <id>664</id>
    <revision>
      <id>6025</id>
      <parentid>6023</parentid>
      <timestamp>2012-10-18T12:22:04Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Tweaking page layout and typography</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3470">{{RollOption
|name=if
|version=1.3b46
|description=
Branches the flow of the roll as determined by the condition.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[if(condition): true_body]
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[if(condition): true_body; false_body]
&lt;/source&gt;
'''Parameters'''
{{param|condition|The condition/s to check to determine which roll ({{code|true_body}} or {{code|false_body}}) is executed, if any. The condition/s can only contain one level of nested parenthesis.}}
{{param|true_body|The roll that is executed if the {{code|condition}} evaluates to {{true}}. To use complex rolls in the {{code|true_body}}, you must use the {{roll|code}} roll option in conjunction with this roll option.}}
{{param|false_body|The roll that is executed if the {{code|condition}} evaluates to {{false}}. If no {{code|false_body}} is given, there is no output if the {{code|condition}} evaluates to {{false}}. To use complex rolls in the {{code|false_body}}, you must use the {{roll|code}} roll option in conjunction with this roll option.}}
'''Operators'''&lt;br&gt;
Operators are used to compare two variables, strings, literal numbers, expressions, or function outputs within a {{code|condition}}.&lt;br&gt;

''Conditional Operators:''
* {{code|&gt;}} - Greater than
* {{code|&lt;}} - Less than
* {{code|&gt;{{=}}}} - Greater than or equal to
* {{code|&lt;{{=}}}} - Less than or equal to
* {{code|{{=}}{{=}}}} - Equal to
* {{code|!{{=}}}} or {{code|ne}} - Not equal
''Logical Operators:''
* {{code|&amp;&amp;}} - And
* {{code|{{!}}{{!}}}} - Or
''Boolean Operators:''
* {{code|true}}
* {{code|false}}
* {{code|!}} - Not
It is important to note that the ''Equal to'' condition operator must be two equal signs ({{code|{{=}}{{=}}}}). If you are checking for a text string, place quotes around the text.

====-- Known Problems====
* '''Number of () levels'''
The {{code|[if():]}} doesn't allow more than one level of {{code|()}}. So, 

&lt;source lang=&quot;mtmacro&quot; line&gt;
[R, if(((1))): &quot;true&quot;;&quot;false&quot;]
&lt;/source&gt;

will give an error.&lt;br&gt;

* '''Help! There are ' ' in the output'''
Note that currently
&lt;source lang=&quot;mtmacro&quot;&gt;[r,if(val == something),CODE:{Print something}]&lt;/source&gt;
will produce extraneous single quotes in the output when the condition is false.
The workaround for this is to add an empty block for the false side:
&lt;source lang=&quot;mtmacro&quot;&gt;[r,if(val == something),CODE:{Print something};{}]&lt;/source&gt;

|example=
Sets the variable {{code|newVal}} to {{code|12*12}} if the variable {{code|val}} equals {{code|12}}.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:val=12]
[h,if(val == 12): newVal=12*12]
New Value = [r: newVal]
&lt;/source&gt;
Returns {{code|New Value {{=}} 144}}

Example with logical operators:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h,if((val &gt; 12 &amp;&amp; val &lt; 24) || val == 5): val=1 ; val=0]
&lt;/source&gt;

These examples perform the same function. If {{code|val}} is not a number, make {{code|val}} equal {{code|0}}.  
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h, if (! isNumber(val)): val = 0)]
&lt;/source&gt;&lt;source lang=&quot;mtmacro&quot; line&gt;
[h, if (isNumber(val) == 0): val = 0)]
&lt;/source&gt;&lt;source lang=&quot;mtmacro&quot; line&gt;
[h, if (isNumber(val) == false): val = 0)]
&lt;/source&gt;

The following will generate an error:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h,if(getName(getSelected()) == &quot;Giant Rat&quot;): val=1]  --- ERROR, too many parenthesis on condition!
[h,if(getName() == &quot;Giant Rat&quot;)): val=1] ---  This is OK.
&lt;/source&gt;

|also=
{{func|if}},
{{func|isNumber}},  
{{roll|code}},
[[Introduction to Macro Branching]]
}}
[[Category:Branching Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>switch (roll option)</title>
    <ns>0</ns>
    <id>665</id>
    <revision>
      <id>6200</id>
      <parentid>6061</parentid>
      <timestamp>2013-09-24T10:34:11Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2880">{{RollOption
|name=switch
|version=1.3b46
|description=
Chooses among several options and executes code based on the expression.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[switch(expression):
   case case1: body1;
   case case2: body2;
   default: defaultBody
]
&lt;/source&gt;
'''Parameters'''
{{param|expression|The ''regular expression'' that determines which case is executed. Since this is a ''regular expression'', metacharacters such as {{code|*}} and {{code|()}} will need to have backslashes in front of them if you want to match them literally.}}
{{param|case|A potential match for the {{code|expression}}, possesses a corresponding  {{code|body}} that is executed if a match is made.}}
{{param|default|If the {{code|expression}} finds no matches within the {{code|case}}s, then the {{code|defaultBody}} is executed.}}
'''Notes''' 
* the {{code|case}} and {{code|default}} statements are the only case-sensitive statements in MapTool, thus {{code|CASE}} or {{code|Default}} will NOT work!
* strings in the {{code|case}} MUST be surrounded by &quot;double quotes&quot; as 'single quotes' will generate an error.

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:powerType=&quot;at-will&quot;]
[switch(powerType):
case &quot;at-will&quot;: &quot;You may use this power as much as you like&quot;;
case &quot;encounter&quot;: &quot;You may only use this power once per encounter&quot;;
case &quot;daily&quot;: &quot;You may only use this power once per day&quot;]
&lt;/source&gt;
Outputs:
 You may use this power as much as you like


&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:powerType=&quot;.*sword.*&quot;]
[switch(powerType):
case &quot;flail&quot;: &quot;one-handed weapon; two-handed does Str*2 damage&quot;;
case &quot;shortsword&quot;: &quot;used for jabs, so is a puncturing weapon&quot;;
case &quot;longsword&quot;: &quot;a slashing weapon&quot;]
&lt;/source&gt;
Outputs:
 used for jabs, so is a puncturing weapon
Notice that the first matching clause was the one that the {{roll|switch}} option found.

another example
&lt;source lang=&quot;mtmacro&quot; line&gt;
[abort(input(&quot;number|0|enter a number&quot;))]
[switch(number):
	case 0: &quot;you did not enter a number&quot;;
	case 1: &quot;you entered 1 as a number&quot;;
	case 2: &quot;you entered 2 as a number&quot;;
	default: &quot;you entered a number not equal to 1 or 2&quot;
]
&lt;/source&gt;

When using the {{roll|code}} option with a {{code|switch}} option, each {{code|case}} body has its own set of braces, like so:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h,switch(class),code:
case &quot;Warrior&quot;: {
  [Armor = 6]
  [beginningPowers = &quot;Sword, Shield Bash, Bow, Shield, Torch&quot;]
};
case &quot;Rogue&quot;: {
  [Armor = 2]
  [beginningPowers = &quot;Dagger, Hide, Backstab, Pick Lock, Torch&quot;]
};
case &quot;Wizard&quot;: {
  [Armor = 1]
  [beginningPowers = &quot;Dagger, Staff, Light, Lightning Bolt, Fire Ball&quot;]
};
case &quot;Priest&quot;: {
  [Armor = 4]
  [beginningPowers = &quot;Mace, Heal, Protect, Banish Undead, Torch&quot;]
};
default: {
  [Armor = 0]
  [beginningPowers = &quot;Fists, Feet&quot;]
}]
&lt;/source&gt;

|also=
{{func|if}}, 
{{roll|if}},
[[Introduction to Macro Branching]]
}}
[[Category:Branching Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>macro (roll option)</title>
    <ns>0</ns>
    <id>666</id>
    <revision>
      <id>6297</id>
      <parentid>4573</parentid>
      <timestamp>2014-07-29T08:21:30Z</timestamp>
      <contributor>
        <username>Bubblobill</username>
        <id>150</id>
      </contributor>
      <comment>Added macro locations campaign &amp; global. Updated Lib location with prefix</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6001">{{RollOption
|name=macro
|version=1.3b46
|description=
Runs the named macro, returning its output in the form of the [[macro.return]] special variable.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[macro(&quot;macro_name@location&quot;): macro_arguments]
&lt;/source&gt;
'''Parameters'''
{{param|macro_name|The name of the macro button that is run.}}
{{param|location|The location of the macro button that is run.}}
{{param|macro_arguments|Sent to the called macro in the form of the [[macro.args]] special variable.}}
'''Location Requirements'''

The {{code|location}} can be one of the following:
* {{code|TOKEN}} - The currently impersonated token (use the word {{code|TOKEN}}, not the token's name).
* {{code|campaign}}
* {{code|global}}
* {{code|Lib:*}} Library Token - A [[Library Token]] in the current campaign.
* {{code|this}} - If the macro is calling another macro on the same [[Library Token]], {{code|this}} may be used instead of retyping the full [[Library Token]] name.
'''Notes'''

When a token macro calls another macro, the macro instructions in the ''called'' macro are executed against the ''calling'' token (in other words, the macro uses properties available on the calling token and applies all results to that token), unless the focus is explicitly changed to another token via either a roll option, or the {{func|switchToken}} function, or the {{func|getLibProperty}} function within the ''called'' macro. This applies even if the [[Current Token]] was explicitly changed prior to using the {{roll|macro}} roll option.

Also- as of at least 1.3.b50- a variable must be given for {{code|macro_arguments}}, or the ''&quot;Could not execute the command: Undefined function: MACRO&quot;'' error will result.  However, the variable given as {{code|macro_arguments}} doesn't have to be used, and can be set to an empty string ({{code|&quot;&quot;}}).

This roll option may not interact with other roll options the way you expect.  For example:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[if(Condition),MACRO(&quot;getDamage@Lib:combat&quot;): damageRoll]
&lt;/source&gt;

{{code|getDamage}} gets executed regardless of the value of {{code|Condition}}.  However, if {{code|Condition}} is not true, the arguments to the macro will be empty instead of containing {{code|damageRoll}}.  You probably want:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[if(Condition): evalMacro('[MACRO(&quot;getDamage@Lib:combat&quot;): damageRoll]')]
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[MACRO(&quot;getDamage@Lib:combat&quot;): damageRoll]
&lt;/source&gt;
Calls the macro {{code|getDamage}} which resides on a [[Library Token]] called {{code|Lib:combat}}, and passes the variable {{code|damageRoll}} as an argument to the called macro. 

'''Passing multiple arguments to a called macro'''

Note that only one variable can be passed to the called macro.  To pass multiple values, you must &quot;package&quot; them into a format that can be stored in a single variable to be passed to the called macro, and then unpackaged appropriately to recover local variables used in the called macro.  [[JSON Object]]s and [[JSON Array]]s work very well for this purpose (although string lists and StrProps can also serve this purpose, they have more limitations and are less recommended).  For example, multiple values can be stored into a json array, which becomes the argument passed in the macro call:

'''Using a [[JSON Array]] to pass multiple values (order matters, names do not)'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[ variable1 = &quot;hello&quot; ]
[ variable2 = &quot;world&quot; ]
[ passedVars = json.append( &quot;&quot;, variable1, variable2 )] &lt;!-- package up variables into a json array to be passed to called macro --&gt;
[MACRO(&quot;calledMacro@this&quot;): passedVars ] &lt;!-- macro call, with values being passed --&gt;
[ resultVar = macro.return ]  &lt;!-- this is what you get back from the called macro --&gt;
&lt;/source&gt;
Within the &quot;called macro&quot;, the [[macro.args]] (macro arguments) must be unpackaged to recover the values stored in the array:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[ var1 = json.get( macro.args, 0 )]
[ var2 = json.get( macro.args, 1 )]
&lt;!-- do stuff with your new variables --&gt;
[ macro.return = var1 +&quot; &quot;+ var2 ] &lt;!-- this is what you can send back to the calling macro (can also be another JSON Object or array --&gt;
&lt;/source&gt;
Note that using a [[JSON Array]] to pass &amp; unpack values, rather than a [[JSON Object]], has the added advantage that if the called macro is also a [[user defined function]] (see [[defineFunction]]), the exact same commands given in the example above can be used to separate individual arguments passed in the calling &quot;function&quot;, since function arguments are automatically bundled into a [[JSON Array]] and passed to the [[macro.args]] special variable.

'''Using a [[JSON Object]] to pass multiple values (names matter, order does not)'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[ variable1 = &quot;hello&quot; ]
[ variable2 = &quot;world&quot; ]
[ passedVars = json.set( &quot;{}&quot;, &quot;variable2&quot;, variable2, &quot;variable1&quot;, variable1 )] &lt;!-- package up variables into a json array to be passed to called macro.  Note that the order here does not matter, but the labels in quotes are needed to be able to retrieve the correct values in the called macro --&gt;
[MACRO(&quot;calledMacro@this&quot;): passedVars ] &lt;!-- macro call, with values being passed --&gt;
[ resultVar = macro.return ]  &lt;!-- this is what you get back from the called macro --&gt;
&lt;/source&gt;
Within the &quot;called macro&quot;, the [[macro.args]] (macro arguments) must be unpackaged to recover the values stored in the array:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[ var1 = json.get( macro.args, &quot;variable1&quot; )]&lt;!-- actually the second label / value pair in the object --&gt; 
[ var2 = json.get( macro.args, &quot;variable2&quot; )]&lt;!-- the order does not matter, but the label must be accurate to retrieve the correct value --&gt;
&lt;!-- do stuff with your new variables --&gt;
[ macro.return = var1 +&quot; &quot;+ var2 ] &lt;!-- this is what you can send back to the calling macro (can also be another JSON Object or array --&gt;
&lt;/source&gt;


|also=
[[macro.args]], 
[[macro.return]],
[[defineFunction]],
[[More Branching Options]]
}}
[[Category:Branching Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Branching Roll Option</title>
    <ns>14</ns>
    <id>667</id>
    <revision>
      <id>2049</id>
      <timestamp>2009-03-10T22:27:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Roll Option]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">[[Category:Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>count (roll option)</title>
    <ns>0</ns>
    <id>668</id>
    <revision>
      <id>6355</id>
      <parentid>6007</parentid>
      <timestamp>2015-05-26T00:48:13Z</timestamp>
      <contributor>
        <username>Bubblobill</username>
        <id>150</id>
      </contributor>
      <minor/>
      <comment>spelling correction</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1087">{{stub}}
===COUNT Option===

'''Introduced''': Version 1.3.b41

The COUNT option executes a statement for a specified number of times, storing the number of the current iteration in a variable called ''[[Macros:Special_Variables:roll.count|roll.count]]''. 

====Usage====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[COUNT(num): body]
[COUNT(num, separator): body]
&lt;/source&gt;

The ''[[roll.count]]'' variable will take on values from {{code|0}} to ({{code|number of loops - 1}}). The optional separator (default {{code|&quot;,&quot;}}) is printed between each iteration. Some examples of other useful separators: ''nothing'' {{code|&quot;&quot;}}, ''space'' {{code|&quot; &quot;}} and ''break'' {{code|&quot;&amp;lt;br&gt;&quot;}}.

====Example====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:numHits=3]
[COUNT(numHits): Damage = Damage + 1d12]
&lt;/source&gt;

This will iterate the {{code|Damage {{=}} Damage + 1d12}} operation 3 times, separating the result of each iteration with the default separator (a comma). An optional second argument to {{code|COUNT()}} allows the setting of a different separator.

[[Category:Roll Option]]
[[Category:Looping Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>for (roll option)</title>
    <ns>0</ns>
    <id>669</id>
    <revision>
      <id>6006</id>
      <parentid>5939</parentid>
      <timestamp>2012-10-04T07:30:37Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Typographical tweaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1755">{{stub}}
{{RollOption
|name=for
|version=1.3.b46
|description=Executes a statement for a number of iterations based on a start and end value.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[for(var, start, end): body]
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[for(var, start, end, stepsize): body]
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[for(var, start, end, stepsize, separator): body]
&lt;/source&gt;
'''Parameters'''&lt;br&gt;
The {{code|var}} variable counts from {{code|start}} towards {{code|end}} during the loop, and the optional {{code|stepsize}} (default {{code|+1}}) is added to {{code|var}} at each iteration.  Note that in the standard incrementing usage with a {{code|stepsize}} of {{code|1}}, the {{code|body}} does not execute when {{code|var}} reaches {{code|end}}. &lt;br&gt;
Note that {{code|stepsize}} must be integer and not 0. Floating values will be rounded down.&lt;br&gt;
{{code|list_separator}} default value is {{code|&quot;,&quot;}}. Some examples of other useful separators: ''nothing'' {{code|&quot;&quot;}}, ''space'' {{code|&quot; &quot;}} and ''break'' {{code|&quot;&amp;lt;br&gt;&quot;}}.


|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[for(i,0,10): &quot;i is now &quot; + i]
&lt;/source&gt;
Counts up from 0 to 9.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[for(i,10,0,-2): &quot;i is now &quot; + i]
&lt;/source&gt;
Counts down even numbers from 10 to 0.

|also=
{{roll|foreach}},
[[Introduction to Macro Loops]]

|changes=
{{change|1.3b54|Changed the comparison operator when comparing the {{code|var}} to {{code|end}} when determining whether to continue executing a new iteration.  In version 1.3b53 and earlier, on each iteration it compared if {{code|var}} was less than or equal to {{code|end}}.  As of version 1.3b54, it is now comparing if {{code|var}} is less than {{code|end}}.}}
}}
[[Category:Roll Option]]
[[Category:Looping Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Looping Roll Option</title>
    <ns>14</ns>
    <id>670</id>
    <revision>
      <id>2052</id>
      <timestamp>2009-03-10T23:23:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Roll Option]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">[[Category:Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>foreach (roll option)</title>
    <ns>0</ns>
    <id>671</id>
    <revision>
      <id>6005</id>
      <parentid>5938</parentid>
      <timestamp>2012-10-04T07:21:33Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Tweaking typography and link handling</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2882">===FOREACH Option===

'''Introduced''': Version 1.3.b46

Iterates over the contents of a string list in the format {{code|&quot;item1, item2, item3&quot;}}.
Can also be used easily with [[Introduction_to_JSON_Datatypes|JSON arrays and JSON objects]].
[[String Property List]]s can be processed with a couple of extra functions.

====Usage====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[FOREACH(var, list): body]
[FOREACH(var, list, output_separator): body]
[FOREACH(var, list, output_separator, list_separator): body]
&lt;/source&gt;

{{code|output_separator}} default value is {{code|null}}&lt;br&gt;
{{code|list_separator}} default value is {{code|&quot;,&quot;}}. Some examples of other useful separators: ''nothing'' {{code|&quot;&quot;}}, ''space'' {{code|&quot; &quot;}} and ''break'' {{code|&quot;&amp;lt;br&gt;&quot;}}.

===Examples===
====String List Example====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: enemyList=&quot;Orcs, Goblins, Ogres, Trolls&quot;]
[FOREACH(enemy, enemyList, &quot;&lt;br&gt;&quot;): &quot;You really hate &quot; + enemy]
&lt;/source&gt;

====JSON Array Example====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: enemyList = json.append(&quot;&quot;,&quot;Orcs, Goblins, Ogres, Trolls&quot;)]
[FOREACH (enemy, enemyList, &quot;&lt;br&gt;&quot;): &quot;You really hate &quot; + enemy]
&lt;/source&gt;

====JSON Object Example====
(Note that using foreach with a JSON object will result in only the keys being returned as vars).
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: enemyList = json.set(&quot;&quot;,&quot;Orcs&quot;, &quot;Bob, Dave&quot;, &quot;Goblins&quot;, &quot;Graham&quot;, &quot;Ogres&quot;, &quot;Philip, Emanual&quot;, &quot;Trolls&quot;, &quot;Ig, Og, Ug&quot;)]
[FOREACH (enemy, enemyList, &quot;&lt;br&gt;&quot;): &quot;You really hate &quot; + enemy]
&lt;/source&gt;

All the above will output:
 You really hate Orcs
 You really hate Goblins
 You really hate Ogres
 You really hate Trolls

====Using with [code():] and output_separator====

To use roll options with your {{code|FOREACH}} loop, you will need to use {{roll|code}} roll option.  In this example I have separated the results with the string {{code|&quot;&amp;nbsp;then&amp;nbsp;&quot;}}.
&lt;source lang=&quot;mtmacro&quot;&gt;
[h: enemyList=&quot;Orcs; Goblins; Ogres; Trolls&quot;]
[FOREACH(enemy, enemyList, &quot; then &quot;, &quot;;&quot;), CODE:
    {
    [r: enemy]
    }
]
&lt;/source&gt;

output:
 Orcs then Goblins then Ogres then Trolls

====String Property List Example====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: enemyStrProp = json.toStrProp(json.set(&quot;&quot;,&quot;Orcs&quot;, &quot;Bob, Dave&quot;, &quot;Goblins&quot;, &quot;Graham&quot;, &quot;Ogres&quot;, &quot;Philip, Emanual&quot;, &quot;Trolls&quot;, &quot;Ig, Og, Ug&quot;))]
[FOREACH(enemy, enemyStrProp, &quot;&lt;br&gt;&quot;, &quot;;&quot;), code:
	{
	[h: enemyList = stringToList(enemy, &quot;=&quot;)]
	[h: name = listGet(enemyList, 0)]
	[h: value = listDelete(enemyList, 0)]
	[r: &quot;You really hate &quot; + name + &quot; who are &quot; + value]
	}
]
&lt;/source&gt;

output:
 You really hate Orcs who are Bob, Dave
 You really hate Goblins who are Graham
 You really hate Ogres who are Philip, Emanual
 You really hate Trolls who are Ig, Og, Ug

===See Also===
{{func|json.append}}, {{func|json.set}}, {{roll|code}}, {{func|stringToList}}, {{func|listGet}}, {{func|listDelete}}

[[Category:Roll Option]]
[[Category:Looping Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>while (roll option)</title>
    <ns>0</ns>
    <id>672</id>
    <revision>
      <id>6008</id>
      <parentid>5942</parentid>
      <timestamp>2012-10-04T07:47:26Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Tweaking page layout, typography and link handling</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1335">{{stub}}
===WHILE Option===

'''Introduced''': Version 1.3.b46

Repeatedly executes a statement until a condition becomes false.&lt;br&gt;
The default '''separator''' is {{code|&quot;,&quot;}}. Some examples of other useful separators: ''nothing'' {{code|&quot;&quot;}}, ''space'' {{code|&quot; &quot;}} and ''break'' {{code|&quot;&amp;lt;br&gt;&quot;}}.

====Usage====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[WHILE(condition): body]
[WHILE(condition, separator): body]
&lt;/source&gt;

====Example====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:num = 10]
[WHILE(num &gt;= 0): num = num - 1]
&lt;/source&gt;
Outputs ''9,8,7,6,5,4,3,2,1''

====Example====

This example demonstrates how to put multiple instructions inside a {{code|while}} loop using the {{roll|code}} block extension.

Note the use of the second parameter to {{code|while}} to force a line break in the HTML output.  Also notice that putting text on separate lines does NOT force the output on separate lines; the HTML {{code|&amp;lt;br&gt;}} element is needed for that.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: End = 5]
[H: Num = 0]
[WHILE(Num &lt; End, &quot;&lt;br&gt;&quot;), CODE: {
    Number is [Num = Num + 1],
    Next will be [Num+1]
}]
&lt;/source&gt;
Outputs:

{{code|Number is 1, Next will be 2&lt;br&gt;
Number is 2, Next will be 3&lt;br&gt;
Number is 3, Next will be 4&lt;br&gt;
Number is 4, Next will be 5&lt;br&gt;
Number is 5, Next will be 6}}

[[Category:Roll Option]]
[[Category:Looping Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>code (roll option)</title>
    <ns>0</ns>
    <id>673</id>
    <revision>
      <id>2952</id>
      <parentid>2055</parentid>
      <timestamp>2009-04-05T04:16:54Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1758">{{stub}}
===CODE===

'''Introduced''': Version 1.3.b46

The CODE option is used in conjunction with looping / branching options to execute multiple statements within a single &quot;block&quot; of a loop or branch, allowing the creation of more complex loops and branches. 

====Usage====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[CODE: { code_block }]
&lt;/source&gt;

The ''code_block'' is a collection of text and macro code, enclosed in a single {} pair. Everything within the {} is treated as a single block for the purposes of any looping or branching options.

====Example====

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:num=5]
[WHILE(num &gt; 0), CODE:
{
  This is iteration [r:num] &lt;br&gt;
  There are [r:num-1] iterations left&lt;br&gt;
  [num=num-1]
}]
&lt;/source&gt;

Outputs

 This is iteration 5 There are 4 iterations left
 4, This is iteration 4 There are 3 iterations left
 3, This is iteration 3 There are 2 iterations left
 2, This is iteration 2 There are 1 iterations left
 1, This is iteration 1 There are 0 iterations left
 0

'''NOTE''': the digit output at the beginning of each line is an artifact of the WHILE loop's evaluation of ''num'' - since this roll does not have the ''h'' option active, the result of that evaluation is displayed.

====Nested CODE Blocks====

To nest CODE:{} blocks, use a second CODE:{ } option, like so:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:d20roll=1d20]
[h:attackRoll=d20roll+AttackBonus]
[h,IF(attackRoll &gt;= 16),CODE:
{
  [IF(d20roll == 20),CODE:
  {
    The attack is a critical hit!
    [h:damage=critDamage]
  };
  {
    The attack is a hit!
    [h:damage=regDamage]
  };]
};
{
  The attack misses!
};]
&lt;/source&gt;

MapTool can only handle two levels of nested code.


[[Category:Roll Option]]
[[Category:Branching Roll Option]]
[[Category:Looping Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>token</title>
    <ns>0</ns>
    <id>674</id>
    <redirect title="token (roll option)" />
    <revision>
      <id>2059</id>
      <timestamp>2009-03-11T00:53:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[token]] moved to [[token (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[token (roll option)]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:RollOption</title>
    <ns>10</ns>
    <id>675</id>
    <revision>
      <id>3328</id>
      <parentid>3321</parentid>
      <timestamp>2009-04-27T18:46:15Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Removed custom title.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="910">{{#ifeq: {{{proposed|}}} | true | {{ProposedChange}} |}}{{#if: {{{deprecated|}}} | {{Deprecated|{{{deprecated}}} |}} |}}
=={{#switch: {{{name}}}|e|expanded|h|hidden|hide|r|result|t|tooltip|u|unformatted=[{{{name}}}:]|#default=[{{{name}}}():]}} Roll Option==
{{#ifeq: {{{trusted|}}} | true | {{TrustedFunction}} |}}
{{#if: {{{version|}}} | &lt;div&gt;* '''Introduced in version {{{version|}}}'''&lt;/div&gt; |}}
{{#if: {{{compatibility|}}} | &lt;div&gt;* '''Last checked for compatibility with version {{{compatibility|}}}'''&lt;/div&gt; |}}{{{description|}}}
===Usage===
{{{usage}}}
{{#if: {{{example|}}} |

===Example===
{{{example|}}} |}}
{{#if: {{{examples|}}} |

===Examples===
{{{examples|}}} |}}
{{#if: {{{also|}}} |

===See Also===
{{{also|}}} |}}
{{#if: {{{changes|}}} |

===Version Changes===
{{{changes|}}} |}}
&lt;includeonly&gt;[[Category:Roll Option]]__NOEDITSECTION__&lt;/includeonly&gt;&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Macro</title>
    <ns>14</ns>
    <id>676</id>
    <revision>
      <id>3109</id>
      <parentid>2123</parentid>
      <timestamp>2009-04-15T03:38:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Replacing page with 'This is the top of the Macro category tree, below you find only technical documentation. Refer to the [[Main Page]] for links to tutorials if that is what you're looking for.

...'</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="196">This is the top of the Macro category tree, below you find only technical documentation. Refer to the [[Main Page]] for links to tutorials if that is what you're looking for.

[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Notepad++</title>
    <ns>0</ns>
    <id>677</id>
    <revision>
      <id>4310</id>
      <parentid>2082</parentid>
      <timestamp>2010-06-27T02:44:36Z</timestamp>
      <contributor>
        <username>Bubblobill</username>
        <id>150</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4337">Notepad++ is an open source Windows text editor with syntax highlighting and many more features. You can download it for free from the [http://notepad-plus.sourceforge.net website]. Please refer to the help file that accompanies the program for details on creating your own user defined language using the data below.

'''Last Updated for 1.3b53'''

==Keywords Lists==
===1st Group===
'''Not prefix mode'''
&lt;pre&gt;e expanded
h hide hidden
r result
t tooltip
u unformatted
&lt;/pre&gt;
===2nd Group===
'''Not prefix mode'''
&lt;pre&gt;count code
for foreach
if
macro
switch
token
while
&lt;/pre&gt;
===3rd Group===
'''Not prefix mode'''
&lt;pre&gt;abort  abs  absolutevalue  add  addAllNPCsToInitiative  
addAllPCsToInitiative  addAllToInitiative  addToInitiative  
assert  average  avg  arg  argCount  
band  bitwiseand  bitwisenot  bitwiseor  bitwisexor  bnot  
bor  bringToFront  bxor  
ceil  ceiling  clearLights  closeDialog  concat  countStrProp  
createMacro  currentToken  
decode  deleteStrProp  dialog  divide  defineFunction  
encode  endsWith  eval  evalMacro  execMacro  
findToken  floor  formatStrProp  
getAllPlayerNames  getAllPropertyNames  getBar  getCurrentInitiative  
getExposedTokenNames  getExposedTokens  getFindCount  getGMName  
getGMNotes  getGroup  getGroupCount  getGroupEnd  getGroupStart  
getHalo  getImage  getImpersonated  getImpersonatedName  
getInitiative  getInitiativeHold  getInitiativeRound  getLabel  
getLayer  getLibProperty  getLights  getMacroButtonIndex  
getMacroCommand  getMacroIndexes  getMacroLocation  getMacroName  
getMacroProps  getMacros  getNPCNames  getNPCs  getName  getNotes  
getOwned  getOwnedNames  getOwners  getPCNames  getPCs  
getPlayerName  getProperty  getPropertyDefault  getPropertyNames  
getPropertyType  getSelected  getSelectedNames  getSightType  
getSize  getSpeech  getSpeechNames  getState  getStrProp  
getTokenHandout  getTokenImage  getTokenNames  getTokenPortrait  
getTokens  getVisible  getVisibleTokenNames  getVisibleTokens  
getWithState  getWithStateNames  getRawPropert  getInitiativeToken  
getTokenStates  getDistance  getDistanceToXY  getTokenX  getTokenY  
getDrawOrder  getMacroGroup  getTokenFacing  goto  getStateImage  
getRawProperty  
hasImpersonated  hasLightSource  hasMacro  hasProperty  hasSight  
hex  hypotenuse  hypot  
if  indexKeyStrProp  indexOf  indexValueStrProp  initiativeSize  
input  isBarVisible  isDialogVisible  isFrameVisible  isGM  isNPC  
isNumber  isOwnedByAll  isOwner  isPC  isPropertyEmpty  isTrusted  
isFunctionDefined  
json.append  json.contains  json.fields  json.fromList  json.fromStrProp 
json.get  json.length  json.remove  json.set  json.sort  json.toList  
json.toStrProp  json.type  json.reverse  json.indent  json.shuffle  
json.isEmpty  json.equals  json.evaluate  
lastIndexOf  length  listAppend  listContains  listCount  listDelete  
listFind  listFormat  listGet  listInsert  listReplace  listSort  
ln  log  log10  lower  
macroLink  macroLinkText  matches  max  mean  median  min  
multiply  moveToken  
nextInitiative  number  
pow  power 
removeAllFromInitiative  removeAllNPCsFromInitiative  removeAllPCsFromInitiative  
removeFromInitiative  replace  resetProperty  removeMacro  removeTokenFacing  
sendToBack  set  setAllStates  setBar  setBarVisible  setCurrentInitiative  
setGMName  setGMNotes  setHalo  setHasSight  setInitiative  
setInitiativeHold  setInitiativeRound  setLabel  setLayer  setLibProperty  
setLight  setMacroCommand  setMacroProps  setName  setNotes  setPC  
setProperty  setPropertyType  setSightType  setSize  setSpeech  setState  
setStrProp  setTokenImage  setVisible  sortInitiative  sqr  sqrt  square  
squareroot  startsWith  strPropFromVars  strfind  strformat  string  
stringToList  substring  subtract  sum  switchToken  setDrawOrder  
setTokenFacing  
table  tableImage  tbl  tblImage  trim  
upper  
varsFromStrProp
&lt;/pre&gt;

==Comment &amp; Number==
===Comment Block===
====Comment Open====
&lt;pre&gt;
&lt;!--
&lt;/pre&gt;
====Comment Close====
&lt;pre&gt;
--&gt;
&lt;/pre&gt;

==Operators==
===Activated Operators===
&lt;pre&gt;
-
!
&amp;
(
)
*
,
/
:
;
@
[
]
{
|
}
+
&lt;
=
&gt;
&lt;/pre&gt;
===Delimiter 1===
====Boundary Open====
&lt;pre&gt;&quot;&lt;/pre&gt;
====Boundary Close====
&lt;pre&gt;&quot;&lt;/pre&gt;
===Delimiter 2===
====Boundary Open====
&lt;pre&gt;'&lt;/pre&gt;
====Boundary Close====
&lt;pre&gt;'&lt;/pre&gt;

[[Category:Syntax Highlighting]]
[[Category:Windows Editor]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Windows Editor</title>
    <ns>14</ns>
    <id>678</id>
    <revision>
      <id>2070</id>
      <timestamp>2009-03-11T01:18:48Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>New page: [[Category:Syntax Highlighting]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">[[Category:Syntax Highlighting]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Syntax Highlighting</title>
    <ns>14</ns>
    <id>679</id>
    <revision>
      <id>2072</id>
      <parentid>2071</parentid>
      <timestamp>2009-03-11T01:21:51Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="307">When writing non-trivial macros, it is often more efficient to write your macro code in an external editor that provides more features than a plain text editor.  On this page you will find links to articles that describe how to use various editors with proper mtmacro syntax highlighting.
[[Category:Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:notepadWhole.jpg</title>
    <ns>6</ns>
    <id>680</id>
    <revision>
      <id>2076</id>
      <timestamp>2009-03-11T04:24:39Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:notepadppViewMenu.jpg</title>
    <ns>6</ns>
    <id>681</id>
    <revision>
      <id>2077</id>
      <timestamp>2009-03-11T04:26:35Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:notepadppCreateNew.jpg</title>
    <ns>6</ns>
    <id>682</id>
    <revision>
      <id>2078</id>
      <timestamp>2009-03-11T04:27:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:notepadppExt.jpg</title>
    <ns>6</ns>
    <id>683</id>
    <revision>
      <id>2079</id>
      <timestamp>2009-03-11T04:27:59Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:notepadppTabs.jpg</title>
    <ns>6</ns>
    <id>684</id>
    <revision>
      <id>2080</id>
      <timestamp>2009-03-11T04:37:23Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:notepadppKeywordGroup.jpg</title>
    <ns>6</ns>
    <id>685</id>
    <revision>
      <id>2081</id>
      <timestamp>2009-03-11T04:53:21Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:trustedMacro1.jpg</title>
    <ns>6</ns>
    <id>686</id>
    <revision>
      <id>2086</id>
      <timestamp>2009-03-11T22:56:41Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token:library token</title>
    <ns>0</ns>
    <id>687</id>
    <redirect title="Library Token" />
    <revision>
      <id>2089</id>
      <timestamp>2009-03-12T00:01:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Token:library token]] moved to [[Library Token]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[Library Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>copyToken</title>
    <ns>0</ns>
    <id>688</id>
    <revision>
      <id>6864</id>
      <parentid>6863</parentid>
      <timestamp>2017-01-12T12:10:08Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9265">{{MacroFunction
|name=copyToken
|trusted=true
|version=1.3b51
|description=Creates one or more copies of a [[Token]] and returns the id of the created copy. This function is used to copy [[Token]]s into the current map, the [[Token]]s you are making
copies of can reside on any map. '''You can not make any modifications to the newly created [[Token]]s in the macro that creates them'''. Any changes made to the newly created token are reverted as soon as the macro ends!
As of b54 there is a new parameter that allows you to make some changes to the new tokens.

'''Note:''' below you can find several methods on how to make changes to the newly created 


|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
copyToken(id)
copyToken(id, numCopies)
copyToken(id, numCopies, fromMap)
copyToken(id, numCopies, fromMap, updates)
newId = copyToken(id, numCopies, fromMap, updates)
&lt;/source&gt;


===Parameters===
{{param|id|The id or name of the token to copy.}}
{{param|numCopies|The number of copies to create, defaults to {{code|1}} }}
{{param|fromMap|The name of the map to copy from, defaults to the current map.}}
{{param|updates| a [[JSON Object]] that contains updates to be made to the copied [[Token]]s.}}

You can use an empty string (&quot;&quot;) for {{code|fromMap}} for the current map as of b54.


The return type of this function is determined by the number of copies that you are making. If you are only creating a single
copy of the token then a string containing the [[Token]]s id, if you are making more than one copy then a [[JSON Array]]
containing the [[Token]] ids of all the newly created [[Token]]s is returned.


===Updates parameter===

{{code|updates}} is a [[JSON Object]] that can contain one or more of the following fields.  Field names are case-sensitive.
* {{code|name}} - The name of the new [[Token]].
* {{code|label}} - The label for the new [[Token]].
* {{code|gmName}} - The GM name for the new [[Token]].
* {{code|layer}} - The layer for the new [[Token]].
* {{code|x}} - The X Co-ordinate for the new [[Token]].  Default is {{code|0}}.
* {{code|y}} - The Y Co-ordinate for the new [[Token]].  Default is {{code|0}}.
* {{code|useDistance}} - {{code|1}} (true) or {{code|0}} (false).  Determines if the &quot;Distance Per Cell&quot; measurement for the map is used for the x,y coordinates.  Unused if neither {{code|x}} nor {{code|y}} is specified.  Default is false.  Use {{code|1}} (true) for tokens that are not snap-to-grid and must be placed by pixel position instead of grid cell position.
* {{code|facing}} - Sets the facing for the [[Token]]. If the [[Token]] is on the background or object layer this sets the rotation.
* {{code|size}} - Sets the size of the [[Token]].  The list of sizes is dependent on the type of grid.
* {{code|delta}} - {{code|1}} (true) or {{code|0}} (false).  Indicates whether the x,y coordinates are relative to the position of the original token.  '''Added in 1.3b77.'''
* {{code|tokenImage}} / {{code|portraitImage}} / {{code|handoutImage}} - Changes the coresponding image. Value can be either an assetId or an image token name. '''Added in 1.3b77.'''

The values for all of these fields are evaluated so all text within {{code|{} }} or {{code|[]}} goes through the standard macro processing.  There is currently no way to modify the new token from inside these macro commands, however.

When the name is not changed using the {{code|updates}} parameter, the new name for the token follows the naming method for cut and paste.
This function can copy [[Token]]s in the token, hidden, object, and background layers.  If you do not override the destination using the 
{{code|layer}} field of {{code|updates}} then the new copies are made in the same layer as the source.  Likewise if {{code|x}} and {{code|y}}
are not specified then these locations are the same as the source.


===How to make additional changes to the newly created token===

As said, ANY changes made to the new token will be reverted as soon as the macro ends. However there are a couple of methods to do it anyway.

1 The most reliable and straightforward method is to change the ORIGINAL token first and then copy it. You *can* revert the changes to the original after the copyToken. However if the original token is not on the same map then you can't immediately change the original. To solve that here some methods:

a. The best methods in that case is to {{func|moveTokenFromMap}} to the current map and then {{func|moveTokenToMap}} back. 

b. You could also use {{func|setCurrentMap}}) to go to the 'original' map, change the token and switch back, that however will result in a minor flicker on screen. 

c. A final alternative is adding the 'lib:' prefix to the original, that way its properties are accessible throughout all maps

2. The simplest method is by creating an interrupt in the macro after the copies have been made. This is simply done with the use of {{func|input}}. This however will result in a pop-up on screen which you have to click away so the macro can continue with the update. 

3. Another (not always working method) is to make changes to the created tokens done by a second 'deferred' macro that is called after the copies have been created. Look for [[execLink]] for calling a macro ''deferred''.


==examples==
Make a single copy of the Hero from the current map.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: copyToken(&quot;Hero&quot;)]
&lt;/source&gt;

Make a single copy of the Hero from another map.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: copyToken(&quot;Hero&quot;, 1, &quot;Green Room&quot;)]
&lt;/source&gt;

Or if you are playing paranoia and want to create six clones.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: copyToken(&quot;Hero&quot;, 6, &quot;Clone Vat&quot;)]
&lt;/source&gt;

But as a PC the new tokens don't get new names so we could give each of them a new name in b54+ using the following.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cloneNo = 0]
[h: updates = &quot;{ 
                 name: 'Hero Clone - [r: cloneNo = cloneNo + 1]'
               }&quot;
]
[h: cloneNo = 0]
[h: copyToken(&quot;Hero&quot;, 6, &quot;Clone Vat&quot;, updates)]
&lt;/source&gt;

This will copy all our clones to the current map but they are all on top of each other, to line them up
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cloneNo = 0]
[h: x = 0]
[h: updates = &quot;{ 
                 name: 'Hero Clone - [r: cloneNo = cloneNo + 1]',
                 x: '[r: x = x + 2]',
                 y: 0
               }&quot;
]
[h: cloneNo = 0]
[h: copyToken(&quot;Hero&quot;, 6, &quot;Clone Vat&quot;, updates)]
&lt;/source&gt;

Or combining rotation
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: cloneNo = 0]
[h: x = 0]
[h: facing = 0]
[h: updates = &quot;{ 
                 name: 'Hero Clone - [r: cloneNo = cloneNo + 1]',
                 x: '[r: x = x + 2]',
                 y: 0,
                 facing: '[r: facing = facing + 40]'
               }&quot;
]
[h: cloneNo = 0]
[h: copyToken(&quot;Hero&quot;, 6, &quot;Clone Vat&quot;, updates)]
&lt;/source&gt;

And now we have tumbling clones:

[[Image:TumblingClones.jpeg|frame|center|Tumbling Clones using Top-down Tokens]]

The source token was configured as a Top Down token for this effect, otherwise the {{code|facing}} setting would produce a facing arrow
for [[Token]]s on the token or hidden layers.

[[Image:PointingClones.jpeg|frame|center|Tumbling Clones using Round Tokens and Facing Arrows]]

This example shows using the new {{code|delta}} parameter available in '''1.3b77'''.  Specifying {{code|true}} means all x,y coordinates are treated as offsets from the original token.  They are measured in grid cells if {{code|useDistance}} is false (the default) or in pixels if {{code|true}}.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: x = 0]
[h: updates = &quot;{ 
    x: '[r: x = x + 2]',
    delta: 1,
}&quot; ]
[h: copyToken(currentToken(), 3, &quot;&quot;, updates)]
&lt;/source&gt;

Make three copies of the currently selected token on the current map.  Place the first copy two grid cells to the right of the original token.  (Note that the trailing comma after {{code|delta: 1}} is ignored by MapTool.)

==examples of updates after copy==
Simplest method:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:id=copyToken(&quot;Hero&quot;)]
[h:input(&quot;junk|This interruption is required to create the new token. Click ok to continue.|Message |LABEL&quot;)]
[h:setProperty(&quot;Strength&quot;, 3d6,id)]
&lt;/source&gt;

Straightforward method:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:moveTokenFromMap(&quot;Hero&quot;, &quot;Grasslands&quot;)]
[h:setProperty(&quot;Strength&quot;, 3d6, &quot;Hero&quot;)]
[h:moveTokenToMap(&quot;Hero&quot;, &quot;Grasslands&quot;)]
[h:copyToken(&quot;Hero&quot;, 1, &quot;Grasslands&quot;)]
&lt;/source&gt;

Fancy method that leave the original token unchanged
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:moveTokenFromMap(&quot;Hero&quot;, &quot;Grasslands&quot;)]
&lt;!-- swap from name to token id as tokens with the same name will soon exist --&gt;
[h:origId = findToken(&quot;Hero&quot;)]
&lt;!-- copy original with same name --&gt;
[h:origCopyId = copyToken(&quot;Hero&quot;, 1, &quot;&quot;, &quot;{name: 'Hero'}&quot;)]
&lt;!-- update original with new properties --&gt;
[h:setProperty(&quot;Strength&quot;, 3d6, origId)]
&lt;!-- copy and then delete original --&gt;
[h:copyToken(origId, 1)]
[h:removeToken(origId)]
&lt;!-- move the copy from BEFORE the changes back to the original map --&gt;
[h:moveTokenToMap(origCopyId, &quot;Grasslands&quot;)]&lt;/source&gt;

==also==
{{func|moveTokenToMap}}, 
{{func|moveTokenFrom}}

==changes==
{{change|1.3b54|Added optional {{code|updates}} parameter.}}
{{change|1.3b77|Added {{code|tokenImage}}, {{code|portraitImage}}, {{code|handoutImage}}, and {{code|delta}} to {{code|updates}}.}}
}}
[[Category:Token Function]]</text>
      <sha1>oheuws0xuqcs6o10h5rmkykuvzp3arb</sha1>
    </revision>
  </page>
  <page>
    <title>removeToken</title>
    <ns>0</ns>
    <id>689</id>
    <revision>
      <id>2094</id>
      <parentid>2093</parentid>
      <timestamp>2009-03-12T03:26:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Corrected version.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="467">{{stub}}
{{MacroFunction
|name=removeToken
|trusted=true
|version=1.3b51
|description=
Removes a token from the current map.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
removeToken(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The id of the token to remove.}}

One caveat, you can remove the impersonated token in a macro but if you do so you must make sure not to use any macro functions that refer to the deleted token or you will cause errors.

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:Depreciated</title>
    <ns>10</ns>
    <id>690</id>
    <redirect title="Template:Deprecated" />
    <revision>
      <id>2112</id>
      <timestamp>2009-03-13T02:44:25Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Template:Depreciated]] moved to [[Template:Deprecated]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[Template:Deprecated]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>onCampaignLoad</title>
    <ns>0</ns>
    <id>692</id>
    <revision>
      <id>7004</id>
      <parentid>6966</parentid>
      <timestamp>2018-12-05T17:32:22Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2026">==onCampaignLoad Macro==
'''• Introduced in version 1.3b51'''

A special macro that can be created on [[Library_Token|library tokens]] to have macro code automatically execute when a campaign is loaded. A campaign is considered to have been loaded if it is opened via the File menu, or upon connecting to a server running that campaign. All output from an {{code|onCampaignLoad}} macro is discarded, when it is executed automatically.

This special macro is ideally suited for loading your User Defined Functions (UDFs) via [[defineFunction|defineFunction()]].

When an onCampaignLoad macro is executed automatically, it is considered a [[Trusted Macro]]. If you wish to use trusted functions within {{code|onCampaignLoad}} and execute it manually (e.g. while developing macros), you will have to make sure that it follows all of the rules of [[Trusted Macro]]s.

===How to Create an onCampaignLoad Macro===
You can create an {{code|onCampaignLoad}} macro on any [[Library_Token|library token]]; simply create a macro that is specifically named {{code|onCampaignLoad}}.

===Limitations===
* Do not make changes within the {{code|onCampaignLoad}} macro to the library token it resides upon. This is not supported by MapTool. A duplicate lib token can/will appear and this will/can break stuff.
* Some macro functions may not work as expected if run in {{code|onCampaignLoad}} without deferring their execution by using the defer option of [[execLink|execLink()]].
** [[goto|goto()]], [[setZoom|setZoom()]] and similar function calls should be placed in a separate macro to be called via [[execLink|execLink()]]

===Example of Deferred Function Calls===
Inside the {{code|onCampaignLoad}} macro place code like this:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: link = macroLinkText(&quot;deferredCalls@&quot;+getMacroLocation())]
[h: execLink(link,1)]
&lt;/source&gt;

And in the deferredCalls() macro place the functions to be deferred.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: goto(&quot;2&quot;)]
[h: setZoom(2)]
&lt;/source&gt;

[[Category:Special Macro]][[Category:Event]]</text>
      <sha1>1dz4l8oyv48ugos7423jif5f7pbf87v</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:Trusted Macro</title>
    <ns>1</ns>
    <id>693</id>
    <revision>
      <id>2131</id>
      <timestamp>2009-03-20T03:32:32Z</timestamp>
      <contributor>
        <username>K0r0z1f</username>
        <id>33</id>
      </contributor>
      <comment>New page: How could I set maptool to never Allow players to edit macros by default?</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="73">How could I set maptool to never Allow players to edit macros by default?</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>!!unknown-macro!!</title>
    <ns>0</ns>
    <id>694</id>
    <revision>
      <id>3115</id>
      <parentid>2148</parentid>
      <timestamp>2009-04-15T03:47:54Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Moved to Special Macro category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="250">{{stub}}
'''• Introduced in version 1.3b49'''

A specially named macro that can exist on lib:tokens to handle macro calls to macros that do not exist.

getMacroName() will return the name of the macro that was not found.

[[Category:Special Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:TrustedParameter</title>
    <ns>10</ns>
    <id>695</id>
    <revision>
      <id>7117</id>
      <parentid>7115</parentid>
      <timestamp>2019-02-23T22:39:07Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="236">&lt;div class=&quot;template_trusted_param&quot;&gt;&lt;p style=&quot;background-color: #EDDD75; color: #000000; font-weight: bold&quot;&gt;&amp;nbsp;Note: This parameter can only be used in a [[Trusted Macro]].&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1>exwefvpv9htemb9cla0rbyr0vxg7eni</sha1>
    </revision>
  </page>
  <page>
    <title>MediaWiki:Gadget-wikEd.js</title>
    <ns>8</ns>
    <id>696</id>
    <revision>
      <id>2170</id>
      <timestamp>2009-03-24T04:41:19Z</timestamp>
      <contributor>
        <username>WikiSysop</username>
        <id>1</id>
      </contributor>
      <comment>New page: // &lt;pre&gt;&lt;nowiki&gt; //  _________________________________________________________________________________________ // |                                                                         ...</comment>
      <model>javascript</model>
      <format>text/javascript</format>
      <text xml:space="preserve" bytes="971">// &lt;pre&gt;&lt;nowiki&gt;
//  _________________________________________________________________________________________
// |                                                                                         |
// |                    === WARNING: GLOBAL GADGET FILE ===                                  |
// |                  Changes to this page affect many users.                                |
// | Please discuss changes on the talk page or on [[Wikipedia_talk:Gadget]] before editing. |
// |_________________________________________________________________________________________|
//
// Imports [[User:Cacycle/wikEd.js]]
// wikEd is a full-featured in-browser editor for Wikipedia, see [[User:Cacycle/wikEd]]
 
// install [[User:Cacycle/wikEd]] in-browser text editor
document.write('&lt;script type=&quot;text/javascript&quot; src=&quot;'
+ 'http://en.wikipedia.org/w/index.php?title=User:Cacycle/wikEd.js'
+ '&amp;action=raw&amp;ctype=text/javascript&quot;&gt;&lt;/' + 'script&gt;');
 
// &lt;/nowiki&gt;&lt;/pre&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>MediaWiki:Gadgets-definition</title>
    <ns>8</ns>
    <id>697</id>
    <revision>
      <id>2171</id>
      <timestamp>2009-03-24T04:53:59Z</timestamp>
      <contributor>
        <username>WikiSysop</username>
        <id>1</id>
      </contributor>
      <comment>New page: * wikEd|wikEd.js</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16">* wikEd|wikEd.js</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Sorting Nested JSON Objects</title>
    <ns>0</ns>
    <id>698</id>
    <revision>
      <id>2618</id>
      <parentid>2614</parentid>
      <timestamp>2009-04-01T13:51:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to How To category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8289">JSON Objects can contain an arbitrary number of keys and values (for which the value may itself be another JSON object). For example, a nested JSON object called &quot;Monsters&quot; might look like this:

&lt;source lang=&quot;mtmacro&quot; line&gt;
{
 &quot;Troll&quot;:
  {
    &quot;name&quot;:&quot;Troll&quot;,
    &quot;HD&quot;:4,
    &quot;HP&quot;:75
  },
 &quot;Orc&quot;:
  {
    &quot;name&quot;:&quot;Orc&quot;,
    &quot;HD&quot;:3,
    &quot;HP&quot;:22
  }
}
&lt;/source&gt;

Note that each value in the key-value pairs in the above object is actually a complete JSON object in its own right. 

It is occasionally useful to be able to sort a JSON object that contains ''other'' JSON objects based on a value in one of the &quot;sub-objects.&quot; For instance, if a JSON object exists that contains token names and distances to those tokens from a given point, one may want to sort the JSON so that the nearest objects are first, and the farthest are last. 

Or, using the above &quot;Monsters&quot; example, one may wish to sort it by '''name''', or by '''HP''', or by '''HD'''. 

The following macro routine is a generic method to sort JSON objects based on an arbitrary value within a nested object. 

==Assumptions==

* This macro requires the use of a JSON object supporting version of MapTool; it was written and tested in version 1.3.b53.
* The macro is generic, and will run using any given JSON object conforming to the general &quot;nested object&quot; structure. In this case, a nested JSON object is created in the beginning so that there is a sample object to sort. '''However''': this routine should be applicable to JSON arrays of objects as well - it would simply require using the index of the nested object rather than the nested object's key.
* It can be unclear which object is being discussed when you have multiply nested objects. In the following explanation, &quot;nested object&quot; will always refer to an object contained ''within a larger JSON''. So, the larger object is '''Monsters''', while '''Troll''' would be a ''nested object.''

==Macro Code and Discussion==

Please see the [[Tutorials:Macros:JSONSortingFullCode|full macro code]] for the complete macro.

===Create Sample Object===

This sequence simply creates a sample object to practice sorting. In actual use, you may wish to pass an object as an argument, or pull an object from a token's properties, as necessary.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:troll = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Troll&quot;, &quot;HD&quot;, 4, &quot;HP&quot;, 75)]
[h:orc = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Orc&quot;, &quot;HD&quot;, 3, &quot;HP&quot;, 13)]
[h:goblin = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Goblin&quot;, &quot;HD&quot;, 2, &quot;HP&quot;, 6)]
[h:gnoll = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Gnoll&quot;, &quot;HD&quot;, 3, &quot;HP&quot;, 19)]
[h:kobold=json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Kobold&quot;, &quot;HD&quot;, 1, &quot;HP&quot;, 4)]
[h:monsters = json.set(&quot;{}&quot;, &quot;Troll&quot;, troll, &quot;Orc&quot;, orc, &quot;Goblin&quot;, goblin, &quot;Gnoll&quot;, gnoll, &quot;Kobold&quot;, kobold)]
&lt;/source&gt;

===Request Sorting Key and Sort Direction from User===

This section is also optional (and not useful if this macro will be used as a function/called macro), but for the example code it makes it easier to experiment with. This section uses [[input|input()]] to gather user input, and [[abort|abort()]] to halt processing if the user hits &quot;Cancel.&quot; Finally, it uses an [[Macros:Branching_and_Looping#IF_Option|IF():]] roll option to set a variable with a &quot;friendly&quot; indicator of sort direction, which will be used at the end in the final output. 

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:status = input(
&quot;whichKey|name,HD,HP|Pick Sorting Key|LIST|SELECT=0 VALUE=STRING&quot;,
&quot;whichDirection|A+,A-,N+,N-|Direction (A+/- for strings, N+/- for numbers!)|LIST|SELECT=0 VALUE=STRING&quot;
)]
[h:abort(status)]

[h,if(substring(whichDirection,1)==&quot;+&quot;): dirString = &quot;ascending&quot;; dirString = &quot;descending&quot;]
&lt;/source&gt;

===Set Basic Variables===

This segment initializes some variables that will be used later: 

*''sortObj'' is the object to be sorted (in this case, the JSON Object '''Monsters''')
*''sortOn'' is the value on which to sort ('''name''', '''HD''', or '''HP''')
*''sortDirection'' is the direction of the sort, which will be passed to [[listSort|listSort()]]
*''sortObjContentList'' is a list - created using [[json.fields|json.fields()]] - of each nested object within '''Monsters'''; effectively it is a list of the &quot;names&quot; of each monster
*''keyList'' is a list that will contain the value that corresponds to the thing we're sorting on - so if you choose to sort by '''name''', then ''keyList'' will ultimately contain the value of '''name''' for each monster in the '''Monsters''' object
*''sortedJSON'' will hold the new, nicely sorted JSON object; the original object will be unchanged.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:sortObj=monsters]
[h:sortKey = whichKey]
[h:sortDirection = whichDirection]
[h:sortObjContentList = json.fields(sortObj)]
[h:keyList = &quot;&quot;] 
[h:sortedJSON = &quot;{}&quot;]
&lt;/source&gt;

===Extract the Value of ''sortKey'' from each Nested Object===

Here, we use FOREACH() to loop through each element in ''sortObjContentList'' (in other words, go one-by-one through the list of monster names). The FOREACH() option lets us say that ''item'' holds the value of each of those (so for the first pass, ''item'' holds the first monster name in the list, and on the second pass, it moves to the next, and so on). We need to do this so that we can extract the detailed information about each monsters from the '''Monsters''' object (in this case, we assign the detailed information to a new variable called ''itemDetail''). 

With the nested objects extracted, we can then retrieve the value of the thing we're sorting on by using [[json.get|json.get()]] on the variable ''itemDetail''. We stick that value in the previously empty list ''keyList''. 

Finally, once we've gone through each nested object held within '''Monsters''' and each nested object's value for our chosen sort (remember, we put that information in the variable ''sortKey'') has been added to ''keyList'', we're finished with the loop. 

Now we actually can determine what the right order will ultimately be - we sort ''keyList'' using [[listSort|listSort()]] based on the direction specified by the user. '''This is a critical step!''' We've gone through each object, and figured out what the ''value'' of the thing we're sorting on is - so if we're sorting on &quot;name&quot;, we've gone and actually retrieved each object's ''name'', and put it in a list with the others. We then sort that list, which tells us the final order to use when we reassemble the main object!

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h,foreach(item, sortObjContentList),CODE:
{
   [h:itemDetail = json.get(sortObj,item)]
   [h: keyList = listAppend(keyList, json.get(itemDetail, sortKey))]
}]

[h:keyList = listSort(keyList, sortDirection)]
&lt;/source&gt;

===Iterating through ''keyList'' and Each Nested Object===

This is the most complex part of the routine. [[Macros:Branching_and_Looping#FOREACH_Option|FOREACH():]] through each element in the variable ''keyList'' (which, you will recall, contains the values corresponding to ''sortKey'' for each nested object). For ''each'' element in ''keyList'', we then loop through ''all'' of the nested objects in '''Monsters''' to see which one(s) match up to the current element of ''keyList''. 

So, for example, if the current value - ''key'' - in the outer loop is 4, and we are sorting by &quot;HD&quot;, the inner loop will iterate through each nested object and check to see if the value of &quot;HD&quot; for that nested object is equal to 4. 

If a match is found, the matching nested object is added to ''sortedJSON'' using [[json.set|json.set()]]. In this fashion, we're using ''keyList'' to tell us what order the final nested objects should be in, and we then just need to go through our nested objects, setting them in that order via the following code.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h,foreach(key,keyList),CODE:
{
   [foreach(object,sortObj),CODE:
   {
     [objectDetail = json.get(sortObj,object)]
     [h:sortOnValue = json.get(objectDetail, sortKey)]
     [if(sortOnValue == key): sortedJSON=json.set(sortedJSON, object, objectDetail);&quot;&quot;]
   }]
}]
&lt;/source&gt;

===Outputting the Results in an Attractive Fashion===

The final step is to output results. The use of [[json.indent|json.indent()]] here simply makes the sorted JSON object easy to read.

&lt;source lang=&quot;mtmacro&quot; line&gt;
JSON Object sorted by [r:whichKey], [r:dirString]:&lt;br&gt;
&lt;pre&gt;[r:json.indent(sortedJSON, 3)]&lt;/pre&gt;
&lt;/source&gt;
[[Category:How To]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>JSON Sorting</title>
    <ns>0</ns>
    <id>699</id>
    <revision>
      <id>2622</id>
      <parentid>2620</parentid>
      <timestamp>2009-04-01T13:57:11Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to Cookbook category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2115">Following is the full macro code for the [[Sorting Nested JSON Objects]] How To. Line numbers are excluded to ease cutting and pasting. 

&lt;source lang=&quot;mtmacro&quot;&gt;
&lt;!--Set Up Sample Object--&gt;

[h:troll = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Troll&quot;, &quot;HD&quot;, 4, &quot;HP&quot;, 75)]
[h:orc = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Orc&quot;, &quot;HD&quot;, 3, &quot;HP&quot;, 13)]
[h:goblin = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Goblin&quot;, &quot;HD&quot;, 2, &quot;HP&quot;, 6)]
[h:gnoll = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Gnoll&quot;, &quot;HD&quot;, 3, &quot;HP&quot;, 19)]
[h:kobold=json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Kobold&quot;, &quot;HD&quot;, 1, &quot;HP&quot;, 4)]
[h:monsters = json.set(&quot;{}&quot;, &quot;Troll&quot;, troll, &quot;Orc&quot;, orc, &quot;Goblin&quot;, 
                       goblin, &quot;Gnoll&quot;, gnoll, &quot;Kobold&quot;, kobold)]

&lt;!--Request User Input for Sorting--&gt;

[h:status = input(
    &quot;whichKey|name,HD,HP|Pick Sorting Key|LIST|SELECT=0 VALUE=STRING&quot;,
    &quot;whichDirection|A+,A-,N+,N-|Direction (A+/- for strings, N+/- for numbers!)&quot;+
        &quot;|LIST|SELECT=0 VALUE=STRING&quot;
)]
[h:abort(status)]

[h,if(substring(whichDirection,1)==&quot;+&quot;): dirString = &quot;ascending&quot;; dirString = &quot;descending&quot;]

&lt;!--Initialize Variables--&gt;

[h:sortObj=monsters]
[h:sortKey = whichKey]
[h:sortDirection = whichDirection]
[h:sortObjContentList = json.fields(sortObj)]
[h:keyList = &quot;&quot;] 
[h:sortedJSON = &quot;{}&quot;]


&lt;!--Get value corresponding to sortKey for each nested object and append to keyList--&gt;

[h,foreach(item, sortObjContentList),CODE:
{
   [h:itemDetail = json.get(sortObj,item)]
   [h: keyList = listAppend(keyList, json.get(itemDetail, sortKey))]
}]

&lt;!--Sort keyList based on the direction input by the user--&gt;

[h:keyList = listSort(keyList, sortDirection)]


&lt;!--
Loop through keyList, and for each element, find the matching nested object(s) 
and add them to the new sortedJSON object
--&gt;

[h,foreach(key,keyList),CODE:
{
   [foreach(object,sortObj),CODE:
   {
     [objectDetail = json.get(sortObj,object)]
     [h:sortOnValue = json.get(objectDetail, sortKey)]
     [if(sortOnValue == key): sortedJSON=json.set(sortedJSON, object, objectDetail);&quot;&quot;]
   }]
}]

&lt;!--Output the Results--&gt;

JSON Object sorted by [r:whichKey], [r:dirString]:&lt;br&gt;
&lt;pre&gt;[r:json.indent(sortedJSON, 3)]&lt;/pre&gt;
&lt;/source&gt;
[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:Sorting Nested JSON Objects</title>
    <ns>1</ns>
    <id>700</id>
    <revision>
      <id>2616</id>
      <parentid>2182</parentid>
      <timestamp>2009-04-01T13:51:17Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>[[Talk:Tutorials:Macros:SortingNestedJSONObjects]] moved to [[Talk:Sorting Nested JSON Objects]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="295">Should this be a HowTo, rather than a tutorial? [[User:Cclouser|Rumble]] 21:58, 24 March 2009 (UTC)
* Good question, but I think it leads to a more profound question about what the difference between a How-To and a Tutorial really is. /shrug  [[User:Verisimilar|zEal]] 22:13, 24 March 2009 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Mt-f-addtoreslib.jpg</title>
    <ns>6</ns>
    <id>701</id>
    <revision>
      <id>2193</id>
      <timestamp>2009-03-25T03:43:24Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Mtreslib.jpg</title>
    <ns>6</ns>
    <id>702</id>
    <revision>
      <id>2194</id>
      <timestamp>2009-03-25T03:45:17Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Map-newmap.jpg</title>
    <ns>6</ns>
    <id>703</id>
    <revision>
      <id>2195</id>
      <timestamp>2009-03-25T03:49:48Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Map-new-dialog.jpg</title>
    <ns>6</ns>
    <id>704</id>
    <revision>
      <id>2196</id>
      <timestamp>2009-03-25T03:50:43Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Background-dialog.jpg</title>
    <ns>6</ns>
    <id>705</id>
    <revision>
      <id>2197</id>
      <timestamp>2009-03-25T03:53:32Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Map-create-done.jpg</title>
    <ns>6</ns>
    <id>706</id>
    <revision>
      <id>2198</id>
      <timestamp>2009-03-25T03:56:41Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Map-mapbutton.jpg</title>
    <ns>6</ns>
    <id>707</id>
    <revision>
      <id>2199</id>
      <timestamp>2009-03-25T03:57:13Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Blueglobe.jpg</title>
    <ns>6</ns>
    <id>708</id>
    <revision>
      <id>2200</id>
      <timestamp>2009-03-25T04:03:26Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Maplist.jpg</title>
    <ns>6</ns>
    <id>709</id>
    <revision>
      <id>2201</id>
      <timestamp>2009-03-25T04:03:37Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Default-library.jpg</title>
    <ns>6</ns>
    <id>710</id>
    <revision>
      <id>2202</id>
      <timestamp>2009-03-25T04:07:52Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Default-tokens.jpg</title>
    <ns>6</ns>
    <id>711</id>
    <revision>
      <id>2203</id>
      <timestamp>2009-03-25T04:08:45Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Token-drag-to-map.jpg</title>
    <ns>6</ns>
    <id>712</id>
    <revision>
      <id>2204</id>
      <timestamp>2009-03-25T04:10:05Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Token-on-map.jpg</title>
    <ns>6</ns>
    <id>713</id>
    <revision>
      <id>2205</id>
      <timestamp>2009-03-25T04:11:15Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Token-rightclick.jpg</title>
    <ns>6</ns>
    <id>714</id>
    <revision>
      <id>2206</id>
      <timestamp>2009-03-25T04:15:46Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>MTBasics</title>
    <ns>0</ns>
    <id>715</id>
    <redirect title="Introduction to Mapping" />
    <revision>
      <id>2237</id>
      <parentid>2207</parentid>
      <timestamp>2009-03-25T12:37:34Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Temporary redirect to the article that has the most updated version of the information that was contained in this article.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[Introduction to Mapping]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Mapping</title>
    <ns>0</ns>
    <id>716</id>
    <revision>
      <id>6385</id>
      <parentid>6066</parentid>
      <timestamp>2015-10-16T09:04:44Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <minor/>
      <comment>4 -&gt; 5</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19808">{{Languages|Introduction to Mapping}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}__TOC__
==Introduction==

===First Things First: What is MapTool?===

Although you probably have an idea what MapTool is and does, I just want to take a moment to reinforce the main goal of MapTool: 

&lt;p align=&quot;center&quot;&gt;'''MapTool is a program that helps you share a &quot;virtual tabletop&quot; with your friends, so you can play games on it.''' &lt;/p&gt;

That is what MapTool does, and its features are aimed at providing a continuum of options, from the simple to the complex, to achieve that goal.

In all the talk of macros and properties and tables and scripting that will follow in this and other guides, don't lose sight of the reason you're checking MapTool out anyway: it's a way to play games with friends.

===About this Guide===

The purpose of this guide is not to delve into the seamy underbelly of MapTool's macro scripting system, lighting, properties, or any of that complex stuff. Instead, this guide should get you started on the path of using MapTool as a ''mapping'' program for role-playing games. Other guides address topics like [[Introduction_to_Game_Hosting|hosting an online game]], [[Introduction_to_Tokens|working with tokens]], [[Introduction to Lights and Sights|setting up vision and light]], and [[Introduction_to_Macro_Writing|writing macros]]. 

The following instructions should get you up and running with MapTool to use as a battle mapping/general mapping tool. This assumes a few things:

# You know how to create or get some map images. There are terabytes (exabytes! yottabytes!) of map images out there on the web. Check out the [http://gallery.rptools.net RPTools Gallery] or [http://www.rpgmapshare.com RPGMapShare] for tons of way cool images. 
# You can run MapTool on your computer. MapTool requires Java 1.5 to be installed on your machine; it's up to you to go find and handle that business.

So here we go. To begin with, the no-brainers:

# Get MapTool from http://rptools.net. The latest &quot;build&quot; version of MapTool can always be found at the top of [http://www.rptools.net/index.php?page=downloads#MapTool this list]. Currently, the latest build is 1.3.b88 (b88 is broken, however, and b87 should be used). '''NOTE''': You can also run the [http://www.rptools.net/index.php?page=launch Java WebStart] to run MapTool without downloading and unzipping the file.
# If you download the zip file of MapTool, unzip it somewhere on your computer and make sure it runs. The built in .bat files set some parameters when you run, like allocated memory and so forth. It will run if you double-click on the .jar file, but it will give you warnings. If you use Windows, you can use the Windows Launcher as well, which makes altering the settings very convenient.

Now, let's get some useful mapping going.

==Getting Images into your MapTool Resource Library==

MapTool's '''Resource Library''' is actually a collection of &quot;pointers&quot; or &quot;links&quot; to folders on your computer containing images you want to use with MapTool. MapTool comes with a default set of images, but you can add any images you wish - you are in control of what images are available to MapTool. 
&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mt-f-addtoreslib.jpg‎|thumb|File menu showing '''Add to Resource Library''']]

[[Image:Add-asset-dialog.jpg|thumb|'''Add Resource to Library''' dialog]]

1. Obtain some images (maps, for instance) from somewhere: these can be downloaded off the web, or created by you. Put them in a directory where you'll remember them - this directory is important for step 3.

2. Open MapTool.

3. Select '''File -&gt; Add Resource to Library''' (shown below, left). This will open a dialog (click on the thumbnails to see the full images to the right - note that the thumbnails are from an older version of MapTool; the current menus may differ somewhat but the general options remain). 

4. The dialog offers three tabs - the default one is '''Local Directory'''. To add images from a local directory, click the button next to the path text field and select the directory containing the images you wish to add. The second tab lets you designate a URL to download resources from, and the third tab allows you to install some image packs that are made available by various artists specifically for MapTool.

5. Once you've made your selection, click ''Install&gt;&gt;'' to have MapTool add the images to your resource library.

'''NOTE''': The name of the directory in MapTool's Resource Library will be the same as the name of the directory you picked in step 3. 

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mtreslib.jpg|thumb|Folders in the MapTool Resource Library. These are pointers to folders on your hard drive.]]

5. Afterwards, if you select one of the folders in your resource library (as seen in the image below), you'll see thumbnails of the images inside that folder. NOTE: if your folder has subfolders, hit the '''+''' to expand that folder tree. Also, you won't need to add that directory again - MapTool remembers what you picked.

'''NOTE''': Because the folders that appear in the Resource Library are in reality pointers to folders on your hard drive, you don't need to worry that MapTool is duplicating every file -- the Resource Library is just a way for MapTool to know where the images are.

&lt;br style=&quot;clear:both;&quot;/&gt;

==Creating a Map==

[[Image:Map-newmap.jpg|thumb|The '''New Map''' menu item]]

[[Image:Map-new-dialog.jpg|thumb|The '''Map Properties''' dialog]]

1. Go to '''Map -&gt; New Map'''. This will bring up the ''Map Properties'' dialog.

2. On the left hand side of the ''Map Properties'' dialog, you’ll see several options and text fields.

* '''Name''': this is the map’s title. Note that if you select a map image, the title resets itself to the filename of the image. Best bet is to title the map ''last'', so you can call it something you like, instead of xqmap2.jpg or whatever it was originally called.
* '''Cell Type''': hex or square map, or no grid at all.
* '''Distance Per Cell''': this is how many arbitrary units each cell covers (''e.g.'', for Dungeons &amp; Dragons 4th Edition, since everything is counted in squares, you can just set this to 1)
* '''Pixels per cell''': this is how many pixels each cell should cover – the default is 50. This is most important for scaling to map images you downloaded.
* '''Vision Distance''': MapTool has vision, fog-of-war, and other functions, so this indicates how far, by default, a character can see on the map.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Background-dialog.jpg|thumb|The '''Choose Background''' dialog]]

3. Click the '''Background''' button. You’ll get a pop-up dialog offering several options. The background texture and/or color are infinitely tiled in all directions.

* '''Swatch''': lets you use a uniform color as the map background. 
**&lt;font color=&quot;red&quot;&gt;'''Warning:''' As recently as version 1.3.b53, if you select the top-leftmost swatch (the &quot;white&quot; swatch), MapTool will generate an error. The error will not cause MapTool to crash or anything, but it will not set the background to white. As a workaround, you can set the background to white via the Hue or RGB tabs.&lt;/font&gt;
* '''Hue/RGB''': lets you specify colors instead of selecting a color swatch
* '''Texture''' (what I use most often): gives you access to your resource library, where you can select a texture to serve as the background.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-mapbutton.jpg|thumb|The '''Map''' button on the map properties dialog]]

4. If you have a map image in mind (like a downloaded one, or one you created in Photoshop or something like that), click the '''Map''' button. You’ll be taken to a dialog that shows your Resource Library. Select the image you want to use. This image will be layered above the background you already selected.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-create-done.jpg|thumb|The '''Map Properties''' dialog after a map has been selected from the Resource Library. Note the map thumbnail in the preview.]]

5. When you’re satisfied with the background and map – you’ll be given a preview thumbnail to double check, as shown below - give it a title, and click '''OK'''. The map will now be loaded into the main window of MapTool.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Creating Multiple Maps in One Campaign===

MapTool lets you create multiple maps, all of which will be in one campaign. The process is very simple: you simply repeat the [[Introduction_to_Mapping#Creating_a_Map | Creating a Map]] steps for each new map, selecting a new image, background color/texture, and title for each new map.

Each new map you create will automatically be created within the campaign you are currently working on (creating a new map does not automatically save your campaign, so make sure to [[Introduction_to_Mapping#Saving_Your_Work | save your work]] when you're finished).

You can also add new maps to a campaign you've already saved - just open the campaign file (by going to '''File &gt; Open Campaign''') and follow the steps to create a new map.

==MapTool Main Window==

===MapTool Layers===

[[Image:Layer-window.png|thumb|The '''Layer''' window, which is present on all maps in MapTool]]

Once you have a map loaded, you’ll see a small box in the map window titled ''Layer''. MapTool maps have four layers:

* '''Background''': this is the layer for images, background maps, and anything that isn’t going to move.
* '''Hidden''': for online games, this is a layer only the GM can see.
* '''Object''': this is a layer for token-like objects, things that might move, or that players might be able to move (lamps, tables, etc.).
* '''Token''': this layer is the layer that tokens go on (tokens are small images that represent characters or NPCs). Make sure you have the Token layer selected when you’re adding characters and enemies to the map.

Think of the MapTool Layers as four different sheets of acetate or tracing paper, one on top of the other. The bottom one - the '''Background''' - is where you draw the basic parts of the map: walls, floors, trees, etc. On the next sheet of tracing paper, the one called '''Objects''' you draw the ''things'' that your characters might use, mess with, or break: doors, chests, tables, chairs, and so forth. On the next one up - the '''Hidden''' layer - you put things only the GM can see (which might be objects ''or'' hidden characters!). Finally, on the very top layer - the '''Token''' layer, you put your miniatures - the monsters, characters, and NPCs of the game world. 

Tokens can be put on any of the 4 layers in MapTool. To do so, just right-click on the token image, and select '''Change To &gt;'''. In the menu, select the layer you want to change the token to, and it will be moved.

===Selecting Maps===

[[Image:Blueglobe.jpg|thumb|The Globe button, where you can select among your maps]]

[[Image:Maplist.jpg|thumb|A list of maps, which appears after you click the Globe button.]]

If you create only one map in your campaign, it will be loaded by default and will be the only map you can see.

If you [[Introduction_to_Mapping#Creating_Multiple_Maps_in_One_Campaign|create multiple maps]] or have a campaign with multiple maps, you can choose between them by clicking the blue globe icon in the upper right hand side of the MapTool window – this will present a list of possible maps. Note that if you have only one map, clicking on the blue globe will show that map's name.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Zooming and Moving===

To zoom the map, you can use the mouse scroll wheel (if you have one), or you can use the equals sign to zoom in, and the hyphen to zoom out. 

Hitting the plus sign will zoom to 1:1. 

To move the map, right click on it and move the mouse. This will pan the map in any direction.

==Token Basics==

[[Token:token|MapTool Tokens]] (or just &quot;Tokens&quot;) are small images that act as visual representations of many things in a MapTool map. The most common use for tokens is to represent player and non-player characters - in other words, tokens take the place of miniatures on the virtual map. 

Tokens, like everything else, start as image files that are stored in your [[Macros:Glossary#R|Resource Library]]. MapTool comes with some default tokens (and they have a great, separate program called [http://www.rptools.net/index.php?page=tokentool TokenTool] that lets you make tokens), or you can supply your own from wherever you find them.

This section of the Introduction to Mapping guide deals with only a few of the most basic, common things you might want to do with MapTool Tokens. There are ''many'' features, tricks, and cool functions available when working with tokens - so many that they deserve a guide all to themselves. 

===Placing Tokens on the Map===

[[Image:Default-library.jpg|thumb|The ''Default'' folder in the Resource Library]]

1. To see the default tokens mentioned above, go to the Default folder in your ''Resource Library'', and click the '''+''' to expand it.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Default-tokens.jpg|thumb|The ''Tokens'' subfolder]]

2. Select the Tokens folder.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-drag-to-map.jpg|thumb|Dragging a token onto the map]]

[[Image:Token-on-map.jpg|thumb|The token appears!]]

3. In the window below (where the thumbnails appear), use the mouse to drag a token onto the map. The cursor will change to a hand, and you just need to hold the token over the map somewhere and release the button.

When you release the mouse button, the token will appear on the map, as shown in the thumbnail.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Moving Tokens===

Once a token is on the map, it can be dragged around using the mouse, or moved by selecting the token (clicking on it) and using the arrow keys to move the token, and pressing the '''D''' key to complete the move. 

If you want to create a complex path, you can hit the space bar to make a waypoint in your path. 

===Changing a Token's Name, GM Name, and Label===

[[Image:Token-default-name.jpg|thumb|A token, showing the default name assigned when it was first dragged onto the map.]]

[[Image:Edit-token.jpg|thumb|The '''Edit Token''' dialog]]

Tokens have three possible &quot;names&quot; you can assign to them. When a token is first dragged onto the map, it is given a default name (typically, the same as the token's ''filename'' on your computer, with the extension trimmed off). For example, the token shown in the image below was dragged from MapTool's default token set, and its default name is &quot;Hero.&quot;

The three possible names a token can have are:

*'''Token Name''': The name of the token that will appear to all users. This is not optional.
**&lt;font color=&quot;red&quot;&gt;'''NOTE''': Make sure each token has a unique name! Otherwise, MapTool macros may behave unpredictably.&lt;/font&gt;
*'''GM Name''': This name appears only to the person(s) currently connected to MapTool in the role of &quot;GM.&quot; 
*'''Label''': This text appears below the Token Name, and is visible to all connected individuals.

To change a token's name, GM name, and/or label:

1. Double-click on the token image on the map. This will open the '''Edit Token''' dialog, as shown below.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changednames.jpg|thumb|Editing the token's name, GM name, and label]]

[[Image:New-token-names.jpg|thumb|Token showing the new names and label]]

2. In the '''Name''' field, enter the name you'd like. For this example, I've entered &quot;Bork the Brave&quot;

3. In the '''GM Name''' field, enter a name. For this example, I've entered &quot;Cork the Cowardly&quot;

4. In the '''Label''' field, enter a Label. For this example, I've entered &quot;Human Warrior&quot;. 

5. Click '''OK''' to save your changes.

Once you've clicked okay, you'll see that the token has changed: 

You can do this name changing process with any token you drop on the map.

&lt;br style=&quot;clear:both;&quot; /&gt;

===Changing a Token's Image===

Sometimes, when you create a new token, you will want to change the image on the token's face. Say, for instance, you find a cool new picture that you just ''have'' to use for your evil overlord, but you already have a token made up for him - you don't want to delete the whole token just to change the image, right? That's overkill. Instead, just change the token image using the following steps:

[[Image:Edit-token.jpg|thumb|The '''Edit Token''' dialog]]

1. Make sure you have a new token image in PNG or JPG format, already available in your MapTool Resource Library. If you look at [[Introduction_to_Mapping#Getting_Images_into_your_MapTool_Resource_Library|Getting Images Into your MapTool Resource Library]] section, above, it talks about how to get map images into your Resource Library: well, token images (in fact, ''any'' image) can be added to your resource library in exactly the same way. 

2. Double-click on the token to open the '''Edit Token''' dialog. 

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changeimage.jpg|thumb|The button to change the token image]]

3. In the upper-left of that dialog, click the small green plus sign.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:New-image-picked.jpg|thumb|A new image is selected from the resource library]]

4. In the '''Choose Image''' dialog, select the Resource Library folder that has the new token image in it (a red-and-white border will indicate the image you've selected), and click '''OK'''.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-image-changed.jpg|thumb|The token's image has been changed]]

5. Once you hit '''OK''', you are taken back to the Edit Token dialog, and you will see that the token image has been changed to the one you selected.

&lt;br style=&quot;clear:both;&quot; /&gt;

===Changing Token Size===

[[Image:Token-rightclick.jpg|thumb|Changing the token size using the right-click menu]]

Tokens will default to the size of one grid square (note that by default, MapTool’s grid is 50x50 pixels). If you right-click on a token, the menu has a lot of options – one of which is '''Size'''. You can then set it using the size values there, so you can make large or huge or gargantuan creatures, and so forth. The image below illustrates the right-click menu for a token.

NOTE: these size values (large, huge, gargantuan, etc.) only apply to maps that have a grid (remember, when you create a map, you have the option to make a map with no grid). If you use a gridless map, the size values are more fine-grained.

&lt;br style=&quot;clear:both;&quot;/&gt;
==Saving Your Work==

MapTool's default &quot;save&quot; format is called a ''Campaign File''. The Campaign File (which has the extension ''.cmpgn'') contains the maps and tokens that you've set up. If you're interested in this sort of thing, the campaign file is actually a zipped XML file. 

To save your work so far, choose '''File -&gt; Save Campaign''', give your campaign a name, and that’s all there is to it. 

When you save a campaign, MapTool saves the locations of the tokens on all of the maps, so you can pick up right where you left off!

==Exporting Map Images==

MapTool can export your map images to an image file (PNG format). To export an image to a location of your choice:

1. Go to '''File-&gt;Export''' and select '''Screenshot As'''.

2. In the dialog that comes up, select a &quot;View&quot; (either GM view, where you can see everything, or Player View, where the only things visible are what ''players'' can see...I told you MapTool had some cool vision capabilities!)

3. Select the destination for your file using the Browse button (or, alternatively, send it to an FTP server)

4. Click '''Export'''.

==Next Steps==

Now that you can create a basic map and put some tokens on it, the next step is connecting up with some friends over the Internet (or face to face) and using it for a game session! This topic is covered in the [[Introduction to Game Hosting]].
{{Languages|Introduction to Mapping}}</text>
      <sha1>pb4iurledvn2ivqjzpqtzuugfet23zo</sha1>
    </revision>
  </page>
  <page>
    <title>MTBasics:IntroductionToMaps</title>
    <ns>0</ns>
    <id>717</id>
    <redirect title="Introduction to Mapping" />
    <revision>
      <id>2234</id>
      <timestamp>2009-03-25T12:30:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[MTBasics:IntroductionToMaps]] moved to [[Introduction to Mapping]]: We haven't moved everything out of namespaces yet, but we're working towards it.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[Introduction to Mapping]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token:token property</title>
    <ns>0</ns>
    <id>718</id>
    <redirect title="Token Property" />
    <revision>
      <id>2239</id>
      <timestamp>2009-03-25T12:39:35Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Token:token property]] moved to [[Token Property]]: Moved to main namespace, renamed with proper case.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[Token Property]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Token</title>
    <ns>14</ns>
    <id>719</id>
    <revision>
      <id>2241</id>
      <timestamp>2009-03-25T12:41:08Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Added to MapTool category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:MapTool</title>
    <ns>14</ns>
    <id>720</id>
    <revision>
      <id>5675</id>
      <parentid>2242</parentid>
      <timestamp>2011-08-14T11:22:26Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Short introduction on MapTool</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="292">Don’t let the name fool you, MapTool is far more than just maps. While it does include  powerful tools for the creation of detailed maps, it’s primary role is a Virtual Table Top replacing pen, paper, battle mats, and dice. It is the primary and founding RPG product in the RPTools suite.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Chat:Commands</title>
    <ns>0</ns>
    <id>721</id>
    <redirect title="Chat Commands" />
    <revision>
      <id>2244</id>
      <timestamp>2009-03-25T12:44:27Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Chat:Commands]] moved to [[Chat Commands]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[Chat Commands]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Chat:Dice</title>
    <ns>0</ns>
    <id>722</id>
    <redirect title="Dice Expressions" />
    <revision>
      <id>2247</id>
      <timestamp>2009-03-25T12:46:36Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Chat:Dice]] moved to [[Dice Expressions]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Dice Expressions]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:introduction</title>
    <ns>0</ns>
    <id>723</id>
    <redirect title="Macro Introduction" />
    <revision>
      <id>2250</id>
      <timestamp>2009-03-25T12:50:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:introduction]] moved to [[Macro Introduction]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[Macro Introduction]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Variables:variable types</title>
    <ns>0</ns>
    <id>724</id>
    <redirect title="Category:Variable Type" />
    <revision>
      <id>2330</id>
      <parentid>2329</parentid>
      <timestamp>2009-03-25T14:11:37Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[Category:Variable Type]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[:Category:Variable Type]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Variables:string</title>
    <ns>0</ns>
    <id>725</id>
    <redirect title="String" />
    <revision>
      <id>2256</id>
      <timestamp>2009-03-25T12:55:18Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Variables:string]] moved to [[String]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[String]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:string list</title>
    <ns>0</ns>
    <id>726</id>
    <redirect title="String List" />
    <revision>
      <id>2258</id>
      <timestamp>2009-03-25T12:55:59Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:string list]] moved to [[String List]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[String List]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:string property list</title>
    <ns>0</ns>
    <id>727</id>
    <redirect title="String Property List" />
    <revision>
      <id>2260</id>
      <timestamp>2009-03-25T12:57:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:string property list]] moved to [[String Property List]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[String Property List]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Variable Type</title>
    <ns>14</ns>
    <id>728</id>
    <revision>
      <id>4325</id>
      <parentid>4323</parentid>
      <timestamp>2010-07-05T09:40:26Z</timestamp>
      <contributor>
        <username>WikiSysop</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/Mark2web|Mark2web]] ([[User talk:Mark2web|Talk]]) to last version by [[User:Verisimilar|Verisimilar]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">[[Category:Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>JSON Array</title>
    <ns>0</ns>
    <id>729</id>
    <revision>
      <id>5863</id>
      <parentid>5823</parentid>
      <timestamp>2012-02-10T10:07:31Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Typographical tweaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="261">{{stub}}
An array is an '''ordered''' collection of values. An array begins with {{code|[}} (left bracket) and ends with {{code|]}} (right bracket). Values are separated by {{code|,}} (comma).&lt;br&gt;
- from [http://www.json.org JSON.org]
[[Category:Variable Type]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>JSON Object</title>
    <ns>0</ns>
    <id>730</id>
    <revision>
      <id>5864</id>
      <parentid>5822</parentid>
      <timestamp>2012-02-10T10:18:36Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Typographical tweaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="338">{{stub}}
An object is an '''unordered''' set of name/value pairs. An object begins with {{code|{}} (left brace) and ends with {{code|&lt;nowiki&gt;}&lt;/nowiki&gt;}} (right brace). Each name is followed by {{code|:}} (colon) and the name/value pairs are separated by {{code|,}} (comma).&lt;br&gt;
- [http://www.json.org JSON.org]
[[Category:Variable Type]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Number</title>
    <ns>0</ns>
    <id>731</id>
    <revision>
      <id>2269</id>
      <timestamp>2009-03-25T13:09:36Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Created stub so this article will show up in category views.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35">{{stub}}
[[Category:Variable Type]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:bar.bar name</title>
    <ns>0</ns>
    <id>732</id>
    <redirect title="bar.name" />
    <revision>
      <id>2273</id>
      <timestamp>2009-03-25T13:16:32Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:bar.bar name]] moved to [[bar.name]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[bar.name]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:state.state name</title>
    <ns>0</ns>
    <id>733</id>
    <redirect title="state.name" />
    <revision>
      <id>2276</id>
      <timestamp>2009-03-25T13:18:46Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:state.state name]] moved to [[state.name]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[state.name]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Game Hosting</title>
    <ns>0</ns>
    <id>734</id>
    <revision>
      <id>5568</id>
      <parentid>5531</parentid>
      <timestamp>2011-07-19T13:00:10Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Moving languages in proper place</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18165">{{Languages|Introduction to Game Hosting}}{{Beginner}}__TOC__
==Introduction==

As seen in the [[Introduction_to_Mapping|Introduction to Mapping]], MapTool lets you create virtual maps and virtual &quot;miniatures&quot; (which are known in MapTool jargon as [[Introduction_to_Tokens|tokens]]) to be used for playing a roleplaying game session, much like you would use a real map and real miniatures on a tabletop. In fact, that's why we call MapTool a &quot;virtual tabletop,&quot; or &quot;VTT.&quot; In this guide, we'll walk through MapTool's fundamental reason to be: sharing a map with other players via the Internet.

'''Note:''' MapTool is not ''only'' useful for online play - many people use it for their face to face sessions too, because you can do things with a virtual map that you can't do with a physical one. Also, you're less likely to dump Mountain Dew on it. However, this guide will assume that you're playing online. 

The Introduction to Mapping guided you through the basic steps to get MapTool, open it up, and put a map and some tokens on it. It also talked about saving Campaign Files, how you can move and zoom the map, and how to move tokens around. These are essential features of the program, without which none of the rest would be worth reading about!

Since hosting is no fun without people connecting to your game, the last section of this guide covers how to connect to a MapTool server. You'll need to tell your friends how to do that, so make sure to read that section!

Finally, since this guide is about ''hosting'' an online game, &quot;you&quot; will always mean &quot;the person who is running the server.&quot;

==Architecture==

When used for online gaming, MapTool uses a ''client-server'' architecture. In other words, one person (usually the GM, but not always) uses MapTool to start a ''server'', and the other people in the group then connect to that server as ''clients''. 

Once you start the server and everyone is connected, the campaign file (with all the maps, tokens, and other info) is then shared among all the players, so that everyone sees the same map and can watch as they and their friends move tokens around, enter text in the chat window, and have a great time. 

==A Word About Networking Stuff==

One of the challenges in setting up a MapTool game (like many client-server applications, including many other Virtual Tabletop programs) is configuring your home network to permit your friends to connect to your MapTool server. 

There are several ways to set up your network to allow Maptool to be hosted over the internet. UPnP, port forwarding, or an external Virtual Private Networking software package. Depending on your computer, ISP, and hardware (such as cable/DSL modem and/or router), will determine which of these options will work for your setup - with the wide variation in home networks and networking hardware, it's not possible to give a single set of rules that will guarantee success.

===UPnP===

An alternative to port forwarding - if it's available on your router - is called ''UPnP'' (short for ''Universal Plug-and-Play''). This feature, instead of permanently saying &quot;Port XYZ traffic goes here!&quot;, will instead tell the router &quot;for a little while - while we're playing - I'm gonna have to go ahead and ask you to open up Port XYZ for us. That would be ''greeaaaat''.&quot; 

In other words, it makes the handling of ports and incoming and outgoing traffic a little more seamless and simple. Of course, the downside is that not everything supports UPnP, and you'll have to figure out whether your network can do it. However, if your network hardware supports UPnP, it is ''by far'' the easiest way to get your MapTool server up and running.

===Port Forwarding===

For home networks that use a router or physical firewall, you will probably need to configure ''port forwarding.'' This is a mechanism by which information coming ''to'' your network, and arriving on a specific ''port'', is sent to the right place ''inside'' your network. This is important for you as the MapTool server person, since your friends need to be sending information to the right place!

The specifics of configuring port forwarding will depend on your hardware, so you'll have to check your manual for that one. But the basic idea is that you indicate two things to the router/switch/firewall:

# Which port MapTool will use (more on MapTool ports later!) - this is telling the router &quot;information will be coming in on Port XYZ; pay attention!&quot;
# Which computer, inside the network, that information needs to go to - basically, &quot;and when you see information coming in on Port XYZ, send it ''here''&quot; 
## Incidentally, setting up port forwarding also tells the router where it can stick ''outgoing'' information, too. 

That is port forwarding in a nutshell, and the reason you need to set it up is that most routers (especially if they're configured securely and properly) are not going to just allow random incoming information to get through. 

===More and Better Networking Information===

I was all set to write an elaborate section on networking, when I realized that there is an excellent [http://forums.rptools.net/download/file.php?id=116 FAQ] written by Azhrei at the [http://forums.rptools.net MapTool Forums]. If you are unfamiliar with concepts like Port Forwarding, configuring your router, or how networks work (in general), please read the FAQ. 

If you are familiar with network configuration and managing your home network (especially if you can set up software to act as a server, or have set up port forwarding on your network for other applications), setting up MapTool to act as a server will be old hat: you'll basically need to configure port forwarding or UPnP on your router to permit MapTool network traffic to pass. 

If you need specific information on port forwarding configuration for your network hardware, check out [http://www.portforward.com Portforward.com] for an extensive collection of how-to documents for specific network hardware and specific software packages.

On the other hand, if all that stuff above made no sense to you: read the [http://forums.rptools.net/download/file.php?id=116 Networking FAQ]! All will be revealed!

Now, let's get on with it.

==Starting Up a MapTool Server==

===Assumptions===

From here on out, these instructions assume that you have configured your network to handle MapTool traffic (via port forwarding or UPnP, for example). If not, you'll have to figure out how to do that before it will be possible to start a server that your friends can use.

===The Start Server Dialog===

[[Image:mt-file-menu-startserv.jpg|thumb|Selecting ''Start Server'' from the File menu]]

[[Image:mt-start-server.jpg|thumb|The '''Start Server''' dialog]]

1. Go to '''File &gt; Start Server'''.

2. You will now see the '''Start Server''' dialog. There are a lot of options here.

===Server Options and Settings===

====Configuration Settings====

* '''Username''': this is the name that will appear in chat and in the Connections window; you can set it to be anything you like.
* '''Role''': this drop down box lets you tell MapTool what ''kind'' of user you are: are you the GM (and therefore in possession of Total Cosmic Power over all of the MapTool functions?) or are you a player, who lives at the GM's every whim (or, in other words, only has access to player functions)? Note that a game can have more than 1 GM! 
* '''Port''': A ''very'' important setting, this is where you tell MapTool what port you've configured your router to forward. If you give it the wrong port, MapTool traffic will be unable to enter or leave your network, and you will have no game!
* '''RPTools Alias''': this field allows you to set up an &quot;alias&quot; for your server to appear on the RPTools server registry. It basically lets you tell your players &quot;look for the server named Awesome Server and connect to it,&quot; instead of &quot;connect to the server at IP Address 123.45.678.9&quot;
* '''Passwords''': you can protect access to your server by configuring passwords. Setting a password on the server is optional; however, if you leave it blank, anyone who can find your server can connect to it as a player. There are two password categories:
** '''GM''': the GM password is used to provide someone with full access to the campaign remotely, though there are a small number of features which cannot be done remotely, such as loading a campaign. The GM password is typically used for a secondary GM so that GM duties may be shared, but can also be used in cases where the GM may not be able to get hosting set up properly and has one of his players host the session.
** '''Player''': people connecting to the server in the &quot;Player&quot; role will use this password to connect.

====Ownership, Vision, and Behavior====

* '''Strict Token Ownership''': MapTool uses a concept called &quot;token ownership&quot; to control who can select, move, or look at the [[Macros:Glossary#P|properties]] of a particular token. If you enable ''Strict Token Ownership'', only the ''owner'' of a particular token may perform any actions on it - everyone else is confined to looking at the token.
* '''Players can reveal vision''': MapTool has a vision and fog-of-war system (where you can configure how tokens &quot;see&quot; the map). With this option enabled, players can reveal the area that is &quot;visible&quot; to their token without GM intervention (in other words, an area hidden to the token is covered by Fog of War, and appears opaque on the screen; when you reveal it, the opaque overlay is cleared, and the map underneath becomes visible). Otherwise, the GM must do all reveals. 
* '''Use Individual Views''': in the vision system mentioned above, player tokens can either &quot;share&quot; their vision (''i.e.'', everyone sees what one player character sees) or they can have individualized views.
* '''Restricted Player Impersonation''': This means that players can only impersonate tokens that they have ownership (see above) of
* '''Players Receive Campaign Macros''': MapTool lets you write [[Macros:introduction|macros]], which are basically sequences of text, token, and dice rolling commands used to automate certain activities - basically, a short script that does ''something''. The GM can create &quot;Campaign Macros&quot; which become available to all players if this option is checked. 
* '''Use Tooltip for [] rolls''': Enabling this option makes any dice roll you enclose in square brackets show only the roll result, and display the full roll details if you hover your mouse over the result.

===Testing the Connection===

&lt;s&gt;Before you start your server, it is a good idea to hit the '''Test Connection''' button. This will send a message out to a server at RPTools.net asking that it attempt to connect to your computer - in other words, the RPTools connection testing server will find out if it can see your computer over the network! &lt;/s&gt;

&lt;s&gt;What you want to see is '''Success! I can see your computer!''' If you get that, you can be pretty sure that your server will be visible when you start it up.&lt;/s&gt; 

&lt;s&gt;If you do ''not'' see a message proclaiming a successful connection test, you will need to investigate port forwarding and your network configuration to make sure you have the right ports configured and everything properly arranged.&lt;/s&gt;&lt;sub&gt;This description is deprecated.&lt;/sub&gt;


'''Note:''' The test connection was frequently broken and has so caused lots of trouble. Thus it was removed in b76 (or so). The Start Server Dialog now has a button &quot;Networking Help&quot; that leads you to the Networking FAQ in the forums. This is really the place to go. Read it (yes, read it not skim it!) and follow all steps. If that doesnt help the community will very likely be able to help you out.

For a quick connection test you can use canyouseeme.org[http://canyouseeme.org/]

===Get your Connection Information and Tell Your Friends===

[[Image:mt-file-menu-cinfo.jpg|thumb|Opening ''Connection Information'' from the File menu]]

[[Image:connection-info.jpg|thumb|The '''Connection Information''' dialog]]

Assuming that you had a successful connection test, and you clicked '''OK''' to start the server, you can then check out your ''Connection Information'' to double-check the settings. These settings will need to be passed on to your friends so that they can connect to the server.

1. Go to '''File &gt; Connection Information'''. 

This will display what MapTool currently knows about your computer. Since you haven't started a server quite yet, you'll just see your computers internal and external IP addresses (this is useful info, though, especially if you haven't quite set up port forwarding!).

When a server is started, you will also see the name of the server (if you give it one), and the network port that server traffic will use.

2. Provide this information to your friends: tell them the ''Server Name'' (a.k.a. the RPTools Alias, if you set one), the ''external'' IP address, and the ''port''. They will need to put this into the '''Connect to Server''' dialog when they attempt to log in to your server.

&lt;br style=&quot;clear:both;&quot;/&gt;

==Connecting to a MapTool Server==

The steps leading up to this point walked you through setting up a MapTool server so that people can connect to it. Of course, if you don't have anyone connecting to your server, things are going to get pretty boring pretty quick. These steps are focused on your friends who will be connecting ''to'' the server you just created. 

===Assumptions===

The following information assumes that all of the following are true! Lacking any of these is going to make for a very short trip.

* You have friends
* You have a MapTool server running
* Your friends know the following:
** Either the server's ''Name'' OR the servers ''External Address'' is (or preferably, both!)
** What the appropriate ''password'' is (either GM or Player password)
** What ''Port'' the server is using
* '''VERY IMPORTANT: Your friends are using the same version of MapTool that you are using!'''

===Open the Connect to Server Dialog===

[[Image:mt-connect-to-server.jpg|thumb|The '''Connect to Server''' dialog]]

If the assumptions mentioned above are met, here's what you tell your friends:

1. Go to '''File &gt; Connect to Server''' to see the '''Connect to Server''' dialog.

2. Enter a ''User name''. This can be anything your friends wish. 

3. Enter the password (which you set when you started the server).

4. Choose your ''Role''. Your friends can connect as a GM, or as a Player. Make sure that they pick the right role for the password you're using!

&lt;br style=&quot;clear:both;&quot;/&gt;

===Choose how You will Connect===

The '''Connect to Server''' dialog presents three ways to connect to a running server.

====RPTools.net====

[[Image:mt-connect-registry.jpg|thumb|The RPTools tab in '''Connect to Server''']]

This tab (which is shown by default) lists all of the servers listed at the RPTools.net ''Server Registry.'' When you set up the server, you had the option to give it an ''alias'', which is what appears in this list. The ''Server Registry'' stores the connection information for the server, so your friends can just select the server they want, and hit '''OK'''.

&lt;br style=&quot;clear:both;&quot;/&gt;

====LAN====

[[Image:mt-connect-lan.jpg|thumb|The '''LAN''' tab in '''Connect to Server''']]

This tab will show any servers that are currently running on the ''local'' network. This is for when you want to have a MapTool LAN Party, or when all your friends are inside the same network (like if everyone bringes their laptop to your house for game night). 

&lt;br style=&quot;clear:both;&quot;/&gt;

====Direct====

[[Image:mt-connect-direct.jpg|thumb|The '''Direct''' tab in '''Connect to Server''']]

A direct connection is just that - your friends bypass the friendly RPTools.net tab, and simply type the External Address and port number for the server.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Verifying Connections===

As your friends connect to your MapTool server, you will see notifications in the '''Chat Pane''' that people have connected to your server, which look like:

&lt;font color=&quot;blue&quot;&gt;''JQRandom has connected.''&lt;/font&gt;

You can also check the '''Connections Pane''' to see a list of everyone who is connected to your server. If you do not see the Connections Pane, go to '''Window &gt; Connections''' to have it pop into view.

==Tokens on your Map==

When you're running MapTool by yourself, you've got access to every token and every item on a map, because MapTool assumes that you're the GM (and, therefore, the All-Powerful God of the tiny world represented by the Map). However, when you start hosting a game, MapTool has different roles (mentioned previously) for the different people connecting. The '''GM''' role retains it's all-powerful status, able to select and manipulate anything on the map; however, the '''Player''' role has a much more restricted set of options, able to control only those items that the player has ''ownership'' of. 

Because of that, when you start a server, you will need to make sure that you give your players ownership of the Tokens they are supposed to control! This is a common oversight when starting up a new server - forgetting to set token ownership after your players have connected! 

Token Ownership is explained in more detail in [[Introduction to Tokens]], but for the purposes of this tutorial, once you've started a server and you've got your friends connected as players, do the following for each player connected to the game:

# Double click on the token that player will be controlling as their Player Character (see Note, below).
# Set the token type to PC.
# Go to the '''Ownership''' Tab
# Check the box next to the ''player's'' name, granting them ownership of the token.
# Click '''OK''' to save the changes.

Once you do this, the players will be able to move and edit their own tokens. You can also grant ownership of a token to All Players, if everyone needs to manipulate it.

'''NOTE''': players can have ownership of NPC tokens if you wish (the process is the same, except you don't do Step #2); however, you'll at least need to make sure they own their own player token!
{{Languages|Introduction to Game Hosting}}[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:macro.args</title>
    <ns>0</ns>
    <id>735</id>
    <redirect title="macro.args" />
    <revision>
      <id>2282</id>
      <timestamp>2009-03-25T13:43:52Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:macro.args]] moved to [[macro.args]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[macro.args]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:macro.return</title>
    <ns>0</ns>
    <id>736</id>
    <redirect title="macro.return" />
    <revision>
      <id>2285</id>
      <timestamp>2009-03-25T13:45:32Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:macro.return]] moved to [[macro.return]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[macro.return]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Special Variable</title>
    <ns>14</ns>
    <id>737</id>
    <revision>
      <id>2320</id>
      <parentid>2287</parentid>
      <timestamp>2009-03-25T14:00:21Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added short note about not using reserved names.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="188">This page presents an alphabetical list variables that are special or reserved in MapTool. You may not create your own variable with the same name as a special variable.
[[Category:Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:roll.count</title>
    <ns>0</ns>
    <id>738</id>
    <redirect title="roll.count" />
    <revision>
      <id>2289</id>
      <timestamp>2009-03-25T13:47:34Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:roll.count]] moved to [[roll.count]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[roll.count]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:roll.result</title>
    <ns>0</ns>
    <id>739</id>
    <redirect title="roll.result" />
    <revision>
      <id>2292</id>
      <timestamp>2009-03-25T13:48:35Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:roll.result]] moved to [[roll.result]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[roll.result]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:token.gm name</title>
    <ns>0</ns>
    <id>740</id>
    <redirect title="token.gm name" />
    <revision>
      <id>2295</id>
      <timestamp>2009-03-25T13:49:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:token.gm name]] moved to [[token.gm name]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[token.gm name]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:token.halo</title>
    <ns>0</ns>
    <id>741</id>
    <redirect title="token.halo" />
    <revision>
      <id>2297</id>
      <timestamp>2009-03-25T13:50:01Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:token.halo]] moved to [[token.halo]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[token.halo]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:token.init</title>
    <ns>0</ns>
    <id>742</id>
    <redirect title="token.init" />
    <revision>
      <id>2300</id>
      <timestamp>2009-03-25T13:50:14Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:token.init]] moved to [[token.init]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[token.init]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:token.initHold</title>
    <ns>0</ns>
    <id>743</id>
    <redirect title="token.initHold" />
    <revision>
      <id>2302</id>
      <timestamp>2009-03-25T13:50:24Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:token.initHold]] moved to [[token.initHold]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[token.initHold]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:token.label</title>
    <ns>0</ns>
    <id>744</id>
    <redirect title="token.label" />
    <revision>
      <id>2305</id>
      <timestamp>2009-03-25T13:50:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:token.label]] moved to [[token.label]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[token.label]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:token.name</title>
    <ns>0</ns>
    <id>745</id>
    <redirect title="token.name" />
    <revision>
      <id>2307</id>
      <timestamp>2009-03-25T13:50:51Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:token.name]] moved to [[token.name]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[token.name]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Special Variables:token.visible</title>
    <ns>0</ns>
    <id>746</id>
    <redirect title="token.visible" />
    <revision>
      <id>2309</id>
      <timestamp>2009-03-25T13:51:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Macros:Special Variables:token.visible]] moved to [[token.visible]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[token.visible]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:mt-file-menu-cinfo.jpg</title>
    <ns>6</ns>
    <id>747</id>
    <revision>
      <id>2322</id>
      <timestamp>2009-03-25T14:03:40Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:mt-file-menu-startserv.jpg</title>
    <ns>6</ns>
    <id>748</id>
    <revision>
      <id>2323</id>
      <timestamp>2009-03-25T14:03:52Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:connection-info.jpg</title>
    <ns>6</ns>
    <id>749</id>
    <revision>
      <id>2324</id>
      <timestamp>2009-03-25T14:04:27Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:mt-start-server.jpg</title>
    <ns>6</ns>
    <id>750</id>
    <revision>
      <id>2325</id>
      <timestamp>2009-03-25T14:04:49Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token:token</title>
    <ns>0</ns>
    <id>751</id>
    <redirect title="Token" />
    <revision>
      <id>2341</id>
      <timestamp>2009-03-25T15:30:23Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Token:token]] moved to [[Token]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:mt-connect-to-server.jpg</title>
    <ns>6</ns>
    <id>752</id>
    <revision>
      <id>2342</id>
      <timestamp>2009-03-25T15:31:49Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token:image token</title>
    <ns>0</ns>
    <id>753</id>
    <redirect title="Image Token" />
    <revision>
      <id>2347</id>
      <timestamp>2009-03-25T15:36:43Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Token:image token]] moved to [[Image Token]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[Image Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:mt-connect-registry.jpg</title>
    <ns>6</ns>
    <id>754</id>
    <revision>
      <id>2348</id>
      <timestamp>2009-03-25T15:48:23Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:mt-connect-lan.jpg</title>
    <ns>6</ns>
    <id>755</id>
    <revision>
      <id>2350</id>
      <parentid>2349</parentid>
      <timestamp>2009-03-25T15:49:36Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:mt-connect-lan.jpg]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:mt-connect-direct.jpg</title>
    <ns>6</ns>
    <id>756</id>
    <revision>
      <id>2351</id>
      <timestamp>2009-03-25T15:50:19Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:TumblingClones.jpeg</title>
    <ns>6</ns>
    <id>757</id>
    <revision>
      <id>2378</id>
      <parentid>2377</parentid>
      <timestamp>2009-03-27T08:56:40Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:TumblingClones.jpeg]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:PointingClones.jpeg</title>
    <ns>6</ns>
    <id>758</id>
    <revision>
      <id>2382</id>
      <timestamp>2009-03-27T09:08:20Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:File-dialog.jpg</title>
    <ns>6</ns>
    <id>759</id>
    <revision>
      <id>2387</id>
      <timestamp>2009-03-28T23:30:27Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getNPCs</title>
    <ns>0</ns>
    <id>760</id>
    <redirect title="getNPC" />
    <revision>
      <id>2396</id>
      <timestamp>2009-03-29T08:40:06Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <comment>[[getNPCs]] moved to [[getNPC]]: Corrected the name of the function</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[getNPC]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getPCs</title>
    <ns>0</ns>
    <id>761</id>
    <redirect title="getPC" />
    <revision>
      <id>2401</id>
      <timestamp>2009-03-29T08:45:34Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <comment>[[getPCs]] moved to [[getPC]]: Corrected function name</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[getPC]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.count</title>
    <ns>0</ns>
    <id>762</id>
    <revision>
      <id>2511</id>
      <parentid>2404</parentid>
      <timestamp>2009-03-31T19:21:50Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Minor formatting changes, corrected examples, added see also.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1009">{{MacroFunction
|name=json.count
|version=1.3b53
|description=
Returns the number of occurrences of a value in a [[JSON Array]]. If the value does
not occur in the [[JSON Array]] then {{code|-1}} is returned. The index for the [[JSON Array]]
starts at {{code|0}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.count(array, value)]
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.count(array, value, start)]
&lt;/source&gt;
'''Parameters'''
{{param|array|The [[JSON Array]] to search.}}
{{param|value|The value to count the occurrences of.}}
{{param|start|The index to start searching from, if not specified it defaults to {{code|0}}.}}

|example=
Find the number of occurrences of {{code|1}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: json.count(&quot;[1,2,3,1,1,3]&quot;, 1)]
&lt;/source&gt;
Returns {{code|3}}

Find the number of occurrences of {{code|1}}, starting at index {{code|1}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: json.count(&quot;[1,2,3,1,1,3]&quot;, 1, 1)]
&lt;/source&gt;
Returns {{code|2}}

|also=
{{func|json.contains}}

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.indexOf</title>
    <ns>0</ns>
    <id>763</id>
    <revision>
      <id>2512</id>
      <parentid>2405</parentid>
      <timestamp>2009-03-31T19:28:45Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Minor formatting changes, corrected examples, added see also.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1233">{{MacroFunction
|name=json.indexOf
|version=1.3b53
|description=
Returns the index of the first occurrence of a value in the [[JSON Array]]. If the value does not exist in the [[JSON Array]] then {{code|-1}} is returned. All [[JSON Array]] indexes start at {{code|0}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.indexOf(array, value)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.indexOf(array, value, start)
&lt;/source&gt;
'''Parameters'''
{{param|array|The [[JSON Array]] to search.}}
{{param|value|The value to find the index of in the [[JSON Array]].}}
{{param|start|The index to start searching from, if not specified it defaults to {{code|0}}.}}

|examples=
Find the index of the first occurrence of {{code|1}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: json.indexOf(&quot;[1,2,3,1,1,3]&quot;, 1)]
&lt;/source&gt;
Returns: {{code|0}}

Find the index of the first occurrence of {{code|1}}, starting at index {{code|1}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: json.count(&quot;[1,2,3,1,1,3]&quot;, 1, 1)]
&lt;/source&gt;
Returns: {{code|3}}

Find the index of the first occurrence of {{code|2}}, starting at index {{code|2}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: json.count(&quot;[1,2,3,1,1,3]&quot;, 2, 2)]
&lt;/source&gt;
Returns: {{code|-1}}

|also=
{{func|json.count}}

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.merge</title>
    <ns>0</ns>
    <id>764</id>
    <revision>
      <id>6193</id>
      <parentid>6177</parentid>
      <timestamp>2013-07-12T07:02:20Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Tweaking page layout and typography</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1443">{{MacroFunction
|name=json.merge
|version=1.3b53
|description=
Merges multiple [[JSON Array]]s or [[JSON Object]]s.

For [[JSON Array]]s the value returned is that of all the [[JSON Array]]s concatenated together.

For [[JSON Object]]s the value returned is a [[JSON Object]] with all of the keys from all of the [[JSON Object]]s set, if any key is specified in more than one [[JSON Object]] then the value for the last specified [[JSON Object]] is used.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.merge(array, array, ...)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.merge(object, object, ...)
&lt;/source&gt;
'''Parameters'''
{{param|array|A [[JSON Array]].}}
{{param|object|A [[JSON Object]].}}

|examples=
Merge three [[JSON Array]]s:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: json.merge(&quot;[1,2]&quot;, &quot;[3,4]&quot;, &quot;[1,2]&quot;)]
&lt;/source&gt;
Returns: {{code|[1,2,3,4,1,2]}}

Merge two [[JSON Object]]s with no matching keys:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: json.merge(&quot;{a:1, b:2}&quot;, &quot;{c:10, d:7}&quot;)]
&lt;/source&gt;
Returns: {{code|{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:10,&quot;d&quot;:7} }}

Merge three [[JSON Object]]s with a matching key, {{code|a}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: json.merge(&quot;{a:1, b:2}&quot;, &quot;{c:10, d:7}&quot;, &quot;{a:11, z:7}&quot;)]
&lt;/source&gt;
Returns: {{code|{&quot;a&quot;:11,&quot;b&quot;:2,&quot;c&quot;:10,&quot;d&quot;:7,&quot;z&quot;:7} }}

|also=
{{func|json.union}}, {{func|json.intersection}}

|changes=
{{change|1.3b54|Fixed bug which allows {{code|json.merge()}} to work correctly with [[JSON Object]]s.}}

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.unique</title>
    <ns>0</ns>
    <id>765</id>
    <revision>
      <id>2520</id>
      <parentid>2514</parentid>
      <timestamp>2009-03-31T23:39:26Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>Added note about being able to use json.union to get merge multiple arrays and get unique values.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1376">{{MacroFunction
|name=json.unique
|version=1.3b53
|description=
Returns a [[JSON Array]] with each value that occurs in the source [[JSON Array]] occurring only once. The relative order of the values in the array may not be preserved.


|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.unique(array)
&lt;/source&gt;
'''Parameters'''
{{param|array|The [[JSON Array]] to return only unique values from.}}

|example=
Lets say you have a [[JSON Array]] that contains the following [[Token]] names: {{code|[&quot;Hero&quot;, &quot;Dragon&quot;]}}, and you use {{code|{{func|getPCNames}}}} to return the names of
the [[PC Token]]s, you could use the following code to generate a [[JSON Array]] that contains the values in both [[JSON Array]]s with no value present more than once.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names1 = '[&quot;Hero&quot;, &quot;Dragon&quot;]']
[h: names2 = getNPCNames()]
[h: names = json.merge(names1, names2)]
[r: json.unique(names)]
&lt;/source&gt;
If {{code|{{func|getPCNames}}}} returns {{code|[&quot;Hero&quot;, &quot;Sidekick&quot;, &quot;Policeman&quot;]}} then the
result of the above code will be {{code|[&quot;Policeman&quot;,&quot;Sidekick&quot;,&quot;Hero&quot;,&quot;Dragon&quot;]}}

While the above example demonstrates the output of {{code|{{func|json.unique}}}} if you want to merge
two or more arrays and get the unique values in one step you can use the {{code|{{func|json.union}}}}
function.

|also=
{{func|json.merge}}
{{func|json.union}}

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Dice Box</title>
    <ns>0</ns>
    <id>766</id>
    <revision>
      <id>4308</id>
      <parentid>4307</parentid>
      <timestamp>2010-06-24T16:23:57Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>/* Requirements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4763">==Dice Box==

''Dice Box'' is a collection of MapTool macros that provide a visual, user friendly interface for making basic dice rolls. MapTool has an extensive set of chat commands that let users roll dice in the main chat window (dice commands that look like '''/roll 1d20+9'''). The Dice Box scripts add a visual, easy-to-understand window for rolling dice and sending the results to the chat window. 

The instructions below assume you are familiar with how to start MapTool and how to navigate around MapTool. If you aren't, please check out the [[Introduction_to_Mapping|Introduction to Mapping]] for a quick guide to getting started with MapTool.

===Requirements===

# MapTool '''1.3.b66''' or later. It may work on previous versions, but is untested.
# A Java [[Stack_Size|stack size]] higher than 512KB.

===Getting the Dice Box Token===

# Download Dice Box from [http://www.houseofgenius.com/files/mtfw/dicebox/diceBox_v31.rptok my website]. The latest version is '''3.1'''. You should receive a file called '''diceBox_v31.rptok'''
# Download the [http://www.houseofgenius.com/files/mtfw/dicebox/colordice.mttable table of colorful dice images]. This contains the images and is required for Dice Box to function. You should get a file named '''colordice.mttable'''. If it is renamed to colordice.zip, make sure to change the extension to &quot;mttable&quot;. 

'''Tip''': Files with an '''.rptok''' extension are MapTool's format for saving tokens and all of the macros and information they may contain. Files with a '''.mttable''' extension are MapTool's format for tables within the system.

===&quot;Installing&quot; Dice Box===

[[Image:Db27_dragtomap.png|thumb|The token is dragged onto the MapTool map]]

[[Image:Diceboxconfig.png|thumb|The '''Ownership''' tab]]

[[Image:Dicebox_vistoplayers.png|thumb|The '''Config''' tab]]

[[Image:Dicebox27.png|thumb|The Dice Box Appears!]]

Though this section is called &quot;Installing Dice Box,&quot; bear in mind that we're not actually ''installing'' anything - you won't need to run any programs besides MapTool, and your MapTool files will not be changed. However, for simplicity's sake, I used the term &quot;installing.&quot; Anyway, here's how to get the Dice Box on your system:

# Open MapTool. 
# Drag the file '''dicebox_v31.rptok''' from wherever you downloaded it, onto the MapTool map. You should see a token called '''Lib:Play''' appear on the map. '''Tip''': if you are familiar with MapTool's Resource Library, you can save your token there, too, and drag it from your Resource Library onto the map. Also, once you put the token on one map, ''don't put it on any others'' - the way Library Tokens work, they can only be on '''''one''''' map. So once you've put it on one map, that's all you need to do.
# Double-click on the token to get the '''Edit Token''' window. 
# Go to the '''Ownership''' tab and make sure ''nothing'' is checked.
# Go to the '''Config''' tab and make sure '''Visible to Players''' is checked. 
# Click '''OK''' to close the Edit Token window. 
# Go to '''Window &gt; Tables'''
# Click the &quot;Import&quot; button. 
# Navigate to where you saved the file '''colordice.mttable''' and select it. Click &quot;Open.&quot; A new table called &quot;NewDice&quot; will appear in the Tables window.
# Go to '''File &gt; Save Campaign As''' and save your work so far as a Campaign File, giving it whatever name you like (such as &quot;Basic.cmpgn&quot;). 
# Select the Dice Box token, and in the selection window (if you don't see that window, go to '''Window &gt; Selection''') and click the button labeled '''onCampaignLoad'''. The Dice Box frame will pop up!

===Using Dice Box===

[[Image:Dicebox-output.jpg|thumb|Sample output of the Dice Box]]

Using Dice Box is easy:

1. Click on the pictures of the dice you need to roll. Each time you click, you'll add one more die of that type to the roll. The total for each kind of die is shown below or beside the corresponding image.

2. Add any fixed amount in the last box (for instance, if you want to add 7 to the total dice roll, put a 7 in the last box). 

3. Click on the '''Show Results To:''' link to switch between making the results visible to everyone, or visible only to the GM and yourself. Click on &quot;Results&quot; to change between a &quot;tooltip&quot; that shows only the ''total'' of each group of dice, or shows the total ''and'' the results of each individual die. 

4. Once you've selected the dice you want to roll, click '''Roll'''. The result of the roll will appear in the chat window, as shown below:

5. If you make a mistake, you can hit &quot;Clear All&quot; to clear out the dice you've selected, and start over.


If you need to adjust the layout of the Dice Box (to fit your MapTool window better) click &quot;Change Layout,&quot; and pick from one of the options. 

[[Category:Cookbook]]
{{Languages|Dice_Box}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Dragtoken-to-map.jpg</title>
    <ns>6</ns>
    <id>767</id>
    <revision>
      <id>2414</id>
      <timestamp>2009-03-30T01:34:03Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Token-appears.jpg</title>
    <ns>6</ns>
    <id>768</id>
    <revision>
      <id>2415</id>
      <timestamp>2009-03-30T01:34:53Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Lib-ownership.jpg</title>
    <ns>6</ns>
    <id>769</id>
    <revision>
      <id>2416</id>
      <timestamp>2009-03-30T01:35:24Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Lib-config.jpg</title>
    <ns>6</ns>
    <id>770</id>
    <revision>
      <id>2417</id>
      <timestamp>2009-03-30T01:35:55Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Dicebox2.jpg</title>
    <ns>6</ns>
    <id>771</id>
    <revision>
      <id>2418</id>
      <timestamp>2009-03-30T01:36:42Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Dicebox-output.jpg</title>
    <ns>6</ns>
    <id>772</id>
    <revision>
      <id>2451</id>
      <parentid>2419</parentid>
      <timestamp>2009-03-30T18:29:41Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:Dicebox-output.jpg]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Edit-token-changednames.jpg</title>
    <ns>6</ns>
    <id>773</id>
    <revision>
      <id>2424</id>
      <timestamp>2009-03-30T13:23:19Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Edit-token.jpg</title>
    <ns>6</ns>
    <id>774</id>
    <revision>
      <id>2425</id>
      <timestamp>2009-03-30T13:23:35Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Token-default-name.jpg</title>
    <ns>6</ns>
    <id>775</id>
    <revision>
      <id>2426</id>
      <timestamp>2009-03-30T13:28:55Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:New-token-names.jpg</title>
    <ns>6</ns>
    <id>776</id>
    <revision>
      <id>2427</id>
      <timestamp>2009-03-30T13:32:19Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Edit-token-changeimage.jpg</title>
    <ns>6</ns>
    <id>777</id>
    <revision>
      <id>2429</id>
      <timestamp>2009-03-30T13:41:57Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Pick-new-token-image.jpg</title>
    <ns>6</ns>
    <id>778</id>
    <revision>
      <id>2430</id>
      <timestamp>2009-03-30T13:42:06Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:New-image-picked.jpg</title>
    <ns>6</ns>
    <id>779</id>
    <revision>
      <id>2431</id>
      <timestamp>2009-03-30T13:44:40Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Token-image-changed.jpg</title>
    <ns>6</ns>
    <id>780</id>
    <revision>
      <id>2432</id>
      <timestamp>2009-03-30T13:46:23Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Tokens</title>
    <ns>0</ns>
    <id>781</id>
    <revision>
      <id>6994</id>
      <parentid>6411</parentid>
      <timestamp>2018-09-30T12:42:36Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>/* Properties */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18737">{{Beginner}}
==Introduction to MapTool Tokens==

As mentioned in the [[Introduction_to_Mapping| Introduction to Mapping]] guide, a [[Macros:Glossary#T|token]] is the MapTool jargon for a visual marker that is placed on a map within the MapTool software. The most intuitive use for tokens is to represent characters in the game - in other words, tokens take the place of miniatures on the virtual tabletop. 

===Assumptions===

This guide assumes that you have read the [[Introduction_to_Mapping|Introduction to Mapping]], and that you know how to:

* Add folders to your Resource Library, and update/add images to those folders so that they appear in your resource library
* Create a map in MapTool
* Place tokens on a map, and move them around
* Change token names, GM names, labels
* Change the token's size
* Change the token's image
* Move tokens from one layer to another

If you don't know how to do these things, please read the Introduction to Mapping guide - otherwise, the stuff below might not make much sense!

Finally, this guide will be written predominantly from the point of view of the GM -- someone who has complete control over all token settings and campaign properties. Players (that is, individuals who join a game in the role of &quot;Player&quot;) are restricted from changing many things in a particular campaign.

===MapTool's Layers===

Although most MapTool users use the term &quot;token&quot; to refer only to images representing characters and creatures on a map, in reality, the word &quot;token&quot; refers to ''any'' image item that is dropped onto a map in MapTool. The way a particular token is handled is dependent on the Map Layer onto which it is placed. These layers are explained below, because they are important in understanding how to work with tokens.

*Items dropped on the '''Token''' layer are what we most commonly consider &quot;tokens&quot; - these represent characters, monsters, NPCs - the people and creatures of the game. 
*Items dropped on the '''Object''' layer are most commonly images representing furniture, chests, and ''things'' in the game world - something that a person can manipulate or use. MapTool still considers them to be tokens, of course (everything is a token to MapTool - it's very singleminded) but for clarity's sake, most users call them ''Objects'' to distinguish them from tokens that represent ''characters''
*Items dropped on the '''Background''' layer are typically things that make up the map - walls, cliffs, dirt, grass. They might be unique, but are most often &quot;stamped&quot; onto the map over and over again, either in a pattern or because you're using several copies of the same image (for instance, using several copies of a wall image to make a complete room). Because of this, many users will call these images ''stamps''. 

====The Hidden Layer====

You'll note that I didn't discuss the '''Hidden''' layer in the above paragraph. That's because the Hidden Layer has a slightly different purpose. 

While the Token, Object, and Background layers have a fairly intuitive relationship in terms of how one might think of the world -- I'm a ''person or creature'', that item over there is an ''object'', and surrounding us is the ''background'' -- the Hidden Layer is the things you ''cannot see''. In MapTool, anything placed on the Hidden Layer is visible only to the GM until he or she decides to move it to one of the other layers.

Generally, you'll want to put characters and objects on this layer - there aren't many reasons to put a background stamp on the hidden layer, although I'm sure you can think of a couple. 

Suffice it to say, when you place a token on a MapTool map, it pays to be aware of which layer you placed it on!

==Creating a New Token==

Creating a token is as simple as dragging an image from the [[Macros:Glossary#R|Resource Library]] onto the Token Layer of a map. But how do you create an image in the first place? There are several options.

===Download an Image===

MapTool's user community has created a wealth of token images that are available for use. Visit the [http://gallery.rptools.net RPTools Gallery] to see the hundreds of token images already out there. 

===Create one Using TokenTool===

Another option is to create your own images using [http://www.rptools.net/index.php?page=tokentool TokenTool], a program built by the makers of MapTool to create token images quickly and easily. To create an image using TokenTool:

1. Download TokenTool and open it by double-clicking on the file with the extension '''.jar''' (this is a Java &quot;JAR file&quot; which will run a java program). 

2. Find an image you like (be cautious about copyright!) and drag it onto the left pane of the TokenTool window (this is the part with the small green ring and a black background). 

3. When the image appears, drag it around with the mouse until the portion you want for your token is inside the green ring. You'll see a preview of what the token will look like in the upper right side of the TokenTool window.
* '''Tip''': You can use the mouse wheel or the zoom buttons to adjust the image's size until it looks just right. 
* '''Tip''': You can change the look and color of the border, the final size of the token, and many other settings by using the drop-down menus on the right-hand side of the TokenTool window.

4. When you get it where you like it, go to '''File &gt; Save Token''', and save the newly created token in a directory that is either already in your Resource Library, or is one you plan to add to your resource library. Note that the file will be saved in PNG format (this is a good thing! it allows for transparency so your token isn't slopping outside the border!). 

5. Go back to MapTool and add or refresh your Resource Library, and there you'll see your new token! Drag it onto a map, and you're good to go. 

===Draw One Yourself===

You can create a token image of your own by using an art program and saving the file in PNG or JPG format, in a directory that is either in your Resource Library, or a directory you plan to add to your Resource Library. PNG format is the recommended format for MapTool tokens because it allows for transparency and, basically, looks the best. 

You can of course combine drawing your own image with using TokenTool to create handsome and neatly formed tokens.

==Editing a Token==

Editing a token means changing any of the token's characteristics, be that its image, its name(s), or its configured settings. Changing token names, image, and size are covered in [[Introduction_to_Mapping|Introduction to Mapping]].  

The following sections deal with the various options, tabs, and drop-down boxes in the '''Edit Token''' Dialog. 

===Token Type===

Tokens have 2 possible types in MapTool: NPC and PC. These will be familiar to players of roleplaying games because they stand for &quot;Player Character&quot; and &quot;Non-Player Character,&quot; and the most common use of this &quot;type&quot; setting is to distinguish between the two groups during actual play. 

In general, tokens belonging to your players should have the type &quot;PC.&quot; Tokens belonging to ''you'' should have the type &quot;NPC&quot;. 

[[Image:Edit-token.jpg|thumb|The '''Edit Token''' dialog]]

'''NOTE''': The ''type'' of a token does not have any bearing on who may manipulate that token or view it's properties - instead, that power is granted to the ''owner'' or ''owners'' of a token. As GM, you are considered to have ownership of all tokens on all maps in the campaign. See [[Introduction_to_Tokens#Ownership|Ownership]], below, for more details. 

To change the token type:

1. Double-click the token to open the '''Edit Token''' dialog.

2. In the upper-right corner, use the drop-down box to select PC or NPC. 

3. Click '''OK'''.

===Notes===

[[Image:Notes-tab.jpg|thumb|The Notes Tab of the '''Edit Token''' dialog]]

The Notes tab presents two areas where you can enter notes about the token. These fields support basic HTML tags, so you can format the note. 

The upper text field is there for notes that are available and visible to anyone who wishes to see. The lower field (titled '''GM Notes''') is for notes that only the GM(s) should see. 

Notes are a little tricky - MapTool has a way to display them in a nifty popup, but you have to do a couple things first. 

# Enter information in the notes field of a token.
# Place that token on the '''Object Layer''' or the '''Background Layer''' by right-clicking and selecting '''Change To &gt;'''
# Switch back to the '''Token Layer'''

Now, you'll notice that when you put your mouse cursor over the token, the cursor will change to a hand. If you double-click, instead of the normal '''Edit Token''' dialog, you'll see a small popup in the lower-left corner of the map, which will display the notes.

The major lesson is that -- while Token notes can be accessed in many ways -- one of the more common uses is to place notes and reminders on tokens and objects that will be on either the Object or Background layer.

===Properties===

[[Image:Properties-tab.jpg|thumb|The '''Properties''' tab]]

'''Properties''' are a topic that deserve their own guide, as they are '''heavily''' involved in the creation and use of token macros. This guide won't go into excruciating detail about properties, but will instead deal with only the most basic information about them. 

Every token dropped onto a map in MapTool automatically gains a set of '''properties''', which can basically be thought of as stats, characteristics, or traits (you know, the numbers on a character sheet). In effect, each token is carrying around it's own built-in character sheet. In programming terms, properties can thought of as variables that can be set to different values, and then used later by macros. 

* '''Note: although people frequently refer to &quot;token properties,&quot; the properties that are visible in the Edit Token dialog are only those properties that are set up for the specific campaign.

When you click on the '''Properties''' tab in the '''Edit Token''' dialog, you'll see a list of the properties that are currently set up for the '''Campaign''' you're using. If you've opened up a new campaign (or just started MapTool), you will see the ''default property set'', which looks like:

* Strength
* Dexterity
* Constitution
* Intelligence
* Wisdom
* Charisma
* HP
* AC
* Defense
* Movement
* Elevation
* Description

For the rest of this guide, examples using properties will use the list above. 

The property list you see is in a table (or spreadsheet) layout, with the property name on the left, and a blank space on the right. In the space on the right, you can enter the value you want to assign to that property. You can enter text, numbers, or in more advanced cases, macro statements as the value for a particular property.

Once you do that, and hit '''OK''', that property '''on that token''' will be assigned the value you enter. Later on, if you write macros, you can refer to those properties to make calculations or roll dice.

Since properties are such a major topic on their own, check out the [[Introduction to Properties]] guide for detailed information.

===State===

[[Image:State-tab.jpg|thumb|The '''State''' tab]]

[[Image:State-example.jpg|thumb|This token has a state applied - the small red image is the &quot;state image&quot; superimposed on the token image]]

'''States''' are visual markers that can be applied to a token (typically appearing as an image superimposed on the token) that can be used for any sort of reminder that you might need in a game. For instance, if you want a marker that a particular NPC token is &quot;dead&quot;, you can set the state &quot;Dead&quot; on the token, and whatever image you've selected to indicate &quot;Dead&quot; will appear on the token. 

The default states that load when MapTool starts are:

* Dead
* Disabled
* Hidden
* Prone
* Incapacitated
* Other
* Other 2
* Other 3
* Other 4

&lt;br style=&quot;clear:both;&quot;/&gt;

====Health Bar====

[[Image:Bar-example.jpg|thumb|This token has a ''bar'' applied, superimposed on the token. The bar can be set to reflect different quantities via macros]]

The State tab also contains the setting information for the '''bars''' that the token displays or can display. These bars are shown superimposed over the token (at the top, bottom, or sides), and can be used to track things like health (or ammunition, magic, or anything that can be lost or expended).

&lt;br style=&quot;clear:both;&quot;/&gt;

===Macros===

As of MapTool version 1.3.b54, the Macros tab is no longer enabled. This tab originally held the token macros, but as macro capabilities became more advanced, this tab became less and less useful, until finally, it was removed. It is present in earlier versions, though, if you want to take a look.

===Speech===

[[Image:Speech-tab.jpg|thumb|The '''Speech''' tab]]

This tab contains the token's '''speech''' list. You can use this tab to configure sayings, aphorisms, battlecries, and anything you might want your token to &quot;say&quot; in chat. There are two fields for each speech item: 

* '''ID''': This field is the short identifier you assign to a speech item; the ID is used in chat to refer to the full text of the speech. It can be alphanumeric, so you could use number, or letters, or a mix. It cannot have any spaces in it, though!
* '''Speech Text''': This is the actual text that will be displayed in the chat window. 

To use a speech item, do the following:

# Select the token you want to have &quot;say&quot; something
# In the chat window, enter '''/tsay (ID)''', where &quot;(ID)&quot; is replaced by the actual ID of the speech item. So if you wanted to howl your battlecry - which you've cleverly given the ID &quot;bcry&quot; - you would select your token, and enter '''/tsay bcry''' in the chat window.

===Ownership===

[[Image:Ownership-tab.jpg|thumb|The '''Ownership''' tab]]

Token '''ownership''' determines who among the players [[Introduction_to_Game_Hosting|connected to the game]] is allowed to select, move, or view the details of a given token. 

If you are the owner of a token, you may select it, double-click on it to open and edit it, and move it around on the map. If you are ''not'' an owner of a particular token, you are limited to looking at it on the map -- you will not be able to select, move, or view its properties and configuration.

To set an owner, simply check the box next to that individual's name. The names shown in the box will be the names of each player (including the GM) connected to the game (so if you're looking at the Ownership tab when nobody else is connected, you'll see only your own name). If you want to give ownership to all players, just check '''All Players'''.

(Note that the selection of options when the server is started must include '''Strict token ownership''' if you want the functionality described above.  See [[Introduction to Game Hosting#Starting Up a MapTool Server]] for details on server options.)

===Config===

[[Image:Config-tab.jpg|thumb|The '''Config''' tab]]

This tab contains a number of settings that affect how the token looks, moves, and interacts with MapTool. 

====Shape====

Tokens can have four shapes in MapTool:

* '''Top Down''': top-down tokens are usually hand-drawn or rendered images of creatures, objects, and people as if you were looking down from an aerial view. Setting the token shape to '''Top-down''' tells MapTool to allow the token image to rotate when you right-click on the token and select '''Change Facing''' (that way, your top-down token can turn to face its enemies!)
* '''Circle''': circular tokens are like pogs or poker chips - round images that represent the creature or character. Because they are markers and not meant to be realistic &quot;top-down&quot; views of a creature, when you select Change Facing, instead of rotating the image - which would look bad - a small yellow arrow appears to indicate facing.
* '''Square''': square tokens work like circular tokens, except that they are...wait for it...square.
* '''Figure''': figure tokens have been introduced from Maptool 1.4 and like top-down tokens are usually images of creatures or people but this time designed to appear as though you are looking at a miniature figure on a table. Figure tokens are specifically designed so that if they are higher than they are wide, they will extend beyond the top of the cell.

====Size====

A token can be given a number of sizes, which scale the token image larger or smaller. 

The available size depend on the map grid used when [[Introduction_to_Mapping|setting up a map]]. If you set a map with a grid (hexagonal or square), you will have the ''Free Size'' option (which lets you scale the token as you need), or a number of sizes from &quot;Fine&quot; to &quot;Colossal&quot; (if you play D&amp;D, you'll probably recognize them). 

If you do not set a grid when you create the map, you will be able to scale the token along a number scale, from -11 to +20. 

====Properties====

This field allows you to indicate which of the available property sets in the campaign this token has. The designer of a campaign can set up different sets of properties to be used by different tokens (for instance, a set of properties for player character tokens, and a different set of properties for non-player character tokens). This field lets you pick which property set to use.

====Has Sight====

This field allows you to indicate what kind of [[Introduction to Lights and Sights|sight]] the token possesses. '''Sight''' settings allow the gamemaster to simulate darkness, light, hidden objects, and hiding enemies.

====Image Table====

Introduced in Maptool 1.4, this field allows you to link a table to the token. If the token is given a facing, then the facing value will be used to select an image from the table which will replace the normal image of the token. This is frequently combined with the &quot;Figure&quot; token shape on isometric maps to simulate a 3D effect.

====Snap to Grid====

This checkbox simply indicates that the token snaps to the existing grid when it is moved. If unchecked, the token does not pay any heed to the grid when it is dragged around on the map.

====Visible to Players====

This checkbox lets you designate a particular token as invisible to players - when checked, no player connected to the game will be able to see the token or interact with it in any way.

====Layout, Portrait, and Handout====

There are three fields dealing with the token's visual appearance:

* '''Layout''': this shows how the token will look on the map
* '''Portrait''': this is a separate image that will appear in the lower left corner of the map screen when you hover over the token
* '''Handout''': this lets you designate an image to appear when you right-click on the token and select '''Show Handout'''
[[Category:MapTool]][[Category:Tutorial]]
{{Languages|Introduction to Tokens}}</text>
      <sha1>fii0s0cryi4gw5mnsakznxn4q5dp1av</sha1>
    </revision>
  </page>
  <page>
    <title>File:DiceBox v21 screen.jpg</title>
    <ns>6</ns>
    <id>782</id>
    <revision>
      <id>2549</id>
      <parentid>2448</parentid>
      <timestamp>2009-04-01T03:04:43Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:DiceBox v21 screen.jpg]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Help:Glossary</title>
    <ns>12</ns>
    <id>783</id>
    <revision>
      <id>2994</id>
      <parentid>2819</parentid>
      <timestamp>2009-04-06T13:46:58Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added Macro Button</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2668">;Campaign File: A zipped XML file with the '''.cmpgn''' file extension containing tokens, maps, token macros, campaign macros, and token properties


;Initiative Panel: A dockable panel in MapTool that provides simple initiative tracking functionality. 


;Image Token: A special token that contains an image that may be referenced by other macros. 
;Library Token: A special token designed to hold a library of macros (similar to a function library) that can be called by token macros, campaign macros, and global macros. Often called &quot;Lib:tokens.&quot;

;Token: A visual marker representing a character, monster, or NPC


;Campaign Macro: A macro specific to a campaign file. These macros are available to players and the GM, and are displayed in the Campaign Macros window.
;Global Macro: Macros that are available regardless of the campaign file currently loaded in MapTool, and regardless of whether the instance of MapTool is a server or a client. Global macros are ''only'' available to the running instance.
;Trusted Macro: A macro run from a Library token or run by the GM, that cannot be edited by a player.
;Macro Button: The visual representation of a Macro, usually referred to explicitly for good reason.
;Macro: A series of text instructions used to automate processes in MapTool. 


;Roll Option: One of several &quot;switches&quot; that alter how the macro code following the switch is executed


;String Property List: A string containing key-value pairs in the format &quot;key1=value1; key2=value2; key3=value3;...&quot;
;String List: A string containing a list of items in the format &quot;item1, item2, item3,...&quot;


;Dialog: A modeless (''i.e.'', does not require user interaction) popup generated by the dialog roll option. 

;Frame: A dockable MapTool window that can be generated via the frame roll option.

;Halo: A colored border that appears around a token on the map.
;Campaign: A zipped XML file with the '''.cmpgn''' file extension containing tokens, maps, token macros, campaign macros, and token properties

;Map: An image file displayed in the map display area in MapTool. This image is shared among all connected players and the GM. 

;Property: Generic term for a variable contained in a token; a more explicit term is token property

;Bar: One, two, or multi-image graphical elements displayed on a token used to indicate the status of a consumable resource such as Hit Points

;State: A binary (i.e., it has two possible values, 1 or 0) variable that is set for a given token, frequently used for conditions or statuses that affect a particular character in a game.

;Resource Library:The library of images, tokens, and other resources that MapTool can access.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setNPC</title>
    <ns>0</ns>
    <id>784</id>
    <revision>
      <id>2484</id>
      <timestamp>2009-03-31T02:41:11Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="534">{{stub|Examples of usage.}}
{{MacroFunction
|name=setNPC
|trusted=true
|version=1.3b48
|description=
Sets a [[Token]] to a [[NPC Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setNPC()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setNPC(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of the token which has its NPC status set, defaults to the [[Current Token]].}}

|also=
[[isPC|isPC()]], 
[[setPC|setPC()]], 
[[isNPC|isNPC()]]

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:func</title>
    <ns>10</ns>
    <id>785</id>
    <revision>
      <id>3178</id>
      <parentid>2503</parentid>
      <timestamp>2009-04-17T16:03:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to templates category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="66">[[{{{1}}}|{{{1}}}()]]&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.removeAll</title>
    <ns>0</ns>
    <id>786</id>
    <revision>
      <id>2515</id>
      <timestamp>2009-03-31T20:03:22Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="776">{{stub|Examples of usage.}}
{{MacroFunction
|name=json.removeAll
|version=1.3b53
|description=
Removes all the keys or values from the first [[JSON Object]] or [[JSON Array]] that occur in the following [[JSON Object]]s or [[JSON Array]]s.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.removeAll(firstArray, array, array, ...)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.removeAll(firstObject, object, object, ...)
&lt;/source&gt;
'''Parameters'''
{{param|firstArray|The [[JSON Array]] to remove the occurrences from.}}
{{param|array|The [[JSON Array]]s to get the occurrences from.}}
{{param|firstObject|The [[JSON Object]] to remove the occurrences from.}}
{{param|object|The [[JSON Object]]s to get the occurrences from.}}

|also=
{{func|json.unique}}

}}
[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.union</title>
    <ns>0</ns>
    <id>787</id>
    <revision>
      <id>6192</id>
      <parentid>6176</parentid>
      <timestamp>2013-07-12T06:58:31Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Rephrased description. Not a stub anymore.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="832">{{MacroFunction
|name=json.union
|version=1.3b53
|description=
Returns an [[JSON Array]] with the union of all of the [[JSON Object]] keys, or [[JSON Array]] values.  If a value or a key occurs in multiple different objects or arrays, it will only be placed once in the output object or array.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.union(array, array, ...)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.union(object, object, ...)
&lt;/source&gt;
'''Parameters'''
{{param|array|The [[JSON Array]]s to union.}}
{{param|object|The [[JSON Object]]s to union.}}

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h: array1 = json.append(&quot;&quot;,1,2,3,4)]
  [h: array2 = json.append(&quot;&quot;,3,4,5,6)]
  [r: json.union(array1,array2)]
&lt;/source&gt;

Returns
 &quot;[1,2,3,4,5,6]&quot;


|also=
{{func|json.merge}}, {{func|json.intersection}}

}}

[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.difference</title>
    <ns>0</ns>
    <id>788</id>
    <revision>
      <id>6194</id>
      <parentid>6180</parentid>
      <timestamp>2013-07-12T07:09:04Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Less of a stub that it used to be</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="902">{{stub|Examples of usage.}}
{{MacroFunction
|name=json.difference
|version=1.3b53
|description=
Returns an array with the differences of all of the [[JSON Object]] keys, or [[JSON Array]] values.  Output contains keys or values which exist in the first parameter, but do not exist in any others.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.difference(array, array, ...)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.difference(object, object, ...)
&lt;/source&gt;
'''Parameter'''
{{param|array|A [[JSON Array]] to get the difference of.}}
{{param|object|A [[JSON Object]] to get the difference of.}}
|example=
So per example:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[json.difference(array2, array1)]
&lt;/source&gt;
will result in {{code|array2}} from which all elements that are found in {{code|array1}} are removed. 

|also=
{{func|json.union}}, 
{{func|json.merge}},
{{func|json.intersection}}

}}

[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.intersection</title>
    <ns>0</ns>
    <id>789</id>
    <revision>
      <id>6191</id>
      <parentid>6182</parentid>
      <timestamp>2013-07-12T06:51:21Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Tweaking page layout and typography. Not a stub anymore.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1350">{{MacroFunction
|name=json.intersection
|version=1.3b53
|description=
Returns a [[JSON Array]] with the intersection of all of the [[JSON Object]] keys or [[JSON Array]] values.  A value or key only appears in the output if it exists in all input arrays or objects.

This function is useful for removing Token IDs from a saved list which have been deleted from the map by eliminating them using this function, the saved array and {{func|getTokens}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.intersection(array, array, ...)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.intersection(object, object, ...)
&lt;/source&gt;
'''Parameters'''
{{param|array|A [[JSON Array]] used in the intersection.}}
{{param|object|A [[JSON Object]] used in the intersection.}}

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h: array1 = json.append(&quot;&quot;,1,2,3,4)]
  [h: array2 = json.append(&quot;&quot;,3,4,5,6)]
  [r: json.intersection(array1,array2)]
&lt;/source&gt;

Returns:
 &quot;[3,4]&quot;



&lt;source lang=&quot;mtmacro&quot; line&gt;
  [h: arrayOfSelectedNames = getSelectedNames(&quot;json&quot;)]
  [h: arrayOfNamesOnMap = getTokenNames(&quot;json&quot;)]
  [r: json.intersection(arrayOfSelectedNames,arrayOfNamesOnMap)]
&lt;/source&gt;

Input:
 arrayOfSelectedNames = [&quot;Alexander&quot;,&quot;Josh&quot;]
 arrayOfNamesOnMap = [&quot;Kevin&quot;,&quot;Josh&quot;,&quot;Alexander&quot;]

Returns:
 [&quot;Alexander&quot;,&quot;Josh&quot;]

|also=
{{func|json.difference}}

}}

[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.isSubset</title>
    <ns>0</ns>
    <id>790</id>
    <revision>
      <id>6054</id>
      <parentid>6053</parentid>
      <timestamp>2013-01-19T14:17:44Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>[[json.subset]] moved to [[json.isSubset]]: documentation here has *always* been wrong!</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="993">{{stub|Examples of usage.}}
{{MacroFunction
|name=json.isSubset
|version=1.3b53
|description=
Returns {{true}} if all of the [[JSON Object]] keys or [[JSON Array]] values are contained within the first [[JSON Object]] or [[JSON Array]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.isSubset(firstArray, array, array, ...)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.isSubset(firstObject, object, object, ...)
&lt;/source&gt;
'''Parameters'''
{{param|firstArray|The [[JSON Array]] that must contain all of the values of the subsequent [[JSON Array]]s for this function to return {{true}}.}}
{{param|array|A [[JSON Array]] with values that are tested to be within the {{code|firstArray}}. }}
{{param|firstObject|The [[JSON Object]] that must contain all of the keys of the subsequent [[JSON Object]]s for this function to return {{true}}.}}
{{param|object|A [[JSON Object]] with keys that are tested to be within the {{code|firstObject}}.}}

|also=
{{func|json.contains}}

}}

[[Category:JSON Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>moveTokenToMap</title>
    <ns>0</ns>
    <id>791</id>
    <revision>
      <id>5656</id>
      <parentid>3047</parentid>
      <timestamp>2011-08-12T18:36:04Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Token Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="772">{{stub|Examples of usage, and clearer description.}}
{{MacroFunction
|name=moveTokenToMap
|trusted=true
|version=1.3b54
|description=
Moves tokens from the current map to a specified map.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
moveTokenToMap(id, map, x, y, z)
&lt;/source&gt;
'''Parameters'''
{{param|id|The token {{code|id}} or a [[JSON Array]] of token {{code|id}}s of the token/s to move.}}
{{param|map|A string containing the name of the map that the token is moved to.}}
{{param|x|The {{code|X}} coordinate of the map that the token should be moved to.}}
{{param|y|The {{code|Y}} coordinate of the map that the token should be moved to.}}
{{param|z|The z-order that the token should have after being moved.}}

|also=
{{func|moveTokenFromMap}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>moveTokenFromMap</title>
    <ns>0</ns>
    <id>792</id>
    <revision>
      <id>5655</id>
      <parentid>3046</parentid>
      <timestamp>2011-08-12T18:34:40Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Token Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="789">{{stub|Examples of usage, and clearer description.}}
{{MacroFunction
|name=moveTokenFrom
|trusted=true
|version=1.3b54
|description=
Moves tokens from a specified map to the current map.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
moveTokenFromMap(id, map, x, y, z)
&lt;/source&gt;
'''Parameters'''
{{param|id|The token {{code|id}} or a [[JSON Array]] of token {{code|id}}s of the token/s to move.}}
{{param|map|A string containing the name of the map that the token is moved from.}}
{{param|x|The {{code|X}} coordinate of the current map that the token should be moved to.}}
{{param|y|The {{code|Y}} coordinate of the current map that the token should be moved to.}}
{{param|z|The z-order that the token should have after being moved.}}

|also=
{{func|moveTokenToMap}}

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getMatchingProperties</title>
    <ns>0</ns>
    <id>793</id>
    <revision>
      <id>6033</id>
      <parentid>5654</parentid>
      <timestamp>2012-11-20T18:41:25Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Adding to Token Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1842">{{MacroFunction
|name=getMatchingProperties
|version=1.3b54
|description=
Returns a [[String List]] or [[JSON Array]] with names of the [[Token Property|Token Properties]] on a specific [[Token]] that match the given pattern.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMatchingProperties(pattern)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMatchingProperties(pattern, delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMatchingProperties(pattern, delim, id)
&lt;/source&gt;
'''Parameters'''
{{param|pattern|A regular expression(regex) that represents the pattern the properties should match.}}
{{param|delim|The delimiter used in the [[String List]] that is returned, defaults to {{code|&quot;,&quot;}}.  Returns a [[JSON Array]] if {{code|&quot;json&quot;}} is specified.}}
{{param|id|The token {{code|id}} of the token that is checked for properties that match the given pattern, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|examples=
Say you wanted to keep an inventory list for the [[Token]] you could prefix all of your inventory properties with {{code|Inv:''Category'':}}. For example {{code|Inv:Weapon:Longsword}}.

Then to loop through all of the inventory properties you could use 
&lt;source lang=&quot;mtmacro&quot; line&gt;
[foreach(item, getMatchingProperties(&quot;Inv:.*&quot;)): {
    &lt;!-- Do something really exciting here --&gt;
}]
&lt;/source&gt;

Or the following to loop through all the weapons
&lt;source lang=&quot;mtmacro&quot; line&gt;
[foreach(item, getMatchingProperties(&quot;Inv:Weapon:.*&quot;)): {
    &lt;!-- Do something really exciting here --&gt;
}]
&lt;/source&gt;

Or even all the armor and all the shields.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[foreach(item, getMatchingProperties(&quot;Inv:(Armor|Shield):.*&quot;)): {
    &lt;!-- Do something really exciting here --&gt;
}]
&lt;/source&gt;


|also=
{{func|getMatchingLibProperties}} {{func|getPropertyNames}}

}}
[[Category:Property Function]][[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getMatchingLibProperties</title>
    <ns>0</ns>
    <id>794</id>
    <revision>
      <id>6032</id>
      <parentid>5653</parentid>
      <timestamp>2012-11-20T18:37:41Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Added to Token Library category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1959">{{MacroFunction
|name=getMatchingLibProperties
|version=1.3b54
|description=
Returns a [[String List]] or [[JSON Array]] with names of the [[Token Property|Token Properties]] on a specific [[Library Token]] that match the given pattern.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMatchingLibProperties(pattern)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMatchingLibProperties(pattern, lib)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMatchingLibProperties(pattern, lib, delim)
&lt;/source&gt;
'''Parameters'''
{{param|pattern|A regular expression(regex) that represents the pattern the properties should match.}}
{{param|lib|The name of the [[Library Token]] that is checked for properties that match, defaults to the [[Library Token]] the macro is running on.}}
{{param|delim|The delimiter used in the [[String List]] that is returned, defaults to {{code|&quot;,&quot;}}.  Returns a [[JSON Array]] if {{code|&quot;json&quot;}} is specified.}}


|examples=
Assuming that you have a [[Library Token]] that contained a list of all the items and their detail in your campaign stored as [[Token]] properties names with the following format {{code|''Type'':''Item Name''}} (for example {{code|Weapon:Longsword)}}, you could use the following code to loop through 
all the weapons.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[foreach(item, getMatchingLibProperties(&quot;Weapon:.*&quot;, &quot;Lib:Items&quot;)): {
    &lt;!-- Do something really exciting here --&gt;
}]
&lt;/source&gt;

Or the following to loop through all the armor
&lt;source lang=&quot;mtmacro&quot; line&gt;
[foreach(item, getMatchingLibProperties(&quot;Armor:.*&quot;, &quot;Lib:Items&quot;)): {
    &lt;!-- Do something really exciting here --&gt;
}]
&lt;/source&gt;

Or even all the armor and all the shields.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[foreach(item, getMatchingLibProperties(&quot;(Armor|Shield):.*&quot;, &quot;Lib:Items&quot;)): {
    &lt;!-- Do something really exciting here --&gt;
}]
&lt;/source&gt;


|also=
{{func|getMatchingProperties}} {{func|getLibPropertyNames}}

}}
[[Category:Property Function]][[Category:Token Library Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Cookbook</title>
    <ns>14</ns>
    <id>795</id>
    <revision>
      <id>2534</id>
      <timestamp>2009-04-01T02:45:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to Macro category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">[[Category:Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Automate Updating a Token Property</title>
    <ns>0</ns>
    <id>796</id>
    <revision>
      <id>5606</id>
      <parentid>3357</parentid>
      <timestamp>2011-07-19T16:19:14Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>/* Example:  Updating Hit Points */ Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6659">This section expects that you are already familiar with how to add [[Introduction to Macro Writing|macro buttons]] to the MapTool user interface.
__TOC__

===Example:  Updating Hit Points===

Let's say you have a property to represent hit points.  We'll call our property {{code|HP}}.  Now we want some easy way to update {{code|HP}}, so we're going to create a [[Macro_Button|macro button]] that executes a [[Introduction_to_Macro_Writing|macro]].

First, consider how you want this to work.  We want a window to popup on the screen and ask the user to enter a number.  That number will be subtracted from {{code|HP}}, so the user can use a positive number to represent damage and a negative number to represent healing.  (We'll show another approach later.)

The first step will be to prompt for the number.  MapTool has this ability built-in.  All we need to do is use a variable name that doesn't exist yet and MapTool will popup the prompt!  The name of the variable is part of the prompt, so we'll use a descriptive name.  How about {{code|AmountOfDamage}}?

&lt;source lang=&quot;mtmacro&quot; line&gt;
[ damage = AmountOfDamage ]
&lt;/source&gt;

Notice the extra variable name and the equals sign?  That tells MapTool to calculate whatever is on the right of the equals sign and store the result into the variable on the left.  In this case, there's no formula, so this becomes simply a copy -- from the variable {{code|AmountOfDamage}} to {{code|damage}}.  But when MapTool tries to read the value of the variable and it doesn't exist, the popup will automatically appear!  That's perfect for what we want!

Now the next step is to subtract that from the {{code|HP}} property.  Fortunately, what you learned in the last paragraph can be used again:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[ damage = AmountOfDamage ]
[ HP = HP - damage ]
&lt;/source&gt;

This time the second line calculates the formula on the right ({{code|HP - damage}}) and stores the result into ... {{code|HP}}?  Isn't that going to screw up our {{code|HP}} value?

No, it doesn't screw it up, but it does ''replace'' that value with the result.  And because {{code|HP}} is a property, the result is stored back into the token's property.  If you were to right-click on the token and save it to an external file, the new value of {{code|HP}} is stored with it.  When the token is later reloaded, that value will come with it.

If you want to add to the hit points instead, you have two choices:  either the user can enter a negative number, or you can change the {{code|-}} to a {{code|+}}.  The first option is easy because it puts the burden on the user!  The second option is really an option -- who wants to edit their macro every time they want to switch from damage to healing?  Another choice not listed above would be to create a second macro.  Then there could be one macro for adding damage and one for adding healing.

There's a few things still needed here to make this a little prettier, but those are future steps.  Go ahead and try this out right now on a token that you create in MapTool.  (The default property type, ''Basic'', includes a property named {{code|HP}}.)  And try adding the second macro as well, just for the practice.  (Believe me, the more practice you get early in the process, the easier it will become later on.)

===Example:  Let's Rest for a Minute...===

So let's say that you now have a macro button that prompts you to change the token's hit points through damage or healing as described above.  How do we reset their hit points to their maximum when they rest?

We already know that we have a {{code|HP}} and {{code|HPmax}} properties, so when they are healed up we simply need to copy the value in {{code|HPmax}} into {{code|HP}}.  That should give you what you need to create a simple one-line macro:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[ HP = HPmax ]
&lt;/source&gt;

Simple, right?  But for the sake of argument, let's expand on this a bit.  Instead of restoring all of the hit points to the creature, we will prompt the user for the number of hours that the creature will be resting.  For my demonstration, I'm assuming that there's a property named {{code|Level}}.  If it rests for less than 24 hours, it gets back {{code|Level*2}} hit points.  If it rests for 24 hours or more, it gets back {{code|Level*6}}.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[ hours = NumberOfHours ]
[ healing = if(hours &lt; 24, Level * 2, Level * 6) ]
[ HP = HP + healing ]
&lt;/source&gt;

You may notice the {{func|if}} function on the second line.  One word of warning when using the {{func|if}} function:  both the true and the false sections are executed!  For that reason, you may want the {{roll|if}} roll option instead.  Note that the syntax is slightly different between the two, so be careful about which one you choose.

===Example:  One Macro to Rule Them All===

Okay, so let's say you want to have one macro to handle all your healing needs. Using D&amp;D 4th Edition, for example, you can:

* spend a Healing Surge and regain HP
* spend a Healing Surge without gaining HP
* gain HP as if you spent a Healing Surge
* gain a set number of HP (alone or in addition to a Healing Surge)
* gain Temporary HP (alone or in addition to a Healing Surge, and temporary HPs don't stack)

Using the simple variable prompt explained above becomes clumsy, so let's use the {{func|input}} function instead:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[ cancel = input(&quot;SpendSurge | 1 | Spend Healing Surge? | CHECK&quot;,
                 &quot;GainSurge | 1 | Gain Surge HP? | CHECK&quot;,
                 &quot;ExtraHeal | 0 | Additional Healing&quot;,
                 &quot;GainTempHP | 0 | Temporary Hit Points&quot;) ]
[ abort(cancel) ]
&lt;/source&gt;

This will prompt you for all possible variations detailed above, in a single input screen. ((image needed)) Then, you can use some {{func|if}} functions or {{roll|if}} roll options to update all the properties involved. This example assumes that you're using the token properties {{code|HP}}, {{code|TempHP}}, {{code|SurgeRemain}} and {{code|SurgeValue}}:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[ cancel = input(&quot;SpendSurge | 1 | Spend Healing Surge? | CHECK&quot;,
                 &quot;GainSurge | 1 | Gain Surge HP? | CHECK&quot;,
                 &quot;ExtraHeal | 0 | Additional Healing&quot;,
                 &quot;GainTempHP | 0 | Temporary Hit Points&quot;) ]
[ abort(cancel) ]
[ if(SpendSurge): SurgeRemain = SurgeRemain - 1 ]
[ if(GainSurge): HP = HP + SurgeValue ]
[ HP = HP + ExtraHeal ]
[ TempHP = max(TempHP, GainTempHP) ]
&lt;/source&gt;

Notice that the {{func|abort}} function was used after the {{func|input}} function to make sure that, in case the user clicked &quot;Cancel&quot; in the input window, the properties wouldn't be updated.
[[Category:How To]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:How To</title>
    <ns>14</ns>
    <id>797</id>
    <revision>
      <id>5463</id>
      <parentid>2539</parentid>
      <timestamp>2011-02-15T00:14:29Z</timestamp>
      <contributor>
        <username>OrigSyn</username>
        <id>489</id>
      </contributor>
      <comment>How to Share Campaign Macros</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="216">[[Category:Macro]]
To share your Campaign Macros with your players, check the box in the &quot;Start Server&quot; dialogue box. Remember, only your Campaign Macros will be seen by everyone. Global Macros are for YOUR use only.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Manipulate a JSON Property</title>
    <ns>0</ns>
    <id>798</id>
    <revision>
      <id>3146</id>
      <parentid>2541</parentid>
      <timestamp>2009-04-16T13:47:28Z</timestamp>
      <contributor>
        <username>Lmarkus001</username>
        <id>34</id>
      </contributor>
      <comment>/* Example:  jsonFilterArrObj() -- Filtering out objects from an array of objects */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11200">===How to manipulate a JSON property===

====Example:  jsonFilterArrObj() -- Filtering out objects from an array of objects====

If you have an array of objects and want to filter that list given one of the elements in the object, this subroutine/callable macro '''jsonFilterArrObj''' will do the job.

As an example, here is an array of creature data:

JSON array of Creature objects
&lt;source lang=&quot;mtmacro&quot; line&gt;
[{
    &quot;name&quot;: &quot;Umber Hulk&quot;,
    &quot;hd&quot;: 8,
    &quot;size&quot;: &quot;Large&quot;,
    &quot;reach&quot;: 10,
    &quot;str&quot;: 23,
    &quot;dex&quot;: 13,
    &quot;con&quot;: 19,
    &quot;mov&quot;: &quot;20, burrow 20&quot;,
    &quot;AC&quot;: &quot;18/10/17&quot;,
    &quot;SpecialATK&quot;: &quot;Confusing Gaze(Su)&quot;
},
{

    &quot;name&quot;: &quot;Ogre&quot;,
    &quot;hd&quot;: 4,
    &quot;size&quot;: &quot;Large&quot;,
    &quot;reach&quot;: 10,
    &quot;str&quot;: 21,
    &quot;dex&quot;: 8,
    &quot;con&quot;: 15,
    &quot;mov&quot;: 30,
    &quot;AC&quot;: &quot;16/8/17 Hide&quot;,
    &quot;SpecialATK&quot;: &quot;NA&quot;
}]
&lt;/source&gt;


If you want to shorten the list by filtering on various elements of the object, you can call the '''jsonFilterArrObj''' macro to return the filtered array of objects.

To call the macro, setup the JSON parameter to pass like thus:

'''Calling Macro snippet''' (Remove all Creatures that have more HitDice than the entered number)
&lt;source lang=&quot;mtmacro&quot; line&gt;

&lt;!-- 
&quot;hd&quot; = Element I want to filter against for this example
jAll = JSON array of Creature objects
fHD = number I prompted for with an input() dialog, this is the value I am testing against
--&gt;


[H: jAll = &quot;[]&quot;]
[H, FOR(i,1,cntAll): jAll = json.append(jALL, json.set(table(&quot;Polymorph&quot;, i), &quot;imageID&quot;, tableimage(&quot;Polymorph&quot;, i)))]
[H: jAll = json.sort(jAll, &quot;a&quot;)]

[H: tjF = json.append(&quot;[]&quot;, jAll)]
[H: tjF = json.append(tjF, &quot;hd&quot;)]
[H: tjF = json.append(tjF, fHD)]
[H: tjF = json.append(tjF, &quot;&lt;&quot;)]
[H, MACRO(&quot;jsonFilterArrObj@&quot;+getMacroLocation()): tjF]
[H: jFiltered = macro.return]
[H: Assert(!(json.isEmpty(jFiltered)), &quot;Polymorph: No choices available.&quot;, 0)]
[H: cntF = json.length(jFiltered)]

&lt;!-- continue processing with the newly filtered array of objects --&gt;
&lt;/source&gt;


'''jsonFilterArrObj'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- 
Filter out objects from an array of objects.
inputs (macro.args is a JSON array containing):
  jAO = A JSON array of objects
  elem = The element to filter against
  fDat = The data to compare against
  fType = Filter comparison: &gt;, &lt;, ==, &gt;=, &lt;=, !=
output:
  macro.return = jAOf (The array with the elements removed that met the criteria)
--&gt;

[H: jAO = json.get(macro.args, 0)]
[H: elem = json.get(macro.args, 1)]
[H: fDat = json.get(macro.args, 2)]
[H: fType = json.get(macro.args, 3)]

[H: cntAll = json.length(jAO)]
[H: assert(cntAll, &quot;Null Array so filter aborts.&quot;)]

[H, for(i, cntAll - 1, -1, -1), CODE: {
  [H: tDat = json.get(json.get(jAO, i), elem)]
  [ bTest = eval(&quot;fDat&quot;+fType+&quot;tDat&quot;)]&lt;br&gt;
  [H, IF(bTest): jAO = json.remove(jAO, i); &quot;&quot;]
}]

[H: macro.return = jAO]
&lt;/source&gt;

====Sorting JSON Objects Based on an Arbitrary Nested Value====

JSON Objects can contain an arbitrary number of keys and values (for which the value may itself be another JSON object). For example, a nested JSON object called &quot;Monsters&quot; might look like this:

&lt;source lang=&quot;mtmacro&quot; line&gt;
{
 &quot;Troll&quot;:
  {
    &quot;name&quot;:&quot;Troll&quot;,
    &quot;HD&quot;:4,
    &quot;HP&quot;:75
  },
 &quot;Orc&quot;:
  {
    &quot;name&quot;:&quot;Orc&quot;,
    &quot;HD&quot;:3,
    &quot;HP&quot;:22
  }
}
&lt;/source&gt;

Note that each value in the key-value pairs in the above object is actually a complete JSON object in its own right. 

It is occasionally useful to be able to sort a JSON object that contains ''other'' JSON objects based on a value in one of the &quot;sub-objects.&quot; For instance, if a JSON object exists that contains token names and distances to those tokens from a given point, one may want to sort the JSON so that the nearest objects are first, and the farthest are last. 

Or, using the above &quot;Monsters&quot; example, one may wish to sort it by '''name''', or by '''HP''', or by '''HD'''. 

The following macro routine is a generic method to sort JSON objects based on an arbitrary value within a nested object. 

'''Assumptions'''

* This macro requires the use of a JSON object supporting version of MapTool; it was written and tested in version 1.3.b53.
* The macro is generic, and will run using any given JSON object conforming to the general &quot;nested object&quot; structure. In this case, a nested JSON object is created in the beginning so that there is a sample object to sort. '''However''': this routine should be applicable to JSON arrays of objects as well - it would simply require using the index of the nested object rather than the nested object's key.
* It can be unclear which object is being discussed when you have multiply nested objects. In the following explanation, &quot;nested object&quot; will always refer to an object contained ''within a larger JSON''. So, the larger object is '''Monsters''', while '''Troll''' would be a ''nested object.''

'''Macro Code and Discussion'''

Please see the [[Tutorials:Macros:JSONSortingFullCode|full macro code]] for the complete macro.

'''1. Create Sample Object'''

This sequence simply creates a sample object to practice sorting. In actual use, you may wish to pass an object as an argument, or pull an object from a token's properties, as necessary.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:troll = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Troll&quot;, &quot;HD&quot;, 4, &quot;HP&quot;, 75)]
[h:orc = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Orc&quot;, &quot;HD&quot;, 3, &quot;HP&quot;, 13)]
[h:goblin = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Goblin&quot;, &quot;HD&quot;, 2, &quot;HP&quot;, 6)]
[h:gnoll = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Gnoll&quot;, &quot;HD&quot;, 3, &quot;HP&quot;, 19)]
[h:kobold=json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Kobold&quot;, &quot;HD&quot;, 1, &quot;HP&quot;, 4)]
[h:monsters = json.set(&quot;{}&quot;, &quot;Troll&quot;, troll, &quot;Orc&quot;, orc, &quot;Goblin&quot;, goblin, &quot;Gnoll&quot;, gnoll, &quot;Kobold&quot;, kobold)]
&lt;/source&gt;

'''2. Request Sorting Key and Sort Direction from User'''

This section is also optional (and not useful if this macro will be used as a function/called macro), but for the example code it makes it easier to experiment with. This section uses [[input|input()]] to gather user input, and [[abort|abort()]] to halt processing if the user hits &quot;Cancel.&quot; Finally, it uses an [[Macros:Branching_and_Looping#IF_Option|IF():]] roll option to set a variable with a &quot;friendly&quot; indicator of sort direction, which will be used at the end in the final output. 

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:status = input(
&quot;whichKey|name,HD,HP|Pick Sorting Key|LIST|SELECT=0 VALUE=STRING&quot;,
&quot;whichDirection|A+,A-,N+,N-|Direction (A+/- for strings, N+/- for numbers!)|LIST|SELECT=0 VALUE=STRING&quot;
)]
[h:abort(status)]

[h,if(substring(whichDirection,1)==&quot;+&quot;): dirString = &quot;ascending&quot;; dirString = &quot;descending&quot;]
&lt;/source&gt;

'''3. Set Basic Variables'''

This segment initializes some variables that will be used later: 

*''sortObj'' is the object to be sorted (in this case, the JSON Object '''Monsters''')
*''sortOn'' is the value on which to sort ('''name''', '''HD''', or '''HP''')
*''sortDirection'' is the direction of the sort, which will be passed to [[listSort|listSort()]]
*''sortObjContentList'' is a list - created using [[json.fields|json.fields()]] - of each nested object within '''Monsters'''; effectively it is a list of the &quot;names&quot; of each monster
*''keyList'' is a list that will contain the value that corresponds to the thing we're sorting on - so if you choose to sort by '''name''', then ''keyList'' will ultimately contain the value of '''name''' for each monster in the '''Monsters''' object
*''sortedJSON'' will hold the new, nicely sorted JSON object; the original object will be unchanged.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:sortObj=monsters]
[h:sortKey = whichKey]
[h:sortDirection = whichDirection]
[h:sortObjContentList = json.fields(sortObj)]
[h:keyList = &quot;&quot;] 
[h:sortedJSON = &quot;{}&quot;]
&lt;/source&gt;

'''4. Extract the Value of ''sortKey'' from each Nested Object'''

Here, we use FOREACH() to loop through each element in ''sortObjContentList'' (in other words, go one-by-one through the list of monster names). The FOREACH() option lets us say that ''item'' holds the value of each of those (so for the first pass, ''item'' holds the first monster name in the list, and on the second pass, it moves to the next, and so on). We need to do this so that we can extract the detailed information about each monsters from the '''Monsters''' object (in this case, we assign the detailed information to a new variable called ''itemDetail''). 

With the nested objects extracted, we can then retrieve the value of the thing we're sorting on by using [[json.get|json.get()]] on the variable ''itemDetail''. We stick that value in the previously empty list ''keyList''. 

Finally, once we've gone through each nested object held within '''Monsters''' and each nested object's value for our chosen sort (remember, we put that information in the variable ''sortKey'') has been added to ''keyList'', we're finished with the loop. 

Now we actually can determine what the right order will ultimately be - we sort ''keyList'' using [[listSort|listSort()]] based on the direction specified by the user. '''This is a critical step!''' We've gone through each object, and figured out what the ''value'' of the thing we're sorting on is - so if we're sorting on &quot;name&quot;, we've gone and actually retrieved each object's ''name'', and put it in a list with the others. We then sort that list, which tells us the final order to use when we reassemble the main object!

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h,foreach(item, sortObjContentList),CODE:
{
   [h:itemDetail = json.get(sortObj,item)]
   [h: keyList = listAppend(keyList, json.get(itemDetail, sortKey))]
}]

[h:keyList = listSort(keyList, sortDirection)]
&lt;/source&gt;

'''5. Iterating through ''keyList'' and Each Nested Object'''

This is the most complex part of the routine. [[Macros:Branching_and_Looping#FOREACH_Option|FOREACH():]] through each element in the variable ''keyList'' (which, you will recall, contains the values corresponding to ''sortKey'' for each nested object). For ''each'' element in ''keyList'', we then loop through ''all'' of the nested objects in '''Monsters''' to see which one(s) match up to the current element of ''keyList''. 

So, for example, if the current value - ''key'' - in the outer loop is 4, and we are sorting by &quot;HD&quot;, the inner loop will iterate through each nested object and check to see if the value of &quot;HD&quot; for that nested object is equal to 4. 

If a match is found, the matching nested object is added to ''sortedJSON'' using [[json.set|json.set()]]. In this fashion, we're using ''keyList'' to tell us what order the final nested objects should be in, and we then just need to go through our nested objects, setting them in that order via the following code.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h,foreach(key,keyList),CODE:
{
   [foreach(object,sortObj),CODE:
   {
     [objectDetail = json.get(sortObj,object)]
     [h:sortOnValue = json.get(objectDetail, sortKey)]
     [if(sortOnValue == key): sortedJSON=json.set(sortedJSON, object, objectDetail);&quot;&quot;]
   }]
}]
&lt;/source&gt;

'''6. Outputting the Results in an Attractive Fashion'''

The final step is to output results. The use of [[json.indent|json.indent()]] here simply makes the sorted JSON object easy to read.

&lt;source lang=&quot;mtmacro&quot; line&gt;
JSON Object sorted by [r:whichKey], [r:dirString]:&lt;br&gt;
&lt;pre&gt;[r:json.indent(sortedJSON, 3)]&lt;/pre&gt;
&lt;/source&gt;
[[Category:How To]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Tables-window.jpg</title>
    <ns>6</ns>
    <id>799</id>
    <revision>
      <id>2543</id>
      <timestamp>2009-04-01T02:58:19Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Tutorials:Macros:DialogsAndFramesIntro</title>
    <ns>0</ns>
    <id>800</id>
    <redirect title="Introduction to Dialogs and Frames" />
    <revision>
      <id>2545</id>
      <timestamp>2009-04-01T03:00:19Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Tutorials:Macros:DialogsAndFramesIntro]] moved to [[Introduction to Dialogs and Frames]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="48">#REDIRECT [[Introduction to Dialogs and Frames]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Tutorial</title>
    <ns>14</ns>
    <id>801</id>
    <revision>
      <id>2547</id>
      <timestamp>2009-04-01T03:01:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to MapTool category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Newtable.jpg</title>
    <ns>6</ns>
    <id>802</id>
    <revision>
      <id>2548</id>
      <timestamp>2009-04-01T03:02:24Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Tutorials:Macros:UpdatingMacroButtons:DnD4ePowersPrefix</title>
    <ns>0</ns>
    <id>803</id>
    <redirect title="Updating Macro Buttons Using a Macro (Prefix Method)" />
    <revision>
      <id>2551</id>
      <timestamp>2009-04-01T03:05:06Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Tutorials:Macros:UpdatingMacroButtons:DnD4ePowersPrefix]] moved to [[Updating Macro Buttons Using a Macro (Prefix Method)]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="66">#REDIRECT [[Updating Macro Buttons Using a Macro (Prefix Method)]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Tutorials:Macros:UpdatingMacroButtons:DnD4ePowersGroup</title>
    <ns>0</ns>
    <id>804</id>
    <redirect title="Updating Macro Buttons Using a Macro (Group Method)" />
    <revision>
      <id>2555</id>
      <timestamp>2009-04-01T03:07:11Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Tutorials:Macros:UpdatingMacroButtons:DnD4ePowersGroup]] moved to [[Updating Macro Buttons Using a Macro (Group Method)]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="65">#REDIRECT [[Updating Macro Buttons Using a Macro (Group Method)]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Tutorials:Macros:UpdatingMacroButtonLabels:DnD4ePowersLabels</title>
    <ns>0</ns>
    <id>805</id>
    <redirect title="Updating Macro Buttons Using a Macro (Label Method)" />
    <revision>
      <id>2567</id>
      <parentid>2560</parentid>
      <timestamp>2009-04-01T03:18:05Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>25</id>
      </contributor>
      <comment>[[Updating Macro Buttons using Macros (Label Method)]] has been moved, it is now a redirect to [[Updating Macro Buttons Using a Macro (Label Method)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="65">#REDIRECT [[Updating Macro Buttons Using a Macro (Label Method)]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Tutorials:Macros:UpdatingMacroButtons</title>
    <ns>0</ns>
    <id>806</id>
    <redirect title="Updating Macro Buttons Using Macros" />
    <revision>
      <id>2563</id>
      <timestamp>2009-04-01T03:14:14Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Tutorials:Macros:UpdatingMacroButtons]] moved to [[Updating Macro Buttons Using Macros]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="49">#REDIRECT [[Updating Macro Buttons Using Macros]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Updating Macro Buttons using Macros (Label Method)</title>
    <ns>0</ns>
    <id>807</id>
    <redirect title="Updating Macro Buttons Using a Macro (Label Method)" />
    <revision>
      <id>2566</id>
      <timestamp>2009-04-01T03:18:05Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Updating Macro Buttons using Macros (Label Method)]] moved to [[Updating Macro Buttons Using a Macro (Label Method)]]: Correct misnaming.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="65">#REDIRECT [[Updating Macro Buttons Using a Macro (Label Method)]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Tutorials:Macros:CreatingMacroButtons</title>
    <ns>0</ns>
    <id>808</id>
    <redirect title="Creating Macro Buttons Using a Macro" />
    <revision>
      <id>2570</id>
      <timestamp>2009-04-01T03:30:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Tutorials:Macros:CreatingMacroButtons]] moved to [[Creating Macro Buttons Using a Macro]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="50">#REDIRECT [[Creating Macro Buttons Using a Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Tutorials:Macros:CreatingListInputWithImages</title>
    <ns>0</ns>
    <id>809</id>
    <redirect title="Creating a List Input with Names and Images" />
    <revision>
      <id>2573</id>
      <timestamp>2009-04-01T03:33:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Tutorials:Macros:CreatingListInputWithImages]] moved to [[Creating a List Input with Names and Images]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="57">#REDIRECT [[Creating a List Input with Names and Images]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Notes-tab.jpg</title>
    <ns>6</ns>
    <id>810</id>
    <revision>
      <id>2575</id>
      <timestamp>2009-04-01T03:46:06Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Properties-tab.jpg</title>
    <ns>6</ns>
    <id>811</id>
    <revision>
      <id>2577</id>
      <timestamp>2009-04-01T03:46:52Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:State-tab.jpg</title>
    <ns>6</ns>
    <id>812</id>
    <revision>
      <id>2578</id>
      <timestamp>2009-04-01T03:47:07Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Speech-tab.jpg</title>
    <ns>6</ns>
    <id>813</id>
    <revision>
      <id>2579</id>
      <timestamp>2009-04-01T03:47:20Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Ownership-tab.jpg</title>
    <ns>6</ns>
    <id>814</id>
    <revision>
      <id>2580</id>
      <timestamp>2009-04-01T03:47:35Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Config-tab.jpg</title>
    <ns>6</ns>
    <id>815</id>
    <revision>
      <id>2581</id>
      <timestamp>2009-04-01T03:47:51Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to JSON Datatypes</title>
    <ns>0</ns>
    <id>816</id>
    <revision>
      <id>2585</id>
      <timestamp>2009-04-01T03:54:41Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Quick copy-over of Craig's tutorial, could use some headers to break it up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7365">JSON stands for JavaScript Object Notation, which is kind of a fancy way of saying the way you define objects in JavaScript -- technically only a subset. Wait a minute I hear you say, &quot;this is MapTool Macros not JavaScript&quot;. Which of course is correct, but JSON has become common enough that it is used in places other than JavaScript to define data. 

MapTool macros have two different data types for JSON, [[JSON Object]]s and [[JSON Array]]s, which I will refer to as just objects and arrays from this point.

The following is a brief description of what arrays and objects are, if you are still not sure after reading it don't worry, read on and hopefully it will become clearer.

Arrays hold &quot;lists&quot; of data values. If you are familiar with the other data structures in MapTool macro script arrays are analogous to string lists.

Objects hold &quot;key&quot;, &quot;value&quot; pairs, you will often hear this type of data structure referred to either Map, Dictionary, Hash, Assosiative Array depending on what other computer languages you are used to. If you are familiar with the other data structures in MapTool macro script objects are analogous to string property lists.

So if you want to keep a list of things you use an array, if you want to keep a list of things that are key=blah type data you use an object.

First I will show you an example of how these structures look like in JavaScript so you will have an idea of what they &quot;look&quot; like, then I can show you an example on how you can use them to store data. Don't try typing these into MapTool just yet, all the examples in this section are how you would do it in JavaScript, so you understand how it looks and get a feel for it, in [[Using JSON Datatypes in Macros]] I will go show you how to use JSON objects and arrays in your macros.

An array is enclosed in {{code|[ ]}} and has commas separating the values, strings are enclosed in {{code|&quot;}} or {{code|'}}. 
An empty array
&lt;source lang=&quot;javascript&quot; line&gt;
empty = []
&lt;/source&gt;
An array that contains the words {{code|&quot;this&quot;}}, {{code|&quot;is&quot;}}, {{code|&quot;a&quot;}}, and {{code|&quot;test&quot;}}
&lt;source lang=&quot;javascript&quot; line&gt;
test = [&quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;]
&lt;/source&gt;
An array that contains the values {{code|4}},{{code|5}},{{code|12}},{{code|10}},{{code|1}}
&lt;source lang=&quot;javascript&quot; line&gt;
test = [4,5,12,10,1]
&lt;/source&gt;

An object is enclosed in {{code|{ } }} and has key : value separated by commas. For the value strings are enclosed in {{code|&quot;}} or {{code|'}}, for the key if it's a valid identifier it does not have to be enclosed in {{code|&quot;}} or {{code|'}} but you can if you want. If you are unsure it's always safe just to use quotes around the key.

So an empty object is
&lt;source lang=&quot;javascript&quot; line&gt;
empty =  {}
&lt;/source&gt;
An object that contains 
{{code|first name}} = {{code|Fred}} 
{{code|last name}} = {{code|Flintstone}}
&lt;source lang=&quot;javascript&quot; line&gt;
person = {
    &quot;first name&quot; : &quot;Fred&quot;,
    &quot;last name&quot; : &quot;Flintstone&quot;
}
&lt;/source&gt;
There is no reason it has to be on multiple lines, I just did that to make it easier to read, the following is just as valid
&lt;source lang=&quot;javascript&quot; line&gt;
person = { &quot;first name&quot; : &quot;Fred&quot;, &quot;last name&quot; : &quot;Flintstone&quot; }
&lt;/source&gt;

If you are familiar with the current [[String List]]s and [[String Property List]]s you may at this point in time be asking what does this give me that they don't? Lets have a look at the differences so far.

'''Arrays vs String Lists'''
In string lists you have to specify a delimiter, this delimiter -- which defaults to {{code|,}} you can not have this value in the data in the string list. For arrays the delimiter is always {{code|,}} but since the string values are also in quotes you can use the delimiter in the data. For example:
&lt;source lang=&quot;javascript&quot; line&gt;
test = [&quot;This, is, a, test&quot;, &quot;bah&quot;]
&lt;/source&gt;
Is only 2 elements in the array &quot;This, is, a test&quot; and &quot;bah&quot;.

'''Objects vs String Property Lists'''
This same things that were mentioned in Arrays vs String Lists apply here too. In String Property lists you can not use the delimiter or the {{code|=}} character in your data. For objects you can, for example.
&lt;source lang=&quot;javascript&quot; line&gt;
person = {
    &quot;first name&quot; : &quot;Fred&quot;,
    &quot;last name&quot; : &quot;Flintstone&quot;,
    &quot;address&quot; : &quot;Somewhere; around here =&gt; &quot;
}
&lt;/source&gt;

'''Embedded objects and arrays'''
With string lists you can embed property lists within it, and you can also embed string lists within property lists, but you have to be careful that none of the data in the inner property list is a delimiter in the string list, or none of the data in the inner string list is a delimiter in the property list. 

So if you had a property list inside a string list, then the values in the property list can not contain commas (or what ever you have set the delimiter to if it is not the default). If you had a string lists inside of property lists then you could not have ; (or what ever delimiter you have specified) in the string list. 
And when you try to go a level deeper it gets harder, and all in all its very prone to error.

JSON objects and arrays don't have the above problems.

First embedding an array inside another array:
&lt;source lang=&quot;javascript&quot; line&gt;
test = [1, 2, 3, 
    [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;],
 4, 5, 6]
&lt;/source&gt;
And you can have arrays within arrays within arrays:
&lt;source lang=&quot;javascript&quot; line&gt;
test = [1, 2, 3, 
    [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;,
        [&quot;z&quot;, &quot;x&quot;, &quot;y&quot;]
    ],
 4, 5, 6]
&lt;/source&gt;


Again, there is no need to place it in separate lines but it makes it clearer than if I wrote
&lt;source lang=&quot;javascript&quot; line&gt;
test = [1, 2, 3, [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, [&quot;z&quot;, &quot;x&quot;, &quot;y&quot;] ], 4, 5, 6]
&lt;/source&gt;

Similar can be done with Objects.

An object within an object:
&lt;source lang=&quot;javascript&quot; line&gt;
person = {
    &quot;first name&quot; : &quot;Fred&quot;,
    &quot;last name&quot; : &quot;Flintstone&quot;, 
    &quot;address&quot;: { 
        &quot;street&quot;: &quot;301 Cobblestone Way&quot;,
        &quot;city&quot;: &quot;Bedrock&quot;
    }
}
&lt;/source&gt;
Or
&lt;source lang=&quot;javascript&quot; line&gt;
person = {
    &quot;first name&quot; : &quot;Fred&quot;,
    &quot;last name&quot; : &quot;Flintstone&quot;, 
    &quot;address&quot;: { 
        &quot;street&quot;: {
            number: 301,
            name: &quot;Cobblestone Way&quot;
        },
        &quot;city&quot;: &quot;Bedrock&quot;
    }
}
&lt;/source&gt;
Again you could place it on one line like below, but its easier to understand it on several lines
&lt;source lang=&quot;javascript&quot; line&gt;
person = { &quot;first name&quot; : &quot;Fred&quot;, &quot;last name&quot; : &quot;Flintstone&quot;, &quot;address&quot;: { &quot;street&quot;: { number: 301, name: &quot;Cobblestone Way&quot; }, &quot;city&quot;: &quot;Bedrock&quot; } }
&lt;/source&gt;

You can place JSON objects in arrays such as:
&lt;source lang=&quot;javascript&quot; line&gt;
people = [
    {
        &quot;first name&quot; : &quot;Fred&quot;,
        &quot;last name&quot; : &quot;Flintstone&quot;, 
        &quot;address&quot;: { 
            &quot;street&quot;: {
                number: 301,
                name: &quot;Cobblestone Way&quot;
            },
            &quot;city&quot;: &quot;Bedrock&quot;
        }
    },
    {
        &quot;first name&quot; : &quot;Barny&quot;,
        &quot;last name&quot; : &quot;Rubble&quot;, 
        &quot;address&quot;: { 
            &quot;street&quot;: {
                number: 303,
                name: &quot;Cobblestone Way&quot;
            },
            &quot;city&quot;: &quot;Bedrock&quot;
        }
]
&lt;/source&gt;
You can also have arrays inside objects:
&lt;source lang=&quot;javascript&quot; line&gt;
person = {
    &quot;first name&quot; : &quot;Fred&quot;,
    &quot;last name&quot; : &quot;Flintstone&quot;, 
    &quot;address&quot;: { 
        &quot;street&quot;: {
            number: 301,
            name: &quot;Cobblestone Way&quot;
        },
        &quot;city&quot;: &quot;Bedrock&quot;
    },
    &quot;family&quot;: [&quot;Wilma&quot;, &quot;Pebbles&quot;]
}
&lt;/source&gt;
[[Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Using JSON Datatypes in Macros</title>
    <ns>0</ns>
    <id>817</id>
    <revision>
      <id>5099</id>
      <parentid>4141</parentid>
      <timestamp>2011-01-03T20:32:07Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6816">If you don't know JavaScript or JSON already I highly suggest you read [[Introduction to JSON Datatypes]] first even though it is JavaScript based.

So how do you create [[JSON Object]]s and [[JSON Array]]s in MapTool macro script?
Well the easy way if you already know everything you want is to create it as a string. Lets define a data structure that will hold the details for a weapon.

The weapon will be a gun which has the following details:
* Number of shots before reload
* Damage done
* Attack penalty per shot (so more than one shot around has an attack penalty).
So if we were to define this in JavaScript we could just do it as
&lt;source lang=&quot;javascript&quot; line&gt;
weapon = {
    &quot;name&quot;: &quot;Handgun&quot;,
    &quot;shots&quot;: 6,
    &quot;damage&quot;: &quot;1d10&quot;
}
&lt;/source&gt;

If you already know what your JSON object looks like defining it in MapTool is not too different.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: weapon = '{
    &quot;name&quot;: &quot;Handgun&quot;,
    &quot;shots&quot;: 6,
    &quot;damage&quot;: &quot;1d10&quot;
}']
&lt;/source&gt;

If you copy and paste this into MapTool you will notice that the output is returned on one line 
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: weapon = '{ &quot;name&quot;: &quot;Handgun&quot;, &quot;shots&quot;: 6, &quot;damage&quot;: &quot;1d10&quot; }']
&lt;/source&gt;

This is because the chat window displays html and new line characters are not displayed. If you wanted to see the carriage returns as you typed them then you could do
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;pre&gt;
[r: weapon = '{
    &quot;name&quot;: &quot;Handgun&quot;,
    &quot;shots&quot;: 6,
    &quot;damage&quot;: &quot;1d10&quot;
}']
&lt;/pre&gt;
&lt;/source&gt;
Which says the output is already preformatted so new line characters will be displayed.

The above is well and good if you know what you want to store ahead of time, but how do you create a JSON object based on user input or results of a macro. For this you use {{func|json.set}}.

So to create the above weapon you could use
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: weapon = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Handgun&quot;, &quot;shots&quot;, 6, &quot;damage&quot;, &quot;1d10&quot; )]
&lt;/source&gt;
Where {{code|&quot;{}&quot;}} is an empty JSON object, for convenience {{code|&quot;&quot;}} can be used as the first argument to {{func|json.set}} to represent an empty object.

{{func|json.set}} takes an object as well a list of key and value pairs and returns a new object with the specified keys set . '''It is important to rememeber this last bit, all of the json functions do not modify the object, instead they create a new object with the changes.'''
For example
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: weapon = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Handgun&quot;, &quot;shots&quot;, 6, &quot;damage&quot;, &quot;1d10&quot; )]
[h: weapon2 = json.set(weapon, &quot;name&quot;, &quot;Bigger Handgun&quot;)]
[r: weapon] &lt;br&gt;
[r: weapon2]
&lt;/source&gt;

Displays
&lt;pre&gt;
{&quot;name&quot;:&quot;Handgun&quot;,&quot;shots&quot;:6,&quot;damage&quot;:&quot;1d10&quot;}
{&quot;name&quot;:&quot;Bigger Handgun&quot;,&quot;shots&quot;:6,&quot;damage&quot;:&quot;1d10&quot;}
&lt;/pre&gt;
The original value in weapon has not been modified. 

If you placed {{code|&lt;source lang=&quot;text&quot; enclose=&quot;none&quot;&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/source&gt;}} around the output you will notice that json.set() creates the object on one line, not formatted nicely across multiple lines as it was when we created it manually. If you want to &quot;format&quot; this nicely you can use the {{func|json.indent}} command.

For example:
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;pre&gt;[r: json.indent('{&quot;name&quot;:&quot;Handgun&quot;,&quot;shots&quot;:6,&quot;damage&quot;:&quot;1d10&quot;}', 4)]&lt;/pre&gt;
&lt;/source&gt;

Produces:
&lt;pre&gt;
{
    &quot;name&quot;: &quot;Handgun&quot;,
    &quot;shots&quot;: 6,
    &quot;damage&quot;: &quot;1d10&quot;
}
&lt;/pre&gt;

Using JSON arrays is similar
Lets to our weapon above, in this mythical system that the gun belongs to you are able to fire all of the shots in one round but each after the first has a two hit penalty. We can represent this as an array with 6 elements (we will include the first shot for simplicities sake even if it would always be 0).
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: modifiers = '[0, 1, 3, 5, 8, 12]']
&lt;/source&gt;

The {{func|json.append}} function allows you to append items to the end of an array, if the array is empty then it will create a new one.

If the input is an {{code|&quot;[]&quot;}} it is an empty array, for convenience {{code|&quot;&quot;}} also represents an empty array. json.set() can be used on arrays but only to set a value for an index, the array must already have that index.

For example if I wanted to change the 3rd index in the array above to 4 I could do
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: modifiers = json.set(modifiers, 2, 4)
&lt;/source&gt;
The value for index is {{code|2}} because indexes in the array start at {{code|0}}.

So given what we learned earlier you could add the modifiers to our weapon object in the following way
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: modifiers = '[0, 1, 3, 5, 8, 12]']
[r: weapon = json.set(weapon, &quot;modifiers&quot;, modifiers)]
&lt;/source&gt;

Or you could do it as
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: weapon = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Handgun&quot;, &quot;shots&quot;, 6, &quot;damage&quot;, &quot;1d10&quot;,
    &quot;modifiers&quot;, &quot;[0, 1, 3, 5, 8, 12]&quot; )]
&lt;pre&gt;[r: json.indent(weapon,4)]&lt;/pre&gt;
&lt;/source&gt;

Which will display 
&lt;pre&gt;
{
    &quot;name&quot;: &quot;Handgun&quot;,
    &quot;shots&quot;: 6,
    &quot;damage&quot;: &quot;1d10&quot;,
    &quot;modifiers&quot;:     [
        0,
        1,
        3,
        5,
        8,
        12
    ]
}
&lt;/pre&gt;


Of course if you know all the details up front you can create the whole objects as before such as.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: weapon = '{
    &quot;name&quot; : &quot;Handgun&quot;,
    &quot;shots&quot; : 6,
    &quot;damage&quot; : 1d10,
    &quot;modifiers&quot; : &quot;[0, 1, 3, 5, 8, 12]&quot;
}']
&lt;/source&gt;


The next question is now that we have all the information in a JSON object or array how do we get it out when we need it?

To get things out of objects or arrays we use {{func|json.get}}

So
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: weapon = json.set(&quot;{}&quot;, &quot;name&quot;, &quot;Handgun&quot;, &quot;shots&quot;, 6, &quot;damage&quot;, &quot;1d10&quot;,
    &quot;modifiers&quot;, &quot;[0, 1, 3, 5, 8, 12]&quot; )]
Weapon Name: [r: json.get(weapon, &quot;name&quot;)]&lt;br&gt;
Damage: [r: json.get(weapon, &quot;damage&quot;)] &lt;br&gt;
Shots: [r: json.get(weapon, &quot;shots&quot;)] &lt;br&gt;
[h: modifiers = json.get(weapon, &quot;modifiers&quot;)]
Modifiers [r,c(json.get(weapon, &quot;shots&quot;)): json.get(modifiers, roll.count)]
&lt;/source&gt;


Which displays
&lt;pre&gt;
Weapon Name: Handgun 
Damage: 1d10 
Shots: 6 
Modifiers 0, 1, 3, 5, 8, 12
&lt;/pre&gt;

You could also use {{func|json.length}} to change the line that displays the modifiers to

&lt;source lang=&quot;mtmacro&quot; line&gt;
Modifiers [r,c(json.length(modfiers)): json.get(modifiers, roll.count)]
&lt;/source&gt;

But there is an easier way to loop through every value in the array and that is using [[foreach (roll option)|foreach]]
&lt;source lang=&quot;mtmacro&quot; line&gt;
Modifiers [r,foreach(val,modifiers): val]
&lt;/source&gt;

json.length() and foreach can be used on JSON objects as well as arrays. In this case json.length() returns the number of key/value pairs, and foreach will loop through the keys in the object.

So using the above objects
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: json.length(weapon)]
&lt;/source&gt;
Displays {{code|4}}.

and
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r,foreach(val,weapon): val]
&lt;/source&gt;

Displays 
&lt;pre&gt;
name, shots, damage, modifiers
&lt;/pre&gt;
[[Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token:Macro Button</title>
    <ns>0</ns>
    <id>818</id>
    <redirect title="Macro Button" />
    <revision>
      <id>2598</id>
      <timestamp>2009-04-01T13:41:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Token:Macro Button]] moved to [[Macro Button]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[Macro Button]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token:state</title>
    <ns>0</ns>
    <id>819</id>
    <redirect title="Token State" />
    <revision>
      <id>2601</id>
      <timestamp>2009-04-01T13:42:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Token:state]] moved to [[Token State]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[Token State]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token:token property type</title>
    <ns>0</ns>
    <id>820</id>
    <redirect title="Token Property Type" />
    <revision>
      <id>2605</id>
      <timestamp>2009-04-01T13:44:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Token:token property type]] moved to [[Token Property Type]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[Token Property Type]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token:token types</title>
    <ns>0</ns>
    <id>821</id>
    <redirect title="Token Types" />
    <revision>
      <id>2612</id>
      <timestamp>2009-04-01T13:47:37Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Token:token types]] moved to [[Token Types]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[Token Types]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Tutorials:Macros:SortingNestedJSONObjects</title>
    <ns>0</ns>
    <id>822</id>
    <redirect title="Sorting Nested JSON Objects" />
    <revision>
      <id>2615</id>
      <timestamp>2009-04-01T13:51:16Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Tutorials:Macros:SortingNestedJSONObjects]] moved to [[Sorting Nested JSON Objects]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="41">#REDIRECT [[Sorting Nested JSON Objects]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:Tutorials:Macros:SortingNestedJSONObjects</title>
    <ns>1</ns>
    <id>823</id>
    <redirect title="Talk:Sorting Nested JSON Objects" />
    <revision>
      <id>2617</id>
      <timestamp>2009-04-01T13:51:17Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Talk:Tutorials:Macros:SortingNestedJSONObjects]] moved to [[Talk:Sorting Nested JSON Objects]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="46">#REDIRECT [[Talk:Sorting Nested JSON Objects]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Tutorials:Macros:JSONSortingFullCode</title>
    <ns>0</ns>
    <id>824</id>
    <redirect title="JSON Sorting" />
    <revision>
      <id>2621</id>
      <timestamp>2009-04-01T13:53:46Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Tutorials:Macros:JSONSortingFullCode]] moved to [[JSON Sorting]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[JSON Sorting]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Tutorials:Macros:List with images fullcode</title>
    <ns>0</ns>
    <id>825</id>
    <redirect title="List Input with Images" />
    <revision>
      <id>2624</id>
      <timestamp>2009-04-01T13:58:36Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Tutorials:Macros:List with images fullcode]] moved to [[List Input with Images]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[List Input with Images]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Tutorials:Macros:create buttons full code</title>
    <ns>0</ns>
    <id>826</id>
    <redirect title="Create Macro Buttons with a Macro" />
    <revision>
      <id>2627</id>
      <timestamp>2009-04-01T14:02:27Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Tutorials:Macros:create buttons full code]] moved to [[Create Macro Buttons with a Macro]]: Moved to main namespace.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="47">#REDIRECT [[Create Macro Buttons with a Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Layer-window.png</title>
    <ns>6</ns>
    <id>827</id>
    <revision>
      <id>2629</id>
      <timestamp>2009-04-01T14:26:20Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Stack Size</title>
    <ns>0</ns>
    <id>828</id>
    <revision>
      <id>5633</id>
      <parentid>5513</parentid>
      <timestamp>2011-07-27T18:07:39Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Tutorial and Intermediate categories</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8370">{{Intermediate}}
==How Maptool Uses Memory==
When MapTool starts, the Java virtual machine (the program that lets MapTool run on your computer!) configures a number of settings for the program. Three of these settings affect the memory given to MapTool: ''heap memory'' (the memory MapTool uses to store data and resources), and ''stack memory'' (the amount of memory threads are allowed to use).

===Heap memory===
The heap memory allocated to MapTool indicates how much memory MapTool uses to store objects (maps, tokens, image files, macros, etc.) Heap memory allocation is controlled by two options: &lt;code&gt;-Xms&lt;/code&gt; sets the ''starting heap size'' (the initial amount of memory MapTool is allocated) and &lt;code&gt;-Xmx&lt;/code&gt; sets the ''maximum heap size '' (the maximum amount of memory MapTool is allowed to access).

If you set the maximum heap size too low, MapTool may run out of memory and crash, freeze, or have other problems. MapTool clients that are connecting to a server should use the same memory settings as the server when possible; otherwise clients may freeze or lose connection when using larger or more complex maps.

===Stack memory===
The stack memory is the amount of memory each ''thread'' is given; threads are sub-processes that handle application functions like network access, macro execution, and drawing the UI. Stack memory allocation is controlled by one option: &lt;code&gt;-Xss&lt;/code&gt; sets the ''stack size'' (each thread is given exactly the amount specified; there is no starting or maximum stack size).

Some macro frameworks will require larger stack sizes as they perform more complex calculations and functions; they will usually specify their stack requirements. If a thread runs out of stack memory you will see a '''StackOverflow''' error and the macro will not work.

==Configuring memory allocation for MapTool==
In the beginning, MapTool used whatever default stack size and heap size Java felt like setting. The actual amount varied from operating system to operating system, but it was generally enough for the simple macros that were in use at the time. As the power and flexibility of the macro code increased, macros began to bump up against the limits of the default stack, and users began adjusting the stack size to compensate. As frameworks and maps became larger and more complex, users began adjusting the maximum heap size.

The amount of memory is specified in kilobytes or megabytes; &quot;512K&quot; is 512 kilobytes, while &quot;512M&quot; is 512 megabytes.

&lt;font color=&quot;red&quot;&gt;'''WARNING'''&lt;/font&gt;: '''Stack memory is allocated in addition to heap memory and ''each thread receives the same amount of stack memory.'' If you set the stack memory allocation too high, the Java VM can consume far more memory than is necessary which will affect overall computer performance.

===Setting the memory allocation in a batch file===
One of the ways to start MapTool is via the various script or ''batch files'' that are included when you download and unzip a copy of MapTool. There are three different types of script files included with MapTool as of 1.3.v77:

* &lt;code&gt;Launch MapTool.bat&lt;/code&gt;, &lt;code&gt;Launch MapTool-512M-Memory.bat&lt;/code&gt; and &lt;code&gt;Launch MapTool-1G-Memory.bat&lt;/code&gt; for Windows; the different names refer to different maximum heap allocations
* &lt;code&gt;Launch MapTool.sh&lt;/code&gt; for Linux and Mac OS X
* &lt;code&gt;Launch MapTool.command&lt;/code&gt; for Mac OS X; this file can be double-clicked to start MapTool. 

====Editing a .bat file====
Though each batch file has different heap sizes specified, the format is the same:
 javaw -Xmx512M -Xss512K -jar maptool-*.jar run

To set the maximum heap size, change the &lt;code&gt;-Xmx&lt;/code&gt; option. To set the stack size, change the &lt;code&gt;-Xss&lt;/code&gt; option. 

====Editing the .sh or .command file====
At the top of the shell script file are three variables:
 MAXMEMSZ=&quot;768m&quot;
 MINMEMSZ=&quot;32m&quot;
 STACKSZ=&quot;2m&quot;

You can set the starting heap (MINMEMSZ), maximum heap (MAXMEMSZ), and stack size (STACKSZ) by changing these variables.

===Setting the memory allocation when using MapToolLauncher (Windows-only)===
If you start MapTool with the Windows launcher, you can set the starting heap (Min Mem), maximum heap (Max Mem), and stack  (Stack Size) sizes. 

The Windows launcher defaults to a 2MB stack which is acceptable for many environments.  If you change the memory values, the new values will be saved for the next launch.  To reset the values, simply remove the '''MT.CFG''' file where they are saved.

===Setting the memory allocation for Java WebStart (any platform)===
If you start MapTool using the Java WebStart option, you can change the settings here, too. 

# Go to [http://www.rptools.net/index.php?page=launch the MapTool Launch page]
# Click the '''CUSTOMIZATION''' link; three fields for setting memory options will be exposed
# You can set the starting heap (Minimum memory), maximum heap (Maximum memory), and stack size (Stack size) by changing these variables
# Click on the links above to start the application you wish to use.

If you have a saved '''.jnlp''' (Web Start) file, you can edit the memory settings by hand.

* Open the '''.jnlp''' file in a text editor
* Look for the following section (the actual memory values may differ in your copy):
    &lt;j2se version=&quot;1.5+&quot;
        initial-heap-size=&quot;64m&quot;
        max-heap-size=&quot;512m&quot;
        java-vm-args=&quot;-Xmx512m -Xms64m -Xss2m&quot;/&gt;
* To change the starting heap size, change the &lt;code&gt;initial-heap-size&lt;/code&gt; entry and the &lt;code&gt;-Xms&lt;/code&gt; entry
* To change the maximum heap size, change the &lt;code&gt;max-heap-size&lt;/code&gt; entry and the &lt;code&gt;-Xmx&lt;/code&gt; entry
* To change the stack memory size, change the &lt;code&gt;-Xss&lt;/code&gt; entry
* Save the '''.jnlp''' file

===Setting the memory allocation in the Mac OS X application bundle===
Users who download the '''.dmg''' (disk image) file from the [http://www.rptools.net/index.php?page=downloads RPTools download page] and installed MapTool from it will see MapTool as a Mac OS X application bundle. MapTool can be launched by double-clicking it like any other Mac OS application.

# Ctrl-click (or right-click) on MapTool application icon.
# Choose ''Show Package Contents'' and a new Finder window will open.
# Open the '''Contents''' folder and locate the '''Info.plist''' file.
# Double-click that file to open the Property List Editor.
# Expand the entry for ''Java'' so it looks like the one below (it's at the bottom of the image, below).
# To set the maximum heap size, change the &lt;code&gt;-Xmx&lt;/code&gt; option. To set the stack size, change the &lt;code&gt;-Xss&lt;/code&gt; option. To set the starting heap size, change the &lt;code&gt;-Xms&lt;/code&gt; option (not depicted in the above image).
# Save the file. The next time you double-click the MapTool icon, it will launch using the new memory settings.
[[Image:Property List Editor.png]]

====If you want to run MapTool twice on OS X ...====

You might want this for testing purposes, or perhaps you're using a dual-monitor setup where one screen shows MapTool running as a GM and the other shows MapTool running as a Player (such as a HDTV or LCD projector).  In other words, you open MapTool once and start a server, then open it again and connect to the server as a client.

# Open '''Terminal'''
# Type {{code|open -n &quot;MapTool.app&quot;}} (or whatever name your MapTool is saved as) and press '''Enter'''

Otherwise, when you double-click an application on OS X it simply re-activates the application window that's already running.  I don't know of any way of running {{code|open -n}} from the GUI although it would be a pretty simple AppleScript program.  (It looks like it's solved here:  http://superuser.com/questions/67190/how-can-i-get-an-dock-icon-to-launch-a-program-multiple-times  And then this page has a description of how to do the same thing with a Ctrl-Click menu option: http://lifehacker.com/#!5766390/how-to-open-two-instances-of-an-application-in-os-x )

As MapTool is quite a small program, another way to do it is just duplicating and renaming the program (as &quot;MapTool-client&quot; for instance). This would not usually be a clean way to handle it, but again, it's a small software. The good point is you now have two programs with different names. Once the two are launched, it's easy to tell which is which in the Dock or when command-tabbing to switch from one to the other.

[[Category:MapTool]][[Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Macro Writing</title>
    <ns>0</ns>
    <id>829</id>
    <revision>
      <id>6852</id>
      <parentid>6851</parentid>
      <timestamp>2016-11-09T14:03:39Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="54940">{{Languages|Introduction to Macro Writing}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}

==The Singular MOST important part you should know!! (code syntax) ==
If you have never created code before than the following part will probably make NO sense (but ''do'' keep reading). Still, concerning macros in Maptool its the singular most important thing to know. So when you reach the end of this (lengthy) article, come back here and read it again, when you have created your first code, come back here and read it again. It will start making sense to you and you WILL go 'aaah ok now that makes sense!!' and you'll understand why this is the most important part :D. Happy reading.

If you ARE familiar with coding, than the following will make much more sense and you'll understand why it's so important.

As with all code, there is a syntax that you need to abide. ''ALL Maptool script/code lines consist out of 0 or more options and 1 function'' (with one exception: {{roll|code}}). 

An '''option''' is something that influences that which is finally shown in the chat. For example 
*the option {{roll|h}} will hide the result, 
*the option {{roll|r}} will only show the result and 
*the option {{roll|if}}; will only show one or the other (depending on true or false).
* if you give no option, then the entire execution of the function is shown in the chat
note that there are many more [http://lmwcs.com/rptools/wiki/Category:Roll_Option Roll Options]


A '''function''' is something that RETURNS a resulting value so you have a initial value and you use a function ON that value and what is returned is the result of that function on that value. Examples: 
*the function {{func|abs}}  will return a positive value (removes the - from any value) so {{code|abs(-3)}} will return 3. The initial value is -3 and the result value is 3. 
*the function {{func|if}} (indeed there is both an {{roll|if}}'' option'' and an {{func|if}} ''function'') will return the first parameter if the value is true (=1) and the second parameter if the value is false (=0). So {{code|if(0,&quot;Black&quot;, &quot;White&quot;)}} will return &quot;White&quot;. Note that because this concerns a function, both the true and false statements are executed (but only one of the two results is returned).
Here an overview of all [http://lmwcs.com/rptools/wiki/Category:Macro_Function Functions]

'''Hence you ALWAYS have:'''

  [option, option, etc.: result = function(value, parameters)] 
Note thus that ALL code/script thus starts with &quot;[&quot; ends with &quot;]&quot; and if there are any options, these are separated from the function by ONE &quot;:&quot;, if you wish to use more than one option, you separate these by &quot;,&quot;. There is &lt;b title=&quot;For the nitpickers: yes there are exceptions like switch and code roll option and strings.&quot;&gt;NEVER&lt;/b&gt; more then ONE of these three (&quot;[&quot;, &quot;]&quot; and &quot;:&quot;) characters in one script statement. And thus anything OUTSIDE the &quot;[&quot; &quot;]&quot; is NOT code and thus plain (html) text (regardless of content). This '(html) text' will &lt;b title=&quot;For the nitpickers: yes there are again exceptions like ignore output in UDF and using abort(0) will ignore all output.&quot;&gt;ALWAYS&lt;/b&gt; appear in the chat as is and cannot be influenced by code in any way.

As I said, this probably makes no sense now, but write it down on a piece of paper, stick on your desk and read it back from time to time, it'll start making sense.

===&quot;String&quot; vs Variable===
Another famous syntax mishap for beginners is &quot;string&quot; vs variable.  If the above makes a little sense then here's the difference explained in code:
  [variable = &quot;String&quot;]
A variable is a container in which you can store stuff. A string is a piece of text (which can contain letters, numbers and punctuations) which is &quot;enclosed within quotes&quot;. Either &quot;double&quot; or 'single' quotes. Note that you can also put an actual number, e.g. 50, inside the variable, numbers are distinguished from strings by lack of quotes! For this reason a variable canNOT start with a number (because maptool would not now the difference)! E.g. 
  WRONG: [42Variable = &quot;Hello World&quot;] (You can get really weird stuff if you do this)
  RIGHT: [Variable42 = &quot;Hello World&quot;]
Note that as explained earlier: 'code' is everything INSIDE [brackets] outside of the brackets everything is considered text, whether you write: Hello World or &quot;Hello World&quot; does not matter.
Also note that a number can be written as a number AND as a string! E.g.
  [variable = 42] 42 stored as a number
  [variable = &quot;42&quot;] 42 stored as a string
However... (and this can be a pain in the butt) as soon as a string that solely consists out of digits (like &quot;42&quot;) it will be converted to a number!! This can be really confusing. 
for this reason:
  [x = 21 + 21] will store the number 42 inside the variable x
  [y = &quot;21&quot; + &quot;21&quot;] will store the NUMBER 2121 inside the variable y


If you came here through the 'read this' link, then you can stop reading here as the above is the part I intended as a ''must read''. Still if you're a beginner, please read on.

==What is a Macro?==

As mentioned in the Token Macros page, a macro is simply a way to automate a task in MapTool. Essentially, macros are scripts that are read by a ''parser'', which interprets them and ensures that the right parts are processed in the right way (for instance, ensuring that a command to add two numbers together is processed as a macro command, and not simply text to put into the chat window). 

Macros started off small in MapTool, but at this point, the macro scripting language has become a very full-featured set of commands and functions that can perform nearly any operation you can imagine! 

==What You Should Already Know==

Macros are where we begin to delve into the more powerful - and more complicated - features and capabilities of MapTool. While this guide attempts to be easy for even brand new users to follow, there are a few things I assume you've read and already know how to do:

# I assume you've read the [[Introduction to Mapping]], so you are familiar with the MapTool interface, and how to create maps, save campaign files, and put tokens on maps.
# I assume you've also read the [[Introduction to Tokens]], so you have a basic idea how to manipulate tokens, look at their properties, and so forth.
# Finally, because macros are usually intimately connected to token ''properties'', I assume that you have read and followed the steps in the [[Introduction to Properties]], and created a new campaign file based on the [[Sample Ruleset|Sample RPG ruleset]] created to help new users learn about MapTool. If you haven't read that guide, please do - it will help some of the examples below make a ''lot'' more sense!

==An Important Preference Setting==

One important thing assumed by these macro tutorials is that you have a certain preference setting enabled, namely ''Use Tooltips for Inline Rolls.'' Let me explain:

By default, when macro output is displayed, the display includes a complete breakdown of how the result sent to chat was obtained. This is not usually a big deal for little macros - it might look like this:

:'''Attack Roll''': &lt;font color=&quot;blue&quot;&gt;« roll + bonus = 18 + 9 = 27 »&lt;/font&gt; vs. AC

A little ugly, but not terrible. On the other hand, with something more complex, it can end up looking like this:

:'''Toxic Cloud''' vs: &lt;font color=&quot;blue&quot;&gt;« attack = 1d20+attackBonus = attack = (4 + 7) = 11 » « damage = 1d6 + 2 = damage = (5 + 2) = 7 »&lt;/font&gt; Target 0: Attack 11; &lt;font color=&quot;blue&quot;&gt;« damage = 7 » damage. « attack = 1d20+attackBonus = attack = (14 + 7) = 21 » « damage = 1d6 + 2 = damage = (3 + 2) = 5 »&lt;/font&gt; Target 1: Attack 21; &lt;font color=&quot;blue&quot;&gt;« damage = 5 » damage. « attack = 1d20+attackBonus = attack = (6 + 7) = 13 » « damage = 1d6 + 2 = damage = (1 + 2) = 3 »&lt;/font&gt; Target 2: Attack 13; &lt;font color=&quot;blue&quot;&gt;« damage = 3 »&lt;/font&gt; damage. &lt;font color=&quot;blue&quot;&gt;« attack = 1d20+attackBonus = attack = (17 + 7) = 24 » « damage = 1d6 + 2 = damage = (2 + 2) = 4 »&lt;/font&gt; Target 3: Attack 24; &lt;font color=&quot;blue&quot;&gt;« damage = 4 »&lt;/font&gt; damage.

Which is really pretty much unreadable.

To avoid seeing the details of the processing that goes into the macro output, you'll need to set MapTool to display those calculations in tooltips (visible when you hover the mouse over the chat results) rather than in the chat window. To do so:

# Go to the '''Edit''' menu.
# Select '''Preferences'''
# On the right side of the '''Interactions''' tab, in the &quot;Chat&quot; area, make sure ''Use ToolTips for Inline Rolls'' is '''checked'''.
# Click the '''OK''' button. 

Following the above steps will put the processing details shown above into a tooltip available when you hover over the values printed to chat, rather than displaying them directly in the chat window.

==Conventions for this Guide==

I will do my best to keep my language and terminology consistent. In this guide:

* '''Macro''' refers to a collection of commands that are grouped together to automate a task
* '''Macro command''' will refer to any particular ''individual'' command or function you use ''inside'' a macro
* '''Macro language''' will mean the whole collection of commands, functions, and operations you can use whenever you write macros. You can see a huge array of functions at the [[:Category:Macro Function|List of Macro Functions]].

Also, although it is possible for one macro to trigger another (called &quot;calling&quot; another macro), for this guide, the only macros we'll talk about are triggered by clicking a button on the appropriate Macro Panel, and only affect the tokens they run ''on''.

==Why Would I Use Them?==

There's nothing requiring you to use macros at all when you use MapTool. Remember, the core purpose of MapTool is to share a map with your friends, and play games (read the [[Introduction to Mapping]] and the [[Introduction to Game Hosting]] to learn how to make and share maps with your gaming groups), and MapTool gives you everything you need to do that: maps, tokens, and a chat system that lets you chat in- and out-of-character, roll dice, and take on the roles of whatever character you are playing. 

However, there's a lot more that can be done with MapTool, if you're interested in learning a little bit about the macro capabilities. For example, if you want to click a button that will automatically roll 1d20 and add a modifier to it, it's possible to create a macro for that. If you want to change your hit points after getting hurt, you can write a macro to do that. And this tutorial will show you how.

==Where are These So-Called &quot;Macros?&quot;==

Macros are associated with various parts of the MapTool interface and the objects in it. It turns out that there are three places a macro can &quot;reside,&quot; so to speak:

===Token Macros===

The first, and most common place, is for a macro to reside on a [[Introduction to Tokens|token]]. Token macros are associated with the token on which they are created, and will travel around with that token as long as you let them.

Token macros are only directly accessible to the people who own the token, so if you don't own the token, you won't be able to click (or even see!) the button for that macro. 

===Campaign Macros===

Campaign Macros are macros that aren't linked to a specific token in a campaign, but to the campaign as a whole. These macros work in almost every respect exactly like a token macro, except that:

# You don't have to select a token to see the macros
# Anyone can access them and run them

Campaign Macros are quite useful for the GM and for the Players to handle common functions - in fact, if you set up a common task as a campaign macro, then you only need to make one copy of it (instead of making copies on every token that needs it). 

===Global Macros===

Global Macros aren't linked to a token or a campaign - instead, they are macros that are linked with your copy of MapTool. These macros are ''not'' visible to anyone else who connects to your game.

This is a good place to put macros for tasks you ''don't'' want other people seeing - like information you want to show to players only when ''you'' decide; or tasks you want to perform on your NPCs but you don't want PCs to be able to do.

==The Macro Panels==

[[Image:Macro-panels.jpg|thumb|The four Macro Panels]] [[Image:Tabbed-panels.jpg|thumb| The four panels stacked together, selectable by the tabs at the bottom (many users stack them like this to save space)]]

With all this talk about macros and locations and especially the macro &quot;buttons,&quot; you are probably wondering - where are these buttons? You'll find macro buttons on one of the 4 '''macro panels''' that appear in MapTool. If you cannot see any of the macro panels, go to the '''Windows''' menu, and make sure that these four windows are checked:

* Selection
* Impersonated
* Campaign
* Global

You should see these windows pop up in MapTool if they were not already there. If you look at the screenshots to the right, you will see that the Global panel is covered with a bunch of buttons. Each of those buttons will execute a macro; the buttons appear when you create a new macro. 

'''Please note''', however, that the Global panel contains macros that are specific to ''your'' computer and ''your'' installation of MapTool. The buttons you see in the Global Panel screenshots are ''my'' Global macros; yours...well, you'll have to write some!

===Selection and Impersonated Panels===

There are two panels that deal directly with token macros: Selection, and Impersonated. 

The '''Selection''' panel will show buttons for all of the macros that are currently residing on the token you have selected (you select tokens by clicking on them with the mouse). Each of these buttons runs a particular group of macro commands.

The '''Impersonated''' panel shows buttons for the macros on the token you are ''impersonating''. Impersonating a token is a way to &quot;assume the token's persona&quot; - when you chat, text will appear as if the token was speaking, and so forth. It is possible to impersonate one token, and select another, so make sure you know what panel you're looking at!

===Campaign Panel===

This panel shows all of the macros currently set up for the Campaign. Remember, these are visible to everybody.

===Global Panel===

This panel contains the Global Macros you've set up. Remember, these are ''only visible to you.''

==Before You Go Any Further: The Basics==

Before we proceed, there are some ''essential'' elements of the macro syntax you need to understand, or unpredictable things will happen. Macros originated as ways to script short sections of text and very brief dice rolls, which were sent to the chat window. So, if you wanted a battle cry to be displayed, but didn't want to retype it every time, you could write a &quot;macro&quot; to send that battle cry to the chat window. Likewise, if you always rolled 2d6 to make an attack, you could write a macro to generate that output, rather than typing {{code|/roll 2d6}} every time you needed to roll.

From there, it grew - the macro commands became more complex until they were almost a programming language; but they're still just a bunch of text passed to a ''parser'', which handled all the commands in the macro, and generated results. 

So, one of the big things to remember is this:

'''IMPORTANT: Macros are a sequence of text containing both text you want to display in chat AND special commands that do things like make dice rolls'''.

===The Current Token===

Before you begin writing macros, please consult the page on the [[Current Token]] concept. When you write macros, you will usually - unless the macros are very minimal - be manipulating [[Token Property|Token Properties]]. In order to manipulate the ''correct'' set of properties with your macro, it is crucial to understand the concept of the [[Current Token]]. 

'''IMPORTANT: A macro''' '''''always''''' '''refers to the Current Token, unless you explicitly instruct the functions/operations of that macro to address a token other than the Current Token. '''

===Brackets and Braces===

Now, because they are plain text, there must be a way to distinguish the parts that are just text to send to chat, and the parts that are &quot;programming commands.&quot; MapTool handles that by enclosing the programming commands in brackets - either the square brackes, {{code|[ ]}}, or the curly brackets, {{code|{ } }}. 

'''IMPORTANT: Anything found in between square brackets or curly braces is handled not as regular text, but as a command to the parser to do something. Likewise, if it's''' '''''not''''' '''between curly or square braces, it is sent to the chat window as text.'''

So, something like:

&lt;source lang=&quot;mtmacro&quot;&gt;
[1d20]
&lt;/source&gt;

or

&lt;source lang=&quot;mtmacro&quot;&gt;
{1d20}
&lt;/source&gt;

is not telling MapTool to send the text &lt;nowiki&gt;[1d20]&lt;/nowiki&gt; or &lt;nowiki&gt;{1d20}&lt;/nowiki&gt; to chat; rather, it's saying &quot;generate a random number between 1 and 20 and send ''that'' to the chat window.&quot; The brackets and braces (although braces aren't recommended for use anymore, due to complications they cause with the branching and looping functions) indicate to MapTool that the information ''between'' them is a macro command or variable, and not just text. So, as you'll see later, you can mix text and macro commands:

&lt;source lang=&quot;mtmacro&quot;&gt;
I roll [1d20+4] for initiative.
&lt;/source&gt;

in a macro will replace the &lt;nowiki&gt;[1d20+4]&lt;/nowiki&gt; with the result of that dice expression, and then print the entire sentence to chat, so it looks something like:

&lt;source lang=&quot;mtmacro&quot;&gt;
I roll 16 for initiative.
&lt;/source&gt;

===Roll Options===

Roll Options are another special feature of the macro language. Their name is somewhat of a legacy - since most macros were dice rolls (e.g. the aforementioned &lt;nowiki&gt;[1d20+4]&lt;/nowiki&gt;, there was a request to have different ways to display them (or not display them at all). Since those options were used to change how a roll appeared, they were called Roll Options, and the name stuck. In fact, it's still applicable, even though the options no longer really just handle how something is displayed. 

Roll Options are a critical thing to understand in macro writing. There are a couple rules. First, the general format of any macro command in MapTool is this:

&lt;source lang=&quot;mtmacro&quot;&gt;
[(comma-list-of-options): operation(s)]
&lt;/source&gt;

Now, to explain: a roll option has the following rules:

# It always goes at the beginning of a macro statement (for our purposes, a statement is any macro line between square brackets). 
# It is always followed by a colon.
# It may be combined with other roll options; if so, you separate each option with a comma, and at the end of the comma-separated list, you put a single colon.
# It needs to appear only once in a given macro statement for it to apply to the operations contained within. This gets tricky when you start using the CODE roll option, since you can begin to nest entire, separate statements, but that is explained in the sections on branching and looping. 

A simple example of a roll option is this:

&lt;source lang=&quot;mtmacro&quot;&gt;
[r:1d20+4]
&lt;/source&gt;

That uses the &quot;regular output&quot; roll option to display the result of 1d20+4 as plain text (without highlighting or tooltips). A complex example might look like this:

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20): output = &quot;Critical Hit&quot;; output = &quot;Not a Critical Hit&quot;]
&lt;/source&gt;

This combines the [h: ] roll option (which means, &quot;hide this from the chat window&quot;), and the [if(): ] roll option, which performs an if-then operation. Note, though, the roll options all appear only at the beginning of the macro statement to which they apply. 

A ''very'' complex example might involve the use of the [CODE: ] roll option (learn more about that at [Introduction to Macro Branching] to allows you to nest entire macro statements within blocks to be executed as if they were a single statement. For instance:

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20),CODE:
{
    [damageAmount = 16]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
};
{
    [damageAmount = 1d10+6]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
}]
&lt;/source&gt;

This is a complex statement, but the roll options for the overall command (the outermost set of square brackets) are all at the beginning, separated by commas, and followed by a single colon. The inner statements are ''nested''.

===Quotes and Apostrophes===

Under most circumstances, macros containing single quotes (or apostrophes) will work fine - they're just text, and thus they will be sent to the chat window without issue. However, there are certain situations where a lone, or unmatched, single quote will cause MapTool to think you have created an ''unterminated string''. When that happens, the text of the macro (all the commands, etc.) is usually dumped to chat, resulting in a big block of ugly output.

To avoid this, remember this rule: if you have text that you wish to appear in chat contained between a set of curly braces, a lone quote character (single or double quotes) will cause an error. So, modifying the example above: 

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20),CODE:
{
    [damageAmount = 16]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
    The target's HP is now [r:TargetHP].
};
{
    [damageAmount = 1d10+6]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
}]
&lt;/source&gt;

The single quote character in the line {{code|The target's HP is now [r:TargetHP]}} will cause an error. There are two ways around this: 

# Don't use apostrophes. This can be a bit awkward.
# Replace the apostrophe with the HTML character code for the single quote: '''{{code|&amp;amp;#39;}}'''

===Comments===

'''THERE IS NO COMMENT MECHANISM IN THE MACRO CODE. ALL PROPERLY WRITTEN MACRO COMMANDS IN A MACRO''' '''''WILL BE EXECUTED.'''''

The macro language directs all of the content of a macro through the built-in parser, looking for text to send to chat and commands to execute. It is possible to hide output from the chat window in a couple of fashions, but it is not possible to prevent the execution of properly written macro commands. In other words, you '''cannot comment out code.'''

There are two ways to hide output: the {{roll|h}}, or &quot;hidden&quot;, roll option, and HTML comment format. The hidden roll option you've already seen, but if you're not familiar with HTML, comments in HTML look like this:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--This is an HTML comment--&gt;
&lt;/source&gt;

In an actual HTML page, anything between the &lt;nowiki&gt;&lt;!--&lt;/nowiki&gt; and &lt;nowiki&gt;--&gt;&lt;/nowiki&gt; is completely ignored. In contrast, in MapTool's macro language, anything between the comment tags is ''hidden'' from chat, but if you embed macro commands in there, they ''will'' be executed. In other words, in a macro, if you have this line:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--In this part of the macro I roll some dice--&gt;
&lt;/source&gt;

it will be hidden from chat and act like a comment. However, if the line said:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--In this part of the macro I roll some dice using the format [r:1d20+9]--&gt;
&lt;/source&gt;

the parser will hide all that from chat, but it ''will'' perform that macro command, whether you want it to or not.

The lesson to be learned here: '''You cannot comment out macro code.'''

==Writing Macros==

[[Image:Camp-panel-nomacros.png|thumb|The '''Campaign Panel'''. You can see there are no macros here yet.]]

[[Image:Camp-panel-rcaddnew.png|thumb|Right-clicking on the Campaign Panel lets you add a new macro.]]

Macro creation is a three-step procedure (though those three steps can contain multitudes!):

1. Right-click on the panel where you want the macro to appear (either one of the token panels, the Campaign panel, or the Global panel) and select '''Add New Macro'''. A gray button with the label '''(new)''' will appear.

2. Right-click on the button, and select '''Edit'''.

3. Enter your macro code, give it a name, and hit '''OK'''. There! You've created a macro!

But wait...what do you mean, &quot;macro code?&quot; 

As I said, those three steps can contain a ''huge'' amount of details, steps, tips, tricks, victories, failures, frustrations, and sometimes, hollering and gnashing of teeth. So, we'll take a step back and look at some very simple macros in a step-by-step fashion. If you want to see what some advanced macros can look like, there are plenty of tutorials and how-tos on this wiki to read through. For now, though, we'll do some simple, but useful, macro writing.

===Roll for Initiative===

[[Image:Camp-panel-newbutton.png|thumb|After selecting &quot;Add New Macro,&quot; a button labeled '''(new)''' appears on the Campaign Panel.]]

[[Image:Camp-panel-rceditbutton.png|thumb|Right-clicking on the button opens the macro editor.]]

[[Image:Macro-editor-examplestring.png|thumb|Entering a macro label and the macro command]]

[[Image:Camp-panel-exbutton.png|thumb|The '''Campaign Panel''' with your newly created macro on it]]

The simplest macros are no more than text, which is output to the chat window. In effect, a macro containing text (in fact, all macros) just send a string of commands to the chat window where it is read and interpreted. Most programming languages start off with the classic &quot;Hello World!&quot; program, so this guide is ''not'' going to do that. Instead, let's do something a bit more RPG: create the dreaded &quot;Roll for Initiative!&quot; message!

1. Select the Campaign Panel.

2. Right-click on it, and select '''Add New Macro'''.

3. Right-click on the new macro button, and click '''Edit'''.

4. In the '''Label''' field, enter &quot;Roll for Initiative!&quot;

5. Leave the '''Group''' and '''Sort Prefix''' fields blank.

6. In the '''Command''' field, type 

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;Roll for Initiative!&lt;/tt&gt;&lt;/blockquote&gt;

7. Click '''OK'''. 

8. When you're done, you'll see that the button has changed - it now says '''Roll for Initiative!''' on it, and when you click it, lo and behold, the text &quot;Roll for Initiative!&quot; appears in the chat window.

That is macro writing at its most basic: you enter some text in the macro, and that text is read by the parser and sent to the chat window when you press the button. 

===Something More Interesting===

&quot;Roll for Initiative,&quot; though scary when your GM utters it, is not all that ''interesting'' a macro. You probably thought, &quot;why wouldn't I just type that in chat?&quot; And in fact, the answer is, &quot;you probably would.&quot; So let's do something more interesting, and more in keeping with why we're using MapTool in the first place (after all, we're not here to write programs - we're here to play games): we're going to add some ''macro commands'' to the macro, in addition to just plain text. Macro commands are special instructions that, when read by the parser, tell it to do something more than just print text in the chat window, like roll some dice or calculate a value.

Macro commands must ''always'' be enclosed in square brackets (e.g, [''macro command'']) or curly braces (e.g., {''macro command''}). Enclosing them in this fashion is what clues the parser in that a command is coming - otherwise, it will treat the command just like any other text, and print it in chat. 

====Roll Some Dice====

[[Image:Macro-editor-rolldice.png|thumb|A macro with text and a basic dice roll of 1d20+7]]

This is a simple macro that's going to automatically roll some dice, and add a number to that roll, before displaying the whole thing in the chat window. 

1. Create a new macro (this can be created anywhere you like - on a token, in the campaign panel, or in the global panel), and open the edit dialog (remember, you do that by right-clicking on the button labeled '''(new)'''). 

2. In the '''Label''' field, call the macro something like &quot;Attack Roll&quot; or &quot;Dice Roll&quot;

3. In the '''Command''' area, enter:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll is [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

4. Click '''OK'''. You should see a button labeled with whatever you chose in Step 2, above. When you click it, you'll see something like the following appear in chat:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;Chris: My attack roll is &lt;font style=&quot;background-color:lightgray;&quot;&gt;8&lt;/font&gt;!&lt;/blockquote&gt;

What has happened is that MapTool read through the contents of the macro, and when it got to the section '''[1d20+7]''', it knew to:

# Roll a 20-sided die (or, in reality, choose a random number between 1 and 20), and
# Add 7 to that result, and
# Display the results in the chat window, inserted into the text in the right place

You'll see that the number 8 has a gray background. If you hover over that number, a &quot;tooltip&quot; will pop up showing how that number was reached. In this case, I managed to roll a 1 on the 1d20 (bummer! a critical fumble!)  If you don't see this tooltip, check your [[MapTool Preferences#Chat]] settings, specifically '''Use ToolTips for Inline Rolls'''.

Also, you probably won't see the name &quot;Chris&quot;, unless your name happens to be Chris. That part of the chat output is just indicates who &quot;said&quot; that particular bit of text; if it was a token, it would have the token's picture and name instead of boring old &quot;Chris.&quot;

====More than Just Numbers====

Macro commands can work with numbers and with text -- you can manipulate ''strings'' (that is, collections of alphanumeric characters) as well using the MapTool macro language. Say, for instance, you wanted to roll your attack, but wanted to enter the name of your target so that it showed up in chat.

[[Image:Macro-editor-basiccommands.png|thumb|A macro with a basic dice command and a variable called ''target'']]

[[Image:Prompt-undeclared-variable.png|thumb|A prompt for an &quot;undeclared variable&quot;]]

What you can do is edit your Attack Roll macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

When you run this macro, though, suddenly a window pops up in your face demanding a &quot;Value For target.&quot; What happened?

Well, when MapTool looked at that macro, it saw a macro command that just says '''[target]'''. MapTool assumes that any word ''inside'' a macro command that is ''not'' enclosed in quotes is actually the name of a ''variable'' (in other words, a value that might change). 

MapTool also noted that nowhere in that macro do we say ''what'' the variable ''target'' happens to equal. Programming languages call this sort of situation an ''undeclared variable'' (in other words, you never declared what it equaled). Since MapTool has no way of knowing what ''target'' should be, it asks! If you type a name, number, or pretty much anything in that popup window, MapTool will take that information, assign it to the variable ''target'', and finish the macro. 

Go ahead and type &quot;Nasty Orcses&quot; (you can leave off the quotes) in the box, and hit '''OK'''. You should see in the chat window something like:

&lt;blockquote style=&quot;border:1px solid gray;&quot; width:50%;&gt;Chris: My attack roll against &lt;font style=&quot;background-color:lightgray;&quot;&gt;Nasty Orcses&lt;/font&gt; is &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt;!&lt;/blockquote&gt;

Once again, the parser read through the text and macro commands you put inside the macro, and in the places where a macro command was indicated (by the square brackets, remember), MapTool substituted the appropriate information.

==Using Variables in a Macro==

We've seen in a couple of the examples some use of variables (like {{code|target}} in the example above) in a macro, but we haven't gone into the process too deeply yet. However, variables, and their use, is really the core of macro writing, so it would be remiss of me to leave it go.

===What's a Variable?===

If you're familiar with programming at all, you will know this already, but if you're just stepping into this stuff cold, the simple definition of a ''variable'' in terms of the macro language is:

:'''A variable is a value that might change (i.e., vary) based on a token property, a calculation, or another macro command'''

Since the value of a variable might change, we have to give it a name (which is called ''declaring'' the variable - you declare that &quot;this variable exists!&quot;) in order to talk about it. Then, whenever we need to use whatever value the variable has ''at that time'', we just put its name in the macro command, and MapTool will substitute the appropriate value at that time. 

Think of it this way: if the value of a dice roll could be anything between 1 and 20, for example, you can't just enter 19 wherever you need to use that dice roll - it could be 19, or 2, or 7, or whatever. So instead, you'd want to say &quot;whatever this dice roll is, put that number here.&quot;

:'''Note''': that doesn't mean that MapTool will substitute the ''correct'' value for ''your'' needs; it means it will substitute the value corresponding to that variable at that time. So if your program has a mistake in it, the value might end up being wrong - but MapTool doesn't understand &quot;wrong,&quot; it just understand &quot;this is what it says right now.&quot; 

===Variable Assignments===

When you want to give a variable a value, this is called &quot;assigning&quot; a value to the variable. The &quot;asignment operator&quot; in MapTool is the equals sign ( = ). That sounds fancy, but it just means that you use an equals sign to tell MapTool that a particular variable has a particular value. An example of a variable assignment is 

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:myHP = 30]
&lt;/source&gt;
&lt;/blockquote&gt;

As you have probably figured out, what that line does is first ''declare'' a variable called {{code|myHP}} exists, and then ''assign'' it the value {{code|30}}. That is variable assignment at its root - ''some variable'' equals ''some value''. The '''h''': with a colon tells maptools to &quot;hide&quot; the output. It's not necessary, but if you don't want all your variable numbers being sent to the chat window you should put an '''h''': in front of your assignments.

You'll remember from the example where you were prompted for the name of a target that you can use a variable name without assigning a value to it. If you do that, you have declared that the variable exists, but no value is assigned, so MapTool asks you (or whoever runs that macro) for a value. The lesson learned is that a variable needs to have a value assigned to it for the macro to finish, but you don't always have to enter it ahead of time - sometimes you want to get ''input'' from the user.

Variable assignments are the only way to set or change the value of a variable; no variables are modified in-place. If you're using a function to change the value of a variable the function returns the content of the modified variable which must be assigned to the existing variable or a new variable.

===When to Make an Assignment===

MapTool processes each macro command in a macro in order, starting at the top. Therefore, unless you want MapTool to pop up a window asking for input from the user, you have to assign a value to a variable ''before'' you use it! For example, in the macro command:

{{code|The hit does [damage] [damageType] damage, leaving you with [remainingHP] hit points!}}

Unless you want MapTool to prompt the user for the variables {{code|damage}}, {{code|damageType}}, and {{code|remainingHP}}, you'll want to make sure to give them a value ''before'' you get to that line. Maybe something like:

&lt;blockquote style=&quot;background-color:lightgray;&quot;&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:damage = 1d6+4]
[h:damageType = &quot;fire&quot;]
[h:remainingHP = 30 - damage]
The hit does [damage] [damageType] damage, leaving you with [remainingHP] hit points!
&lt;/source&gt;
&lt;/blockquote&gt;

As you can see, we've made three variable assignments ''before'' the variables are used in the line about the hit. We've assigned the value of a dice roll of 1d6+4 to the variable {{code|damage}}, the value {{code|&quot;fire&quot;}} to the variable {{code|damageType}}, and the value of the operation {{code|30 - damage}} to the variable {{code|remainingHP}}. 

If you look carefully, you'll see that we've even used one variable in assigning a value to another variable: the value of the variable {{code|damage}} is used when we assign a value to {{code|remainingHP}} - so variables can be used to set and manipulate other variables. 

===Variable Rules===

There are two rules to remember when making up variables:

# No spaces: variable names can't have spaces in them, so you can't use the variable {{code|Hit Points}} - it has to be {{code|HitPoints}}. 
# Special Variables: there are several &quot;special variables&quot; that MapTool has reserved - which means you can't use them for other purposes than what MapTool already reserves them for. You can usually tell a special variable because it has a period in it's name, like {{code|[[roll.count]]}} or {{code|[[macro.args]]}}. We'll get into those in another guide, but for now, just know that you can't create a variable with the same name as any of the variables on the [[:Category:Special Variable|Special Variables]] page.

==Stepping Up Our Game==

The examples above show very basic macro use: printing text to the chat window at the click of a button; making a simple dice roll inside a macro; and even getting some simple input from the user in order to complete a macro.

Now, let's step it up: we'll play with some formatting options, change token properties, and look at some basic looping (doing the same thing over and over again) and branching (doing different things based on some condition or situation). 

===Formatting Options===

Macro output (like any chat output) can be formatted using basic HTML tags, as well as some options built into MapTool. We'll first look at the HTML briefly, and then at a couple [[:Category:Display Roll Option|Display Roll Options]].

====Expanded Rolls====

In MapTool 1.3.b54, the default way to output the result of a dice roll or calculation is just to print out the total or final value. So if you rolled 1d20+7, what will appear in chat is just the final result, with the tooltip (remember when you hovered your mouse over the number) showing the mathematical breakdown. 

If you wish, you can instruct MapTool to print out the full math breakdown for a roll too, by using a Roll Formatting Option - specifically, the '''Expanded Roll'''.

Think of a formatting option as a switch telling MapTool how to treat the results of a roll. To get the expanded form, edit your attack roll macro to show:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [e:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

Then, when you run it, you'll get something like this in the chat:

&lt;blockquote style=&quot;border:1px solid gray;width:50%;&quot;&gt;My attack roll against &lt;font style=&quot;background-color:lightgray; &quot;&gt;Nasty Orcses&lt;/font&gt; is &lt;font style=&quot;background-color:lightgray; color:blue;&quot;&gt;« 1d20+7 = 1 + 7 = 8 »&lt;/font&gt;&lt;/blockquote&gt;

Now you can see the full breakdown of your roll. 

====Result-Only Rolls====

But what if you ''don't'' want anyone to be able to see the breakdown? So far, both options still let everyone see the actual roll. For this, you use the '''Result Roll''' option. Edit your macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

And your output will look like this:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;My attack roll against &lt;font style=&quot;background-color:lightgray&quot;&gt;Nasty Orcses&lt;/font&gt; is 11!&lt;/blockquote&gt;

Note that there's no gray background behind the number 11, and you can't get a tooltip if you hover over it. The Results Roll option strips out the special formatting, giving you just the plain text. If you wanted to get rid of the highlight behind the words &quot;Nasty Orcses,&quot; you can just change the macro to:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [r:target] is [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

And the name of the target will be shown without any special highlighting. 

====Hidden Rolls====

Sometimes, you don't want to see any output from the macro - maybe you just want it to show some text, and do the math in the background, without revealing everything. In those cases, you would replace the &quot;r:&quot; or &quot;e:&quot; in the above examples with an &quot;h:&quot;, like in the example below:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
[h:myHP = 30]&lt;br/&gt;
[h:Bloodied = myHP / 2]&lt;br/&gt;
My bloodied value is [Bloodied].&lt;/tt&gt;&lt;/blockquote&gt;

The example above is a very simple illustration of how the '''hidden roll''' is useful. In that macro, we're doing three things:

# Setting the value of the variable ''myHP'' to 30, but telling MapTool to hide this calculation
# Setting the value of the variable ''Bloodied'' to the value of ''myHP'' divided by 2, but telling MapTool to hide this calculation too
# Displaying some text, and inserting the value of ''Bloodied'' in at the end of the text output.

If you run this macro, the output will look like:
&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
My bloodied value is &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;
&lt;/blockquote&gt;

However, if you ''don't'' use the '''hidden roll''' option, the output would look like:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
&lt;font style=&quot;background-color:lightgray;&quot;&gt;30&lt;/font&gt; &lt;font style=&quot;background-color:lightgray&quot;&gt;15&lt;/font&gt; My bloodied value is &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;
&lt;/blockquote&gt;

The extra numbers come from the two calculations ''before'' the line of text. You don't need to see those, so, conveniently, you can hide them!

====HTML Formatting====

MapTool macros support formatting using some basic HTML tags. Let's say you wanted to put the name of your target as one line, the attack roll you're making as another, and as a third line, you wanted to add a dice roll for damage. You might edit your Attack Roll macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;I make an attack roll!&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Target&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attack&lt;/b&gt;: [1d20+7]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Damage&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;
&lt;/tt&gt;&lt;/blockquote&gt;

When you run that macro, your output in chat will look like:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br/&gt;
'''Target''': Nasty Orcses&lt;br/&gt;
'''Attack''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;&lt;br/&gt;
'''Damage''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;7&lt;/font&gt;&lt;br/&gt;
&lt;/blockquote&gt;

That's just simple formatting - you could put the output in a table, change the font and background colors, change its size...many options are available!

'''NOTE''': If you're handy with HTML, be aware that MapTool supports HTML 3.2 - so things like the &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt; tag should ''not'' be closed - it's &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;, not &lt;nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt;. Additionally, MapTool supports a subset of CSS 1 in the form of in-line styles, and also style sheets in certain instances. More information on the supported CSS tags can be found at [[Supported CSS Styles]].

===Using Token Properties===

So far, we've manipulated some variables that are entered ahead of time, or that MapTool will ask for when you run a macro. We've got a formatted attack macro that lists a target, an attack, and a damage roll. However, we're still either ''hardcoding'' the values into the macro, or having the user put them in themselves every time they're needed. Since RPG characters are not all the same, we'll have to figure out a way to automate some of the numbers, so we can:

# Make one macro that many people or characters can use
# Minimize how much typing we have to do!

As discussed in the [[Introduction to Tokens]], every token carries around with it a personal &quot;character sheet&quot; of sorts, in the form of the token's ''properties''. These properties can be ''referenced'' by a macro - so you can, for instance, write a macro that says &quot;Roll 1d20, and add my character's Dexterity to the roll.&quot; I'm sure you see how this might be useful.

====Setting Some Sample Properties====

Of course, for token properties to work, we've got to set them up. It's a good thing you read the [[Introduction to Properties]] and created a campaign file for the MapTool RPG [[Sample Ruleset]]!

The first step is to open up the '''MTRPG.cmpgn''' file (or whatever name you saved it as), and drag a token onto the map (if you don't already have one on there). If you've got no idea what that means, check out the [[Introduction to Mapping]] to learn about making maps and putting tokens on them. Now, follow these steps:

1. Double click on a token to open the '''Edit Token''' dialog.

2. Go to the tab marked '''Properties'''.

3. You'll see a spreadsheet-style list of all the properties in the token that you can edit directly (tokens have other properties that can be edited only with macros, but for now, let's not worry about them!). You should see (if you're using the MTRPG.cmpgn file we set up in [[Introduction to Properties]]):

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;
 *HitPoints(HP):{Endurance * 6}&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV):{Dexterity}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

4. Click in the cell next to Strength. A cursor will appear, showing that you can type in that cell. Enter a number in that cell as the token's Strength value. I'm going to use 6. 

5. Repeat step 4 for Dexterity, Intelligence, and Endurance, choosing whatever number you like (I'm going to use 3, 2, and 6, respectively). Remember that ''HitPoints'' and ''Movement'' will be automatically calculated!

6. Click '''OK'''. You have just manually updated the token's properties. If you double-click on the token, and look at those properties again, you'll see that the numbers you entered are remembered. 

You'll also see that now, when you hover your mouse over the token, a little popup appears in the lower right corner of the map, showing the values for the properties you've entered. This popup is called the '''Statsheet''', and is a quick way to look at the token's properties - it's basically a convenient quick-reference &quot;character sheet.&quot;

====Referencing a Token Property in a Macro====

Now that we've configured some token properties, let's use them in a macro. For our first macro, we're going to roll 1d20, and instead of adding 7, we're going to add the token's '''Strength'''. 

1. Open up your Attack Roll macro.

2. In the lower left corner, make sure the box '''Apply to Selected Tokens''' is checked (otherwise, the macro won't know which token's Strength to use!)

3. Edit your macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;I make an attack roll!&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Target&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attack&lt;/b&gt;: [1d20+Strength]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Damage&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

You'll note I replaced the 7 with the word &quot;Strength.&quot; Since ''Strength'' is not in quotes, MapTool will know that you mean it to be a variable, and it will look on the ''current token'' (that is, the token that is selected) for a property called ''Strength''. If it doesn't find it (or if the property has never been set), it will prompt you for it (just like you were prompted for the value of ''target''). If it ''does'' find it, MapTool will put the value of ''Strength'' into the macro when it runs. 

4. Select your token, and run the macro by clicking the button. The output will look something like:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br&gt;
Target: Nasty Orcses&lt;br&gt;
Attack: &lt;font style=&quot;background-color:lightgray;&quot;&gt;27&lt;/font&gt;&lt;br&gt;
Damage: &lt;font style=&quot;background-color:lightgray;&quot;&gt;6&lt;/font&gt;
&lt;/blockquote&gt;

The important thing to note is that if you hover over the attack roll result, the tooltip will now say something like ''&amp;laquo; 1d20 + Strength = 17 + 10 &amp;raquo;'' indicating that the value being plugged in to the dice roll is the property ''Strength''.

====Changing a Property with a Macro====

Token properties can also be changed using a macro. Suppose we want to reduce the token's hit points after an enemy hit the character. You can manually edit the token and change the value in the ''HP'' property, or, you can create a macro that subtracts the amount of damage from the value of ''HP''. Here's how:

1. Create a new macro on the '''Campaign''' panel.

2. In the '''Label''' field, enter &quot;Damage&quot;.

3. In the '''Command''' field, enter:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
Aarrgh! I'm hit! I have [HitPoints = HitPoints - damage] hit points left. &lt;/tt&gt;
&lt;/blockquote&gt;

4. Check the box '''Apply to Selected Tokens''' (in the lower left corner).

5. Click '''OK'''. When you run the macro, you will be prompted for a value to put in the variable ''damage''. I put in the number 7. The output will look something like this:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
Aarrgh! I'm hit! I have &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt; hit points left
&lt;/blockquote&gt;

And, if you double click on the token, you will see that the property ''HP'' is now 23. What this macro did was:

# Prompt the user for a value for ''damage'' (in this example, I entered 7)
# Retrieve the value of ''HitPoints'' from the token (in this example, the value is 30, because it is equal to Endurance * 6)
# Subtract the value of ''damage'' from the value of ''HitPoints'' (30 - 7, resulting in 23)
# Set the value of ''HitPoints'' (originally 30) to the newly calculated total (23)
# Output the text and the new value of ''HitPoints'' to chat

===String Concatenation===

An essential ability to master when writing macros is the ability to assemble ''strings'' - that is, collections of alphanumeric characters that are then manipulated or sent to chat. Frequently, you'll want to construct a string from some text that is always the same (&quot;hardcoded&quot; text) and text that can change (text that is the value of a variable, in other words). The construction of a string is often called &quot;concatenation,&quot; but it just means &quot;building a long string out of multiple short pieces.&quot;

There are two ways to do this in a macro - outside of a macro command, and inside of a macro command.

====Outside of a Command====

The basic way a macro works is this:

# The parser reads through the whole macro, and separates the macro commands from the plain text
# The parser diverts those macro commands to the appropriate places to be processed (so, numbers are added up, dice are rolled, etc.)
# The processed commands are sent ''back'' to the parser, which substitutes the ''results'' of those commands in the place where each command was.
# The whole mess - plain text, and the results of the commands (now sitting in place of the actual commands) is sent to the chat window.

So, when you want to display the result of a command along with some text (for instance, you want to print the word &quot;Attack:&quot; and then next to it print the result of a 1d20 roll) in a macro, the easiest way is to just insert a command in the right place in your text, like so:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
Attack: [1d20]
&lt;/source&gt;
&lt;/blockquote&gt;

The parser will read that whole thing, send off the command {{code|[1d20]}} to be processed, and when it gets that result back, plug it in in place of the command, and send it off to chat. The result will be something like &quot;Attack: 17.&quot; 

That's the most straightforward way to send text to chat - just put the variables you want displayed in the right place in the text, and they will be shown in the chat window.

====Inside of a Macro Command====

Sometimes, though, you need to use strings ''inside'' of the square brackets. In that case, putting them together is a little different. First of all, within square brackets, you need to use single or double quotes to surround something you want to be treated as a string. Otherwise, MapTool will think you want each word to be a variable! For example:

'''Correct String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = &quot;This is a string&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

'''Incorrect String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = This is a string]
&lt;/source&gt;
&lt;/blockquote&gt;

Remember - outside of square brackets, no need for quotes. Inside? QUOTES.

So what if we need to build up a string dynamically? That is, what if we need to make a string that is partly &quot;hardcoded,&quot; and partly based on user input? You can't guess what the user is going to say, so you can't write that part ahead of time. What you ''can'' do is ''concatenate'' the user input into your hardcoded string. The way to do that is to use the plus sign ('''+'''), which - when it's used with ''strings'' - will piece them together into a long string. 

Here's an example: suppose we want the user to enter the name of a skill, and we then want to put that skill name into an existing, hardcoded string, which will be stored in another variable. You would do that like this:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:existingString = &quot;The skill name you entered is &quot;]
[h:concatString = existingString+skill+&quot;.&quot;]
[r:concatString]
&lt;/source&gt;
&lt;/blockquote&gt;

What happens here is this:

* Line 1 sets the &quot;hardcoded&quot; portion of the output
* Line 2 sets the concatenated string - {{code|concatString}} to equal the value of {{code|existingString}} ''plus'' the value of {{code|skill}} (which MapTool will prompt for). However, in this case, since MapTool knows that {{code|existingString}} is a string, it will not try to add them mathematically, but just append the value of {{code|skill}} after the value of {{code|existingString}}. To be grammatically correct, we concatenate another little string on the end, this time, the period. Remember - strings inside square brackets need to be in quotes (but variable names, of course, do not!)
* Line 3 displays the final value of {{code|concatString}}, after {{code|skill}} has been appended to it. The output will look something like:

&lt;blockquote&gt;
The skill name you entered is Archery.
&lt;/blockquote&gt;

That's a very simple example, but it illustrates the essence of constructing strings - you &quot;add&quot; them together with a plus sign.

==Where do We Go From Here?==

This guide barely brushes the surface of the full potential of the macro language in MapTool. However, using just the basic techniques shown here, you can create a lot of very handy, convenient macros to make playing your game easier and more fun. In future guides, I'll cover more advanced macro commands and techniques.
{{Languages|Introduction to Macro Writing}}</text>
      <sha1>dpenjk5f898xm3h0rrqk9sh3k3eeqsp</sha1>
    </revision>
  </page>
  <page>
    <title>File:Macro-panels.jpg</title>
    <ns>6</ns>
    <id>830</id>
    <revision>
      <id>2706</id>
      <timestamp>2009-04-02T01:13:13Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Tabbed-panels.jpg</title>
    <ns>6</ns>
    <id>831</id>
    <revision>
      <id>2707</id>
      <timestamp>2009-04-02T01:13:26Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>MapTool Preferences</title>
    <ns>0</ns>
    <id>832</id>
    <revision>
      <id>5632</id>
      <parentid>3363</parentid>
      <timestamp>2011-07-27T15:23:16Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Beginner category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16580">{{note|'''Important Note:''' There are map related preferences that allow you to set default values for creating new maps. While you are able to change these defaults upon map creation, some of them cannot be changed after the map has been created. This is the behaviour of version 1.3b56 and all preceeding versions. Preferences that follow this behaviour will be marked with a {{mark}}&lt;br&gt;&lt;br&gt;'''Note:''' All screenshots in this article are shown with the default settings, which might not necessarily be the ''recommended'' settings for your use.}}{{Beginner}}
__TOC__
==Interactions Tab==
[[Image:prefs_tab_interactions.png|thumb|right|300px|Interactions Tab on the Preferences Dialog]]

===Maps===
[[Image:prefs_interactions_maps.jpg|frame|right|Maps Section]] 
* '''New maps have Fog of War'''
: Determines if new maps should have [[Fog of War]] enabled when created. If you use [[Fog of War]], it might seem obvious to have this &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked; however, when creating multiple maps for a new campaign, it is often useful to to disable this feature to assist with rapid map creation since even as a GM you will be unable to view a map covered in [[Fog of War]]. After completing a map, it is a simple process to re-enable [[Fog of War]].
* '''New maps visible to players'''
: Determines if new maps should be set as Player Visible when created. Although there are exceptions, typically having this &lt;span style=&quot;font-size: 24px; line-height: 1px; color: red; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;unchecked is the optimal setting; that way you won't unintentionally leave a map visible to players.
* '''Default Grid Type'''{{mark}}
** '''Square''' [[Image:gridSquare.png|sub]]
** '''Horizontal Hex''' [[Image:gridHorizontalHex.png|sub]]
** '''Vertical Hex''' [[Image:gridVerticalHex.png|sub]]
: Determines the grid type of new maps when created. You are free to create maps without a grid type, and also a grid type different than the one specified here, but you can not set the Default Grid Type to none.
* '''Default Grid Size'''{{mark}}
: Represents the amount of pixels you want MapTool to use drawing each grid cell at full resolution. The default setting of {{code|50}} pixels is adequate for most computers, but higher-end computers can handle {{code|100}} pixels or even {{code|200}} pixels for very high-end computers. There is no requirement that you use specific sizes, but {{code|50}} pixels and {{code|100}} pixels are commonly used. This setting will also determine how large an image appears when placed on a map; if set to Free-size and not manually re-sized.
* '''Default Units Per Cell'''{{mark}}
: Sets the amount of units that each grid cell represents. The ambiguous &quot;unit&quot; is used in this case because you decide what &quot;unit&quot; means. If you want each grid cell to represent 5 feet, this would be set to {{code|5}}. If you want each grid cell to represent 4 kilometers, this would be set to {{code|4}}. This is often referred to as ''Distance Per Cell''.
* '''Default Vision Distance'''{{mark}}
: The maximum distance that [[PC Token]]s can expose [[Fog of War]] after [[Light]]s, [[Sight]]s, and [[Vision Blocking Layer]]s are taken into account. It is important to note that this setting is measured in ''Distance Per Cell''.
* '''Movement metric'''
** '''ONE_TWO_ONE'''
** '''ONE_ONE_ONE'''
** '''MANHATTAN'''
** '''NO DIAGONALS'''
: Determines how movement should be calculated when a [[Token]] moves diagonally. This affects the total distance displayed beneath a [[Token]] when it is moving, or when its previous path is displayed; it is calculated based on ''Distance Per Cell''. '''ONE_TWO_ONE''' specifies that every second diagonal movement will calculate as twice the ''Distance Per Cell''. '''ONE_ONE_ONE''' specifies that diagonal movement will calculate the same as non-diagonal movement. '''MANHATTAN''' specifies that every diagonal movement will calculate as twice the ''Distance Per Cell''. '''NO DIAGONALS''' specifies that [[Token]]s can only move non-diagonally. The '''Movement metric''' setting only comes into play with maps that use the Square grid type; maps with a Hex grid type calculate movement in any direction using the ''Distance Per Cell''.

===Tokens===
[[Image:prefs_interactions_tokens.jpg|frame|right|Tokens Section]] 
* '''Start Snap to Grid'''
: Determines if [[Token]]s will default to having '''Snap to Grid''' &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Having this setting &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked is optimal for maps that use a grid, but even on such maps there are cases when you might want to temporarily disable this setting(e.g. when placing a lot of &quot;prop&quot; [[Token]]s on the Object layer while drawing a map). 
* '''New tokens visible to players'''
: Determines if new [[Token]]s have the '''Visible''' option &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked upon creation. The optimal setting for this really depends on your play style; if you have a lot of random encounters and build them during play, you may find it useful to have this setting disabled. 
* '''Duplicate Token Numbering'''
** '''Increment'''
** '''Random 2-digit'''
: Will automatically append numbers to [[Token]]s with duplicate names, upon creation. '''Increment''' will leave the first token unnumbered, but will number each duplicate after that, starting with the number {{code|1}} (e.g. Troll, Troll 1, Troll 2). '''Random 2-digit''' will append a random two-digit number to the token name, even if there are no duplicates on the map yet. '''Random 2-digit''' might be considered the optimal setting, as it gives your players no indication of how many copies of that [[Token]] can be expected to exist.
* '''Show Numbering on'''
** '''Name'''
** '''GM Name'''
** '''Both'''
: Specifies where the number that derived from '''Duplicate Token Numbering''' is applied. '''Name''' appends the number after the name (derived from '''New Token Naming'''). '''GM Name''' places the number within the ''GM Name'' field of the [[Token]] options. '''Both''' appends the number after the name, and places it within the ''GM Name'' field of the [[Token]] options. Due to odd behaviour that MapTool will display when handling tokens with the same name, it is recommended that you use '''Name''' or '''Both''', but not '''GM Name'''.
* '''New Token Naming'''
** '''Use Filename'''
** '''Use &quot;Creature&quot;'''
: Determines what the name will be when creating a new [[Token]], or what the ''Name'' field will be pre-filled with in a new [[Token]] dialog. '''Use Filename''' specifies that the name will be derived from the name of the file that was added to your Resource Library (e.g. if you add the file ''uglytroll.jpg'' to your Resource Library, tokens created from that image will begin with the name ''uglytroll''). '''Use &quot;Creature&quot;''' defaults all new [[Token]]s to being named &quot;Creature&quot; (without quotes). 
* '''Start Freesize'''
: If you are using a map with a grid, [[Token]]s typically default to the size of one grid cell upon creation. Having this setting &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked allows you to have them default to ''Freesize'', which is very useful for when you're placing a lot of 'prop' [[Token]]s on the Object layer while creating a map.
* '''Show Dialog on New Token'''
: When this setting is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, a ''New Token'' dialog will open when you drag an image onto the map, allowing you to set some options prior to creation. If you disable this setting, all new tokens will be created with the default settings derived from previous settings in this section.
* '''Stat Sheet Portrait Size''' ''(Set to 0 to disable portaits)''
: Sets the width (in pixels) of the portrait that is displayed in the lower left corner of the map when mousing over certain [[Token]]s; the image is resized proportionately. A portrait is displayed under a few different circumstances; if the [[Token]] has properties that are set to display on the stat sheet, and those properties have values, the portrait will display the token image. If the [[Token]] has a portrait image set, it will display with or without a stat sheet. Why might you want to set this to {{code|0}}? Besides the obvious reason of not displaying the portrait, you might want to use a stat sheet, but not want a portrait displayed with it; or perhaps you don't want to use a stat sheet or a portrait, but would like to have the portrait image 'slot' usable for other purposes, like inside a Dialog or Frame.

===Chat===
[[Image:prefs_interactions_chat.jpg|frame|right|Chat Section]] 
* '''Show Avatar per line'''
: The image for the impersonated token is shown next to any chat output it creates, when this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. This is a client-side setting and does not effect any other clients connected to the same game.
* '''Insert Smilies'''
: Replaces common smiley(emoticon) character sequences with graphical smilies when this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. If you use a lot of macros, it is recommended that you turn this off, as it could cause some complications if any of your macro code is interpreted as a smiley.
* '''Use ToolTips for Inline Rolls'''
: Sets the default display ([[:Category:Display Roll Option|Display Roll Option]]) for rolls in the chat panel. Will use {{roll|tooltip}} if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, otherwise it will default to {{roll|expanded}}.
* '''Trusted Prefix Background'''
: Sets a custom background for macro output that comes from a [[Trusted Macro]].
* '''Trusted Prefix Foreground'''
: Sets a custom foreground (text color) for macro output that comes from a [[Trusted Macro]].
* '''Time between autosaves'''
: The amount of time in minutes between the autosaving of the chat log. This is not functional as of 1.3b54.
* '''Autosave Chat Log Filename'''
: The filename that will be used when automatically saving your chat log. This is not functional as of 1.3b54.

===Objects===
[[Image:prefs_interactions_objects.jpg|frame|right|Objects Section]] 
* '''Start Snap to Grid'''
: Tokens created on map's Object layer will automatically be set to '''Snap to Grid''' if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. 
* '''Start Freesize'''
: Tokens created on a map's Object layer will automatically be set to '''Freesize''' if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.

===Backgrounds===
[[Image:prefs_interactions_backgrounds.jpg|frame|right|Backgrounds Section]] 
* '''Start Snap to Grid'''
: Images dropped on a map's Background layer will automatically be set to '''Snap to Grid''', if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. 
* '''Start Freesize'''
: Images dropped on a map's Background layer will automatically be set to '''Freesize''', if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.

===Facing===
[[Image:prefs_interactions_facing.jpg|frame|right|Facing Section]] 
* '''On Edges'''
: A token's facing will snap to the edges when &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Edges are the lines that make up a grid cell.
* '''On Vertices'''
: A token's facing will snap to the vertices when &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Vertices are the points that connect the lines that make up a grid cell.

==Accessibility Tab==
[[Image:prefs_tab_accessibility.png|thumb|right|300px|Accessibility Tab on the Preferences Dialog]]
[[Image:prefs_accessibility_all.jpg|frame|right|Accessibility Tab Close-up]] 
* '''Chat Font Size'''
: The default size of the font in the chat panel; measured in points.
* '''ToolTip Initial Delay'''
: The time it takes for a tooltip to display when hovering the mouse over an element that possesses a tooltip; measured in miliseconds.
* '''ToolTip Dismiss Delay'''
: The time it takes for a tooltip to disappear when hovering the mouse over an element that possesses a tooltip; measured in miliseconds.

==Application Tab==
[[Image:prefs_tab_application.png|thumb|right|300px|Application Tab on the Preferences Dialog]]
===Save===
[[Image:prefs_application_save.jpg|frame|right|Save Section]] 
* '''Save Autorecover every [   ] min'''
: Saves a copy of your campaign in the interval specified. Unlike Autosave, this will not overwrite your campaign file, but rather create a new one every time it automatically saves.
* '''Save reminder on close'''
: Displays a dialog when attempting to close the program with unsaved changes to your campaign when &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.
* '''1.3b50 Compatability Mode'''
: Due to some changes in how certain data is stored in the campaign file in versions after 1.3b50, they might not be compatible with version 1.3b50 and earlier. If this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked your campaign will be saved in the older format, allowing it to be opened in older versions, but losing some of the new features.

===Map Defaults===
[[Image:prefs_application_mapdefaults.jpg|frame|right|Map Defaults Section]] 
* '''Halo line width'''
: Controls the width of the [[Halo]] when it is displayed on a [[Token]]. 
* '''Vision opacity'''
: Areas that are no longer directly visible, but have previously had their [[Fog of War]] exposed, will will be dimmed by layering a translucent black on top of them. This setting controls the opacity of the translucent black.
* '''Use halo color for vision'''
: Related to '''Vision opacity''', if this setting is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, the translucent color layered on top of previously viewed areas will be the [[Token|Token's]] [[Halo]] color as opposed to black.
* '''Autoshow Fog'''
: Will automatically expose [[Fog of War]] after moving a [[Token]] if &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.

===Macro Panels===
[[Image:prefs_application_macropanels.jpg|frame|right|Macro Panels Section]] 
* '''Default: Allow Players to Edit Macros'''
: In order for a macro to be considered a [[Trusted Macro]], players must not be able to edit it. This setting determines if a new macro should default to allowing players to edit if &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Disabling this setting can be very useful if you intend to create a lot of macros that you intend to be trusted.

==Sounds Tab==
[[Image:prefs_tab_sounds.png|thumb|right|300px|Sounds Tab on the Preferences Dialog]]
[[Image:prefs_sounds_all.jpg|frame|right|Sounds Tab Close-up]] 
* '''Play system sounds'''
: When &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, MapTool will play a sound when new content is sent to the chat panel.
* '''Only when window not focused'''
: When &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, the sound that MapTool plays when new content is sent to the chat panel will only play if MapTool is not the application that has focus.
[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs tab interactions.png</title>
    <ns>6</ns>
    <id>833</id>
    <revision>
      <id>2718</id>
      <timestamp>2009-04-02T19:51:37Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs interactions maps.jpg</title>
    <ns>6</ns>
    <id>834</id>
    <revision>
      <id>2719</id>
      <timestamp>2009-04-02T19:53:02Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs interactions tokens.jpg</title>
    <ns>6</ns>
    <id>835</id>
    <revision>
      <id>2720</id>
      <timestamp>2009-04-02T19:54:00Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs interactions chat.jpg</title>
    <ns>6</ns>
    <id>836</id>
    <revision>
      <id>2721</id>
      <timestamp>2009-04-02T19:54:26Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs interactions objects.jpg</title>
    <ns>6</ns>
    <id>837</id>
    <revision>
      <id>2722</id>
      <timestamp>2009-04-02T19:54:46Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs interactions backgrounds.jpg</title>
    <ns>6</ns>
    <id>838</id>
    <revision>
      <id>2723</id>
      <timestamp>2009-04-02T19:55:12Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs interactions facing.jpg</title>
    <ns>6</ns>
    <id>839</id>
    <revision>
      <id>2724</id>
      <timestamp>2009-04-02T19:55:39Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs tab accessibility.png</title>
    <ns>6</ns>
    <id>840</id>
    <revision>
      <id>2725</id>
      <timestamp>2009-04-02T19:56:02Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs accessibility all.jpg</title>
    <ns>6</ns>
    <id>841</id>
    <revision>
      <id>2726</id>
      <timestamp>2009-04-02T19:56:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs tab application.png</title>
    <ns>6</ns>
    <id>842</id>
    <revision>
      <id>2727</id>
      <timestamp>2009-04-02T19:58:08Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs application save.jpg</title>
    <ns>6</ns>
    <id>843</id>
    <revision>
      <id>2728</id>
      <timestamp>2009-04-02T19:59:05Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs application mapdefaults.jpg</title>
    <ns>6</ns>
    <id>844</id>
    <revision>
      <id>2729</id>
      <timestamp>2009-04-02T19:59:27Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs application macropanels.jpg</title>
    <ns>6</ns>
    <id>845</id>
    <revision>
      <id>2730</id>
      <timestamp>2009-04-02T19:59:53Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs tab sounds.png</title>
    <ns>6</ns>
    <id>846</id>
    <revision>
      <id>2731</id>
      <timestamp>2009-04-02T20:03:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:prefs sounds all.jpg</title>
    <ns>6</ns>
    <id>847</id>
    <revision>
      <id>2732</id>
      <timestamp>2009-04-02T20:03:53Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:mark</title>
    <ns>10</ns>
    <id>848</id>
    <revision>
      <id>7104</id>
      <parentid>3194</parentid>
      <timestamp>2019-02-20T05:05:37Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="295">&lt;noinclude&gt;Used with [[Template:note]] to mark parts of an article that apply.&lt;/noinclude&gt;
&lt;span style=&quot;font-size: 18px; line-height: 1px; color: #C75500; font-weight: bold; vertical-align: sub;cursor: default;&quot; title=&quot;Refer to note.&quot;&gt;&amp;#8727;&lt;/span&gt;
&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1>9ouqfc2vxq00olpy20ggvbs7w8fau99</sha1>
    </revision>
  </page>
  <page>
    <title>Template:note</title>
    <ns>10</ns>
    <id>849</id>
    <revision>
      <id>7095</id>
      <parentid>3195</parentid>
      <timestamp>2019-02-20T04:55:15Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="375">&lt;noinclude&gt;Commonly used at the beginning of an article to declare an important note that the reader should pay attention to; also commonly used in conjunction with [[Template:mark]]&lt;/noinclude&gt;
&lt;div class=&quot;template_note&quot; style=&quot;border: 1px solid #C75500; background-color:#F7E6D9; padding: 1em; margin-bottom:1em;&quot;&gt;{{{1}}}&lt;/div&gt;
&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1>3mfka45mexuw83p8ori7o7qzyvyxenq</sha1>
    </revision>
  </page>
  <page>
    <title>File:gridSquare.png</title>
    <ns>6</ns>
    <id>850</id>
    <revision>
      <id>2736</id>
      <timestamp>2009-04-03T00:21:16Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:gridHorizontalHex.png</title>
    <ns>6</ns>
    <id>851</id>
    <revision>
      <id>2737</id>
      <timestamp>2009-04-03T00:21:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:gridVerticalHex.png</title>
    <ns>6</ns>
    <id>852</id>
    <revision>
      <id>2738</id>
      <timestamp>2009-04-03T00:22:03Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Cclouser</title>
    <ns>2</ns>
    <id>853</id>
    <revision>
      <id>2890</id>
      <parentid>2889</parentid>
      <timestamp>2009-04-04T22:14:24Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>/* Projects */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="407">==Basics==

Known as &quot;Rumble&quot; on the [http://forums.rptools.net RPTools Forums]. 

==Stuff I've Created==

* [[Dice Box]]
* [http://gallery.rptools.net/v/contrib/Rumble/ Miscellaneous Junk]

==Projects==

Wiki projects I'm doing, in no particular order:

* Tutorial page on Light / Sight
* Tutorial page on States
* Tutorial page on more advanced macros (?)
* More screenshots for the macro writing tutorial</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Properties</title>
    <ns>0</ns>
    <id>854</id>
    <revision>
      <id>7089</id>
      <parentid>7088</parentid>
      <timestamp>2019-02-18T17:15:04Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <minor/>
      <comment>/* The Token Properties Tab */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20088">{{Languages|Introduction to Properties}}{{Beginner}}
==Campaign Properties==

One of the most useful features in MapTool is the capability of [[Introduction_to_Tokens|tokens]] to carry around a set of '''Properties''', attached to that token, that can be manipulated by macros and can be used to create quick displays of information. Basically, token properties are like built-in character sheets.

However, because they are so useful, the MapTool developers have created many different ways to use them and manipulate them. This guide will address creating Campaign Property Sets, setting them to have default values, and using them to manipulate the Statsheet.

==The Sample Ruleset, or MTRPG==

In order to have useful examples as we move through this tutorial, several MapTool users and contributors developed the [[Sample Ruleset]] -- a simple roleplaying game system developed specifically to illustrate parts of MapTool. For this guide, we're going to call these rules the MapTool RPG - or MTRPG for short, and what we're going to do is create a new Campaign File and set up some ''campaign properties'' that correspond to attributes of the MTRPG.

==The Campaign Properties Window==

[[Image:Edit-campaign-props.png|thumb|The Edit Menu, showing the Campaign Properties option]]

To get started with Campaign Properties, the first thing you'll need to do is go to '''Edit &gt; Campaign Properties''', and open the Campaign Properties window. In this window, you'll see several tabs and a whole lot of information.

When you open up the '''Campaign Properties''' window, you'll see it has six tabs. Briefly, they are:

* '''Token Properties''': this houses all the property sets that a token in the current campaign may have
* '''Repositories''': this is where you can designate an online &quot;[[Introduction to Campaign Repositories |repository]]&quot; to hold campaign files, especially images, to improve load times and speed when you host or play an online game
* '''Sight''': this tab is where you configure the settings for vision in the current campaign
* '''Light''': this tab is where you configure light sources and auras for the current campaign
* '''States''': this tab lets you configure [[Token:state|token states]] for the current campaign
* '''Bars''': this is where you configure [[bar.name|token bars]] for the current campaign

This guide will only address the first tab, '''Token Properties'''.

==The Token Properties Tab==

[[Image:Camp-props.png|thumb|The '''Token Properties Tab''' in Campaign Properties]]

The first visible tab is the Token Properties tab. This appears relatively uncomplicated, but it's home to some really nifty potential. There are 3 text fields in this tab:

* '''Name:''' this is the name of the property set you're currently viewing. When you open the campaign properties window, this is blank.
* '''Token Type:''' this column on the left side is not editable, but it will list the names of all the available property sets, or Token Types, defined in the current campaign. If you have no campaign loaded, the only entry will be '''Basic'''
* A large text area where you enter the properties for the current campaign. It will be blank when first loaded, but if you select a property set from the '''Token Type''' list on the left side, you will see the names and default values of the properties in that set.

===Token Type===

In this field, you'll see the names of the different &quot;Property Types&quot; (you can think of them as property ''sets'') that are configured in the current campaign. If you have no campaign loaded, the default property set will be called ''Basic''. The '''Type''' field is not directly editable by the user.

===Name===

This is a simple text field where you can enter the name you want to give the property set. This name will, when you update the set, appear in the '''Type''' list to the left, and it becomes the name for that particular set of properties. Names can be anything you like; many users create sets called &quot;NPC&quot; for games where NPC stats and traits differ from those of player characters, for example.

===Properties===

This is where it gets funky. In this text area, you can create any and every property you can think of, which can reflect every possible number or statistic an RPG character might have (and many properties that they don't have -- lots of users create properties that are useful for when they write macros, but wouldn't appear on any character sheet!).

==Creating Properties==

===Properties with No Default Value===

[[Image:Basic-default-props.png|thumb|The default set of properties in the Basic property set]]

If you look at [[Sample_Ruleset#Primary_Attribute|MTRPG's Primary Attributes]], you will see that there are four separate attributes that are the basic attributes of a character: ''Strength'', ''Dexterity'', ''Intelligence'', and ''Endurance''. We're going to get rid of the default properties, and put new ones in their place. 

1. Go to '''Edit &gt; Campaign Properties'''. You'll see in the left side, under ''Token Type'', that the only entry is &quot;Basic.&quot; We're going to create a new property set.

2. In the '''Token Type''' list on the left, select ''Basic''. When you do this, you'll see a whole bunch of properties with all kinds of symbols like @, #, and so forth. 

3. In the text area with all the properties, use your mouse to highlight them all, and hit Delete on your keyboard. Go ahead - don't be shy!

4. Leave the '''Name''' field alone - MapTools must always have a ''Basic'' property set, so you can't change that name.

[[Image:Default-props-replaced.png|thumb|The default properties have been deleted, and replaced by the four Primary Attributes of MTRPG]]

5. In the text area below the '''Name''' field, enter the name of each of the four Primary Attributes in MTRPG, like so:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Strength&lt;br/&gt;
Dexterity&lt;br/&gt;
Intelligence&lt;br/&gt;
Endurance&lt;/tt&gt;&lt;/blockquote&gt;

When done, your properties window should look like the screenshot on the right. 

6. Once you've finished entering the properties you want, click the button labeled '''Update'''. Don't panic! The properties will disappear, but if you select the ''Basic'' list from the left, your properties will reappear in the main text area.

7. Click '''OK''' to confirm all of your changes and close the '''Campaign Properties''' window. 

8. Go to '''File &gt; Save Campaign As''' and save your campaign as '''MTRPG.cmpgn'''. You've now created a new campaign file, with a new set of campaign properties. 

When you create properties like this -- just listing the values one after the other -- and then open a token, you will see that these properties have no value. That does not mean that they are equal to zero, or equal to a blank line - they literally have ''no value''. This doesn't mean much for most purposes, but it is an important distinction in macro writing terms (in programming, there's a big difference between a blank string, and an actually ''empty'' variable!). 

Once properties are updated, all of the tokens on the map will be updated with the new properties, and any new tokens you drop on the map will &quot;inherit&quot; the properties you set up.

&lt;div&gt;
&lt;p style=&quot;background-color:yellow; padding:5px&quot;&gt;
'''NOTE''': While Property names can have spaces in them, this can make accessing and using those properties in Macros difficult. If you have a property called &quot;Hit Points&quot;, it is generally better to enter it as ''HitPoints'' without the space.
&lt;/p&gt;
&lt;/div&gt;

===Creating Properties with Default Values===

[[Image:Newprops-defvalues.png|thumb|The MTRPG properties now have default values]]

Now, in MTRPG, the minimum value an attribute can have is 1. So, it makes sense to set the ''default value'' of these properties to 1 (that way, every new token will at least have the minimum value an attribute can have). To do this:

1. Open the Campaign Properties window.

2. Select the ''Basic'' property set.

3. In the Basic Properties set, edit your properties so they now read (see the image, as well):

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Strength:1&lt;br&gt;
Dexterity:1&lt;br&gt;
Intelligence:1&lt;br&gt;
Endurance:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

4. Click '''Update'''.

By placing a colon at the end of the name of each attribute, and putting the number 1 after the colon, you have instructed MapTool that the default value for those properties is 1 (in other words, whatever value you put after the colon becomes the ''default value'' for that property). You'll note that at the bottom of the Token Properties tab there is a key describing the various options you can set on a property.

Now, if you drag a new token onto the map and look at its properties (double-click on the token and go to the Properties Tab in the '''Edit Token''' dialog), you will see that the new token has the default values. 

By the way: don't worry about any tokens you may have already set the property values on - setting up or changing the default values will ''not'' override the properties you've already set. MapTool is smart enough to handle that.

===Displaying Properties in the Statsheet===

[[Image:Statsheet-props.png|thumb|The Statsheet showing the campaign properties you've set up. You'll see how to make these appear in this section]]

MapTool has a neat feature called the '''Statsheet''', which is briefly mentioned in the [[Introduction to Tokens]] - basically, it is an automatic popup that appears in the lower left corner of the map, when you hover over a token. 

You may be saying, &quot;Wait...when I hover over my token, there's no statsheet! Where is it?&quot; The reason you don't see it yet is that the Statsheet is governed by the Campaign Properties - it displays the token's properties (along with a larger version of the token's image) - but ''only'' when a couple requirements are met:

* The properties are set up to display on the statsheet; and
* The properties that are displayed actually have a value

====Setting Properties to Display====

[[Image:Newprops-visible.png|thumb|Note the asterisk in front of each property name, enabling that property to appear on the Statsheet]]

If you look at the bottom of the '''Token Properties''' tab in the '''Campaign Properties''' dialog, you'll see a key showing how to set up a property to display in the Statsheet. There are three display options, each of which is indicated by putting a symbol in front of the property name:

# '''&lt;nowiki&gt;*&lt;/nowiki&gt;''': an asterisk means &quot;show this property on the statsheet&quot;
# '''@''': means &quot;only show this property to the owner of the token (and the GM)&quot;
# '''&lt;nowiki&gt;#&lt;/nowiki&gt;''': means &quot;only show this property to the GM (not even the token owner can see it)&quot;

The asterisk is '''required''' for any stat to display at all - if you don't have an asterisk first, it won't show no matter what else you put on there. The @ and # symbols, on the other hand, are optional. 

So, for our new game, we're going to set all of the properties to be visible to everyone (by just using a star). To do this, open up your properties, and edit them to look like this:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

Now, when you hover over a token, you'll see the Statsheet pop up (see the screenshot, above) with the values in the Strength, Dexterity, Intelligence, and Endurance properties. Also, since even brand new tokens have a default value, the Statsheet will appear for all tokens.

====Short Names====

[[Image:Newprops-shortnames.png|thumb|The campaign properties now have Short Names established for each]]

Sometimes, property names can get pretty long (or look unfriendly - no spaces, and all that). MapTool lets you put a ''Short Name'' in for each property. To do that, you just enter the short name in parentheses after the property name, like so:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength(Str):1&lt;br&gt;
 *Dexterity(Dex):1&lt;br&gt;
 *Intelligence(Int):1&lt;br&gt;
 *Endurance(End):1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

These short names are displayed in the Statsheet instead of the full name of the property.  There is no limit on length of the ''Short Name'' but the purpose is to have a more presentable name on the Statsheet.

'''Short Names are for display purposes only - when referencing properties in macros, you must use the full property name.'''

===Creating Derived Properties===

[[Image:Newprops-derived.png|thumb|The properties ''HitPoints'' and ''Movement'' now have macro code instructing MapTool to derive them from other, existing properties]]

[[Image:Statsheet-with-allnewprops.png|thumb|The Statsheet showing all of the properties, including the derived ones]]

Okay, now let's do something pretty cool. In a lot of roleplaying games, there are character attributes that are derived from other stats - for instance, in the ''Savage Worlds'' rules, your &quot;Parry&quot; stat is based on your ''Fighting'' ability; likewise, in Dungeons &amp; Dragons, your &quot;Hit Points&quot; are derived partly from your &quot;Constitution&quot; score. 

Now, you could create these other derived attributes as separate properties and manually enter the values in when you make a new token - but how about we allow MapTool to calculate these derived values? That's right - MapTool's campaign properties can not only be numbers and text, but also calculations and equations based on other properties that the token has. 

In MTRPG, there are three ''derived'' stats: Hit Points, Armor, and Movement. These stats have the short names &quot;HP&quot;, &quot;AR,&quot; and &quot;MV.&quot; For this example, we're going to set up ''Hit Points'' and ''Movement'' to be calculated from existing properties. We'll leave Armor until later (it takes a bit more complex a calculation to figure out the armor value, and we're taking it slow). 

First, we need to add properties for these three derived values:

1. Open up the Basic property set. 

2. Beneath ''Endurance'', enter the following:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *HitPoints(HP)&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV)&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

You'll notice at this point, we've set no default values. Don't hit '''Update''' just yet - let's enter some macro code to create a derived value.

We can see from the [[Sample Ruleset|MTRPG]] rules that ''Hit Points'' is equal to the value of ''Endurance'' multiplied by 6. Replicating this calculation in the campaign properties is very simple. Edit the ''Hit Points'' property to read:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *HitPoints(HP):{Endurance * 6}&lt;/tt&gt;
&lt;/blockquote&gt;

What we've done here is enter a default value for the property (remember, default values are whatever comes after the colon), and used some [[Introduction to Macro Writing|macro code]] to instruct MapTool to perform a calculation in order to find the value for the properties. Two thing are happening here:

# We've enclosed the calculations in { }, which warns MapTool that the text enclosed inside the brackets is to be handled like a macro, and not just plain text
# Inside the brackets, we've said, &quot;Find the value of the ''Endurance'' property, multiply it by 6, and make that result the value of the ''Hit Points'' property&quot;

Now, to handle the ''Movement'' attribute, our job is even simpler: we need to instruct MapTool to get the value of the ''Dexterity'' property, and assign that same value to the ''Movement'' property. To do so, edit the Movement property to read:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Movement(MV):{Dexterity}&lt;/tt&gt;
&lt;/blockquote&gt;

When you are finished, your full property set should look like:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;
 *HitPoints(HP):{Endurance * 6}&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV):{Dexterity}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

And when you hover your mouse over a token, the Statsheet should look like the screenshot to the right. Remember, even though we've said that ''Armor'' should be displayed on the statsheet, the statsheet only shows properties that have a value - ''Armor'' is still empty, so it won't show up until you give it a value.

==Saving Your Campaign==

At this point, you've created a bunch of campaign properties, placed a token on the map, and messed around with manipulation of the properties you made. You should probably save your work in a [Campaign] file. This will save the tokens, properties you created, and all the information you put into the campaign so far. 

Also, this will let you work on the campaign further, trying tricks from the other MapTool tutorials.

To save your campaign:

# Go to '''File -&gt; Save Campaign As...'''
# In the dialog, enter a file name. Something like '''MTRPG.cmpgn''' is good!
# Click '''OK'''

Your campaign will now be saved, and you can open it up whenever you feel like it, and work on it some more!

Please note that campaigns saved in one version of MapTool will not open properly in an ''older'' version of MapTool; however most campaign files created in an older version can be opened in the newest version (this isn't guaranteed, though...MapTool is evolving at all times!)

==Some Technical Details==

A couple times in this guide and in other guides the token properties have been described as &quot;those properties that are ''visible''&quot; in this campaign, or the properties set up &quot;''for this campaign''.&quot; There's a reason for phrasing it like this. 

See, a token - if you cut one open and looked at its inner workings - is an XML file that contains a ''ton'' of information. It has information about its image, its size, its vision, light, and shape, and - of course - its properties. What's important to understand here is that the token will remember not only the properties from the MTRPG, but if it was ever saved as an '''.rptok''' file or brought in from another campaign file, it will remember the properties from that campaign too. They won't be visible, but they're stored in the token even so. 

So, in reality, a set of Campaign Properties really indicates those properties that:

* You can see if you open up a token by double-clicking on it, and
* You can directly edit by clicking in the cell next to them

This may sound like a recipe for disaster - what if you set up a property that was already set up but is hidden? Fortunately, MapTool will not, when running a macro, attempt to access any hidden properties unless you ''specifically'' instruct it to do so, using two special macro functions. So rest assured, you cannot accidentally access a property that's not set up in the Campaign Properties.

In summary, if a Property Type (such as the default ''Basic'' property type) has a property named '''HP''', it will be stored in the token under the XML name '''HP'''.  If another property type (such as a user-defined ''Pathfinder'' property type) also has a property named '''HP''', they will both be referencing the same data on the token.  Modifying the value of '''HP''' when the token is ''Basic'' and then changing the token ''Pathfinder'' will show the same value for '''HP'''.

==Moving On from Here==

MapTool supports very elaborate properties and derived properties, with a number of math functions and operations. A couple of the most common ones you might want to use are (the examples are not necessarily part of MTRPG; they're just examples):

* '''Basic math operators''': addition (+), subtraction (-), multiplication (*), and division (/)
** '''Example''': &lt;tt&gt;HitPoints: {Endurance * 6}&lt;/tt&gt;
* '''Rounding''': there are some ''functions'' to let you round numbers when you divide
** '''Floor''': the floor() function rounds ''down''. '''Example''': &lt;tt&gt;HitPoints:{floor(Constitution / 2)}&lt;/tt&gt; would divide Constitution by two, and round down
** '''Ceiling''': the ceil() function works like floor(), but rounds up. '''Example''': &lt;tt&gt;HitPoints:{ceil(Constitution/2)}&lt;/tt&gt;
[[Category:MapTool]][[Category:Tutorial]]
{{Languages|Introduction to Properties}}</text>
      <sha1>bcmrndg6gmhpf494sznxxfwxdmjdxq3</sha1>
    </revision>
  </page>
  <page>
    <title>File:Camp-props.png</title>
    <ns>6</ns>
    <id>855</id>
    <revision>
      <id>2758</id>
      <timestamp>2009-04-03T12:35:35Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>The Campaign Properties window.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">The Campaign Properties window.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Basic-default-props.png</title>
    <ns>6</ns>
    <id>856</id>
    <revision>
      <id>2759</id>
      <timestamp>2009-04-03T12:36:07Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>The default properties in the &quot;Basic&quot; property set.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="51">The default properties in the &quot;Basic&quot; property set.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Default-props-replaced.png</title>
    <ns>6</ns>
    <id>857</id>
    <revision>
      <id>2760</id>
      <timestamp>2009-04-03T12:36:38Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Showing new properties entered in the Basic set, replacing the default properties.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="82">Showing new properties entered in the Basic set, replacing the default properties.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Newprops-visible.png</title>
    <ns>6</ns>
    <id>858</id>
    <revision>
      <id>2761</id>
      <timestamp>2009-04-03T12:37:58Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>The new properties with the asterisk indicating that they should be visible on the Statsheet.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="93">The new properties with the asterisk indicating that they should be visible on the Statsheet.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Newprops-derived.png</title>
    <ns>6</ns>
    <id>859</id>
    <revision>
      <id>2763</id>
      <timestamp>2009-04-03T12:39:32Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Edit-campaign-props.png</title>
    <ns>6</ns>
    <id>860</id>
    <revision>
      <id>2764</id>
      <timestamp>2009-04-03T12:40:25Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Newprops-defvalues.png</title>
    <ns>6</ns>
    <id>861</id>
    <revision>
      <id>2765</id>
      <timestamp>2009-04-03T12:40:37Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Newprops-shortnames.png</title>
    <ns>6</ns>
    <id>862</id>
    <revision>
      <id>2766</id>
      <timestamp>2009-04-03T12:40:57Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Statsheet-props.png</title>
    <ns>6</ns>
    <id>863</id>
    <revision>
      <id>2767</id>
      <timestamp>2009-04-03T12:42:19Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Statsheet-with-allnewprops.png</title>
    <ns>6</ns>
    <id>864</id>
    <revision>
      <id>2769</id>
      <timestamp>2009-04-03T12:43:39Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Halo</title>
    <ns>0</ns>
    <id>865</id>
    <redirect title="token.halo" />
    <revision>
      <id>2815</id>
      <timestamp>2009-04-04T03:52:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Redirecting to token.halo until such time that a full article about Halos can be written.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[token.halo]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Editor</title>
    <ns>0</ns>
    <id>866</id>
    <revision>
      <id>6893</id>
      <parentid>6652</parentid>
      <timestamp>2017-08-14T14:42:47Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1387">{{Languages|Editor}}
This is the place for all things Editor.

We don't currently have a full-fledged editing guidelines written up, so in the meantime you'll have to take a peek at how current articles are being editing. A good way to make sure you're looking at an article that has the current formatting is to look for recently edited function articles in the [[Special:RecentChanges]] and look at Rumble's newer Introduction Series 

We use templates rather extensively, so reading the [[Help:Editing]] article will help a lot with understanding the syntax of our custom templates.

Although you might stumble across an article within a namespace, we currently place all articles in the main namespace(which is to say, no namespace), with the exception of this special Editor namespace. If you happen to come across one of those articles that is still within a namespace, it is most likely due to plans of splitting it, or perhaps rewriting it, don't worry about moving it.

'''Informational Pages'''
* [[Editor:Translation]]
* [[Help:Editing]]

'''Discussion Pages:'''
* [[Editor:Wanted Pages]]
* [[Editor:To Do]]

If you have any information on your user page that other editors might be interested in, feel free to add a link to it below:

* [[User:Craig]]
* [[User:Cclouser]]
* [[User:Verisimilar]]
* [[User:Lachnaddar]]
* [[User:Jagged]]
* [[User:Wolph42]]

{{Languages|Editor}}</text>
      <sha1>pb4j4gds5y7mjp5zlbpalt98g8z36nu</sha1>
    </revision>
  </page>
  <page>
    <title>Editor:Wanted Pages</title>
    <ns>0</ns>
    <id>867</id>
    <revision>
      <id>2821</id>
      <timestamp>2009-04-04T20:53:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>New page: Discussion on articles that appear in [[Special:WantedPages]]; whether they should be given higher priority than their link count indicates, or if they should stop being linked to.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="180">Discussion on articles that appear in [[Special:WantedPages]]; whether they should be given higher priority than their link count indicates, or if they should stop being linked to.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:Editor:Wanted Pages</title>
    <ns>1</ns>
    <id>868</id>
    <revision>
      <id>2997</id>
      <parentid>2995</parentid>
      <timestamp>2009-04-06T20:21:40Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>/* Introduction to Lighting and Vision */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5048">== Current Token ==

With a whopping 73 links(Current Token 37 / Token:Current Token 36), it seems obvious we could clean up a lot of our 'red' links by creating this page. In the meantime though, I'm going to go through the [[Special:WantedPages]] and clean up red links that either point to the same conceptual target in different ways, or point to a target that exists already under a different name. [[User:Verisimilar|zEal]] 21:01, 4 April 2009 (UTC)

* I have a feeling this will be one of the Short Pages mentioned below, but I can write a short and sweet page defining &quot;Current Token,&quot; no problem. Do we want to fix the namespace first? Should I just create a new page called &quot;Current Token&quot; without the &quot;Token:&quot; namespace? [[User:Cclouser|Rumble]] 21:12, 4 April 2009 (UTC)
** I'm going through and changing all the red links that point to the namespace version. [[User:Verisimilar|zEal]] 21:17, 4 April 2009 (UTC)

* Okay, [[Current Token]] is written. I find that it's a lot harder to explain clearly than you would think. Suggestions and revisions are welcome. [[User:Cclouser|Rumble]] 22:02, 4 April 2009 (UTC)

== Introduction to Lighting and Vision ==

This one is all the way at the bottom of the list, as it looks like a planned article that Rumble is going to write. As much as I like the title, would it be better to try to remain semantically correct(in the context of MapTool) and call it Introduction to Lights and Sights? [[User:Verisimilar|zEal]] 21:04, 4 April 2009 (UTC)

:For purely aesthetic reasons, I think it should be ''Introduction to Light and Sight'', but otherwise, the name change is fine - I try to make sure I use exactly the same wording that MapTool does. I don't always succeed...but I try. [[User:Cclouser|Rumble]] 21:10, 4 April 2009 (UTC)

It occurs to me that I really don't use light and sight much at all when we play, so I'm probably not the best person to write this tutorial. Is there any brave soul willing to dive in? It will be image heavy and probably laborious. [[User:Cclouser|Rumble]] 17:58, 6 April 2009 (UTC)

:On the other hand (replying to my own comment), sight/light are changing ''rapidly'' at the moment. I wonder if holding off on that one is a better idea, at least until 1.3's light stuff stabilizes. [[User:Cclouser|Rumble]] 20:21, 6 April 2009 (UTC)

== Short Pages ==

Rumble and I had a brief exchange in revision comments about if a short page like Halo is necessary given the Glossary. Instead of discussing that single article's potential, I think we would benefit more from discussing how short a page should be allowed to be. I personally feel that there is nothing wrong with short pages; although headings help a lot, they don't completely overcome the &quot;Wall of Text&quot; effect that a user might encounter if they were looking for a relatively short explanation of a particular concept, and all they could find were some of our (very well written) lengthier introductions/tutorials. [[User:Verisimilar|zEal]] 21:08, 4 April 2009 (UTC)

== Branching and Looping Tutorial ==

I think something to put on the plate is an actual tutorial on branching and looping, ''especially'' with regard to using the CODE: option, because that comes up frequently on the forums and it's not particularly transparent in use. I can work on one - in fact, I have a series of macros I wrote for Dorpond that might be a perfect step-by-step (as the conversation on the forum progressed, the macros got more complex). [[User:Cclouser|Rumble]] 01:10, 5 April 2009 (UTC)
: Sounds like a great idea, I had already planned on breaking up the roll options into more syntactically focused individual articles(mimicking the function articles in scope), and your idea compliments that well. I recommend you use the new roll option template I just created when writing it, you can find basic usage details on the [[Help:Editing]] page. [[User:Verisimilar|zEal]] 01:27, 5 April 2009 (UTC)
:: I'm using the ''code'' template, and I find that it doesn't handle an equals sign gracefully (or maybe I'm doing something wrong) - if I write &lt;nowiki&gt;{{code|myHP=30}}&lt;/nowiki&gt;, I end up with &lt;nowiki&gt;{{{1}}}&lt;/nowiki&gt;. However, if I put a code bit in that doesn't have an equals sign in it, it's fine. I assume that has to do with the template looking for equals signs to tell it what to place in the template. [[User:Cclouser|Rumble]] 12:58, 5 April 2009 (UTC)
::: Yep, there are a few nuances(annoyances) when it comes to using templates, but most of them are easy enough to work around. The major two is that | and = are special characters within a template, so you have to use special templates to display them within another template, &lt;nowiki&gt;{{!}}&lt;/nowiki&gt; and &lt;nowiki&gt;{{=}}&lt;/nowiki&gt; respectively. The broken bar(pipe) normally only comes into play if you're trying to create a table within a template. This isn't a problem exclusive to our wiki, it's a problem with the way MediaWiki parses templates: [[:Wikipedia:Template:!]]  [[:Wikipedia:Template:=]] [[User:Verisimilar|zEal]] 21:24, 5 April 2009 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Verisimilar/Projects</title>
    <ns>2</ns>
    <id>869</id>
    <revision>
      <id>3330</id>
      <parentid>3161</parentid>
      <timestamp>2009-04-28T01:41:27Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2265">In no particular order.
* Cleaning up red links to point to existing articles, or conceptual articles with the same name.
* Breaking up Roll Types and Branching and Looping options.
** Completed rough copy-over, the articles still need some individual polish.
* Finishing stub function articles.
* Setting the wiki up for localization.

===List of function that aren't highlighting properly===
'''Needs updating'''
assert
pow

===Keeping track of in-progress version updates===
1.3b48

You can also specify a macro to call when certain changes are using the
format.

Code:

    &lt;link rel='onChangeImpersonated' type='macro' href='[i]macroLink[/i]'&gt;
    &lt;link rel='onChangeSelection' type='macro' href='[i]macroLink[/i]'&gt;
    &lt;link rel='onChangeToken' type='macro' href='[i]macroLink[/i]'&gt;
   

If you insert the above lines into the HTML for the dialog or frame
then the macroLink (which you create via the macroLinkText()
function) will be called.

onChangeSelection - Is called when the list of selected tokens
is changed, you may get this more than once if a new list is 
selected (once for the delsection of old tokens, and once for new
selection).

onChangeImpersonated - Is called when a new token is impersonated
or the current token is no longer impersonated.

onChangeToken - Should be called when ever a change is made to a
token, but it doesn't always work out that way at the moment 
(I am still looking at how to fix this).


The &lt;title&gt; tag can be used to set the title of a dialog or frame
from within the HTML.


Other tags that can be used for dialogs
You can set the temporary status of dialogs or the input status of
dialogs using the &lt;meta&gt; tag in the HTML they will display.

Code:

    &lt;meta name=&quot;input&quot; content=&quot;true&quot;&gt;
    &lt;meta name=&quot;temporary&quot; content=&quot;true&quot;&gt;





1.3b49

you can now use &lt;link rel='onChangeToken' type='macro' href='linkToMacro'&gt;

1.3b51
&lt;meta name=&quot;closebutton&quot; content=&quot;false&quot;&gt;
To disable remove the close button for dialogs. Unlike setting the dialog to input this will not close the dialog once a form has been submitted. So you can choose to keep it open or close it with closeDialog() if you only want to close it based on certain criteria.
Using the closebutton and input together are not supported so don't do it!</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Editor:To Do</title>
    <ns>0</ns>
    <id>870</id>
    <revision>
      <id>5674</id>
      <parentid>5673</parentid>
      <timestamp>2011-08-13T12:03:56Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="568">If you see something that needs to be done, but don't have the time, inclination, or knowledge to do it at the time, please add one of the following templates to this article so it doesn't get forgotten.
* [[Template:Clarify]]
* [[Template:stub]]

Use the templates' parameters to detail changes to be done, and if it doesn't seem enough, the talk page associated with the marked article to discuss any implementation details you might want to flesh out first.

----
The list of articles needing action will then appear on this page:
* [[:Category:Review|Review page]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Current Token</title>
    <ns>0</ns>
    <id>871</id>
    <revision>
      <id>5622</id>
      <parentid>4103</parentid>
      <timestamp>2011-07-24T10:30:00Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>/* Library Tokens and the Current Token */ Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6212">==Current Token==

You will frequently encounter references in MapTool documentation and in the MapTool interface to the ''current token.'' There are actually three &quot;categories&quot; a token might fall into at any given time:

* '''Selected Token''': a selected token is, simply, any token that is selected on the map at a given time. If you click on a token with your mouse (and you have ownership of it), that token is ''selected'', and is therefore a ''selected token''.
* '''Impersonated Token''': the impersonated token is a token that you are currently speaking and acting &quot;as&quot; - so if you impersonate a token and enter text into chat, the token's image and name will pop up and it will appear as if that token is speaking. If you roll dice via a chat command, it will appear as if that token has rolled the dice. Impersonation is a way to take on the &quot;role&quot; of your character in the virtual tabletop environment.
* '''Current Token''': this is trickier, as it overlaps with the previous two categories. Simply put, the current token is the token that is ''at that time'' (in other words, ''currently'') being changed or referred to by a [[Introduction to Macro Writing|macro]] command or other command in MapTool. Think of it as the &quot;focus&quot; of that particular macro. Because of that, it is actually possible for a token to be the selected token, the impersonated token, ''and'' the current token, all at the same time. 

===Macros and the Current Token===

The concept of the &quot;current token&quot; is - as you might guess - a key part of the way macros operate in MapTool. 

If you select a token in MapTool, and click a macro ''on that token'', the macro will by default assume that you mean &quot;do your stuff on the token you're on!&quot; That is, it will perform all of its operations with reference to the that token. If the macro is told to retrieve a property (for instance, to get the value of &quot;Strength&quot;), then it will look at the token you selected for a property called ''Strength''. Likewise, if the macro is instructed to reduce &quot;Hit Points&quot;, it will look on the token on which it resides for a property called ''Hit Points''. 

On the other hand, if you click on a macro in the Campaign panel or Global panel without selecting a token on the map screen, it is possible that the macro will do nothing, or will present an error in the chat window. This is because Global and Campaign Macros do not reside on any token, and if there are any references to token properties ''in'' the Campaign Macro, it will have no idea what token you mean - in other words, it doesn't know what the ''current token'' is!

===Library Tokens and the Current Token===

More advanced uses of MapTool's macro system involve the use of [[Library Token|Library Tokens]], tokens which contain a library of macro functions that can be called by other tokens (much like a function call in other programming languages). An important thing to understand is that when a macro on a ''non''-library token (a PC or NPC token, or an object) calls a macro on a Library Token, the &quot;current token&quot; is the ''calling token''.

In other words, if a macro on the token '''Grognar the Bold''' calls the macro {{code|Roll Attack}} on a [[Library Token]], the Current Token - as far as {{code|Roll Attack}} is concerned - is '''Grognar the Bold''', and all variable references, property references, and operations are performed against '''Grognar the Bold''', and ''not'' the Library Token. 

To handle operations against the Library Token itself (such as getting information from it, or setting a value for a property on the Library Token), use the [[setLibProperty]] and [[getLibProperty]] functions.

===Difference between Current and Selected/Impersonated Tokens===

A ''selected token'' is simply a token or group of tokens that you have selected by clicking on them or dragging a selection box (or holding down SHIFT and clicking multiple tokens). The ''current token'' is related to selected tokens, but has some important differences.

Most of the time, it's very easy to determine which token is the current token: it's the one that is selected (for macros on the token and macros set to run on &quot;selected tokens&quot;) or impersonated (for Campaign and Global macros). This makes sense - the simplest way to interact with MapTool tokens is to select them and then do something with them; the assumption should be that the macro will run on the thing you have selected.

However, the current token is not ''always'' the selected token - it is possible to use macro commands like ''[[switchToken]]'' or the ''[[Macros:Branching_and_Looping#TOKEN_Option|token roll option]]'' to change what a macro considers to be the ''current token'' for the purposes of retrieving or setting properties. This is a very useful feature - it lets you do things like reduce an ''enemy's'' hit points, or check to see if you hit an NPC token. However, it does mean that you cannot always assume the current token and the selected or impersonated token are the same.

Bottom line? In general play, the potential for differences between the current token and the selected or impersonated token are minimal. When you get into macro writing is when you'll want to pay closer attention to the differences. 

===Token Naming===

Due to the way MapTool is designed, it is strongly recommended that all tokens have unique names. If they do not, then macros will run into problems recognizing the ''correct'' current token - if you have two tokens named '''Orc''', it is possible that the macro will see the wrong one, and alter its properties, when you actually meant for it to affect the ''other'' token named '''Orc'''. So, the rule of thumb is: don't use the same name for multiple tokens. 

MapTool has built in &quot;automatic number&quot; for tokens for just this reason: it will either number them incrementally (for instance, if you copy the token '''Orc 1''' three times, you'll end up with three new tokens '''Orc 2''', '''Orc 3''', and '''Orc 4'''), or randomly, in which case you'd end up with something like '''Orc 98''', '''Orc 17''', and '''Orc 35'''. The numbering option can be selected in the [[MapTool Preferences]] dialog under '''Edit &gt; Preferences'''.
[[Category:Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Cclouser/Projects</title>
    <ns>2</ns>
    <id>872</id>
    <revision>
      <id>2888</id>
      <parentid>2887</parentid>
      <timestamp>2009-04-04T22:05:40Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>/* Projects I'm Working On / Should Be Working On */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="121">==Wiki Projects==

* Tutorial page on Light / Sight
* Tutorial page on States
* Tutorial page on more advanced macros (?)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Selection-panel-nomacros.png</title>
    <ns>6</ns>
    <id>873</id>
    <revision>
      <id>2892</id>
      <timestamp>2009-04-04T22:28:14Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Selection-panel-rcaddnew.png</title>
    <ns>6</ns>
    <id>874</id>
    <revision>
      <id>2893</id>
      <timestamp>2009-04-04T22:28:29Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Selection-panel-newbutton.png</title>
    <ns>6</ns>
    <id>875</id>
    <revision>
      <id>2894</id>
      <timestamp>2009-04-04T22:28:42Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Macro-button-rcedit.png</title>
    <ns>6</ns>
    <id>876</id>
    <revision>
      <id>2895</id>
      <timestamp>2009-04-04T22:28:57Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Macro-edit-window.png</title>
    <ns>6</ns>
    <id>877</id>
    <revision>
      <id>2896</id>
      <timestamp>2009-04-04T22:29:20Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Camp-panel-nomacros.png</title>
    <ns>6</ns>
    <id>878</id>
    <revision>
      <id>2898</id>
      <timestamp>2009-04-04T22:32:21Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Camp-panel-rcaddnew.png</title>
    <ns>6</ns>
    <id>879</id>
    <revision>
      <id>2899</id>
      <timestamp>2009-04-04T22:32:39Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Camp-panel-newbutton.png</title>
    <ns>6</ns>
    <id>880</id>
    <revision>
      <id>2900</id>
      <timestamp>2009-04-04T22:32:52Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Camp-panel-rceditbutton.png</title>
    <ns>6</ns>
    <id>881</id>
    <revision>
      <id>2901</id>
      <timestamp>2009-04-04T22:33:03Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Macro-editor-examplestring.png</title>
    <ns>6</ns>
    <id>882</id>
    <revision>
      <id>2902</id>
      <timestamp>2009-04-04T22:43:27Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Camp-panel-exbutton.png</title>
    <ns>6</ns>
    <id>883</id>
    <revision>
      <id>2903</id>
      <timestamp>2009-04-04T22:45:45Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Prompt-undeclared-variable.png</title>
    <ns>6</ns>
    <id>884</id>
    <revision>
      <id>2912</id>
      <parentid>2906</parentid>
      <timestamp>2009-04-04T22:57:01Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:Prompt-undeclared-variable.png]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Macro-editor-basiccommands.png</title>
    <ns>6</ns>
    <id>885</id>
    <revision>
      <id>2907</id>
      <timestamp>2009-04-04T22:50:55Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Macro-editor-rolldice.png</title>
    <ns>6</ns>
    <id>886</id>
    <revision>
      <id>2909</id>
      <timestamp>2009-04-04T22:53:22Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Preferences</title>
    <ns>0</ns>
    <id>887</id>
    <redirect title="MapTool Preferences" />
    <revision>
      <id>2924</id>
      <timestamp>2009-04-05T00:39:11Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Preferences]] moved to [[MapTool Preferences]]: Changed to reflect the RPTools-centric approach to the wiki as opposed to the MapTool-centric.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[MapTool Preferences]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>c (roll option)</title>
    <ns>0</ns>
    <id>888</id>
    <redirect title="count (roll option)" />
    <revision>
      <id>2953</id>
      <parentid>2929</parentid>
      <timestamp>2009-04-05T04:17:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[count (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="91">#REDIRECT [[count (roll option)]]
[[Category:Roll Option]]
[[Category:Looping Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:roll</title>
    <ns>10</ns>
    <id>889</id>
    <revision>
      <id>3991</id>
      <parentid>3968</parentid>
      <timestamp>2009-10-10T06:45:42Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Added aliases for new roll options</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="212">[[{{{1}}} (roll option)|{{#switch: {{{1}}}|e|expanded|g|gm|gt|gmtt|h|hidden|hide|r|result|s|self|st|selftt|t|tooltip|u|unformatted=[{{{1}}}:]|#default=[{{{1}}}():]}}]]&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:Introduction to Macro Writing</title>
    <ns>1</ns>
    <id>890</id>
    <revision>
      <id>2946</id>
      <parentid>2945</parentid>
      <timestamp>2009-04-05T03:53:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="845">Should I just use the source highlighting feature for the macros in this guide? I'd like to clearly set them off from the rest of the text, which is why the blockquotes have the gray background - however, the blockquote method is a PAIN. I can put the source-tagged text inside a blockquote (to keep it inset). Should I switch to the source-tagged option, or should I leave it? [[User:Cclouser|Rumble]] 03:44, 5 April 2009 (UTC)
* We typically use the source tag whenever presenting macro code, and the pre tag when presenting multi-line output from those macros, but the pre tag won't really work with the way you're formatting the output to look as close to the real output as possible. If you find yourself writing complex markup a lot, it might also be better to make a template out of it. [[User:Verisimilar|zEal]] 03:50, 5 April 2009 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Macro Branching</title>
    <ns>0</ns>
    <id>891</id>
    <revision>
      <id>5697</id>
      <parentid>4096</parentid>
      <timestamp>2011-08-24T06:16:40Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>/* Assumptions */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24908">[[Category:MapTool]][[Category:Tutorial]]{{Intermediate}}
==Introduction==

When you write a macro, you'll frequently find yourelf wanting to either repeat an operation several times, or to choose from several options based on the outcome of a macro command. In game terms, you might want to make an damage roll several times in a row (say, one time for each enemy caught by a grenade blast), or you might want your macro to give you a damage roll ''if'' you hit, and say {{code|You missed!}} if you miss. 

In programming jargon, those concepts are called ''looping'' (where you go through a process repeatedly, or &quot;loop through it&quot;), and ''branching'' (where your program - in this case, the macro - &quot;branches&quot; down different paths). The MapTool macro language has several roll options (and one function) to let you branch and/or loop your commands. 

Finally, because there are a lot of times when you'll want to do ''several'' things at the same time when you branch or loop, there's a special roll option called ''code'' that tells MapTool to treat several macro commands as a single &quot;unit&quot; when you loop or branch. That may sound confusing, but you'll see what it all means shortly!

Since there's a lot of ground to cover, this tutorial will cover ''branching'' (running different commands based on some condition). The [[Introduction to Macro Loops]] will handle looping (running a process repeatedly, until you wish it to stop).

==Assumptions==

We're going to get to using these options pretty fast, so I assume you've read the [[Introduction to Macro Writing]] and have knowledge of how to create a new macro and use some very basic commands in it (like creating a variable or a dice roll). 

There are a couple concepts that should be introduced first, since they're going to be a great way to illustrate some of the branching concepts (and looping concepts, in the [[Introduction to Macro Loops]]. You'll get an explanation of the new concepts below.

Also, don't forget to enable the ''Use ToolTips for Inline Rolls'' option in MapTool Preferences.

==New Concept: Roll Options==

MapTool's macro language presents the user the ability to use both named functions - things with names like {code|getProperty()} or {code|nextInitiative()}, and Roll Options, which are not functions but instead special commands that are placed at beginning of a line of macro script. Roll Options are effectively &quot;switches&quot; or &quot;toggles&quot; that you set for a macro command that affect how MapTool will handle the commands contained within the line of macro code. A couple simple roll options are mentioned in the Introduction to Macro Writing - things like [h:] and [e:] for hidden or expanded output, for example. However, there are more complex ones, and to use branching and looping, you'll need to be familiar with them. 

Roll options must follow these rules:

#Appear at the beginning of a macro command
#If only one roll option is on the line, it ends with a colon. For example: [h:]
#If multiple roll option are on the same command, they are separated by commas, and the last one is followed by a colon. For example, [h,if(HP &gt; 0): command]
#If a roll option takes an argument - that is, it has parentheses and wants you to put something in them, like a comparison - the colon (or comma, if there are multiple roll options) goes after the parentheses.

==New Concept: The CODE Option==

Normally, in any branching or looping technique, MapTool lets you do ''one thing'' - that is, one command. So if you had a statement that said &quot;if a condition is true, do something cool,&quot; then &quot;something cool&quot; can only be one single thing - you might roll some dice, or assign a variable, or print out some text to the chat window. However, you couldn't roll some dice, assign a variable, assign ''another'' variable, do some math, and ''then'' print out something all in that statement. That's too many operations.

If you could only do one thing when you branch or loop, macros would be very limited - so the macro language supports a special roll option called {{roll|code}}, which indicates to MapTool that you want to perform several different operations at once, but have them all be treated as a single unit (a single &quot;branch&quot; of a branching statement, or the body of the loop in a looping option). You would group these several commands inside a pair of curly braces ( { } ). 

The examples below will use the {{roll|code}} option, so you can see how it works.

==New Concept: Comparison and Logical Operators==

In macro writing, you're going to want to compare values together a lot - is my dice roll greater than 20? Are my hit points less than 0? Does that weapon name equal &quot;Warhammer?&quot; All of these are handled via comparison operators and logical operators.

''Comparison Operator'' is programming jargon for the symbols we use to have MapTool compare two values to each other in certain ways (an ''operator'' is a symbol that performs an operation - for instance, the + symbol is an operator that adds things together). 

A ''Logical Operator'' is a symbol you use to instruct MapTool in what order to consider comparisons, and how to group comparisons together. The comparison and logical operators are described below:

In the examples below, the {{func|if}} function is used to illustrate the examples. It's described in more detail later, but the basic &quot;format&quot; of the {{func|if}} function is this:

{{code|if(comparison, value_if_true, value_if_false)}}

* '''Comparison''' is where you do your actual comparison (greater than, less than, etc.)
* '''Value_if_true''' is where you put the output or value if the comparison is true
* '''Value_if_false''' is, obviously, where you put the output or value if the comparison is false

===Comparisons===

The symbols below are the comparison operators. Remember that you must always think of these comparisons from the reference point of the value on the ''left'' side. So, in the comparison {{code|value1 &gt; value2}}, you read it based on the left side: &quot;is {{code|value1}} greater than {{code|value2}}. This is the rule for comparisons in MapTool - the left side of the operator is the &quot;point of view.&quot; 

* '''==''': &quot;is equal to;&quot; this is the operator you use to see if one value is equal to another. Be careful - it has ''two'' equals signs in a row (remember, one equal sign is already reserved for assigning values to variable). An example of this comparison would look like {{code|[if(hit &amp;#61;&amp;#61; &quot;yes&quot;, &quot;you hit!&quot;, &quot;you missed!&quot;)]}}
* '''&gt;''': &quot;is greater than; use this to see if the value on the left side is greater than the value on the right. For example: {{code|[if(roll &gt; 17, &quot;Hit!&quot;, &quot;Miss&quot;)]. You can put a number on the left side, like {{code|[if(17 &gt; roll, &quot;Miss&quot;, &quot;Hit!&quot;)]}} (note that it basically reverses the first example, so you need to switch the true and false outputs). 
* '''&gt;=''': &quot;is greater than or equal to&quot;; use this to see if the value on the left side is greater than ''or equal to'' the value on the right. For example: {{code|[if(roll &gt;&amp;#61; 17, &quot;Hit!&quot;, &quot;Miss&quot;)]}}
* '''&lt;''': &quot;is less than&quot;; use this to see if the value on the left side is ''less than'' the value on the right. For example, {{code|[if(roll &lt; 19, &quot;Miss&quot;, &quot;Hit!&quot;)]}}}
* '''&lt;=''': &quot;is less than or equal to&quot;; use this to see if the value on the left side is ''less than or equal to'' the value on the right. For example: {{code|[if(roll &lt;&amp;#61; 18, &quot;normal hit&quot;, &quot;critical hit&quot;)]}}
* !=: &quot;is not equal to&quot;; use this to compare whether the value on the left side is ''not equal to'' the value on the right. Note that this operator doesn't care what the values actually ''are'', only that they are ''not equal''. For example, {{code|[if(roll != 1, &quot;Not a fumble&quot;, &quot;You fumbled!&quot;)]}}

===Logical===

The symbols below are the ''logical operators''. You use this to group comparisons together (you only need these if you need to make multiple comparisons at the same time). These go ''between'' individual comparisons (these don't replace the comparison operators above!).

* '''&amp;&amp;''': &quot;and&quot;; use this if you want to make sure that two or more comparisons are ''all'' true. For example: {{code|[if(roll &gt; 1 &amp;&amp; roll &lt; 20, &quot;Hit&quot;, &quot;Miss&quot;)]}} requires ''both'' comparisons to be true, for the whole comparison group to be true. In other words, the roll must be ''greater than 1'' '''and''' ''less than 20'' in order for it to be a hit. If both of those aren't true, the output is {{code|Miss}}. 
** '''Remember: if you use &amp;&amp;, every part of the comparison statement must be true for the whole comparison to be true!'''
* '''||''': &quot;or&quot;; use this if you want or need only one out of multiple comparisons to be true, in order for the whole thing to be true. For example, {{code|if(enemyHealth == &quot;dead&quot; || enemyHealth = &quot;dying&quot;, &quot;Don't kick a guy while he's down&quot;, &quot;He's fair game!&quot;)}}. In the example, if ''either'' condition is true (that is, if {{code|enemyHealth}} is &quot;dead&quot; ''or'' &quot;dying&quot;) the entire comparison group is true. Only if ''neither'' comparison is true does the whole thing become false.
** '''Remember: use || if you only need one out of several comparisons to be true'''

==IF: Comparing Values==

One of the most elementary ways to branch any code is the use of the idea of ''if - then''. That is, ''if'' some comparison is true, ''then'' do something else. You would use the ''if'' concept to say &quot;If my attack hits, then show the damage result!&quot; 

MapTool's macro language has two kinds of if - a function (a function is a pre-defined set of instructions that you can &quot;call&quot; by referring to it by name), and a roll option (a roll option is a &quot;switch&quot; or &quot;toggle&quot; that tells MapTool how to handle a command. 

===if() Function===

The {{func|if}} function is called simply by writing {{code|if()}} and putting the thing you want compared, what to do if the comparison is true, and what to do if the comparison is false, all inside the parentheses. The general format is:

&lt;blockquote&gt;
{{code|if(comparison, value_if_true, value_if_false)}}
&lt;/blockquote&gt;

An actual example would look like:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[if(attackHits == &quot;yes&quot;, &quot;You hit!&quot;, &quot;You missed&quot;)]
&lt;/source&gt;
&lt;/blockquote&gt;

In that single line, we've said:

* Check the variable {{code|attackHits}} to see if it has the value &quot;yes&quot;
* If it has the value &quot;yes&quot;, then print {{code|You hit!}} to chat, or
* If it does ''not'' have the value &quot;yes&quot;, then prin {{code|You missed}} to chat

The ''value_if_true'' and ''value_if_false'' parts of the {{func|if}} statement can be text, dice roll commands (like 1d6 or 1d20), or variables. What they ''cannot'' be is variable assignments - that is, you can't write an {{func|if}} statement like this:

&lt;blockquote&gt;&lt;source lang=&quot;mtmacro&quot;&gt;
[if(attackHits==&quot;yes&quot;, output = &quot;You Hit!&quot;, output = &quot;You missed&quot;)]
&lt;/source&gt;&lt;/blockquote&gt;

It may seem like a good idea, but it won't work - MapTool will give what's known as a ''null pointer exception'', and the macro will fail. However, there is a trick to get around that: since {{func|if}} is a function, and all functions - when they run - produce a ''value'', you can assign the ''result'' of it to a variable! You would do it like this:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[output = if(attackHits==&quot;yes&quot;, &quot;You Hit!&quot;, &quot;You missed&quot;)]
&lt;/source&gt;
&lt;/blockquote&gt;

When you do it that way, MapTool will:

* First, decide what the result of the {{func|if}} is, and
* Second, assign that ''result'' to the variable {{code|output}}, which you can then use like any variable

==={{roll|if}} Roll Option===

In addition to {{func|if}}, there is another way to employ the concept of &quot;if-then&quot; in macro code. The {{roll|if}} ''roll option''. Roll options are, as mentioned above, effectively &quot;switches&quot; or &quot;toggles&quot; that you set for a macro command that affect how MapTool will handle it. A couple simple roll options are mentioned in the [[Introduction to Macro Writing]] - things like {{roll|h}} and {{roll|e}} for hidden or expanded output, for example. 

Roll options must follow these rules:

# Appear at the beginning of a macro command
# If only '''one''' roll option is on the line, it ends with a colon. For example: {{code|[h:]}}
# If ''multiple'' roll option are on the same command, they are separated by commas, and the ''last'' one is followed by a colon. For example, {{code|[h,if(HP &gt; 0): command]}}
# If a roll option takes an ''argument'' - that is, it has parentheses and wants you to put something in them, like a comparison - the colon (or comma, if there are multiple roll options) goes ''after'' the parentheses. Look at the examples below to see how it's used.

To use the {{roll|if}} option as a comparison, you must follow the format:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[if(comparison): command_if_true; command_if_false]
&lt;/source&gt;&lt;/blockquote&gt;


* '''Comparison''': this is a comparison statement, as used in the {{func|if}} above. 
* '''Command_if_true''': this is the command to execute if true; in this form of IF, you ''can'' do variable assignments or commands that you cannot do in the {{func|if}} method. However, it doesn't ''have'' to be a whole command - it can still be a bit of text.
* '''Command_if_false''': this is the command to execute if false. This is an optional statement - if you want it to do nothing if the comparison is false, then leave off the semicolon and the {{code|command_if_false}} part entirely.

An example of the use of the {{roll|if}} roll option might be:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(attackHits == &quot;yes&quot;): output=&quot;You hit!&quot;; output=&quot;You missed&quot;]
Result of your attack: [r:output]
&lt;/source&gt;
&lt;/blockquote&gt;

In the above example, the following things are happening:

* MapTool compares the value of {{code|attackHits}} to the value {{code|&quot;yes&quot;}}
** If the comparison is ''true'' - that is, the value of {{code|attackHits}} is ''indeed'' equal to {{code|&quot;yes&quot;}} - it assigns the value {{code|&quot;You hit!&quot;}} to the variable {{code|output}}. 
** If the comparison is ''false'' - the value of {{code|attackHits}} is ''not equal to'' {{code|&quot;yes&quot;}} - it assigns the value {{code|&quot;You missed&quot;}} to the variable {{code|output}}. 
* It then prints a short line of text and the value of {{code|output}} to chat.

You'll note that the first line - the line that uses if - has '''''two''''' roll options on the same line: {{roll|h}} and {{roll|if}}. You'll also see that they are separated by a comma, and the colon goes ''after'' the last roll option, and ''before'' the commands in the {{code|command_if_true}} and {{code|command_if_false}} sections.

===IF and CODE===

So what if you want to do more than one thing based on a comparison? Say, set a bunch of variables to a certain value? For that, you use the {{roll|code}} roll option. 

Like all roll options, {{roll|code}} is put at the beginning of the line, separated from other roll options by a comma. Macro programming convention (that is, the way most macro writers seem to do it) is to put {{roll|code}} as the last roll option in the list. So, the general format you will see in a macro is likely to be:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[roll_option1, roll_option2, code: macro_commands]
&lt;/source&gt;
&lt;/blockquote&gt;

The second component of the {{roll|code}} option is the curly bracket ({ }). You use these to enclose multiple commands as a single group. Remember the format of the {{roll|if}} roll option?

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[if(comparison): command_if_true; command_if_false]
&lt;/source&gt;
&lt;/blockquote&gt;

Well, the {{roll|code}} option lets you replace {{code|command_if_true}} and {{code|command_if_false}} with ''multiple'' macro commands. Let's look at an example: 

Suppose we write a macro to look at a variable called {{code|attackRoll}}. We want to compare it to a number (the target number), which is held by the variable {{code|targetNumber}}. Here's what we want the macro to do:

If {{code|attackRoll}} is greater than or equal to {{code|targetNumber}}, the macro should:

* Set {{code|attackUsed}} to &quot;yes&quot;
* Set {{code|attackResult}} to &quot;hits&quot;
* Set {{code|attackRecharge}} to 3
* Set {{code|damageRoll}} to the result of the dice roll 1d8+4.
* Output a string telling the user the results.

If {{code|attackRoll}} is ''not'' greater than or equal to {{code|targetNumber}}, the macro should:

* Set {{code|attackUsed}} to &quot;Yes&quot;
* Set {{code|attackResult}} to &quot;misses&quot;
* Set {{code|attackRecharge}} to 3
* Set {{code|damageRoll}} to &quot;no&quot; 
* Output a string to chat telling the user the results.

Here's how to do it:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:attackRoll = 1d20]
[h:targetNumber = 15]

[h,if(attackRoll &gt;= targetNumber), code:
{
  [attackUsed = &quot;yes&quot;]
  [attackResult = &quot;hits&quot;]
  [attackRecharge = 3]
  [damageRoll = 1d8+4]
};
{
  [attackUsed = &quot;yes&quot;]
  [attackResult = &quot;misses&quot;]
  [attackRecharge = 3]
  [damageRoll = &quot;no&quot;]
}]

Your attack [attackResult], and you do [damageRoll] damage. Your attack will recharge in [attackRecharge] rounds.
&lt;/source&gt;
&lt;/blockquote&gt;

There's a lot going on here, but the important thing to look for is the CODE option in the very first line, and the curly braces. The curly braces enclose multiple separate commands, but say to MapTool, &quot;treat these as one thing&quot;. So in the example above:

* We declare two variables, {{code|attackRoll}} and {{code|targetNumber}}, and give them initial values (in this case, {{code|attackRoll}} will be the result of a 1d20 roll, and {{code|targetNumber}} is set to 15). 
* We set up the comparison (putting an h, in front - remember, that will hide the results from chat, so you don't see all the calculations in the if statement).
* We put {{roll|code}} in there to warn MapTool that each part of the {{roll|if}} roll option -  {{code|command_if_true}} and {{code|command_if_false}} - will actually consist of multiple separate commands. 
* We put a colon after the word {{code|code}}, to mark off the end of all the roll options. There is only ONE colon in the line!
* We use a { to mark the start of the {{code|command_if_true}} portion of the IF statement. We then put in our commands, each one separately and enclosed in square brackets. Once finished, we ''close'' that section of the IF statement with a }, and put a semicolon on the end (remember, the IF roll option needs a semicolon to separate {{code|command_if_true}} from {{code|command_if_false}}.
* We do the same process for the {{code|command_if_false}} section - a { followed by a series of commands, and then closed with a }. 
* We make sure to close off the '''''whole''''' if statement with another square bracket ( ] ). Remember, an IF roll option is still just a macro command, and all macro commands must be enclosed in '''[ ]'''. 
* Finally, we write some text, with the several variables we have inserted at appropriate points, to be sent to chat when the macro runs.


'''NOTE''': The CODE roll option only works with ''other roll options''. You would not use this with the {{func|if}} ''function''. That is a bit confusing, but just remember: CODE only goes with other roll options.

==SWITCH: Choosing from Many Options==

The {{func|if}} function and the {{roll|if}} roll option both let you pick from two options - either do something when the comparison is ''true'', or do something different when the comparison is ''false''. But life - and RPG's - are not always so black and white. When you want to do different things based on one of ''many'' options, you use the {{roll|switch}} roll option. 

The general format is:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[switch(val):
case case_value1: command_1;
case case_value2: command_2;
case case_value3: command_3;
default: command_Default]
&lt;/source&gt;
&lt;/blockquote&gt;

What's happening here is this:

* MapTool is looking at the value of the variable {{code|val}}
* MapTool then looks at each of the {{code|case}} statements in the switch, and compares {{code|val}} to {{code|case_value1}}, {{code|case_value2}}, and {{code|case_value3}}
* When MapTool finds a match - that is, {{code|val}} is equal to one of those cases, the appropriate command (either {{code|command_1}}, {{code|command_2}}, or {{code|command_3}}) is executed, and then MapTool exits the switch statement (which just means, once it's found a match, it does what that case says, and then stops checking for matches). 

Suppose, for example, that the we wanted a macro that would automatically assign the right {{code|Armor}} value to a token, based on the token's {{code|Class}}. If you've been following along, you might recognize the '''Armor''' value as one of the attributes in the [[Sample Ruleset]]. If you visit the [[Sample Ruleset]] page, you'll see that a character can have one of several armor values, based on the character's class:

* A '''Warrior''' has an armor value of 6
* A '''Rogue''' has an armor value of 2
* A '''Wizard''' has an armor value of 1
* A '''Priest''' has an armor value of 4

So, let's say we want a macro to ask us for the value of the variable {{code|class}}, and then use that variable to assign the right {{code|Armor}} value. Here's how we'd do it:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:class = &quot;Rogue&quot;]

[h,switch(class):
case &quot;Warrior&quot;: Armor = 6;
case &quot;Rogue&quot;: Armor = 2;
case &quot;Wizard&quot;: Armor = 1;
case &quot;Priest&quot;: Armor = 4;
default: Armor = 0]

Your Armor Value is [Armor].
&lt;/source&gt;
&lt;/blockquote&gt;

What the above example does is:

* Look at the value for {{code|class}} - if you try this out, it will always show the value for &quot;Rogue.&quot; If you alter the {{code|[h:class&amp;#61;&quot;Rogue&quot;]}} line, you can see how changing that value affects the switch statement). 
* Compare what you put in there with the four different cases - checking to see if {{code|class}} is equal to {{code|&quot;Warrior&quot;}}, {{code|&quot;Rogue&quot;}}, {{code|&quot;Wizard&quot;}}, or {{code|&quot;Priest&quot;}}.
* If {{code|class}} equals any of those (and we mean EXACTLY equals - case sensitive, no spaces, an ''exact'' match), run the command to set the variable {{code|Armor}} to the appropriate value.
* If no match is found, do whatever follows the {{code|default}} option (in other words, set {{code|Armor}} to 0. 
* Stop looking for matches, and move on.

===SWITCH and CODE===

The {{roll|code}} option can be used with a {{roll|switch}} option, in a similar manner as {{roll|if}}. There are a couple tricky bits, but if you follow the pattern given in the examples, it should work for you. 

To do a {{roll|switch}} option with {{roll|code}}, the general format is:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[switch(val),code:
case case_1: { commands_for_case_1};
case case_2: { commands_for_case_2};
case case_3: { commands_for_case_3};
default: { commands_for_default}]
&lt;/source&gt;
&lt;/blockquote&gt;

An actual example can be drawn from the [[Sample Ruleset]] as well. Not only does a character's class indicate his or her armor value, but also the list of &quot;Beginning Powers&quot; from which the character can draw. Suppose we wanted to set not only the armor value, but also a variable called {{code|beginningPowers}}. To do that, you'd write a SWITCH that looks like:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h,switch(class),code:
case &quot;Warrior&quot;:
{
  [Armor = 6]
  [beginningPowers = &quot;Sword, Shield Bash, Bow, Shield, Torch&quot;]
};
case &quot;Rogue&quot;:
{
  [Armor = 2]
  [beginningPowers = &quot;Dagger, Hide, Backstab, Pick Lock, Torch&quot;]
};
case &quot;Wizard&quot;:
{
  [Armor = 1]
  [beginningPowers = &quot;Dagger, Staff, Light, Lightning Bolt, Fire Ball&quot;]
};
case &quot;Priest&quot;:
{
  [Armor = 4]
  [beginningPowers = &quot;Mace, Heal, Protect, Banish Undead, Torch&quot;]
};
default:
{
  [Armor = 0]
  [beginningPowers = &quot;Fists, Feet&quot;]
}]

Your Armor Value is [Armor] and your beginning powers are [beginningPowers].
&lt;/source&gt;
&lt;/blockquote&gt;

As you can see, each different case is treated as a single block of operations - so you need to put curly braces for each separate case, and separate them all with the semicolon. At the very end, we put a closing square bracket (''']'''), to finish the whole command. Again, what has happened is that the CODE option and the curly braces have allowed you to replace a single command, like {{code|command_for_case_1}}, with a ''group'' of commands.

Also, you'll see that I've added in some line breaks so that each separate group of operations is easier to read - MapTool is cool with that, because extra line breaks ''inside'' a command (remember, commands are enclosed within '''[ ]''') are ignored. This is nice, because it makes the macros ''much'' easier to read.

==Advanced Branching Options==

The two options illustrated above are the most common branching options used in macro writing. However, they are not the ''only'' options for branching macros - there are two others, which involve either leaving one macro entirely to call on another, or changing the focus (that is, what token is the [[Current Token]]) of a macro temporarily. Since these are fairly complex operations all on their own, you'll find them in the [[More Branching Options]] guide.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Branches and Loops</title>
    <ns>0</ns>
    <id>892</id>
    <redirect title="Introduction to Macro Branching" />
    <revision>
      <id>2974</id>
      <timestamp>2009-04-05T16:40:49Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>[[Introduction to Branches and Loops]] moved to [[Introduction to Macro Branching]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="45">#REDIRECT [[Introduction to Macro Branching]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>More Branching Options</title>
    <ns>0</ns>
    <id>893</id>
    <revision>
      <id>5698</id>
      <parentid>4588</parentid>
      <timestamp>2011-08-24T06:17:56Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="14455">{{Languages|More Branching Options}}{{Intermediate}}
==Introduction==

This is a guide to the &quot;advanced&quot; macro branching option, {{roll|macro}}.

==Assumptions==

This assumes you have an understanding of what a roll option is, and that you've read the preceding tutorials.

Also, don't forget to enable the ''Use ToolTips for Inline Rolls'' option in MapTool Preferences.

==MACRO: Running Other Macros==

One of the best practices when you write macros - especially when they become complex - is to keep them streamlined and lean, and only have them do what they need to do - for instance, if you have a macro that adds a skill to a token, it doesn't need to be the same macro that checks to see if an attack hits, or records damage taken. It just adds skills.

Writing macros this way - each macro doing something relatively small - is a good way to keep yourself organized and keep your macros clear (it also makes them easier to fix if something goes wrong!). What's more, it helps keep your memory use lower, so you don't get run into [[Stack Size|stack overflow errors]] or, more commonly, slow macros. 

But if you do this, how can you make one macro run based on another one - surely, you don't want to have to hit each button every time something happens, right? Enter the {{roll|macro}} roll option. 

===What's It Do?===

The {{roll|macro}} roll option is they way you can have one macro - the ''calling'' macro - trigger another macro, which we call the ''called'' macro. The ''calling'' macro can send some information to the ''called'' macro, where that information will be handled and processed and probably changed, and then, if you like, the ''called'' macro can send some information back to the caller.

===Why would I Use It?===

Where this comes in handy is in three circumstances: first, when you have some operation that you're always doing, but you have several different ways that it might come up. Second, if you have a macro that ''everyone'' uses. The third, and more powerful use, is when you want to manipulate another token besides your own - then you frequently need to use ''called'' macros, because there are some things only a ''called'' macro can do!

===Common Tasks from Multiple Pathways===

Let's look at the first benefit: take, for example, a macro that applies damage to a token in accordance with the [[Sample Ruleset]] (in other words, it looks at a token's properties, and then deducts damage from the token's {{code|HitPoints}} property). How many ways can you think a token might get damaged?

# It could get damaged by an attack from an enemy
# It could get damaged by an attack from a friend (accidental or otherwise)
# It could get damaged by falling
# It could be damaged by a trap

All kinds of ways. Now, suppose you have three macro to handle damage. These macros are called '''Enemy Attack''', '''Friendly Fire''', and '''Environmental Damage'''. Each of these causes a token's {{code|HitPoints}} to be reduced, but each also has some special processing to determine ''just how much'' HP reduction takes place (it's not important what the special processing is at the moment). 

So you have three macros, but each has a common element: they all in the end reduce the token's {{code|HitPoints}}. Consider a couple alternatives - you can:

# Write each macro separately, including the calculations to reduce {{code|HitPoints}}; or
# Write a fourth macro, containing just the calculations to reduce {{code|HitPoints}}, and have the three damage handler macros ''call'' that fourth to handle the final calculations.

The advantages of the first option are that you only need to write three macros, and you're done. On the other hand, what if you realize you made a mistake in your damage macro? You then have to edit it in three places. In the second option, you only edit one copy of the damage macro. 

===Tasks Everyone Does===

Building on the example above, if you have a whole bunch of macros that everyone uses (perhaps everyone needs to have a way to attack, to defend, and to take and heal damage), you can create a single set of macros that everyone simply ''calls'', rather than duplicating every macro on every token, every time you need a new token on the map. 

So, for example, you may want to build a &quot;library&quot; of macros to handle your game (whatever game it happens to be), and then create a single set of macros on your tokens that do nothing but ''call'' macros in the library. 

You'll note that it doesn't mean you have fewer macros overall - every token still needs a set of macros to call on the library; however, it ''does'' mean that your actual complex macros (the ones that took you a long time to write) are all in one place, and you only need to alter '''one''' copy in order to fix an error. If you'd copied the entire macro set to every token, you'd have to fix ''every single token'' one at a time to fix any mistakes you made.

===Manipulating Other Tokens and Trusted Macros===

Generally, when a token runs a macro, or calls a macro, the macro assumes that all properties and variables it needs to use apply to the token ''running'' the macro. So if Bork the Brave calls a macro in a macro library, that library macro is going to assume that it needs to do its thing on Bork the Brave.

However, sometimes Bork the Brave does ''not'' want this - maybe Bork the Brave just whacked a troll with his sword, and wants the damage to be applied to the troll (and, by extension, most definitely does ''not'' want the damage applied to himself!). He's going to want a macro that will affect the ''troll's'' token, not his own. 

As it turns out, however, there are some things, as mentioned, that a regular old macro on a player token simply can't do. For instance, a macro on a player token can't go and determine what an NPC token's properties are. It's simply not permitted to access another token. I think you'll agree this is a good way to go - you may not want players being able to see property values on an NPC. Furthermore, a player token macro can't ''change'' values on another token. Nobody wants the players to be able to, for instance, reduce an enemy's armor value to zero just before making an attack.

But still, we want to be able to do ''some'' things to other tokens, right? In response to that, the concept of '''trusted macros''' was developed. Trusted macros are simply macros that can perform certain functions unavailable to other macros, such as the functions that manipulate token properties ''other than'' the ones on the token who called the macro.

===How Do I Use It?===

{{roll|macro}} is a roll option, so, like other roll options you've seen, it is put at the beginning of a line and ends with a colon. The essential format of the {{roll|macro}} roll option is:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[MACRO(&quot;macroName@Lib:token&quot;): macro_arguments]
&lt;/source&gt;
&lt;/blockquote&gt;

In the above example, there are several parts:

* The opening and closing square brackets ('''[ ]'''), which surround ''all'' macro commands in MapTool
* The word &quot;MACRO&quot; (it does not have to be capitalized; that's done to keep it noticeable!), which is just the name of this particular roll option
* ''macroName'': this is the name of the macro you wish to call 
* @: this is used in the same sense as in an email address - it means &quot;at&quot;
* '''Lib:token''': this is the [[Library Token]] that contains the macro you wish to call. Library tokens are a complex subject, but you can think of them as a single token that holds a &quot;library&quot; of macros, that can be called by other tokens or call each other. 
* '''macro_arguments''': an ''argument'' is a programming term for information that you send to a function (or in this case, a macro) that you want the function to ''do'' something to. If you had a function that added two numbers together, the numbers you send to it would be the &quot;arguments&quot; to that function.

So in the command above, you've said &quot;run the macro called ''macroName'' at the library token ''Lib:token'', and send it ''macro_arguments'' to work on.&quot; The programming jargon for what you've just done is &quot;calling a macro,&quot; or &quot;creating a macro call.&quot;

The next section will have some actual examples to help you get a grasp of using {{code|[MACRO():]}}. 

===Working with Arguments and Returns===

In programming terms, a function is a set of commands that ''receives'' arguments (described briefly above), does some processing on those arguments, and then ''returns'' a value to the place from where it was called. The macro roll option is not technically a function, but when it is used, the process is mostly similar: it calls on another macro, sends it arguments, and that other macro ''may'' - if you write the macro so that it does - return a value to the calling macro. 

When you call a macro, you can send it any variable, string, or number as an argument (in other words, you can replace ''macro_arguments'' with a variable, a string, or a number, which is sent to the called macro). For example, let us assume the following:

* There is a [[Library Token]] called &quot;'Lib:MT''' which has a macro called '''Use Power'''. 
* You have a token for Bork the Brave, which has a macro called '''Shield Bash'''. This is one of Bork's powers.
* You want to send the name of the power to '''Use Power''', which will run the standard procedures to resolve the use of a power.

To have Bork's macro trigger the '''Use Power''' macro on '''Lib:MT''', you would create a macro called &quot;Shield Bash&quot;, which contained the following command:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[macro(&quot;Use Power@Lib:MT&quot;): &quot;Shield Bash&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;
So, that's great. You've sent this information off to the macro '''Use Power'''. But...how does '''Use Power''' recognize what you sent it? 

====The Special Variable ''macro.args''====

Whenever you create a macro call and execute it, a special variable called {{code|[[macro.args]]}} is created. This variable is visible (that is, can be accessed, changed, or read) only by the macro being called, and it contains whatever you substituted in for ''macro_arguments''. So, in our example above, {{code|[[macro.args]]}} is equal to &quot;Shield Bash&quot;.  So, for example, in the macro '''Use Power''', you might have a line that says:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:powerName = macro.args]
&lt;/source&gt;
&lt;/blockquote&gt;

What that line says is, &quot;in this macro, take the value of {{code|macro.args}}, and assign it to the variable {{code|powerName}}.&quot; From then on out, the variable {{code|powerName}} will have the value &quot;Shield Bash&quot; (if we continue our example from above). Note that you don't ''have'' to do this - you can also just refer to {{code|macro.args}} wherever you need to.

The macro being called can then use this special variable {{code|[[macro.args]]}} like any other variable - it can read it, it can change it, it can add it to something - anything you would do with a variable. You could even ignore it!

Of course, if you've sent information in one direction - from the caller to the callee, so to speak - what if you need to send information the other way (in other words, ''return'' a value)?

====The Special Variable ''macro.return''====

In the macro that is being called, you can do a lot of processing on the variable {{code|[[macro.args]]}}. You can output text to chat and update token properties, even. But you migh also want the results of all that processing to be sent ''back'' to the calling macro - maybe you use it to create ''part of'' a string, and you need to send that piece back to be assembled into the final output you want to send to chat. 

In that case, you can assign whatever value you want to send back to the variable {{code|[[macro.return]]}}, which will be sent back to the calling macro. Assume, then, that the macro '''Use Power''' creates a variable called {{code|powerResultText}} that needs to be sent ''back'' to Bork's macro '''Shield Bash''' before it finishes. To do this, somewhere at the end of '''Use Power''', you'd add this line:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:macro.return = powerResultText]
&lt;/source&gt;
&lt;/blockquote&gt;

You've said in that line that the special variable {{code|[[macro.return]]}} will be equal to whatever {{code|powerResultText}} is set to, and '''Shield Bash''' can then use the variable {{code|macro.return}} for further processing.

===Side by Side Examples===

The examples below are the two macros discussed above, side by side, to illustrate the use of macro calls and the {{code|[[macro.args]]}} and {{code|[[macro.return]]}} variables. Make sure to check out the [[Sample Ruleset]] if you're not familiar with some of the various game terms. Also, note that these are not ''complete'' macros that include all of the possible classes and powers in the game, but a sampling to illustrate the use of {{code|[MACRO():]}}. 

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
|-
!Shield Bash Macro
!Use Power Macro
|-
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Call the Use Power macro --&gt;

[MACRO(&quot;Use Power@Lib:MT&quot;): &quot;Shield Bash&quot;]

&lt;!-- Receive the variable macro.return after Use Power has finished processing.--&gt;

[h:hitValue = macro.return]

&lt;!-- Use IF to check the value of hitValue, and choose an option --&gt;

[h,if(hitValue == 1),CODE:
{
  [damageRoll = floor((1d6+Strength)/2)]
  [special = &quot;Roll 1d6. On a 4 or better, the foe is stunned for three rounds.&quot;]
};
{
  [damageRoll = &quot;None&quot;]
  [special = &quot;No special effect.&quot;]
}]

&lt;!-- Display the Damage result and special effect --&gt;

&lt;b&gt;Damage: &lt;/b&gt; [r:damageRoll]&lt;br&gt;
&lt;b&gt;Special: &lt;/b&gt; [r:special]

&lt;/source&gt;
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Receive macro arguments --&gt;
[h:powerName = macro.args]

&lt;!-- Do a switch to find the power's Attack Bonus --&gt;
[h,switch(powerName):
case &quot;Sword&quot;: attackBonus = 2;
case &quot;Bow&quot;:  attackBonus = 0;
case &quot;Shield Bash&quot;: attackBonus = -1;]

&lt;!--Make the Attack Roll--&gt;

[h:attackRoll = 1d20 + Strength + attackBonus]

&lt;!-- Check to see if the attack succeeds (a roll of 15 or higher is a hit) --&gt;

[h,if(attackRoll &gt;= 15),CODE:
{
  [successText = &quot;a success!&quot;]
  [hit = 1]
};
{
  [successText = &quot;a failure.&quot;]
  [hit = 0]
}]

&lt;!--Display the attack result and the success, and then send
 back the success info for final processing--&gt;

The [r:powerName] attack is [r:successText].&lt;br&gt;
[h:macro.return=hit]
&lt;/source&gt;
|}
[[Category:MapTool]]
[[Category:Tutorial]]
{{Languages|More Branching Options}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Macro Loops</title>
    <ns>0</ns>
    <id>894</id>
    <revision>
      <id>5699</id>
      <parentid>3223</parentid>
      <timestamp>2011-08-24T06:19:30Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26954">{{Intermediate}}
==Introduction==

We've looked at [[Introduction to Macro Branching|branching]] in macros, using {{roll|if}}, {{roll|switch}}, and the more advanced roll options {{roll|macro}} and {{roll|token}}. Branching is one of the most important tools for macro writing, since it lets you automate decisions based on certain factors or conditions that arise during play. 

Another common task in MapTool macros is to repeat a process multiple times - for example, you may want to repeat an attack roll several times, against multiple targets (for instance, if you threw a grenade, you might need to roll to see which targets are hit by the blast), or you may want to go through a list of skills, and print out the skill rating for each one. In both cases, you're repeating the same operation several times in a row, generating different results each time. In macro writing, we call this process ''looping'' (you may see it described in places as &quot;looping through a list&quot; or &quot;iterating over an array&quot; - regardless, the processes to do it are ''loops''). 

There are four loop structures in MapTool macros: {{roll|count}}, {{roll|while}}, {{roll|for}}, and {{roll|foreach}}. Each of the three is a ''roll option'', which means - as we've seen before:

# It is placed at the beginning of a macro command
# It is followed by a colon
## If more than one roll option is used, they are separated by commas, and the ''last'' one is followed by a colon
# After the colon, you place the operation you want to do every time the loop runs

Before we continue, we'll need to introduce a couple concepts that will be used heavily in the examples below, especially for  {{roll|for}} and {{roll|foreach}} loops.

==Assumptions==

I assume you've read the [[Introduction to Macro Writing]] and have knowledge of how to create a new macro and use some very basic commands in it (like creating a variable or a dice roll). 

Also, don't forget to enable the ''Use ToolTips for Inline Rolls'' option in MapTool Preferences.

==New Concept: String Lists and String Properties==

RPGs have a lot of information that goes into playing them - there are stats, and skills, and dice rolls, and weapons, and equipment, and powers and magic and...well, you name it, and there's an RPG out there that covers it. 

For basic things, it might make sense to create a token property for each piece of information. In fact, you can do this for every possible bit of information you want to record about a character - but already, I bet you're thinking &quot;that's a ''lot'' of properties&quot;). And it is!

Fortunately, there are other ways to store information in MapTool properties (and macro variables) that let you group information together. The two new information storing methods we'll use - which are properly referred to as ''data types'' - are [[String_List|string lists]] and [[String_Property_List|string properties]]. 

===String Lists===

A string list is, first, a ''string'' - that is, a collection of alphanumeric text that is treated as just text (that is, it's not a number, so you can't add it to another number; it's not a dice roll, so MapTool won't automatically roll it; it's just a string of characters).

Second, it is a ''list'' - a collection of single items, separated by some sort of separating character - the (you guessed it) ''separator'' (also called a ''delimiter''). The separator marks the beginning and end of an individual item in a list. This is a long way of saying &quot;a string list is a single value that is a list of things, like colors: blue, green, red, orange, mauve.&quot;

Formally - in macro code - a string list looks like:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:listOfColors = &quot;blue, green, red, orange, mauve&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

In the example, you'll see that we've made a variable assignment, and given the variable {{code|listOfColors}} the values {{code|blue, green, red, orange, mauve}}. The whole thing is enclosed in double quotes, which tells MapTool that it's a string, and from its very format, MapTool knows that it's a ''string list''.

A string list can contain anything - it could be a list of names, of numbers, of dice rolls - anything you might want to keep a list of. 

'''However!''' It is important to remember that no matter what each item in a string list ''is'', it is always treated as a ''string''. So if MapTool reads a string list that looks like {{code|&quot;1d6, 2d8, 1d20&quot;}}, it will not see the first item and see a command to roll 1 six-sided die; instead it will see the character &quot;1&quot;, the character &quot;d&quot;, and the character &quot;6&quot;, all put together. They may look the same to us, but they don't look the same to MapTool - to turn that &quot;1d6&quot; into {{code|1d6}} so that MapTool will roll it, we need to use the {{func|eval}} function to tell MapTool &quot;evaluate that string ''as if'' it were a dice roll.&quot; You'll see some examples of {{func|eval}} later on.

===String Properties===

String properties are very similar to string lists - they are strings with special formatting, and they contain a collection of items. However, string properties have additional features that make them very useful for storing information in a different way.

The essence of a string property is the the ''key - value'' pairing. Basically, for each item in the string property, there is a ''key'' that is paired with a ''value''. For instance, if you have a weapon with the following details:

* Weapon Name: Broadsword
* Weapon Damage Dice: 1d8
* Weapon Damage Type: Slashing
* Weapon Category: Versatile

You have a series of ''key - value'' pairs: the key &quot;Weapon Name&quot; is paired with the value &quot;Broadsword,&quot; the key &quot;Weapon Damage Dice&quot; is paired with the value &quot;1d8,&quot; and so on. A string property is simply a &quot;formal&quot; way to set up this kind of pairing in a single variable. The string property for the above weapon might read:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:weapon1 = &quot;name=Broadsword; damageDice=1d8; damageType=Slashing; category=Versatile;&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

In that string property, the word to the left of the equal sign is the ''key'', and the word to the right is the ''value''. The semicolon is the ''separator'' or ''delimiter''. MapTool has special functions to retrieve and change the values within a string property, which you'll see in use later.

Now, let's get to the loops!

==COUNT: Over and Over and Over and...==

The first looping structure we'll cover is the {{roll|count}} option. This option is the simplest loop - it repeats the operation following the colon a number of times equal to its ''argument'' (remember, arguments are the values or variables you put inside the parentheses). The format of a {{roll|count}} (which can also be abbreviated {{roll|c}} statement is:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[count(repetitions): command]
&lt;/source&gt;
&lt;/blockquote&gt;

or

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[c(repetitions): command]
&lt;/source&gt;
&lt;/blockquote&gt;

The example should be pretty self-explanatory. It contains:

* The {{roll|count}} option itself - without the option, we wouldn't need this tutorial, right?
* {{code|repetitions}}: this is the value that tells {{roll|count}} how many times to repeat {{code|command}}
* {{code|command}}: this is the actual macro command you want count to do over and over again.

Let's look at an example. Suppose you have a character who can cast a spell, which creates a cloud of poisonous gas that can hit up to nine targets at the same time. Suppose we also have a cluster of 6 hapless orcs standing in the room, that you are about to poison with this toxic cloud. The rules of your game indicate that you must roll a separate attack for each possible target, meaning that you'd have to roll your attack 6 different times. You can either do that by hand, each time, or you could write a macro that uses {{roll|count}} to roll the attack over and over, and all you need to give it is the number of times!

Here's how you'd write that macro:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:attackBonus = 7]

Toxic Cloud: [count(numAttacks): 1d20+attackBonus]
&lt;/source&gt;
&lt;/blockquote&gt;

What we did here was:

* Line 1 sets a value for {{code|attackBonus}}, to be used later. 
* Line 3 sends the text &quot;Toxic Cloud: &quot; to chat, and then, begins the Count Loop. Since {{code|numAttacks}} is ''undeclared'', MapTool will prompt you for a value before it can start the loop. Once you enter that value, the count loop will process the calculation of {{code|1d20+attackBonus}} that many times, sending the result to chat each time, and separating each result with a comma.

The output of this macro will look something like (assuming you entered 4 when prompted for {{code|numAttacks}}): 

&lt;blockquote&gt;
Toxic Cloud: 17, 19, 12, 8
&lt;/blockquote&gt;

===Special Variable: ''roll.count''===

Since it's often useful to know what &quot;round&quot; or &quot;turn&quot; we're on when a {{roll|count}} loop is running, MapTool creates a special variable every time you start a count loop. This variable is called [[roll.count|{{code|roll.count}}]], and it's value is equal to whatever loop you're currently on. So, if you're on the first loop, {{code|roll.count}} is equal to 1; on the second time through, it's equal to 2, and so on. That way, you can use that value in various ways ''inside'' your macro command. 

A more advanced example of the Toxic Cloud macro might look like this:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:attackBonus = 7]

Toxic Cloud vs:&lt;br&gt;

[c(numAttacks, &quot;&lt;br&gt;&quot;),CODE:
{
   [attack = 1d20+attackBonus]
   [damage = 1d6 + 2]
   Target [r:roll.count]: Attack [r:attack]; [damage] damage.
}]
&lt;/source&gt;
&lt;/blockquote&gt;

A bit more is going on here. 

* Line 1 still just sets {{code|attackBonus}} to 7, so we can use it later.
* Line 3 outputs &quot;Toxic Cloud vs:&lt;br&gt;&quot; to chat (the &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt; part sends a line break to chat, meaning that the next output will start on the line ''below'' the words &quot;Toxic Cloud vs:&quot;)
* Line 4 starts a more complex Count Loop. First off, we used the abbreviation for &quot;count&quot;, which is just {{code|c}}. We left {{code|numAttacks}} as is, but added a second ''argument'' - in this case, a different &quot;separator.&quot; All loops in MapTool macros have a default separator, which is the comma. However, you don't always want to separate your results with a comma, right? In this situation, we want to separate them with a line break, so each result is on its own line in chat. So, we put the new separator in - an HTML line break character, or &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;. 
* Line 4 also uses the CODE roll option, which is discussed in [[Introduction to Macro Branching]], and lets us do multiple operations as a single group.
* Line 6 sets the variable {{code|attack}} to the sum of {{code|attackBonus}} and 1d20.
* Line 7 sets the variable {{code|damage}} to the sum of {{code|1d6+2}}.
* Line 8 is a combination of text and variables, which are output to chat. Note that the variable {{code|roll.count}} is in there, which will be replaced with whatever iteration the loop happens to be on. 
* Line 9 closes the CODE block, and the whole command. 

The output from this would look something like:

&lt;blockquote&gt;
Toxic Cloud vs:&lt;br&gt;
Target 1: Attack 17; 6 damage.&lt;br&gt;
Target 2: Attack 12; 5 damage.&lt;br&gt;
Target 3: Attack 19; 7 damage.&lt;br&gt;
Target 4: Attack 10; 3 damage.&lt;br&gt;
&lt;/blockquote&gt;

==WHILE: Keep On Keepin' On==

Let's move on to a new looping structure: {{roll|while}}. This structure is the first one we'll discuss that uses a ''condition'' to determine how many times to loop (previously, count used a value - but not a comparison of any kind). The general format of a {{roll|while}} loop is:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[while(condition): command]
&lt;/source&gt;
&lt;/blockquote&gt;

You're probably getting used to reading these by now.

* {{roll|while}}: of course, we need to add the roll option itself
* '''condition''': this is the comparison that we make, to see if the loop needs to stop - it can be any of the logical comparisons we've discussed already (such as, {{code|loops &lt; 10}} or {{code|numDice &gt; 5}} or anything you can think of). 
* '''command''': the macro command (or commands, if you use the CODE option) to run each time the loop goes 'round.

So, if you read this, the while loop really just says, &quot;while some condition is true, keep doing this.&quot; Let's look at some examples.

===Example 1: Basic Countdown===

This is a very basic example, just to illustrate the basic parts of the {{roll|while}} loop. Suppose you wanted to count down from 10 to 1. There are many ways to do this, of course, but we'll do it with a {{roll|while}} loop. The macro would look like this:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:num = 10]
[while(num &gt; 0): num = num - 1]
&lt;/source&gt;
&lt;/blockquote&gt;

The above macro simply says that &quot;while the variable {{code|num}} is greater than 0, subtract 1 from {{code|num}}, and repeat.&quot; Each time through the loop, the value of {{code|num}} will be checked by MapTool. If it is greater than 0, it will let the command {{code|num {{=}} num-1}} happen, and display the result in chat; if {{code|num}} is ''not'' greater than 0, then the loop will be halted. The output of this macro looks like:

&lt;blockquote&gt;
9,8,7,6,5,4,3,2,1
&lt;/blockquote&gt;

You'll note that &quot;10&quot; was never shown. That's because while the loop may have started with {{code|num}} having the value of 10, the first time we ''see'' any output is when the operation {{code|num -1}} takes place - so the first thing we see is {{code|num - 1}}, which is 9. 

===Example 2: The Machine-Gun===

Let's look at a more complicated (and perhaps more interesting) example. In this example, we won't be using the [[Sample Ruleset]], mostly because I couldn't think of a useful example from that game. So, let's assume we have the following game situation:

* A character has a machine gun with 30 rounds of ammunition
* They may fire one to six rounds for every action
* If their attack roll of 1d20 is greater than 15, they may make another attack; otherwise, they must end their turn. They always get at least 1 attack, though.

So what we need to do is repeat the operation until ''either'' the weapon runs out of ammo, or they roll less than a 15 on their attack. Here's how that macro would look:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:ammo = 30]
[h:hit = 1]

[while(ammo &gt; 0 &amp;&amp; hit == 1, &quot;&lt;br&gt;&quot;),CODE:
{
  [h:attackRoll = 1d20]
  [h:ammoSpent = 1d6]
  [h,if(attackRoll &gt; 15): hit = 1; hit = 0]
  [h:ammo = ammo - ammoSpent]
  Your first attack expends [r:ammoSpent] rounds, and [if(hit==1, &quot;hits.&quot;, &quot;misses.&quot;)] You have [r:ammo] rounds remaining.
}]

[if(hit==0): &quot;Your turn ends because you missed a target.&quot;]
[if(ammo==0): &quot;Your turn ends because you are out of ammo.&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

Here's the breakdown of this macro:

* Line 1 and 2 set two important variables: {{code|ammo}} and {{code|hit}}. We set {{code|ammo}} to 30, per the assumptions above, and we set {{code|hit}} to 1, so that the character always gets at least ''one'' attack roll (if we didn't set {{code|hit}} to 1, the loop might stop before it started!). 
* Line 4 is the start of the While Loop: we establish the loop, and give it a combined condition. We say that ''while'' {{code|ammo}} has a value greater than 30, ''and'' (remember, two ampersands is the logical operator &quot;and&quot;) {{code|hit}} ''is equal to'' 1, the loop should go 'round. If ''either or both'' of those is ''not'' true, then the loop should stop. Also, we set the separator to &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;, so that a new line will be printed each time the loop runs.
* Lines 5 - 9 handle the actual loop processing. Note that in that loop, we make sure to set a new value for {{code|hit}} and {{code|ammo}} - this is '''''critical'''''. If you never change the variables that your conditions are based on, then your loop will '''''never stop'''''. 

It's worth repeating: in a while loop, you '''''must change the variable that your condition is checking, or you can end up with a loop that never stops'''''.

So, the output of this macro will look something like:

&lt;blockquote&gt;
Your attack expends 6 rounds, and hits. You have 24 rounds remaining.&lt;br&gt;
Your attack expends 2 rounds, and hits. You have 22 rounds remaining.&lt;br&gt;
Your attack expends 3 rounds, and misses. You have 19 rounds remaining. Your turn ends because you missed a target.
&lt;/blockquote&gt;

==FOR: I Couldn't Think of Anything Catchy==

The next loop structure to address is the {{roll|for}} roll option. This option is somewhat similar to {{roll|while}}, because it repeats a sequence of code a number of times based on a particular condition; it is also like {{roll|count}} because that particular condition is &quot;has our counter reached a particular number yet?&quot;

The general format for a {{roll|for}} loop is:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[for(counter, start, end, stepsize, separator): command]
&lt;/source&gt;
&lt;/blockquote&gt;

Here's how that breaks down:

* '''{{roll|for}}''': as always, we need to actually put the roll option in there
* '''counter''': this is the variable that will be used to count the iterations through the loop; typically people us a simple 1-letter variable in here, like {{code|x}} or {{code|i}}. For examples below, we'll use {{code|i}}. 
* '''start''': this is what the {{code|counter}} variable starts at (it can be zero, another variable, or any other numeric value)
* '''end''': this is the value that ''ends'' the loop 
** In a loop where the {{code|counter}} variable is ''increasing'' - in other words, a loop with a positive {{code|stepsize}} - the loop runs as long as {{code|counter}} is ''less than'' {{code|end}}
**  In a loop where the {{code|counter}} variable is ''decreasing''- in other words, a loop with a negative {{code|stepsize}} - the loop runs as long as {{code|counter}} is ''greater than'' {{code|end}}
* '''stepsize''': this is how big the increment is for each iteration of the loop (for example, if you set {{code|stepsize}} to 2, then {{code|counter}} will increase by 2 ever iteration). The default stepsize is +1 (that is, by default, the {{code|counter}} variable increments by 1 each time the loop is processed). 
* '''separator''': like with {{roll|count}} and {{roll|while}}, this is an optional separator to show between each output line from the loop; the default is a comma.

===Example 1: Basic Countdown===

This example illustrates how the {{roll|for}} option's various components work. As with the previous looping structure, this is a basic countdown:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[FOR(i,10,0,-2): &quot;i is now &quot; + i]
&lt;/source&gt;
&lt;/blockquote&gt;

In this example, we have specified all components of the loop:

* The counter variable is {{code|i}}.
* The start value is {{code|10}}
* The end value is {{code|0}}
* The stepsize is {{code|-2}} (the counter ''decrements'' by 2 every time the loop processes)

The output of this will look like:

&lt;blockquote&gt;
i is now 10, i is now 8, i is now 6, i is now 4, i is now 2
&lt;/blockquote&gt;

You will note that there is no ''i is now 0'' step - this is because when the counter counts down to 0, {{code|i}} is no longer greater than 0. 

===Example 2: Creating a Table With Multiple Rows===

This example illustrates a practical use of the {{roll|for}} option to create a table that will be sent to chat, with a number of rows based on how many properties are in a String List. 

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:theList = &quot;Strength, Endurance, Dexterity, Intelligence&quot;]

[h:numberOfRows = listCount(theList)]

&lt;table border=&quot;1&quot;&gt;
[for(i, 0, numberOfRows, 1, &quot;&quot;):  &quot;&lt;tr&gt;&lt;td&gt;&quot;+listGet(theList, i)+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;]
&lt;/table&gt;
&lt;/source&gt;
&lt;/blockquote&gt;

The example above uses a few cool commands to generate the output. 

* {{code|theList}} is simply a string list variable containing four elements
* {{func|listCount}} is a function that, when you put the name of a string list variable in it, will return the number of elements in the string list
* We create the beginning of an HTML table by using the &lt;nowiki&gt;&lt;table&gt;&lt;/nowiki&gt; tag
* The {{roll|for}} loop here uses the counter variable {{code|i}}, which starts at 0, and counts up until it reaches {{code|numberOfRows}}. It increases by 1 each loop, and the default separator has been changed to {{code|&quot;&quot;}} so that no extraneous commas are printed to chat.
* Inside the loop, we [[Introduction_to_Macro_Writing#String_Concatenation|concatenate]] the HTML tags for table rows and table cells around the function {{func|listGet}}. This function will retrieve, from a string list variable, the value of the element that is at the position specified in the second argument. In this case, we say, &quot;get from the variable {{code|theList}} the value of the element that's in the same position as {{code|i}}&quot; - so that it starts with element 0 (all lists start at item 0 in MapTool) and each time we loop through, it gets the next element. 
* At the end, we close the table with the appropriate HTML tag. 

The output looks like this. If you add in several more elements to the variable {{code|theList}}, the table will grow in size to accommodate the new elements.

&lt;blockquote&gt;
{| border=&quot;1&quot;
|-
|Strength
|-
|Endurance
|-
|Dexterity
|-
|Intelligence
|}
&lt;/blockquote&gt;

==FOREACH: A Very Special FOR==

The {{roll|for}} loop structure lets you repeat a set of commands a specified number of times, with flexible beginning, ending, and steps. That looping method is applicable to many things, and can be looked at as a very &quot;general&quot; way to loop - it gives you lots of flexibility with where you start and end, and can be used for many operations.

However, frequently loops are used to go through a list of items that is already established, and it is kind of a pain to have to make sure to count each list, then assign the variables in a {{roll|for}} loop, and make sure you can figure out how the {{code|counter}} variable corresponds to the position of an item in a list. So, a different kind of for loop - one that handles most of that without bothering ''you'' about it - also exists. This one is called {{roll|foreach}}. 

In a {{roll|foreach}} loop, the looping structure is given two arguments: the name of a string list, and a variable. The variable takes on the value of each element in the list, in turn, as the looping structure iterates. That's a bit confusing, so first, let's look at the general structure of a {{roll|foreach}} loop:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[foreach(item, list): command]
&lt;/source&gt;
&lt;/blockquote&gt;

* '''{{roll|foreach}}''': once again, the roll option itself.
* '''item''': this is the variable that takes on the value of each successive element in the list or property
* '''list''': this is the string list you want the {{code|foreach()}} to work on
* '''command''': the operation you want performed on each successive {{code|item}} in {{code|list}}

To explain that in plain English: assume for a moment that there you have the names of several targets (NPC tokens) that your character wants to attack at the same time. You need to make an attack roll against each target, which is equal to 1d20 + 7, but you have to roll separately for ''each'' target. 

You could write out the attacks each time like this:

&lt;source lang=&quot;mtmacro&quot;&gt;
I attack target 1: [1d20+7]&lt;br&gt;
I attack target 2: [1d20+7]&lt;br&gt;
I attack target 3: [1d20+7]&lt;br&gt;
I attack target 4: [1d20+7]&lt;br&gt;
&lt;/source&gt;

And so forth and so on. Not so bad if you have 3 targets. But what if you have 6? Or 12? 

So instead, what if you created a single variable that was a list of the names of each target? Then, you can use the {{roll|foreach}} loop to go through the list one by one and let you make the roll with a very efficient little bit of code. {{roll|foreach}} may be a little hard to explain, but once you understand what it can do, you will see how useful it can be!

Now, let's jump to some examples.

===Example 1: Listing the Contents of a String List===

This simple example will go through a string list, and list the value of each element in the list, from beginning to end.

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:theList = &quot;18, Bob, 29, Foo, 1009, Snorkel&quot;]

[foreach(item, theList, &quot;&lt;br&gt;&quot;): item]
&lt;/source&gt;
&lt;/blockquote&gt;

In the above macro, we've created a {{roll|foreach}} loop that takes the list variable {{code|theList}}, and goes to each element in that list, and assigns the value of that element to the variable {{code|item}}. We've set the separator to the HTML code for a line break, and then -- after the colon -- instructed the macro to print the value of the variable {{code|item}} to the chat window. 

The output of that macro looks like:

&lt;blockquote&gt;
18&lt;br&gt;
Bob&lt;br&gt;
29&lt;br&gt;
Foo&lt;br&gt;
1009&lt;br&gt;
Snorkel
&lt;/blockquote&gt;

Do you see what happened there? The foreach() option went to each element in {{code|theList}}, said, &quot;the variable {{code|item}} is now equal to the element,&quot; and then printed the value of {{code|item}} to chat.

===Example 2: Attacking a Bunch of Bad Guys===

Now, let's look at the example described in the beginning. Remember how we had those target names to attack? Here's how we'd do that: 

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:targetList = &quot;Orc 1, Goblin 2, Orc 4, Zombie 17, Big Boss&quot;]

[foreach(target, targetList, &quot;&lt;br&gt;&quot;),CODE:
{
   [h:attackRoll = 1d20+7]
   I attack [r:target] with an attack roll of [r:attackRoll]
}]
&lt;/source&gt;
&lt;/blockquote&gt;

* The first line simply sets up the variable {{code|targetList}}, as discussed.
* The foreach loop goes through each element in {{code|targetList}}, assigning its value to the variable {{code|target}}. So, the first time through, {{code|target}} has the value of the first item in {{code|targetList}} - in other words, {{code|target}} is equal to {{code|Orc 1}}. The second time through, {{code|target}} equals the ''second'' item in the list, and so on.
* The {{roll|code}} roll option is used so we can execute multiple commands (and because it sometimes makes formatting the output a little easier)
* Inside the CODE brackets, we calculate a variable called {{code|attackRoll}}. This is recalculated on every loop, so it's different for each {{code|target}}.
* Finally, we generate some chat output, inserting the variable {{code|target}} and the variable {{code|attackRoll}} in the appropriate places.

The output of that macro, when sent to chat, looks like:

&lt;blockquote&gt;
I attack Orc 1 with an attack roll of 12&lt;br/&gt;
I attack Goblin 2 with an attack roll of 11&lt;br/&gt;
I attack Orc 4 with an attack roll of 21&lt;br/&gt;
I attack Zombie 17 with an attack roll of 17&lt;br/&gt;
I attack Big Boss with an attack roll of 9
&lt;/blockquote&gt;

==Conclusion==

That about covers the looping basics for MapTool macros. The examples shown above are very simple, of course - just enough to show you how these work. But looping is ''incredibly'' useful for many applications in a MapTool macro, from generating multiple die rolls to building tables to editing token properties, so make sure to experiment with it.

[[Category:MapTool]]
[[Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getCurrentMapName</title>
    <ns>0</ns>
    <id>895</id>
    <revision>
      <id>6696</id>
      <parentid>3029</parentid>
      <timestamp>2016-05-03T11:45:03Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="269">{{MacroFunction
|name=getCurrentMapName
|version=1.3b55
|description=
Returns the name of the current map. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getCurrentMapName()
&lt;/source&gt;

|examples=
{{func|getAllMapNames}} {{func|getVisibleMapNames}}

}}
[[Category:Map Function]]</text>
      <sha1>jqucz5rihv2fepjtqktb72f9lmy5r2w</sha1>
    </revision>
  </page>
  <page>
    <title>getAllMapNames</title>
    <ns>0</ns>
    <id>896</id>
    <revision>
      <id>6711</id>
      <parentid>6695</parentid>
      <timestamp>2016-05-03T12:43:41Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="757">{{MacroFunction
|name=getAllMapNames
|version=1.3b55
|trusted=true
|description=
Returns the names of all of the maps as either a [[String List]] or [[JSON Array]]. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getAllMapNames()
getAllMapNames(delim)
&lt;/source&gt;
'''Parameters'''
{{param|delim|The delimiter to use for the [[String List]]. If the value is {{code|json}} then a [[JSON Array]] is returned.}}

|examples=
To get the names of all of the maps in a [[String List]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: maps = getAllMapNames()]
&lt;/source&gt;

To get the names of all of the maps in a [[JSON Array]]
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: maps = getAllMapNames(&quot;json&quot;)]
&lt;/source&gt;
|also=
{{func|getCurrentMapName}} {{func|getVisibleMapNames}}

}}
[[Category:Map Function]]</text>
      <sha1>0o34dtx8bwykxknijjqtw1se7oirxev</sha1>
    </revision>
  </page>
  <page>
    <title>getVisibleMapNames</title>
    <ns>0</ns>
    <id>897</id>
    <revision>
      <id>6697</id>
      <parentid>3034</parentid>
      <timestamp>2016-05-03T11:45:19Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="843">{{MacroFunction
|name=getVisibleMapNames
|version=1.3b55
|description=
Returns the names of all of the player visible maps as either a [[String List]] or [[JSON Array]]. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getVisibleMapNames()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getVisibleMapNames(delim)
&lt;/source&gt;
'''Parameters'''
{{param|delim|The delimiter to use for the [[String List]]. If the value is {{code|json}} then a [[JSON Array]] is returned.}}

|examples=
To get the names of all of the player visible maps in a [[String List]].
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: maps = getVisibleMapNames()]
&lt;/source&gt;

To get the names of all of the player visible maps in a [[JSON Array]]
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: maps = getVisibleMapNames(&quot;json&quot;)]
&lt;/source&gt;
|also=
{{func|getCurrentMapName}} {{func|getAllMapNames}}

}}
[[Category:Map Function]]</text>
      <sha1>68f3sbb4b9ketphaoyiy7ih7o8g6tm8</sha1>
    </revision>
  </page>
  <page>
    <title>execLink</title>
    <ns>0</ns>
    <id>898</id>
    <revision>
      <id>3134</id>
      <parentid>3036</parentid>
      <timestamp>2009-04-15T23:55:48Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Made note about how deferred links are queued.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2140">{{MacroFunction
|name=execLink
|version=1.3b55
|trusted=true
|description=
Executes a macro link that was created with {{func|macroLinkText}}, output generated by the link is sent to players using the standard {{func|macroLinkText}} logic. {{func|execLink}} allows you to defer the running of the link until after the currently running macro has ended in which case the output will be displayed after any output generated by the current macro. If you defer a series of links, they will be queued in order and executed after the currently running macro. There is no software limit to the amount of links you can queue, but your hardware will impose its own limitations. If the execution of the link is not defered then any output generated will appear ''before'' any output generated by the current macro. 

You can use this function to update values in a token copied with {{func|copyToken}} using the defered option. You can also use this function to send output selectivly to a list of players from the current macro, or to generate output that is not suppressed when the {{func|abort}} function is called.

|usage=

&lt;source lang=&quot;mtmacro&quot; line&gt;
execLink(link)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
execLink(link, defer)
&lt;/source&gt;
'''Parameters'''
{{param|link|The link to &quot;execute&quot;.}}
{{param|defer|Executes the link after the current macro has completed if non zero, defaults to zero.}}

|examples=
Execute a macro link immediatly (any output wil appear before the current macros output)
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: link = macroLinkText(&quot;Test@Lib:Test&quot;, &quot;self&quot;)]
[h: execLink(link)]
&lt;/source&gt;

Execute a macro link after the execution of the current macro (any output will appear before the current macros output)
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: link = macroLinkText(&quot;Test@Lib:Test&quot;, &quot;self&quot;)]
[h: execLink(link, 1)]
&lt;/source&gt;

Copy a token and update its values.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: newToken = copyToken(&quot;Hero&quot;)]
[h: link = macroLinkText(&quot;update@Lib:GM&quot;, &quot;none&quot;, &quot;&quot;, newToken)]
[h: execLink(link)]
&lt;/source&gt;

|also=
{{func|macroLinkText}} {{func|macroLink}} {{func|copyToken}}

}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Craig</title>
    <ns>2</ns>
    <id>899</id>
    <revision>
      <id>5403</id>
      <parentid>3082</parentid>
      <timestamp>2011-02-05T23:29:00Z</timestamp>
      <contributor>
        <username>Craig</username>
        <id>2</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="954">This page is really boring, but you might be interested in the [http://labs.mozilla.com/2008/08/introducing-ubiquity/ mozilla ubiquity] script I created to support my general laziness.
 
You can find the script [http://gist.github.com/94275 here]

It offers the following commands

{{code|rptwiki}} ''topic''
    Provides a preview of the topic in the wiki and can open it in a new tab.

{{code|rptwiki-link-bb}} ''topic''
    Creates a bbcode url to the topic so you can easily post it to the rtpools forums.

It now also has the following commands thanks to  Verisimilar.


{{code|rptwiki-func}} ''function''
    Creates a bbcode url to the function so you can easily post it to the rtpools forums.

{{code|rptwiki-roll}} ''roll''
    Creates a bbcode url to the roll so you can easily post it to the rtpools forums.



As usual you should look at the code to make sure I am not doing anything you don't want me to do on your machine before installing.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>dialog</title>
    <ns>0</ns>
    <id>900</id>
    <redirect title="dialog (roll option)" />
    <revision>
      <id>3039</id>
      <timestamp>2009-04-13T17:03:15Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[dialog]] moved to [[dialog (roll option)]]: Not a standard function.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[dialog (roll option)]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>frame (roll option)</title>
    <ns>0</ns>
    <id>901</id>
    <revision>
      <id>5982</id>
      <parentid>5915</parentid>
      <timestamp>2012-07-04T12:29:51Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3325">{{RollOption
|name=frame
|description=
Opens a frame window.  Unlike the modeless {{roll|dialog}}, frames are dockable panels that are usually intended to remain open.  Frames can be closed with a button located in the title bar or via the [[closeDialog|closeDialog()]] macro function.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: frame(frameName [,&quot;width; height; temporary; title&quot;] )]
&lt;/source&gt;

The first parameter, shown as '''frameName''', should be a double-quoted string that specifies the internal name of the frame window.  The visible title that appears in the title bar of the window is set separately, either by using HTML that appears inside the frame itself or use of the '''title''' parameter from b50 forward.  Any attempts to open another frame with the same name instead cause the old contents to be removed and new contents displayed.  Note this behavior relates to the internal name of the frame, not the displayed title of the frame as multiple frames can share a title.  Once the named frame is opened and resized by the user, that size becomes its default opening size in the future, unless the temporary option is set to &quot;1&quot;.


The second parameter is optional, it is a semicolon separated [[String Property List]], which could include the following options:

The '''temporary''' option dictates whether Maptool remembers the size of the frame between displays.  Setting this value to 1 causes Maptool to forget the window size.  Example &quot;temporary=1&quot;

The '''title''' option sets the title of the frame and replaces the need to set the title from within the HTML code.

The '''width''' and '''height''' options determine the (initial) size of the frame. Depending whether '''temporary''' has been set or not the frame will always open with these dimensions.

It appears there may be a bug related macros on a library token that open a frame. Calls to the macro after closing the frame may not show the frame. This can be remedied by adding a line to the calling macro before running the library macro. Use the line below, substituting your own frame name.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[ if( isFrameVisible(&quot;YourFrame&quot;) ), code: {}; { [resetFrame(&quot;YourFrame&quot;)] } ]
&lt;/source&gt;
This checks if the bugged frame is visible or not. If the frame is open it does nothing, but if it is closed it resets the frame, which forces it to be shown.

|examples=
Sample header
&lt;source lang=&quot;mtmacro&quot; line&gt;
[frame(&quot;Frame Test&quot;, &quot;width=300; height=200; temporary=1;&quot;): {
&lt;/source&gt;

The following code opens up a frame that contains the HTML as shown here:
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;
[[Image:FrameDemo.png]]
&lt;/td&gt;
&lt;td&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[frame(&quot;Frame Test&quot;): {
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Test of Frame Windows&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;table border=&quot;1&quot;&gt;
    &lt;tr&gt;&lt;th&gt;Column 1&lt;/th&gt;&lt;th&gt;Column 2&lt;/th&gt;&lt;th&gt;Column 3&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Line 1, Col 1&lt;/td&gt;&lt;td colspan=&quot;2&quot;&gt;Line 1, Cols 2 and 3&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td rowspan=&quot;2&quot;&gt;Lines 2 and 3, Col 1&lt;/td&gt;&lt;td&gt;Line 2, Col 2&lt;/td&gt;&lt;td&gt;Line 2, Col 3&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Line 3, Col 3&lt;/td&gt;&lt;td&gt;Line 3, Col 3&lt;/td&gt;&lt;/tr&gt;
    &lt;/table&gt;
    &lt;/body&gt;
  &lt;/html&gt;
} ]
&lt;/source&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

|also=
{{roll|dialog}} &lt;br&gt;
{{func|isFrameVisible}} &lt;br&gt;
[[Introduction to Dialogs and Frames]]&lt;br&gt;
[[Forms tutorial]]
}}
[[Category:Display Roll Option]]
[[Category:Frame Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>moveTokenFrom</title>
    <ns>0</ns>
    <id>902</id>
    <redirect title="moveTokenFromMap" />
    <revision>
      <id>3045</id>
      <timestamp>2009-04-13T20:10:07Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[moveTokenFrom]] moved to [[moveTokenFromMap]]: Moved to correct name.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[moveTokenFromMap]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>roll</title>
    <ns>0</ns>
    <id>903</id>
    <revision>
      <id>5877</id>
      <parentid>5803</parentid>
      <timestamp>2012-02-16T20:04:47Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Typographical tweaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1905">{{MacroFunction
|name=roll
|description=
Generates random numbers to emulate dice rolls. You may also think of this function as a method of generating a random number between {{code|times}} and {{code|times*sides}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
roll(times, sides)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
dice(times, sides)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
d(times, sides)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}
{{param|sides|The number of sides the dice possess.}}

'''Note:'''

The roll function does not keep track of the individual dice rolled. In other words their results are lost, just the total is kept. How to roll dice when individual dice matter is shown in the examples.


|examples=

'''Roll a twenty-sided dice'''

&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: roll(1, 20)]
&lt;/source&gt;
Returns a number that is between {{code|1}} and {{code|20}}.


'''Roll five ten-sided dice, using variables'''

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 5]
[h: DiceSides = 10]
[t: roll(DiceTimes, DiceSides)]
&lt;/source&gt;
Returns a number than is between {{code|5}} and {{code|50}}.


'''Throw multiple dice'''

...and sort and sum the result. Note that roll() doesnt help with this. You have to roll individual dice and keep track yourself. Gladly MapTool does help with loops and listkeeping functions. 

&lt;source lang=&quot;mtmacro&quot;&gt;
[h: diceTimes = 5]
[h: diceSides = 6]
[h: listOfRolls = &quot;&quot;]
[h: sum = 0]
[h, count(diceTimes), code: {
    [h: r = roll(1, diceSides)]
    [h: sum = sum+r]
    [h: listOfRolls = listAppend(listOfRolls, r)]
}]
You rolled [r: listSort(listOfRolls, &quot;N-&quot;)] = [r: sum].
&lt;/source&gt;
Rolls 5 times a d6 and returns these as sorted list as well as the total.

: '''See also''' {{roll|count}}, {{func|listAppend}} and {{func|listSort}}.
&amp;nbsp;

|also=
For another method of rolling dice, see [[Dice Expressions]].

}}

[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Dice Function</title>
    <ns>14</ns>
    <id>904</id>
    <revision>
      <id>3061</id>
      <timestamp>2009-04-14T14:16:48Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to Macro Function category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>dice</title>
    <ns>0</ns>
    <id>905</id>
    <redirect title="roll" />
    <revision>
      <id>3063</id>
      <parentid>3062</parentid>
      <timestamp>2009-04-14T14:18:27Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[roll]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="73">#REDIRECT [[roll]]
[[Category:Macro Function]]
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>d</title>
    <ns>0</ns>
    <id>906</id>
    <redirect title="roll" />
    <revision>
      <id>3064</id>
      <timestamp>2009-04-14T14:19:19Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirect to roll()</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="73">#REDIRECT [[roll]]
[[Category:Macro Function]]
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>countsuccess</title>
    <ns>0</ns>
    <id>907</id>
    <revision>
      <id>3070</id>
      <parentid>3065</parentid>
      <timestamp>2009-04-14T15:07:11Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Correction to examples.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1288">{{MacroFunction
|name=countsuccess
|description=
Generates random numbers to emulate dice rolls; returns the count of dice rolls that are above a certain target number.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
countsuccess(times, sides, target)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
success(times, sides, target)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}
{{param|sides|The number of sides the dice possess.}}
{{param|target|The number that a dice needs to be equal to or higher to be considered a success.}}

|examples=
Roll twenty ten-sided dice, and return the number that are above five.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: countsuccess(20, 10, 5)]
&lt;/source&gt;
Returns a number that is between {{code|0}} and {{code|20}}, which is the number of dice that rolled higher than {{code|5}}.

Roll twelve six-sided dice, and return the number that are above three, using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 12]
[h: DiceSides = 6]
[h: DiceSuccess = 3]
[t: countsuccess(DiceTimes, DiceSides, DiceSuccess)]
&lt;/source&gt;
Returns a number than is between {{code|0}} and {{code|12}}, which is the number of dice that rolled higher than {{code|3}}.

|also=
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>success</title>
    <ns>0</ns>
    <id>908</id>
    <redirect title="countsuccess" />
    <revision>
      <id>3066</id>
      <timestamp>2009-04-14T14:31:25Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirect to countsuccess()</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="81">#REDIRECT [[countsuccess]]
[[Category:Macro Function]]
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>drop</title>
    <ns>0</ns>
    <id>909</id>
    <revision>
      <id>3067</id>
      <timestamp>2009-04-14T14:44:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1077">{{MacroFunction
|name=drop
|description=
Generates random numbers to emulate dice rolls; returns the total of a dice roll that ignores a certain number of the lowest dice rolled.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
drop(times, sides, ignore)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}
{{param|sides|The number of sides the dice possess.}}
{{param|ignore|The number of lowest rolls that are ignored when totaling the roll.}}

|examples=
Roll ten twenty-sided dice, ignoring the lowest five rolls.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: drop(10, 20, 5)]
&lt;/source&gt;
Returns a number that is between {{code|5}} and {{code|100}}, with a high average.

Roll five ten-sided dice ignoring the lowest two rolls, using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 5]
[h: DiceSides = 10]
[h: DiceIgnore = 2]
[t: drop(DiceTimes, DiceSides, DiceIgnore)]
&lt;/source&gt;
Returns a number than is between {{code|3}} and {{code|30}}, with a high average.

|also=
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>explode</title>
    <ns>0</ns>
    <id>910</id>
    <revision>
      <id>3069</id>
      <parentid>3068</parentid>
      <timestamp>2009-04-14T14:53:19Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1238">{{MacroFunction
|name=explode
|description=
Generates random numbers to emulate dice rolls; returns the total of a dice roll where dice that are rolled at maximum value are rolled again with the new roll added to the old. There is no limit to the total that that can be returned by this function, but the odds of each individual number decreases as the total increases past the number of {{code|sides}}. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
explode(times, sides)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}
{{param|sides|The number of sides the dice possess.}}

|examples=
Roll a twenty-sided dice.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: explode(1, 20)]
&lt;/source&gt;
Returns a number that is usually between {{code|1}} and {{code|20}}, with the possibility of the maximum value being higher than {{code|20}}.

Roll five ten-sided dice, using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 5]
[h: DiceSides = 10]
[t: explode(DiceTimes, DiceSides)]
&lt;/source&gt;
Returns a number than is usually between {{code|5}} and {{code|50}}, with the possibility of the maximum value being higher than {{code|50}}.

|also=
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>explodingSuccess</title>
    <ns>0</ns>
    <id>911</id>
    <revision>
      <id>3071</id>
      <timestamp>2009-04-14T15:08:35Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1595">{{MacroFunction
|name=explodingSuccess
|description=
Generates random numbers to emulate dice rolls; returns the count of dice rolls that are above a certain number, while each individual dice rolled at maximum value will be rerolled with the new roll added to the old. There is no limit to the number of time that that an individual dice rolled can be rerolled by this function, but the odds of each individual number decreases as the total increases past the number of sides.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
explodingSuccess(times, sides, target)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}
{{param|sides|The number of sides the dice possess.}}
{{param|target|The number that a dice needs to be equal to or higher to be considered a success(added to the count returned).}}

|examples=
Roll a twenty-sided dice, and returns {{code|1}} if rolled higher than {{code|30}}.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: explodingSuccess(1, 20, 30)]
&lt;/source&gt;
Returns {{code|0}} or {{code|1}}; {{code|1}} is only returned if the twenty-sided dice rolls {{code|20}} and then is rerolled(exploded) with a result equal to or higher than {{code|10}}.

Roll five ten-sided dice, and returns the number of dice that rolled higher than twenty, using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 5]
[h: DiceSides = 10]
[h: DiceTarget = 20]
[t: explodingSuccess(DiceTimes, DiceSides, DiceTarget)]
&lt;/source&gt;
Returns a number than is between {{code|0}} and {{code|5}}.

|also=
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>fudge</title>
    <ns>0</ns>
    <id>912</id>
    <revision>
      <id>3075</id>
      <parentid>3073</parentid>
      <timestamp>2009-04-14T16:54:48Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added shorthand usage.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="919">{{MacroFunction
|name=fudge
|description=
Generates random numbers to emulate dice rolls; returns the total of a special Fudge dice roll. When these dice are rolled, the result is {{code|-1}}, {{code|0}}, or {{code|1}}, this function then sums up all of the dice rolled and returns that sum.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
fudge(times)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
f(times)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}

|examples=
Roll ten special Fudge dice.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: fudge(10)]
&lt;/source&gt;
Returns a number that is between {{code|-10}} and {{code|10}}.

Roll five special Fudge dice, using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 5]
[t: fudge(DiceTimes)]
&lt;/source&gt;
Returns a number than is between {{code|-5}} and {{code|5}}.

|also=
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>f</title>
    <ns>0</ns>
    <id>913</id>
    <redirect title="fudge" />
    <revision>
      <id>3074</id>
      <timestamp>2009-04-14T16:54:18Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[fudge]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="74">#REDIRECT [[fudge]]
[[Category:Macro Function]]
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>herostun</title>
    <ns>0</ns>
    <id>914</id>
    <revision>
      <id>3076</id>
      <timestamp>2009-04-14T17:10:41Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1608">{{MacroFunction
|name=herostun
|description=
Generates random numbers to emulate dice rolls; acts like a standard {{func|roll}} with the difference being that a hidden variable is tracked, which can then be returned using {{func|herobody}}. This hidden variable is calculated by adding {{code|2}} for each dice that is rolled at maximum value, {{code|0}} for each dice that is rolled at minimum value, and {{code|1}} for each dice that is rolled at neither minimum, nor maximum value. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
herostun(times, sides)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
hero(times, sides)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}
{{param|sides|The number of sides the dice possess.}}

|examples=
Roll a twenty-sided dice, and return the {{func|herobody}} result as well.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: herostun(1, 20)] - [t: herobody(1, 20)
&lt;/source&gt;
Returns a number that is between {{code|1}} and {{code|20}} for the herostun roll, and a number between {{code|0}} and {{code|2}} for the herobody roll.

Roll five ten-sided dice, and return the {{func|herobody}} result as well, using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 5]
[h: DiceSides = 10]
[t: herostun(DiceTimes, DiceSides)] - [t: herobody(DiceTimes, DiceSides)]
&lt;/source&gt;
Returns a number than is between {{code|5}} and {{code|50}} for the herostun roll, and a number between {{code|0}} and {{code|10}} for the herobody roll.

|also=
Used in conjunction with {{func|herobody}}&lt;br&gt;
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>hero</title>
    <ns>0</ns>
    <id>915</id>
    <redirect title="herostun" />
    <revision>
      <id>3077</id>
      <timestamp>2009-04-14T17:11:27Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[herostun]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="77">#REDIRECT [[herostun]]
[[Category:Macro Function]]
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>herobody</title>
    <ns>0</ns>
    <id>916</id>
    <revision>
      <id>3079</id>
      <timestamp>2009-04-14T17:19:42Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1560">{{MacroFunction
|name=herobody
|description=
Generates random numbers to emulate dice rolls; this is the partner function to {{func|herostun}}. The parameters used when calling this function must be exactly the same as the parameters used when calling {{func|herostun}}, and it must be called during the same macro as {{func|herostun}} or an error will result. Refer to {{func|herostun}} for full usage details.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
herobody(times, sides)
&lt;/source&gt;
'''Parameters'''
{{param|times|The same {{code|times}} parameter that was used when calling {{func|herostun}}.}}
{{param|sides|The same {{code|sides}} parameter that was used when calling {{func|herostun}}.}}

|examples=
Roll a twenty-sided dice, and return the {{func|herobody}} result as well.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: herostun(1, 20)] - [t: herobody(1, 20)
&lt;/source&gt;
Returns a number that is between {{code|1}} and {{code|20}} for the herostun roll, and a number between {{code|0}} and {{code|2}} for the herobody roll.

Roll five ten-sided dice, and return the {{func|herobody}} result as well, using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 5]
[h: DiceSides = 10]
[t: herostun(DiceTimes, DiceSides)] - [t: herobody(DiceTimes, DiceSides)]
&lt;/source&gt;
Returns a number than is between {{code|5}} and {{code|50}} for the herostun roll, and a number between {{code|0}} and {{code|10}} for the herobody roll.

|also=
Used in conjunction with {{func|herostun}}&lt;br&gt;
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>keep</title>
    <ns>0</ns>
    <id>917</id>
    <revision>
      <id>4139</id>
      <parentid>3080</parentid>
      <timestamp>2010-02-05T23:41:10Z</timestamp>
      <contributor>
        <username>Bubblobill</username>
        <id>150</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1075">{{MacroFunction
|name=keep
|description=
Generates random numbers to emulate dice rolls; returns the total of a dice roll only counting a specified number of the highest rolls.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
keep(times, sides, highDice)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}
{{param|sides|The number of sides the dice possess.}}
{{param|highDice|The number of highest dice that should be kept, the rest are discarded.}}

|examples=
Roll five ten-sided dice, keeping the two highest rolls.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: keep(5, 10, 2)]
&lt;/source&gt;
Returns a number than is between {{code|2}} and {{code|20}}, with a high average.

Roll five ten-sided dice, keeping the two highest rolls, using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 5]
[h: DiceSides = 10]
[h: DiceKeep = 2]
[t: keep(DiceTimes, DiceSides, DiceKeep)]
&lt;/source&gt;
Returns a number than is between {{code|2}} and {{code|20}}, with a high average.

|also=
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>openTest</title>
    <ns>0</ns>
    <id>918</id>
    <revision>
      <id>7326</id>
      <parentid>6031</parentid>
      <timestamp>2019-03-27T14:39:52Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1030">{{stub|Better explanation, perhaps examples on how to strip out the dice rolls from the string that is returned.}}
{{MacroFunction
|name=openTest
|description=
Rolls a number of dice of requested side with exploding rolls and returns a formatted string containing the result of each roll and the highest value produced.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
openTest(times, sides)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}
{{param|sides|The number of sides the dice possess.}}

|examples=
Roll five ten-sided dice.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: openTest(5, 10)]
&lt;/source&gt;
Returns a string that is similar to {{code|Dice: 5, 4, 19, 6, 3, Maximum: 19}}

Roll five ten-sided dice, using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 5]
[h: DiceSides = 10]
[t: openTest(DiceTimes, DiceSides)]
&lt;/source&gt;
Returns a string that is similar to {{code|Dice: 5, 4, 19, 6, 3, Maximum: 19}}

|also=
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1>95phggvbua5qg1gjax5548nnbagq9ia</sha1>
    </revision>
  </page>
  <page>
    <title>reroll</title>
    <ns>0</ns>
    <id>919</id>
    <revision>
      <id>3083</id>
      <timestamp>2009-04-14T18:02:01Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1174">{{MacroFunction
|name=reroll
|description=
Generates random numbers to emulate dice rolls; returns a dice roll similar to {{func|roll}} with the difference being that each dice rolled that is lower than the {{code|minimum}} parameter is rerolled until it is at least the {{code|minimum}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
reroll(times, sides, minimum)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}
{{param|sides|The number of sides the dice possess.}}
{{param|minimum|The lowest number a dice rolled can return without being rerolled.}}

|examples=
Roll five ten-sided dice, rerolling any dice rolled lower than five.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: reroll(5, 10, 5)]
&lt;/source&gt;
Returns a number that is between {{code|25}} and {{code|50}}.

Roll five ten-sided dice, rerolling any dice rolled lower than five, using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 5]
[h: DiceSides = 10]
[h: DiceMinimum = 5]
[t: roll(DiceTimes, DiceSides, DiceMinimum)]
&lt;/source&gt;
Returns a number than is between {{code|25}} and {{code|50}}.

|also=
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>ubiquity</title>
    <ns>0</ns>
    <id>920</id>
    <revision>
      <id>3084</id>
      <timestamp>2009-04-14T18:06:14Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="923">{{MacroFunction
|name=ubiquity
|description=
Generates random numbers to emulate dice rolls; returns the total of a special Ubiquity dice roll. When these dice are rolled, the result is {{code|0}} or {{code|1}}, this function then sums up all of the dice rolled and returns that sum.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
ubiquity(times)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
u(times)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}

|examples=
Roll ten special Ubiquity dice.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[t: ubiquity(10)]
&lt;/source&gt;
Returns a number that is between {{code|0}} and {{code|10}}.

Roll five special Ubiquity dice, using variables.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: DiceTimes = 5]
[t: ubiquity(DiceTimes)]
&lt;/source&gt;
Returns a number than is between {{code|0}} and {{code|5}}.

|also=
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>u</title>
    <ns>0</ns>
    <id>921</id>
    <redirect title="ubiquity" />
    <revision>
      <id>3085</id>
      <timestamp>2009-04-14T18:07:02Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[ubiquity]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="77">#REDIRECT [[ubiquity]]
[[Category:Macro Function]]
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>sr4</title>
    <ns>0</ns>
    <id>922</id>
    <revision>
      <id>3087</id>
      <timestamp>2009-04-14T18:28:30Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="704">{{stub|Better explanation, examples of usage.}}
{{MacroFunction
|name=sr4
|description=
Generates random numbers to emulate dice rolls; the dice are rolled mimicking the dice procedure of Shadowrun 4th Edition.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
sr4(times)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
sr4(times, gremlins)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}
{{param|gremlins|This number is subtracted from {{code|times}} when {{code|times}} is used to determine how many Ones are required for a Glitch or Critical Glitch, defaults to {{code|0}}.}}

|examples=


|also=
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>sr4e</title>
    <ns>0</ns>
    <id>923</id>
    <revision>
      <id>3088</id>
      <timestamp>2009-04-14T18:31:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="722">{{stub|Better explanation, examples of usage.}}
{{MacroFunction
|name=sr4e
|description=
Generates random numbers to emulate dice rolls; the dice are rolled mimicking the dice procedure of Shadowrun 4th Edition exploded rolls.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
sr4e(times)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
sr4e(times, gremlins)
&lt;/source&gt;
'''Parameters'''
{{param|times|The number of times to roll the dice.}}
{{param|gremlins|This number is subtracted from {{code|times}} when {{code|times}} is used to determine how many Ones are required for a Glitch or Critical Glitch, defaults to {{code|0}}.}}

|examples=


|also=
For another method of rolling dice, see [[Dice Expressions]].

}}
[[Category:Dice Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>resetFrame</title>
    <ns>0</ns>
    <id>924</id>
    <revision>
      <id>3089</id>
      <timestamp>2009-04-14T18:35:44Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Initial write-up.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="357">{{stub}}
{{MacroFunction
|name=resetFrame
|description=
Resets a frame to its default position.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
resetFrame(frame)
&lt;/source&gt;
'''Parameter'''
{{param|frame|A string containing the name of the frame that has its position reset.}}

|examples=

|also=
{{roll|frame}}, 
{{func|isFrameVisible}}

}}
[[Category:Frame Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>oldFunction</title>
    <ns>0</ns>
    <id>925</id>
    <revision>
      <id>3158</id>
      <parentid>3150</parentid>
      <timestamp>2009-04-17T01:35:48Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1596">{{MacroFunction
|name=oldFunction
|version=1.3b51
|description=
If a user-defined function redefines a standard MapTool function or another user-defined function -- for instance, a user defines a function called {{code|eval()}}, redefining the standard MapTool {{func|eval}} -- {{func|oldFunction}} can be used in the user-defined function to call the original function. When a user-defined function redefines an existing function, it keeps track of the function that it redefined. Due to this tracking, it is possible to redefine a function multiple times and {{func|oldFunction}} will always reference the previous function in the chain.

'''Note:''' Do not rely on a specific order in the function chain unless you are sure that the functions will be redefined in that order. Calls to {{func|defineFunction}} within [[onCampaignLoad]] macros on different [[Library Token]]s are not executed in any standard order.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
oldFunction(SPECIAL)
&lt;/source&gt;
'''Parameter'''
{{param|SPECIAL|oldFunction supports the same parameters as the function that it is referencing.}}

|example=
Within a user-defined function named {{code|eval()}}, {{func|oldFunction}} is used to call the standard MapTool {{func|eval}} function.
&lt;source lang=&quot;mtmacro&quot;&gt;
[h, if ( arg(0) == 0 ), code:
{
    [h: macro.return = 0]
};{
    [h: macro.return = oldFunction( arg(0) ) ]
}]
&lt;/source&gt;
By having access to the original function definition, this example is able to provide custom or standard return values when called.

|also=
{{func|defineFunction}}

}}
[[Category:User Defined Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:User Defined Function</title>
    <ns>14</ns>
    <id>926</id>
    <revision>
      <id>3091</id>
      <timestamp>2009-04-14T18:45:00Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>New page: [[Category:Macro Function]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Wiki</title>
    <ns>0</ns>
    <id>927</id>
    <redirect title="Main Page" />
    <revision>
      <id>3100</id>
      <timestamp>2009-04-15T00:45:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Dummy link. Redirecting to [[Main Page]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[Main Page]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>RPTools Wiki</title>
    <ns>0</ns>
    <id>928</id>
    <redirect title="Main Page" />
    <revision>
      <id>3101</id>
      <timestamp>2009-04-15T00:46:16Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>Dummy link. Redirecting to [[Main Page]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[Main Page]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Special Macro</title>
    <ns>14</ns>
    <id>929</id>
    <revision>
      <id>3116</id>
      <timestamp>2009-04-15T03:48:13Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>New page: [[Category:Macro]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">[[Category:Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:Beginner</title>
    <ns>10</ns>
    <id>930</id>
    <revision>
      <id>7099</id>
      <parentid>3273</parentid>
      <timestamp>2019-02-20T04:59:54Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="482">&lt;div class=&quot;template_beginner&quot; style=&quot;float: right; width: 175px; text-align: center; background-color: #D4E5B8; border: 5px solid #82B336; color: #49661F;&quot;&gt;
&lt;span style=&quot;font-weight: bold; font-size: larger;&quot;&gt;{{Translate|BEGINNER|fr=Débutant}}&lt;/span&gt;
&lt;br /&gt;
&lt;span style=&quot;font-size: xx-small;&quot;&gt;{{Translate|THIS IS A BEGINNER ARTICLE|fr=Ceci est un article pour Débutant}}&lt;/span&gt;
&lt;/div&gt;
&lt;includeonly&gt;[[Category:Beginner]]&lt;/includeonly&gt;
&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1>qow53rnktsf589xtwl9vq04gruorv19</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Intermediate</title>
    <ns>10</ns>
    <id>931</id>
    <revision>
      <id>7102</id>
      <parentid>3186</parentid>
      <timestamp>2019-02-20T05:02:29Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="420">&lt;div class=&quot;template_intermediate&quot; style=&quot;float: right; width: 175px; text-align: center; background-color: #E5D8B8; border: 5px solid #B38E36; color: #66511F;&quot;&gt;
&lt;span style=&quot;font-weight: bold; font-size: larger;&quot;&gt;INTERMEDIATE&lt;/span&gt;
&lt;br /&gt;
&lt;span style=&quot;font-size: xx-small;&quot;&gt;THIS IS AN INTERMEDIATE ARTICLE&lt;/span&gt;
&lt;/div&gt;
&lt;includeonly&gt;[[Category:Intermediate]]&lt;/includeonly&gt;
&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1>osdcizfns6m5k1eii55o0fupajyyef9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Advanced</title>
    <ns>10</ns>
    <id>932</id>
    <revision>
      <id>7116</id>
      <parentid>7098</parentid>
      <timestamp>2019-02-20T06:15:02Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="398">&lt;div class=&quot;template_advanced&quot; style=&quot;float: right; width: 175px; text-align: center; background-color: #E5B8B8; border: 5px solid #B33636; color: #661F1F;&quot;&gt;&lt;span style=&quot;font-weight: bold; font-size: larger;&quot;&gt;ADVANCED&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;THIS IS AN ADVANCED ARTICLE&lt;/span&gt;&lt;/div&gt;&lt;includeonly&gt;[[Category:Advanced]]&lt;/includeonly&gt;&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1>jo4h8d94q3ay9afh6t3c7bpn48ukw6s</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Advanced</title>
    <ns>14</ns>
    <id>933</id>
    <revision>
      <id>3126</id>
      <timestamp>2009-04-15T05:11:36Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>New page: Articles that are marked as Advanced.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">Articles that are marked as Advanced.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Beginner</title>
    <ns>14</ns>
    <id>934</id>
    <revision>
      <id>3128</id>
      <timestamp>2009-04-15T05:14:04Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>New page: A list of articles marked as Beginner.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">A list of articles marked as Beginner.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>MediaWiki:Sidebar</title>
    <ns>8</ns>
    <id>935</id>
    <revision>
      <id>3137</id>
      <timestamp>2009-04-16T02:44:44Z</timestamp>
      <contributor>
        <username>WikiSysop</username>
        <id>1</id>
      </contributor>
      <comment>Update of side bar from Verisimilar</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="498">* navigation
** mainpage|mainpage-description
** randompage-url|randompage
** helppage|help
* Basic Usage
** Category:Tutorial|Tutorials
** Chat Commands|Chat Commands
** Dice Expressions|Dice Expressions
** Glossary|Glossary

* Macro Reference
** Category:Macro Function|List of Functions
** Category:Roll Option|Roll Options
** Category:Special Variable|Special Variables
** Category:Cookbook|Macro Cookbook

* Editors
** Editor|Editor Discussion
** Special:Recentchanges|Recent Changes
* TOOLBOX</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Queued Conditional Output</title>
    <ns>0</ns>
    <id>936</id>
    <revision>
      <id>3641</id>
      <parentid>3640</parentid>
      <timestamp>2009-07-07T14:58:38Z</timestamp>
      <contributor>
        <username>Biodude</username>
        <id>51</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1925">{{TrustedFunction}}
''' ''Requires MapTool 1.3b55'' '''&lt;br&gt;
The following is a user defined function that allows you to queue output to various recipients. All of the queued output is then displayed to the intended recipient/s after the completion of the current macro.

===Usage===
&lt;source lang=&quot;mtmacro&quot; line&gt;
outputTo(who, what)
&lt;/source&gt;
'''Parameters:'''
{{param|who|Expects a string containing the recipient/s; this string can be {{code|'self'}}, {{code|'gm'}}, {{code|'gm-self'}}, or a JSON array of player names(e.g. {{code|'[&quot;Bob&quot;,&quot;Joe&quot;]')}}.}}
{{param|what|Expects a string that contains the output; it is sent to the recipient as plain text, so HTML code works as intended.}}

===Notes===
* When sending to a specific list of recipients, the output comes across as a whisper; that's just the way it is.
* Currently there is no error checking, if you want/need error checking, it shouldn't be hard to implement.
* There is theoretically no limit to the amount of outputs you can queue, but like any software your hardware will impose its own limits.

===Macros===
Place the following macros all on the same library token(or on different library tokens if you know what you're doing and what to change).
&lt;hr&gt;'''onCampaignLoad'''
&lt;source lang=&quot;mtmacro&quot;&gt;
[defineFunction('outputTo', 'outputTo@this')]
&lt;/source&gt;
&lt;hr&gt;&lt;br&gt;
&lt;hr&gt;'''outputTo'''
&lt;source lang=&quot;mtmacro&quot;&gt;
[h: toSend = '{}']
[h: argTest = json.type(arg(0))]
[h, if(argTest=='ARRAY'), code:
{
    [h: toWho = 'list']
    [h: toSend = json.set(toSend, 'mlOutputList', arg(0))]
};{
    [h: toWho = arg(0)]
}]
[h: toSend = json.set(toSend, 'toSend', arg(1))]
[h: conditionalOutput = macroLinkText('conditionalOutput@this', toWho, toSend)]
[h: execLink(conditionalOutput, 1)]
&lt;/source&gt;
&lt;hr&gt;&lt;br&gt;
&lt;hr&gt;'''conditionalOutput'''
&lt;source lang=&quot;mtmacro&quot;&gt;
[r: json.get(macro.args, 'toSend')]
&lt;/source&gt;
&lt;hr&gt;
===See Also===
[[macroLinkText]],
[[execLink]]
[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Custom Robust eval Function</title>
    <ns>0</ns>
    <id>937</id>
    <revision>
      <id>3518</id>
      <parentid>3517</parentid>
      <timestamp>2009-06-17T21:24:00Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1369">{{TrustedFunction}}
This user defined function redefines the standard {{func|eval}} function, allowing it to be given a number, empty string, or JSON object/array and not throw an exception.

===Macros===
Place both of these macros on the same library token.

'''1.3b56+'''

&lt;hr&gt;'''onCampaignLoad'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[ defineFunction( &quot;eval&quot;, &quot;evalFunction@this&quot;, 1, 0 ) ]
&lt;/source&gt;
&lt;hr&gt;&lt;br&gt;
&lt;hr&gt;'''evalFunction'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
//  Error handling
[ assert( argCount() &gt;= 1, &quot;&lt;b&gt;eval()&lt;/b&gt; - Invalid number of parameters &lt;i&gt;0&lt;/i&gt;,
                            expected at least &lt;i&gt;1&lt;/i&gt; parameter.&quot;, 0 ) ]

//  Initialise variables
[ X_Expression_X = arg( argCount()-1 ) ]
[ X_CancelEval_X = 0 ]
[ X_TypeTest_X = json.type( X_Expression_X ) ]

//  Handle all numbers
[ if( isNumber( X_Expression_X ) == 1 ), code:
{
   [ X_CancelEval_X = 1 ]
} ]

//  Handle empty strings
[ if( X_TypeTest_X == &quot;UNKNOWN&quot; ), code:
{
    [ if( X_Expression_X == &quot;&quot; ), code:
    {
        [ X_CancelEval_X = 1 ]
    } ]
} ]

//  Handle JSON types
[ if( X_TypeTest_X == &quot;ARRAY&quot; || X_TypeTest_X == &quot;OBJECT&quot; ), code:
{
    [ X_CancelEval_X = 1 ]
} ]

//  Evaluate or cancel, then return
[ if( X_CancelEval_X == 1 ), code:
{
    [ macro.return = X_Expression_X ]
};{
    [ macro.return = oldFunction( X_Expression_X ) ]
} ] 

&lt;/source&gt;
&lt;hr&gt;
&lt;br&gt;
[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Generate Variables From JSON</title>
    <ns>0</ns>
    <id>938</id>
    <revision>
      <id>3145</id>
      <parentid>3144</parentid>
      <timestamp>2009-04-16T11:43:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Removed line numbers for easier copy/paste, and redundant heading</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1070">When working with string properties, the {{func|varsFromStrProp}} function is an automated way to generate variables from the keys within a string property. For example, if you have the following string property:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[prop = &quot;name=Axe; damage=1d12; proficiency=2;&quot;]
&lt;/source&gt;

You can use {{func|varsFromStrProp}} to generate a variable for each key - in other words, using the function to generate a list of locally accessible variables {{code|name}}, {{code|damage}}, and {{code|proficiency}}. 

There is no equivalent function for JSON objects. However, the following routine can be inserted into any macro to efficiently generate the variables in question.

&lt;hr&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:varList=json.fields(testObj)]

[h,foreach(var,varList),CODE:
{
     [value = json.get(testObj,var)]
     [set(var,value)]
}]
&lt;/source&gt;
&lt;hr&gt;

The variable {{code|testObj}} represents the JSON object that is fed into the routine. The variables generated will be available within the scope of the running macro (but not outside). 

[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:Languages</title>
    <ns>10</ns>
    <id>939</id>
    <revision>
      <id>7103</id>
      <parentid>3511</parentid>
      <timestamp>2019-02-20T05:03:30Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="796">&lt;div class =&quot;template_languages&quot; style=&quot;clear: both;&quot;&gt;
&lt;p style=&quot;background: #D4E5B8; margin-top:0.5em; border: 1px solid #49661f; font-size: 85%;&quot;&gt;
&lt;span style=&quot;border-right: 1px solid #49661f; background: #BBCCA3;  margin:0em; padding: 0.25em 0.7em 0.25em 0.7em;&quot;&gt;'''Languages:'''&amp;nbsp;&lt;/span&gt;
&lt;span style=&quot;padding: 0 0 0 0.7em;&quot;&gt;'''[[{{{1|:{{NAMESPACE}}:{{BASEPAGENAME}}}}}|English]]'''
{{Languages/Lang|ar|{{{1|}}}}}
{{Languages/Lang|de|{{{1|}}}}}
{{Languages/Lang|el|{{{1|}}}}}
{{Languages/Lang|es|{{{1|}}}}}
{{Languages/Lang|fr|{{{1|}}}}}
{{Languages/Lang|it|{{{1|}}}}}
{{Languages/Lang|ja|{{{1|}}}}}
{{Languages/Lang|ko|{{{1|}}}}}
{{Languages/Lang|pt|{{{1|}}}}}
{{Languages/Lang|ru|{{{1|}}}}}
{{Languages/Lang|zh|{{{1|}}}}}
&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1>5lw6ljln3m0shwv16eh0xydliwds7s4</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Languages/Lang</title>
    <ns>10</ns>
    <id>940</id>
    <revision>
      <id>3187</id>
      <parentid>3160</parentid>
      <timestamp>2009-04-17T16:11:47Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Added to templates category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="341">{{#ifexist: {{#if: {{{2|}}} | {{{2}}} | {{#if: {{NAMESPACE}} | {{NAMESPACE}}:}}{{BASEPAGENAME}}}}/{{{1}}} | &amp;nbsp;&amp;bull;&amp;nbsp;&lt;span lang=&quot;{{{1}}}&quot;&gt;{{#if: {{{2|}}}|[[{{{2}}}/{{{1}}}|{{#language:{{{1}}}}}]]| [[:{{NAMESPACE}}:{{BASEPAGENAME}}/{{{1}}}|{{#language:{{{1}}}}}]]}}&lt;/span&gt;|&lt;span&gt;&lt;/span&gt;}}&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Editor:Translation</title>
    <ns>0</ns>
    <id>941</id>
    <revision>
      <id>3851</id>
      <parentid>3850</parentid>
      <timestamp>2009-09-08T14:16:52Z</timestamp>
      <contributor>
        <username>Gginc</username>
        <id>94</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3640">{{Languages|Editor:Translation}}
__TOC__

==Steps for Translating an Article==
Since this should be the first page that you translate, the following steps will use this page as an example. Every occurrence of {{code|Editor:Translation}} should be replaced with the name of the page you are translating. After you have completed the translation of this page, you should be comfortable translating any page on the wiki.
# Edit the existing page and add {{code|&lt;nowiki&gt;{{Languages|Editor:Translation}}&lt;/nowiki&gt;}} at the very bottom, if it does not already exist. Remember that {{code|Editor:Translation}} should be changed to the name of the page you are translating.
# Copy the content of the English translation to your clipboard to use as a starting point for your translation.
# Save your changes to the English translation, if you made any. If you did not make any changes, simply cancel the edit.
# To begin your translation, you must enter the URL of the English translation into your browsers address bar, and then append {{code|/fr}} to the end. In our example, the final URL would be {{code|&lt;nowiki&gt;http://lmwcs.com/rptools/wiki/Editor:Translation/fr&lt;/nowiki&gt;}} . {{code|/fr}} in this case is the french language code, you can find your appropriate language code in the table at the bottom of this article.
# Your translated page should reasonably maintain the same format and layout as the existing English translation, where possible. There are a couple exceptions, however. The overall source of your translated article should look like this:
&lt;pre&gt;
{{Languages|Page Name}}{{Translation}}
__TOC__
YOUR TRANSLATED PAGE HERE
{{Languages|Page Name}}
&lt;/pre&gt;

==System Messages to Translate==
The use of {{code|@}} is to show where a variable element is used. Keep the numbering intact or there is a good possibility the messages will be shown in the wrong areas.
# The following article is a translation of the English article.
# The following article is an outdated translation of the English article.
# Navigation
# Basic Usage
# Tutorials
# Chat Commands
# Dice Expressions
# Glossary
# Macro Reference
# List of Functions
# Roll Options
# Special Variables
# Macro Cookbook
# Editors
# Editor Discussion
# Recent Changes
# Beginner
# This is a beginner article
# Intermediate
# This is an intermediate article
# Advanced
# This is an advanced article
# Note: This function has been deprecated. Refer to @ for current functionality.
# @ Function
# Introduced in version @
# Last checked for compatibility with version @
# Usage
# Example
# Examples
# See Also
# Version Changes
# Note: This article refers to a proposed change that has not been implemented in the main code base yet.
# @ Roll Option
# Note: This function can only be used in a Trusted Macro
# Note: This parameter can only be used in a Trusted Macro
# This article us a stub, you can help the RPTools Wiki project by contributing content to expand this article.
# This article needs:

==Language Codes==
If you're interested in translating articles on this wiki to a language that is not listed below, let us know!
{| border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
! Page Name || Language 
|-
|  || English
|-
| '''/ar''' || {{#language:ar}}
|-
| '''/de''' || {{#language:de}}
|-
| '''/el''' || {{#language:el}}
|-
| '''/es''' || {{#language:es}}
|-
| '''/fr''' || {{#language:fr}}
|-
| '''/it''' || {{#language:it}}
|-
| '''/ja''' || {{#language:ja}}
|-
| '''/ko''' || {{#language:ko}}
|-
| '''/pt''' || {{#language:pt}}
|-
| '''/ru''' || {{#language:ru}}
|-
| '''/zh''' || {{#language:zh}}
|}
{{DISPLAYTITLE:Translation Instructions}}
{{Languages|Editor:Translation}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Editor:Translation/fr</title>
    <ns>0</ns>
    <id>942</id>
    <revision>
      <id>3443</id>
      <parentid>3442</parentid>
      <timestamp>2009-06-12T19:44:12Z</timestamp>
      <contributor>
        <username>Thallaxwish</username>
        <id>70</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5038">{{Languages|Editor:Translation}}
==Étapes pour traduire un article==
Les étapes suivantes ont été utilisées sur cette page à l'origine en anglais pour vous servir d'exemple. Toutes les occurrences de '''{{code|Editor:Translation}}''' doivent être remplacées par le nom de la '''page d'origine''' que vous êtes en train de traduire (le nom anglais). Une fois la traduction réalisée, vous aurez une traduction agréable de n'importe quelle page du wiki.
# Editez la page existante et ajoutez {{code|&lt;nowiki&gt;{{Languages|Editor:Translation}}&lt;/nowiki&gt;}} au tout début et à la fin, si cela n'existe pas déjà. Souvenez-vous de remplacer {{code|Editor:Translation}} par le nom de la page à traduire.
# Copiez le contenu de la page d'origine en anglais dans le presse-papier, il vous servira de point de départ pour votre traduction.
# Sauvegardez les modifications éventuelles de la page en anglais. Si vous n'avez effectué aucune modification, annulez simplement l'édition (cancel).
# Pour commencer votre traduction en français, ajoutez simplement {{code|/fr}} à la fin de l'URL de la page en anglais et appuyez sur Entrée. Dans notre exemple, l'URL finale était {{code|&lt;nowiki&gt;http://lmwcs.com/rptools/wiki/Editor:Translation/fr&lt;/nowiki&gt;}} (dans l'exemple cité, nous avons ajouté {{code|/fr}} à la fin de l'URL pour indiquer que la traduction était en français, si vous désirez traduire le wiki dans une autre langue, vous trouverez le code du langage approprié au bas de cet article). Si la page en question n'existe pas un message s'affiche vous invitant à effectuer une nouvelle recherche ou à créer une nouvelle page. C'est cette dernière option que vous devez choisir. Editez votre nouvelle page pour y collez le contenu de votre presse papier. Voilà, vous êtes maintenant prêt à commencer votre travail de traduction, la communauté vous remercie pour votre contribution.
# A la fin de votre traduction, vous voudrez probablement que le titre apparaisse également en Français, pour cela, ajouter à la fin de votre travail : {{code|&lt;nowiki&gt;{{#customtitle:Éditeur:Traduction|Éditeur:Traduction}}&lt;/nowiki&gt;}} où bien entendu vous aurez remplacé {{code|Éditeur:Traduction}} par le titre approprié.
# Bien que des exceptions soient envisageables, les pages que vous traduirez devront dans la mesure du possible respecter le format et la trame la page originale en anglais.  En règle générale, le code source de votre traduction devrait ressembler à quelque chose comme cela :
&lt;pre&gt;
{{Languages|Page Name}}{{Translation}}
__TOC__
Votre traduction ici
{{Languages|Page Name}}{{#customtitle:Éditeur:Traduction|Éditeur:Traduction}}
&lt;/pre&gt;

==Messages systèmes à traduire==
L'utilisation de {{code|@}} montre où un élément variable est utilisée. Conservez la numérotation à l'identique ou il y a une forte probabilité que les messages seront affichés dans les mauvaises zones.
# L'article qui suit est une traduction de l'article anglais originel.
# L'article qui suit est une traduction  obsolète de l'article anglais originel.
# Navigation
# Utilisation Basique
# Tutoriels
# Commandes de Chat
# Formules de Dés
# Glossaire
# Référence des Macros
# Liste des Fonctions
# Options de Lancer
# Variables Spéciales
# Manuel des Macros
# Éditeurs
# Discussion d'éditeur
# Modifications Récentes
# Débutant
# Ceci est un article pour Débutant
# Intermédiaire
# Ceci est un article de niveau Intermédiaire
# Avancé
# Ceci est un article de niveau Avancé
# Note : Cette fonction est obsolète. Se référer à @ pour la fonction courante.
# Fonction @
# Introduit dans la version @
# Dernière vérification de compatibilité avec la version @
# Utilisation
# Exemple
# Exemples
# Voir Aussi
# Changements de Version
# Note : Cette article fait référence à une modification proposée qui n'a pas encore été implémentée dans le code source principale.
# @ Option de Lancer
# Note : Cette fonction ne peut être utilisée que dans une Macro Fiable (&quot;Trusted Macro&quot;)
# Note: Ce paramètre ne peut être utilisé que dans une Macro Fiable (&quot;Trusted Macro&quot;)
# Cet article est incomplet, vous pouvez aider le projet RPTools Wiki en participant à la complétion de cet article.
# Cet article a besoin de :

==Codes de Langage==
Si vous êtes intéressés par la traduction d'articles sur ce wiki dans une langue qui n'est pas listée ci-dessous, faites le nous savoir!
{| border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
! Page Name || Language 
|-
|  || English
|-
| '''/ar''' || {{#language:ar}}
|-
| '''/de''' || {{#language:de}}
|-
| '''/el''' || {{#language:el}}
|-
| '''/es''' || {{#language:es}}
|-
| '''/fr''' || {{#language:fr}}
|-
| '''/it''' || {{#language:it}}
|-
| '''/ja''' || {{#language:ja}}
|-
| '''/ko''' || {{#language:ko}}
|-
| '''/pt''' || {{#language:pt}}
|-
| '''/ru''' || {{#language:ru}}
|-
| '''/zh''' || {{#language:zh}}
|}
{{DISPLAYTITLE:Translation Instructions}}
{{Languages|Editor:Translation}}{{#customtitle:Éditeur:Traduction|Éditeur:Traduction}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:D100.png</title>
    <ns>6</ns>
    <id>943</id>
    <revision>
      <id>3166</id>
      <timestamp>2009-04-17T13:17:27Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>D100 image for use with [[Dice Box]].</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">D100 image for use with [[Dice Box]].</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Mapping/fr</title>
    <ns>0</ns>
    <id>944</id>
    <revision>
      <id>3693</id>
      <parentid>3418</parentid>
      <timestamp>2009-07-08T17:49:06Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>/* A propos de ce guide */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22567">{{Languages|Introduction to Mapping}}{{#customtitle:Introduction à la création de carte|Introduction à la création de carte}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}__TOC__
==Introduction==

===Qu'est-ce que MapTool ?===

Bien que vous ayez probablement une idée de ce qu'est MapTool et qu'il fait, nous voulons juste prendre un moment pour réaffirmer l'objectif premier de MapTool :

&lt;p align=&quot;center&quot;&gt;'''MapTool est un programme qui vous aide à partager une &quot;table de jeu virtuelle&quot; avec vos amis, afin que vous puissiez jouer ensemble.''' &lt;/p&gt;

C'est ce que MapTool fait, et ses fonctionnalités sont pensées pour fournir un ensemble d'options, de la plus simple à la plus complexe, pour atteindre cet objectif.

Parmi tout le blabla sur les macros, propriétés, tables, programmation qui va suivre dans ce guide et d'autres, ne perdez pas de vue la raison pour laquelle vous essayez MapTool : c'est un moyen de jouer avec vos amis.

===A propos de ce guide===

Le but de ce guide n'est pas de plonger dans les arcanes des système de programmation de macros de MapTool, d'éclairage, de propriétés ou n'importe quel autre &quot;truc&quot; compliqué.
Au lieu de cela, ce guide devrait vous permettre de démarrer dans l'utilisation de MapTool, en l'utilisant comme un outil de création de carte pour les Jeux de Rôles. D'autres guides abordent des sujets comme

[[Introduction_to_Game_Hosting/fr|héberge une partie en ligne]], [[Introduction_to_Tokens/fr|utiliser les pions]], [[Introduction_to_Lights_and_Sights|mettre en place la gestion de la vision et de la luminosité]] et [[Introduction_to_Macro_Writing|écrire des macros]].

Les instructions qui suivent devraient vous permettre de démarrer et d'utiliser MapTool comme un outil de création et d'utilisation de cartes tactiques. Cependant, cela nécessite quelques prérequis :

# Vous savez comment créer ou récupérer des images de carte. Il y a des teraoctets d'images de carte disponibles sur le web. Fouillez par exemple [http://gallery.rptools.net la galerie de RPTools] ou[http://www.rpgmapshare.com RPGMapShare].

# Vous pouvez démarrer MapTool sur votre ordinateur. MapTool nécessite Java 1.5 (minimum).

Donc, nous y voilà. Pour commencer :

# Récupérez MapTool à partir de http://rptools.net. La dernière version de MapTool peut toujours être trouvée au début de [http://www.rptools.net/index.php?page=downloads#MapTool cette liste]. '''NOTE''': Vous pouvez aussi démarrer via [http://www.rptools.net/index.php?page=launch le Java WebStart] sans avoir à télécharger et dézipper de fichier.
# Si vous téléchargez le fichier zip de MapTool, décompressez le quelque part sur votre ordinateur et assurez vous qu'il démarrer. Les fichier .bat fournis renseignent quelques paramètres automatiquement, comme la mémoire allouée. MapTool démarrera si vous double-cliquez sur le fichier .jar, mais en affichant quelques avertissements. Si vous utilisez Windows, il est possible d'utiliser le &quot;Windows Launcher&quot; aussi, qui permet de modifier aisément le paramétrage.

Maintenant, cartographions utile.

==Ajouter des Images à votre bibliothèque de Ressources MapTool==

La '''Bibliothèque de Ressources''' de Maptool est en fait une collection de &quot;pointeurs&quot; ou &quot;liens&quot; vers des répertoires de votre ordinateur, contenant des images que vous voulez utiliser avec MapTool. MapTool est livré avec un ensemble d'images, mais vous pouvez ajouter n'importe quelle image - vous contrôlez quelles images sont disponibles dans MapTool.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mt-f-addtoreslib.jpg‎|thumb|Menu Fichier montrant '''Ajouter à la bibliothèque de Ressources''']]

[[Image:File-dialog.jpg|thumb|Fenêtre '''Charger une bibliothèque de Ressources''']]

1. Obtenez quelques images (des cartes par exemple) : téléchargées du web ou créées par vos soins. Placez les dans un répertoire que vous retrouverez - ce répertoire est important pour l'étape 3.

2. Lancez MapTool.

3. Sélectionnez le menu '''Fichier -&gt; Ajouter à la bibliothèque de Ressources''' (voir les images à gauche). Cela ouvrira la fenêtre de dialogue appelée '''Charger une bibliothèque de Ressources''' (cliquez sur la miniature pour voir une image grande taille).

4. Dans la fenêtre de dialogue, placez-vous dans le répertoire où vous avez placé les images que vous voulez ajouter, et cliquez sur '''Ouvrir'''. MapTool parcourera les images contenues dans le répertoire indiqué et ajoutera un nouveau dossier dans l'arborescence &quot;Resource Library&quot; dans MapTool.

'''NB''' : le nom du dossier dans la &quot;Resource Library&quot; de MapTool sera le même que le nom du répertoire choisi à l'étape 3.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mtreslib.jpg|thumb|Dossiers dans la &quot;Resource Library&quot; de MapTool. Ce sont des liens vers des répertoires de votre disque dur.]]

5. Ensuite, si vous sélectionnez un des dossiers dans la &quot;Ressouce Library&quot; (cf. l'image ci-dessous), vous verrez des miniatures des images de ce dossier. NB : si votre répertoire a des sous-répertoires, cliquez sur le '''+''' pour déployer l'arborescence. De plus, vous n'aurez pas besoin d'ajouter de nouveau ce répertoire - MapTool se souviendra de ce que vous avez choisi.

'''NB''' : Puisque les dossiers qui apparaissent dans la &quot;Ressource Library&quot; sont en réalité des liens vers des répertoires du disque dur, MapTool ne duplique pas chaque fichier -- la &quot;Ressource Library&quot; est juste un moyen pour MapTool de savoir où se trouvent les images.

&lt;br style=&quot;clear:both;&quot;/&gt;

==Créer une Carte==

[[Image:Map-newmap.jpg|thumb|Entrée de menu '''Nouvelle carte''']]

[[Image:Map-new-dialog.jpg|thumb|Fenêtre '''Map Properties''']]

1. Menu '''Carte -&gt; Nouvelle carte...'''. Cela affichera la fenêtre de dialogue ''Map Properties''.

2. Sur le côté gauche de la fenêtre ''Map Properties'', vous trouverez plusieurs options et zones de texte.

* '''Name''': ceci est le titre de la carte. Notez bien que  si vous sélectionnez une image de carte (&quot;map image&quot;), le titre sera réinitialisé au nom du fichier image mais vous pourrez le remodifier par la suite.
* '''Cell Type''': grille hexagonale ou carrée ou sans grille du tout.
* '''Distance Per Cell''': combien d'unités de mesure arbitraires couvre chaque case/hexagone de la grille (''par exemple'', pour Donjons &amp; Dragons 4, mettez &quot;1&quot;, étant donné que toute distance est comptabilisée en &quot;cases&quot;. Pour Donjons &amp; Dragons 3, mettez &quot;5&quot; étant donné que tout y est mesuré en &quot;pieds&quot;)
* '''Pixels per cell''': combien de pixels chaque case/hexagone couvrira – la valeur par défaut est 50. Ce paramètre est important pour mettre la grille à l'échelle de l'image de carte éventuellement utilisée.
* '''Vision Distance''': MapTool gère la vision, le Brouillard de Guerre, et d'autres fonctions, et ceci indique à quelle distance, par défaut, un personnage peut voir dans la carte.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Background-dialog.jpg|thumb|Fenêtre '''Choose Background''']]

3. Cliquez sur le bouton '''Background''' (arrière-plan) : une fenêtre de dialogue propose différentes options. La texture et/ou couleur d'arrière-plan sont répétées à l'infini dans toutes les directions.

* '''Swatch''' (Palette) : permet d'utiliser une couleur uniforme, choisie dans une palette, comme arrière-plan de la carte.

* '''Hue/RGB''' (Nuancier/RVB) : permet de choisir une couleur d'arrière-plan via les composantes rouge/vert/bleu ou un nuancier.
* '''Texture''' : donne accès à la bibliothèque de ressources pour choisir une texture (une image) comme arrière-plan.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-mapbutton.jpg|thumb|Le bouton '''Map''' sur la fenêtre de propriétés de la carte]]

4. Si vous avez une image de carte à l'esprit (téléchargée ou créée via Photoshop, Dundjinni ou autre logiciel de ce type), cliquez le bouton '''Map''' (carte). Une fenêtre de dialogue s'ouvrira sur la bibliothèque de Ressources. Sélectionnez l'image que vous voulez utilisée. Cette image sera &quot;posée&quot; au-dessus de l'arrière-plan choisie précédemment.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-create-done.jpg|thumb|La fenêtre de dialogue '''Map Properties''' après qu'une image de carte ait été sélectionnée à partir de la bibliothèque de Ressources. Notez la miniature de a carte dans la prévisualisation.]]

5. Lorsque vous êtes satisfait de l'arrière-plan et de la carte – une miniature de prévisualisation permet de vérifier, voir ci-dessous - saisissez un titre, et cliquez sur '''OK'''. La carte sera chargée dans la fenêtre princiaple de MapTool.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Créer plusieurs Cartes dans une seule Campagne===

MapTool vous permet de créer plusieurs cartes dans une seule campagne (fichier .cmpgn). Le processus est très simple : vous répétez simplement les étapes de [[Introduction_to_Mapping#Créer_une_Carte | Créer une Carte]] pour chaque carte.

Chaque nouvelle carte sera automatiquement créée dans la campagne sur laquelle vous travaillez actuellement (créer une nouvelle carte ne sauvegarde pas automatiquement la campagne, donc assurez-vous de [[Introduction_to_Mapping#Saving_Your_Work | sauvegardez votre travail]] lorsque vous avez terminé).

Vous pouvez aussi ajouter de nouvelles cartes à des campagnes déjà sauvegardées : ouvrez simplement le fichier de campagne (menu '''Fichier &gt; Ouvrir Campagne...''') et suivre les étapes pour créer une nouvelle carte.

==Fenêtre Principale de MapTool==

===Les calques de MapTool===

[[Image:Layer-window.png|thumb|La fenêtre '''Layer''' (calque), présente sur toutes les cartes dans MapTool]]

Une fois qu'une carte est chargée, vous verrez une petite boîte dans la fenêtre de carte, avec pour titre ''Layer'' (Calque). Les cartes de MapTool ont quatre niveaux de calque :

* '''Background''' (Arrière-plan) : c'est le calque pour les images, cartes d'arrière-plan et tout ce qui n'est pas destiné à bouger/être déplacer.
* '''Hidden''' (Caché) : concernant les parties/jeux en ligne, c'est le calque que seul le MJ (GM) peut voir.
* '''Object''' (Objet) : c'est le calque pour les &quot;pions&quot; de type &quot;objets&quot;, qui peuvent bouger ou être bougés par les joueurs et MJ (lampes, tables etc.).
* '''Token''' (Pion) : ce calque est celui des pions. Les pions sont de petites images qui représentent les Personnages Joueurs (PJ, PC en anglais) et Non Joueurs (PNJ, NPC en anglais). Assurez-vous d'avoir sélectionné le calque &quot;Token&quot; lorsque vous ajoutez des personnages ou ennemis sur la carte.

Pensez aux calques de MapTool comme à quatre différentes feuilles de papier transparent empilées l'une sur l'autre. La plus en-dessous - '''Background''' (Arrière-plan) - est celle où vous dessinez les éléments basiques de la carte : murs, sols, arbres etc. Sur la page suivante, celle appelée '''Object''' (Objet), vous dessinez les ''choses'' que vos personnages pourraient utiliser, ou briser : portes, coffres, tables, chaises etc. Sur la feuille au-dessus - le calque '''Hidden''' (Caché) - vous placez les choses que seul le MJ peut voir (qui peuvent être des objets ou des personnages cachés qui seront révélés ultérieurement). Finalement, la feuille la plus au-dessus, - le calque '''Token''' (Pion) -, vous placez vos &quot;figurines&quot; virtuelles : les monstres, personnages joueurs et non joueurs.

Les Pions peuvent être déplacés sur n'importe laquelle des 4 calques de MapTool. Pour ce faire, faites un clic-droit sur l'image du pion et sélectionnez dans le menu contextuel : '''Change To &gt;'''. Dans le sous-menu qui s'affiche, choisissez le calque de destination du pion, et il y sera déplacé.

===Passer d'une carte à l'autre===

[[Image:Blueglobe.jpg|thumb|Le bouton &quot;Mappemonde&quot;, où vous pouvez choisir une carte parmi toutes celles de votre campagne]]

[[Image:Maplist.jpg|thumb|Une liste de cartes, qui apparait après avoir cliqué sur le bouton Mappemonde.]]

Si vous ne créez qu'une carte dans votre campagne, elle sera chargée par défaut et sera la seule carte que vous pourrez voir.

Si vous avez [[Introduction_to_Mapping#Cr.C3.A9er_plusieurs_Cartes_dans_une_seule_Campagne|créé plusieurs cartes]] ou jouez avec une campagne comportant plusieurs cartes, vous pouvez choisir parmi elles en cliquant sur le globe bleu, la mappemonde, dans le coin supérieur droit de la fenêtre de MapTool. Cela affichera une liste des cartes disponibles. Si vous n'avez qu'une seule carte, cliquer sur la mappemonde affichera le nom de cette carte.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Zoomer et Déplacer===

Pour zoomer sur la carte, vous pouvez utiliser la molette de la souris, ou les touches + et -.

Pour (se) déplacer la carte, faites un clic droit maintenu et bougez la souris.

==Pions : les bases==

Les [[Token:token|Pions]] de MapTool (ou &quot;Tokens&quot;) sont de petites images destinées à représneter de nombreux éléments sur une carte MapTool. L'usage le plus commun pour les Pions est de représenter les personnages joueurs (PJ) et non joueurs (PNJ) - en d'autres termes, les pions prennent la place des figurines sur la table de jeu virtuelle.

Les Pions, comme tout le reste, viennent d'images stockées dans votre  [[Macros:Glossary#R|Bibliothèque de Ressources]]. MapTool met à disposition des Pions par défaut (et il existe un excellent programme distinct qui vous permet de créer des Pions :  [http://www.rptools.net/index.php?page=tokentool TokenTool]), ou vous pouvez utiliser les votres, d'où qu'ils viennent.

Cette section de l'Introduction à la Cartographie ne traite que quelques uns des aspects les plus communs et basiques des possibilités offertes par les Pions dans MapTool. Il y a de ''nombreuses'' fonctionnalités, trucs et fonctions cool disponibles lorsque l'on travaille avec les pions - tant qu'elles méritent un guide à part entière.

===Placer les Pions sur la Carte===

[[Image:Default-library.jpg|thumb|Le dossier''Default'' de la Bibliothèque de Ressources]]

1. Pour visualiser les pions par défaut mentionnés ci-dessus, sélectionnez le dossier &quot;Default&quot; dans la Bibliothèque de Ressources (''Resource Library''), et cliquez le '''+''' pour le développer.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Default-tokens.jpg|thumb|Le sous-dossier des pions (''Tokens'')]]

2. Sélectionnez le dossier des pions (Tokens).

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-drag-to-map.jpg|thumb|Déposer un pion sur la carte]]

[[Image:Token-on-map.jpg|thumb|Le pion apparait !]]

3. Dans la fenêtre en-dessous (où les miniatures apparaissent), utilisez la souris pour glisser-déposer le pion sur la carte. Le curseur se transformera en main et vous devez simplement amener le pion sur la carte et relâchez le bouton de gauche de la souris.

En relâchant le bouton de la souris, le pion apparaîtra sur la carte, avec le même aspect que la miniature, comme montré dans la capture d'écran ci-contre.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Déplacer les Pions===

Une fois qu'un pion est placé sur la carte, il peut être déplacé en utilisant la souris (clic gauche maintenu) ou bougé case par case en le sélectionnant (un clic dessus) puis en utilisant les flèches du clavier et en pressant la touche '''D''' pour terminer le mouvement.

Si vous voulez parcourir un chemin complexe (avec des virages), vous pouvez appuyer sur la touche '''Espace''' pour créer une ou plusieurs étapes, en cours de mouvement.

===Modifier le nom, nom MJ et label d'un Pion===

[[Image:Token-default-name.jpg|thumb|Un pion, avec son nom par défaut, assigné lorsqu'il a été posé sur la carte la première fois.]]

[[Image:Edit-token.jpg|thumb|La fenêtre de dialogue de modification du pion ('''Edit Token''')]]

On peut assigner jusqu'à trois noms à chaque pion. Quand un pion est déposé pour la première fois sur la carte, MapTool lui affecte un nom par défaut (typiquement, le même que le fichier source du pion, sans l'extension). Par exemple, le pion montré dans l'image ci-dessous a été déposé depuis le jeu de pions par défaut de MapTool, et son nom par défaut est &quot;Hero.&quot;

Les trois noms possibles, qu'un pion peut avoir, sont :

*'''Token Name''' (Nom du Pion): Le nom sous lequel le pion apparaîtra à tous les utilisateurs (joueurs, MJ et observateurs). Il est obligatoire.
**&lt;font color=&quot;red&quot;&gt;'''NB''': Assurez-vous que CHAQUE pion sur la carte a un nom UNIQUE ! Sinon, les macros de MapTool peuvent fonctionner de manière imprévisible.&lt;/font&gt;
*'''GM Name'''(Nom MJ) : Ce nom n'apprait que pour les personnes connectés à MapTool avec le rôle de MJ (&quot;GM&quot; en anglais).

*'''Label''' (Étiquette): Ce texte apparait (si renseigné) sous le nom du pion, et est visible de tous.

Pour modifier un de ces noms :

1. Double-cliquez sur l'image du pion sur la carte. Cela ouvrir la fenêtre de dialogue '''Edit Token''' (Modification du Pion), comme le montre la capture d'écran ci-contre.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changednames.jpg|thumb|Modification des noms d'un pion]]

[[Image:New-token-names.jpg|thumb|Pion avec de nouveaux noms et étiquette]]

2. Dnas le champ '''Name''' (Nom), entrez ce que vous voulez. Dans l'exemple a été saisi &quot;Bork the Brave&quot; (Bork le Courageux).

3. Dans le champ '''GM Name''' (Nom MJ), saisissez un nom. Dans l'exemple &quot;Cork the Cowardly&quot; (Cork le Couard).

4. Dans le champ '''Label''' (Étiquette), saisissez un qualificatif. Dans l'exemple &quot;Human Warrior&quot; (Guerrier Humain).

5. Cliquez '''OK''' pour sauvegarder vos modifications.

Après que vous ayez cliqué sur &quot;Ok&quot;, vous constaterez que le pion a changé :

Vous pouvez réitérer ce processus de modification des noms avec n'importe quel pion sur la carte.

&lt;br style=&quot;clear:both;&quot; /&gt;

===Modifier l'image d'un Pion===

Parfois, quand vous créez un nouveau pion, vous voudrez modifier l'image de celui-ci. Par exemple, vous trouvez une nouvelle image cool que vous ''devez'' utiliser pour votre Super Méchant, mais vous avez déjà créer un pion pour ce personnage - vous ne voudrez pas effacer intégralement le pion juste pour modifier son image, n'est-ce pas ? A la place, changez juste l'image du pion en utilisant les étapes suivantes :

[[Image:Edit-token.jpg|thumb|La fenêtre de dialogue de modification du pion ('''Edit Token''')]]

1. Assurez d'avoir une nouvelle image pour le pion, au format PNG ou JPG, déjà disponible dans votre Bibliothèque de Ressources MapTool. Si vous lisez la section [[Introduction_to_Mapping#Ajouter_des_Images_.C3.A0_votre_biblioth.C3.A8que_de_Ressources_MapTool|Ajouter des Images à votre bibliothèque de Ressources]], au-dessus, cela explique comment obtenir et ajouter des images à votre Bibliothèque de Ressources : en fait, les images de pion (en fait, ''n'importe quelle'' image) peuvent être ajoutées à votre bibliothèque de ressources de la même façon.

2. Double-cliquez sur le pion pour ouvrir la fenêtre de dialogue '''Edit Token''' (Modifier le pion).

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changeimage.jpg|thumb|Le bouton pour modifier l'image du pion]]

3. Dans le coin supérieur gauche de la fenêtre, cliquez sur le petit signe plus vert.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:New-image-picked.jpg|thumb|Une nouvelle image est choisie depuis la bibliothèque de ressources]]

4. Dans la fenêtre de dialogue '''Choose Image''' (Choisir l'image), sélectionnez le dossier de la bibliothèque de ressources contenant la nouvelle image du pion (une bordure rouge et blanche indique l'image sélectionnée), et cliquez sur '''OK'''.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-image-changed.jpg|thumb|L'image du pion a été modifiée]]

5. Une fois le bouton '''OK''' cliquée, vous êtes ramené à la fenêtre de modification du pion et vous verrez que l'image du pion a été changée pour celle que vous venez de choisir.

&lt;br style=&quot;clear:both;&quot; /&gt;

===Taille du Pion===

[[Image:Token-rightclick.jpg|thumb|Modifier la taille du pion en utilisant le menu contextuel (clic droit)]]

Par défaut, les pions ont la taille d'une case de la grille (soit 50x50 pixels si vous avez utilisé la taille de la grille proposée par défaut par MapTool). Si vous faites un clic-droit sur un pion, le menu contextuel montre de nombreuses options, dont l'une est '''Size''' (Taille). Vous pouvez la modifier en choisissant l'une des valeurs proposées, vous permettant de créer des créatures géantes, gargantuesques ou petites, minuscules etc. L'image ci-dessous illustre le menu contextuel d'un pion.

NB : les valeurs de taille ne s'appliquent qu'aux cartes ayant une grille (rappelez-vous que la grille se définit au moment de la création de la carte). Sur une carte sans grille, les différentes valeurs de taille sont plus fines.

&lt;br style=&quot;clear:both;&quot;/&gt;

==Sauvegarder votre Travail==

Le format de sauvegarde par défaut de MapTool est appelé un ''fichier de Campagne'' (Campaign File). Le fichier de campagne (dont l'extension est ''.cmpgn'') contient les cartes et pions que vous avez mis en place. Si vous êtes intéressés par ce genre de chose, le fichier de campagne est en réalité un fichier XML zippé.

Pour sauvegarder votre travail, utilisez le menu '''Fichier -&gt; Enregistrer Campagne''', donnez un nom à votre campagne et voilà tout.

Lorsque vous sauvegardez une campagne, MapTool conserve la position de tous les pions sur toutes les cartes, ainsi vous pouvez reprendre l'aventure exactement là où vous l'avez laissée !

==Exporter l'image d'une Carte==

MapTool peut exporter l'image d'une carte vers un fichier PNG. Pour exporter l'image vers un emplacement de votre choix :

1. Utilisez le menu '''Fichier -&gt; Exporter ''' et choisissez '''Capture d'écran Sous...'''.

2. Dans la fenêtre de dialogue qui s'ouvre, choisissez une &quot;View&quot; (Vue) - soit la vue MJ (GM view), où l'on peut tout voir, ou la vue Joueur (Player view), où seuls les éléments visibles par les ''joueurs'' seront exportés -.

3. Choisissez la destination du fichier en utilisant le bouton Parcourir (Browse...). Alternativement, vous pouvez l'envoyer vers un serveur FTP.

4. Cliquez '''Export'''.

==Étapes Suivantes==

Maintenant que vous savez comment créer une carte basique et y placer des pions, l'étape suivante est de vous connecter avec quelques amis via Internet (ou en face à face sur un réseau local) et utiliser tout cela pour une session de jeu !

Ce sujet est abordé dans [[Introduction to Game Hosting|Introduction à l'hébergement de partie]].
{{Languages|Introduction to Mapping}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Templates</title>
    <ns>14</ns>
    <id>945</id>
    <revision>
      <id>3199</id>
      <timestamp>2009-04-17T16:20:21Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>New page: Templates for use in articles.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">Templates for use in articles.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:Translation</title>
    <ns>10</ns>
    <id>946</id>
    <revision>
      <id>3233</id>
      <timestamp>2009-04-18T03:00:20Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>New page: &lt;noinclude&gt;placeholder&lt;/noinclude&gt;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">&lt;noinclude&gt;placeholder&lt;/noinclude&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Main Page/ko</title>
    <ns>0</ns>
    <id>947</id>
    <revision>
      <id>4170</id>
      <parentid>4169</parentid>
      <timestamp>2010-04-02T15:07:58Z</timestamp>
      <contributor>
        <username>Nefos</username>
        <id>171</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2693">__NOTOC__
매우 취약한 번역에 대해 용서해주세요.

[http://www.rptools.net RPTools] 위키에 오신 것을 환영합니다. 이 위키 RPTools 소프트웨어에 대한 설명서를 제공합니다. 우리는 [http://www.rptools.net/index.php?page=maptool MapTool]를 기반으로 하여 초점을 맞추고 있다. [http://www.rptools.net RPTools] 기사는 모두 허용됩니다.

이 위키는 '''진행중인 작품 이다''' 와 현재 {{NUMBEROFARTICLES}} 기사로 구성되어있습니다 (대부분은 매크로 기능의 기사), 그러니 정확히 언제든지 약간의 노력이 필요 찾는 걸릴 수있습니다. 만약 당신의 유지에 기여하고자하는 데 도움이 위키 계정을 만들든지 저희 [[Editor| 편집 가이드라인을 살펴보세요]].

{| width=100% cellpadding=5px &lt;!--- Do not edit this line ---&gt;
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;'''당신은 독서에 관심이 될 수있는 주제 :'''&lt;/big&gt;
==기본 MapTool 사용법==

* [[Introduction to Mapping|지도 만들기]]
* [[Introduction to Game Hosting|게임 호스팅]]
* [[Introduction to Tokens|토큰]]
* [[Introduction to Properties|토큰 속성 안내]]
* [[MapTool Preferences|MapTool 환경 설정]]
* [[Introduction to Macro Writing|매크로 작성]]
** [[Introduction to Macro Branching|매크로 세부 안내]]
** [[More Branching Options|더 많은 세부 옵션]]
** [[Introduction to Macro Loops|매크로 루프 안내]]
* [[Stack Size|자바 스택 크기]]
* [[Glossary|MapTool 용어 해설]]

===채팅 &amp; 주사위===

* [[Chat Commands|채팅 명령들]]
* [[Dice Expressions|주사위 사용]]
* [[Macros:Roll:types | [ ] 매크로의 표시]]

===사용자를위한 리소스===

* [[Dice Box|Dice Box]]
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;&amp;nbsp;&lt;/big&gt; &lt;!--- To even out spacing with the first column ---&gt;

==매크로 기술 참조==

* [[:Category:Macro|매크로 참조]]
* [[:Category:Macro Function|매크로 방법 목록]]
* [[Macros:Branching and Looping |지점 및 루프 옵션]]
* [[Variable Types|변수의 종류]]
* [[:Category:Special Variable|특별한 변수]]
* [[:Category:Tutorial|매크로를 작성하는 방법]]
* [[:Category:How To|매크로 작업을 수행하는 방법]]
* [[:Category:Cookbook|매크로 소스 코드]]
* [[Macro Tips and Tricks|팁]]
* [[Macro FAQ|자주 묻는 질문]]

===토큰===

* [[Token|MapTool 토큰]]
* [[Token Types|형식 토큰]]

===기타 관련 기사===

* [[Supported CSS Styles|지원하는 CSS 스타일]]
* [[Sample Ruleset|샘플 롤플레잉 게임 규칙]]
|} &lt;!--- Do not edit this line ---&gt;
{{Languages|Main Page}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Main Page/fr</title>
    <ns>0</ns>
    <id>948</id>
    <revision>
      <id>5170</id>
      <parentid>5169</parentid>
      <timestamp>2011-01-23T10:26:57Z</timestamp>
      <contributor>
        <username>Natha</username>
        <id>49</id>
      </contributor>
      <comment>/* Divers */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3280">__NOTOC__
Bienvenue sur le Wiki de Documentation de RPTools, actuellement, nous sommes concentrés sur la documentation de [http://www.rptools.net/index.php?page=maptool MapTool], mais de la documentation sur n'importe quelle application de [http://www.rptools.net RPTools] est la bienvenue.

Ce wiki est un '''travail en cours''' et consiste actuellement en {{NUMBEROFARTICLES}} articles (la plupart étant des articles sur les fonctions de macro), donc trouver ce que vous cherchez peut demander un peu d'effort et de temps.
Si vous voulez contribuer à la maintenance de ce wiki, n'hésitez pas à créer un compte et jetez un coup d'oeil au [[Editor/fr|guide d'édition]].

'''Note à propos de la traduction française''' : elle est en cours (et on recrute des volontaires !).
* Les liens ci-dessous marqués (*) sont partiellement traduits.
* Les liens marqués (fr) sont intégralement traduits.
* Les liens sans indications pointent sur les pages anglaises.

{| width=100% cellpadding=5px &lt;!--- Do not edit this line ---&gt;
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;'''Sujets pouvant vous intéressez :'''&lt;/big&gt;
==Utilisation de Base de MapTool==

* [[Introduction to Mapping/fr|Introduction à la création de carte (fr)]]
* [[Introduction to Game Hosting/fr|Introduction à l'hébergement de partie (fr)]]
* [[Introduction to Tokens/fr|Introduction à la gestion des Pions (fr)]]
* [[Introduction to Properties/fr|Introduction aux Propriétés (fr)]]
* [[MapTool Preferences/fr|Préférences de MapTool (fr)]]
* [[Introduction to Macro Writing/fr|Introduction à l'écriture de Macro (*)]]
** [[Introduction to Macro Branching|Introduction à l'embranchement de Macro]]
** [[More Branching Options|Plus d'options d'embranchement]]
** [[Introduction to Macro Loops|Introduction aux boucles dans les Macros]]
* [[Stack Size|A propos de la taille de la pile Java]]
* [[Glossary|Glossaire MapTool]]

===Chat &amp; Lancer de Dés===

* [[Chat Commands|Commandes de Chat]]
* [[Dice Expressions|Formules de Dés]]
* [[Macros:Roll:types | [ ] Options de formatage de Lancer]]

===Ressources Utilisateurs===

* [[Dice Box|Boîte de Dés]]
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;&amp;nbsp;&lt;/big&gt; &lt;!--- To even out spacing with the first column ---&gt;

==Références Techniques des Macros==

* [[:Category:Macro|Référence des Macros]]
* [[:Category:Macro Function|Liste des Fonctions]]
* [[Macros:Branching and Looping | Options d'Embranchement et de Boucles]]
* [[Variable Types|Types de Variable]]
* [[:Category:Special Variable|Variables Spéciales]]
* [[:Category:Tutorial|Tutoriels sur les Macros]]
* [[:Category:How To|Macros How To]]
* [[:Category:Cookbook|Manuel du codage des Macros]]
* [[Macro Tips and Tricks|Trucs et Astuces pour Macro]]
* [[Macro FAQ|FAQ sur les Macros]]

===Pions===

* [[Token|Les Pions dans MapTool]]
* [[Token Types|Types de Pion]]

===Divers===

* [[Supported CSS Styles|Styles CSS supportés]]
* [[Sample Ruleset|Exemple d'ensemble de Règles]]
* [[Java 64 fails when using Launcher|Erreur Java 64 avec le lanceur]]
* [[MapTool ChangeLog (by build version)|Notes de versions de MapTool (par version)]]
|} &lt;!--- Do not edit this line ---&gt;
{{Languages|Main Page}}{{#customtitle:Page Principale|Page Principale}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Template:Translate</title>
    <ns>10</ns>
    <id>949</id>
    <revision>
      <id>3272</id>
      <parentid>3271</parentid>
      <timestamp>2009-04-18T16:35:10Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="322">&lt;noinclude&gt;
===Usage===
 &lt;nowiki&gt;{{Translate|This is the default text (English, base page)
 |de=This is the text on German subpages|fr=For french on fr subpage
 |zh=add languages as wished }}&lt;/nowiki&gt;[[Category:Templates]]&lt;/noinclude&gt;{{#ifeq: {{SUBPAGENAME}} | {{PAGENAME}} | {{{1}}} | {{{ {{SUBPAGENAME}} | {{{1}}} }}} }}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Game Hosting/fr</title>
    <ns>0</ns>
    <id>950</id>
    <revision>
      <id>3492</id>
      <parentid>3491</parentid>
      <timestamp>2009-06-15T10:54:52Z</timestamp>
      <contributor>
        <username>Natha</username>
        <id>49</id>
      </contributor>
      <comment>/* Direct */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19322">{{Languages|Introduction to Game Hosting}}{{#customtitle:Introduction à l'hébergement de partie|Introduction à l'hébergement de partie}}{{Beginner}}__TOC__
==Introduction==

Comme vu dans l'[[Introduction_to_Mapping|Introduction à la création de carte]], MapTool vous permet de créer des cartes et figurines virtuelles (connues dans le jargon de MapTool comme des  [[Introduction_to_Tokens|pions]]) (tokens)), afin d'être utilisée dans des parties de jeu de rôle, un peu de la même façon que vous utiliseriez une carte papier et de vraies figurines sur une table. De fait, c'est pour cela que nous appelons MapTool une &quot;table de jeu virtuelle&quot; ou &quot;VTT&quot; (&quot;Virtual Table Top&quot; en anglais). Dans ce guide, nous passerons en revue un des fondamentaux de MapTool : partager une carte avec d'autres joueurs, au travers d'Internet.

'''NB :''' MapTool n'est pas ''seulement'' utile pour jouer en ligne - de nombreuses personnes l'utilise lors de session de jeu &quot;en face à face&quot;, parce que l'on peut faire des choses, avec une carte virtuelle, infaisable avec une carte réelle. De plus, vous avez moins de chance de renverser du Coca dessus ;). Toutefois, ce guide partira du principe que vous jouez en ligne.

L'introduction à la cartographie vous a guidé à travers les étapes de base permettant d'obtenir MapTool, le lancer, y créer une carte et y placer des pions. Ainsi que sauvegarder une fichier de campagne, comment se déplacer sur la carte, zoomer, et déplacer les pions. Ce sont les fonctions essentielles du logiciel, sans lesquelles le reste n'a aucun intérêt à être lu !

Etant donné qu'héberger une partie n'est pas drôle si personne n'y participe, la dernière section de ce guide expose comment se connecter à un serveur MapTool. Vous devrez expliquer à vos amis comment faire cela, donc assurez-vous de lire aussi cette section !

Et pour finir, ce guide traitant de l'hébergement d'une partie en ligne, &quot;vous&quot; signifiera toujours &quot;la personne qui a lancé le serveur&quot;.

==Architecture==

Lorsqi'il est utilisé pour une partie en ligne, MapTool utilise une architecture &quot;client-serveur&quot;. En d'autres termes, une personne (en général le MJ, mais pas nécessairement) utilise MapTool pour démarrer un &quot;serveur&quot; et les autres personnes de la partie se connectent au serveur en tant que &quot;clients&quot;.

Une fous le serveur démarré et que tous y sont connectés, le fichier de campagne (avec toutes les cartes, pions et autre information) est ensuite partagée entre tous les joueurs, afin que tous voient la carte, les mouvements de leur pion et ceux des autres joueurs, les textes saisis dans le chat ... et passent un bon moment.

==Un mot à propos des &quot;bidules&quot; réseau==

Un des challenges dans la création d'une partie avec MapTool (à l'instar de nombreuses applications client-serveur, dont beaucoup d'autres VTT) réside dans la configuration de votre réseau local afin de permettre à vos amis de se connecter à votre serveur MapTool.

Il existe de nombreuses manières de paramétrer votre réseau pour autoriser MapTool à être &quot;hôte&quot; à travers Internet. UPnP, redirection de port ou un VPN. Votre ordinateur, FAI et matériel réseau (cable/modem xDSL, routeur ...) vont déterminer lesquelles de ces options vont fonctionner pour vous. Etant donné la myriade de possibilités de combinaisons matérielles et logicielles, il n'est pas possible de donner un ensemble de règles et conseils qui garantiraient le succès de l'opération.

===UPnP===

Une alternative au transfert de port - si elle est disponible sur votre routeur - est appelée ''UPnP'' (acronyme de ''Universal Plug-and-Play''). Cette fonctionnalité, au lieu d'indiquer de façon permanente &quot;Le trafic sur le port XYZ va ici !&quot;, va dire au routeur &quot;pour un temps donné - pendant que nous jouons - je vais devoir te demander d'ouvrir le port XYZ pour nous. Ce serait ''supeeeeeeeeeer''.&quot;

En d'autres termes, cela rend la gestion des ports et du trafic entrant et sortant un petit peu plus transparent et simple. Évidemment, le désavantage est que tout ne gère pas l'UPnP, et vous devrez découvrir par vous-même si votre réseau peut le faire. Toutefois, si votre matériel réseau gère l'UPnP, c'est ''de loin'' le moyen le plus facile de lancer votre serveur MapTool.

===Translation d'adresse===

Sur les réseaux personnels qui utilisent un routeur ou un pare-feu physique, vous aurez probablement besoin de configurer la ''translation d'adresse'' (&quot;port forwarding&quot;). C'est un mécanisme par lequel les informations venant ''vers'' votre réseau, et arrivant sur un ''port'' spécifique, sont envoyées au bon endroit ''dans'' votre réseau local. Ceci est important pour vous, qui lancerez le serveur MapTool, étant donné que vos amis ont besoin d'envoyer l'information vers le bon endroit !

Les spécifications pour configurer la translation d'adresse dépendent de votre matériel, donc vous devrez consulter votre manuel pour cela. Mais l'idée de base est que vous indiquez deux choses à votre routeur/switch/pare-feu :

# Quel port MapTool va utiliser (plus d'information là dessus ultérieurement !) - cela revient à dire au routeur &quot;de l'information va arriver sur le port XYZ, sois attentif !&quot;
# Quel ordinateur, au sein du réseau local, doit recevoir cette information - basiquement  &quot;et quand tu vois de l'information arriver sur le port XYZ, envoie la ''ici''&quot;
# Incidemment, paramétrer la translation d'adresse dit aussi au routeur où il doit faire passer l'information ''sortante'' aussi.

La raison principale, pour laquelle vous devez établir cette translation d'adresse pour héberger un serveur MapTool, est que la plupart des routeurs ne laisseront pas passer n'importe quelle information (particulièrement s'ils sont correctement sécurisés et configurés).

===Information complémentaires sur les réseaux===

J'étais sur le point d'écrire une section a propos du Networking, lorsque j'ai réalisé qu'il y en avait une excellente [http://forums.rptools.net/download/file.php?id=116 FAQ] écrit par Azhrei sur [http://forums.rptools.net le forum Maptool]. Si vous n'avez pas l'habitude  des concepts comme la re-direction de ports, la configuration de routeur, ou comment fonctionne un réseau en général, jetez un coup d'œil à cette FAQ.

Si vous êtes un habitué des configurations et de la gestion du réseau familial (plus particulièrement si vous êtes capable de  configurer des logiciels pour qu'ils agissent en tant que serveur, ou que vous savez comment on réalise une redirection de port sur un réseau en fonction des besoins des autres applications), configurer Maptool ne présentera aucune difficulté particulière pour vous : vous devrez principalement configurer la redirection de port ou l'UPnP sur votre routeur pour autoriser le trafic de MapTool sur votre réseau.

Si vous avez besoin d'information spécifique sur la configuration de redirection (forwarding) pour votre matériel réseau, vérifiez sur [http://www.portforward.com Portforward.com] pour trouver une collection exhaustive de documents how-to (comment faire) dédiés à des matériels et des logiciels réseaux spécifiques.

D'un autre coté, si tout ce dont on parle précédemment n'évoque pour vous que le chinois (que vous ne parlez pas bien sûr), lisez [http://forums.rptools.net/download/file.php?id=116 la FAQ réseau]! Tous vos vœux seront exaucés. 

Maintenant, essayons de voir ce qu'on peut faire avec ça.

==Démarrer un serveur Maptool==

===Principe de base===

A partir de ce point, les instructions suivantes supposent que vous avez configuré votre réseau pour accepter le trafic de MapTool (via la redirection de ports ou l'UPnP, par exemple). Sinon, vous devrez résoudre ce point avant de pouvoir espérer démarrer un serveur auquel vos amis pourront se connecter.

===La boite de dialogue Démarrer un Serveur===

[[Image:mt-file-menu-startserv.jpg|thumb|Sélectionnez ''Start Server'' depuis le menu ''File'']]

[[Image:mt-start-server.jpg|thumb|La boite de dialogue '''Démarrer un serveur''' (Start Server)]]

1. Allez dans '''File &gt; Start Server'''.

2. Vous avez maintenant la boite de dialogue '''Démarrer un Serveur''' (Start Server). Un tas d'options sont possibles ici.

===Paramètres et options du serveur===

====Configuration====

* '''Username''': C'est le nom qui apparaîtra dansla fenêtre de Chat et dans la fenêtre de connexion ; vous pouvez mettre le nom que vous voulez.
* '''Role''': Choisissez le type d'utilisateur que vous allez être : êtes vous le MJ de la campagne ?(auquel cas vous allez être en possession de totalité des pouvoirs cosmiques à travers toutes les fonctions de MapTool) Ou êtes vous un PJ, qui va endurer toutes les lubies du MJ ?(en d'autres termes, vous aurez seulement accès aux fonctions du joueur!) Remarquez qu'une partie peut accueillir plus d'un MJ !
* '''Port''': Un réglage ''très'' important, puisqu'il indique à MapTool quels ports vous avez configuré pour que votre routeur assure la re-direction des informations réseaux. Si vous indiquez un port erroné, le traffic MapTool sera incapable d'entrer ou de sortir de votre réseau, et vous ne pourrez pas jouer!
* '''RPTools Alias''': Ce champ vous permet d'utiliser un &quot;alias&quot; pour que votre serveur apparaisse dans le registre des serveurs de RPTools. En fait, il vous permet de dire à vos joueurs &quot;cherchez le serveur NOM_DU_SERVEUR et connectez vous à lui&quot; au lieu de &quot;connectez vous au serveur dont l'adresse IP est 123.45.678.9&quot;.
* '''Passwords''': Vous pouvez protéger l'accès à votre serveur en configurant un mot de passe. Cela reste une option, et si vous laissez ce champ vide, n'importe quel joueur qui trouverait votre serveur pourrait s'y connecter en tant que joueur. Il existe deux catégories de mots de passe :
** '''GM''': Le mot de passe du MJ est utilisé pour conférer à quelqu'un un accès total sur la campagne en cours. Toutefois, il existe un petit nombre d'actions qui ne peuvent être réalisées à distance comme le chargement d'une campagne. Le mot de passe du MJ est en général utilisé pour un MJ suppléant, ainsi les charges du MJ peuvent être partagées, mais il peut aussi être utilisé dans des cas où le MJ se retrouve dans l'incapacité d'héberger correctement le serveur et où un de ses joueurs doit assumer le rôle de serveur.
** '''Player''': Les gens qui se connectent au serveur pour y jouer une partie utilisent le mot de passe des joueurs.

====Appartenance, Vision et Comportement====

* '''Strict Token Ownership''': MapTool utilise le concept d'&quot;appartenance du Pion&quot; (token ownership) pour décider qui peut sélectionner, déplacer ou éditer les propriétés d'un Pion sélectionné. Si vous validez l'option ''Strict Token Ownership'', seul le propriétaire du Pion sélectionné pourra interagir avec ce dernier - tous les autres devront se contenter de regarder le Pion.
* '''Players can reveal vision''': MaptTool dispose d'un système qui gère le &quot;brouillard de guerre&quot; (dans lequel vous pouvez configurer la manière dont les Pions &quot;voient&quot; la carte). Avec cette option validée, les joueurs peuvent révéler la partie de la carte visible depuis leur Pion sans intervention du MJ (En d'autres termes, une zone cachée aux PJ sera recouverte par le brouillard de guerre et apparaîtra opaque à l'écran; lorsque vous révélez la zone, la couche opaque est retirée et la carte en dessous devient visible). Si l'option n'est pas validée, c'est au MJ de révéler la carte au fur et à mesure.
* '''Use Individual Views''': Dans le système gérant la vision cité précédemment, les Pions des joueurs peuvent également &quot;partager&quot; leur vision (chaque joueur peut voir ce que les autres voient) ou ils peuvent choisir d'avoir une vision limitée a leurs seuls Pions.
* '''Restricted Player Impersonation''': Signifie que les joueurs peuvent uniquement faire s'exprimer des Pions qu'ils possèdent (voir la partie concernant [[Introduction_to_Tokens/fr#Appartenance|l'appartenance]] pour des informations complémentaires).
* '''Players Receive Campaign Macros''': MapTool vous permet d'écrire des [[Macros:introduction|macros]] (des suites de commandes concernant du texte, des Pions, des jets de dés, utilisées pour automatiser certaines activités - de petits scripts qui font &quot;quelque chose&quot;). Le MJ peut écrire des Macros pour la campagne, elles deviendront disponibles pour tous les joueurs si cette option est choisie.
* '''Use Tooltip for [ ] rolls''': Avec cette option validée, lorsque vous intégrez un jet de dés entre crochets, seul le résultat est affiché, le détail du jet en question apparaissant uniquement sous forme d'info-bulle si vous passez la souris sur le résultat.

===Test de la connexion===

Avant de lancer votre serveur, il est préférable d'appuyer sur le bouton '''Test Connection'''. Cela aura pour effet d'envoyer un message à un serveur dédié de RPTools.net lui demandant d'essayer de se connecter à votre ordinateur - en d'autre terme, ce serveur de test va essayer de voir si votre ordinateur est visible depuis le réseau !

Un message du type '''Success! I can see your computer!''' indique que le serveur de test de RPTools.net a réussi à voir votre serveur depuis le réseau et que ce dernier sera probablement visible lorsque vous le démarrerez.

Si vous n'avez pas reçu ce message, vous allez devoir passer un peu plus de temps à analyser la redirection des ports de votre routeur et la configuration réseau de votre serveur, de manière à être sûr que tout a été configuré correctement.

===Récupérez les informations concernant votre connexion pour les transmettre à vos amis===

[[Image:mt-file-menu-cinfo.jpg|thumb|Sélectionnez '''Connection Information...''' depuis le menu Fichier (File)]]

[[Image:connection-info.jpg|thumb|La fenêtre de dialogue '''Server Info''']]

Nous supposerons que vous avez obtenu une réponse positive au test de connexion précédent et que vous avez cliqué sur '''OK''' pour démarrer le serveur. Maintenant vous pouvez afficher vos ''informations de connexion'' (Connection Information) pour effectuer une vérification de contrôle de votre configuration. Les paramètres affichés devront être transmis à vos joueurs pour qu'ils puissent se connecter au serveur. 

1. Allez dans '''File &gt; Connection Information'''.

Cela affichera ce que MapTool sait à propos de votre ordinateur. A moins que vous n'ayez déjà démarré le serveur, vous verrez uniquement les adresses IP internes et externes de votre ordinateur (Informations utiles, tout spécialement si vous n'avez pas encore paramétré la redirection de ports !)

Si le serveur est démarré, vous avez également son nom (si vous lui en avez donné un), et le port utilisé par le trafic réseau de MapTool.

2. Procurez ces informations à vos joueurs : 
* Le ''nom du serveur'' (Names) ou ''RPTools Alias'' si vous en avez saisi un. 
* L'adresse ''IP externe'' (External Address).
* Le ''Port'' utilisé. 
Ces informations leur seront nécessaires dans la fenêtre de dialogue '''Connexion à un serveur''' lorsqu'ils essayeront se se connecter à votre serveur.

&lt;br style=&quot;clear:both;&quot;/&gt;

==Se connecter à un serveur MapTool==

Les étapes menant à ce point vous ont conduit à configurer un serveur MapTool de telle façon que d'autres personnes peuvent maintenant s'y connecter. Les étapes suivantes sont consacrées aux personnes (vos amis?) qui pourraient vouloir se connecter au serveur que vous venez de créer. Bien sûr, si vous ne connaissez personne susceptible de vouloir se connecter à votre serveur, les choses vont devenir lassantes assez vite.

===Pré requis===

La suite de ce guide part du principe que tout ce qui suit est vrai ! L'absence de n'importe quel élément va couper court à tout le reste.

* Vous avez des amis
* Vous avez démarré un serveur MapTool
* Vos amis connaissent ce qui qui suit :
** Soit le ''nom'' du serveur (''Name'') OU l'''adresse externe'' (''External Address'') du serveur (de préférence ... les deux !)
** Quel est le ''mot de passe'' approprié (''password''), soit celui du MJ, soit des joueurs
** Quel est le ''Port'' qu'utilise le serveur
* '''Très IMPORTANT: vos amis utilisent la même version de MapTool que vous !'''

===Ouvrir la fenêtre de Connexion au serveur===

[[Image:mt-connect-to-server.jpg|thumb|La fenêtre '''Connect to Server''']]

Si les pré requis mentionnés ci-dessus sont remplis, voilà ce que vous devez dire à vos amis :

1. Allez dans le menu '''Fichier &gt; Se connecter à un Serveur''' pour voir la fenêtre '''Connect to Server'''.

2. Entrez un ''User name'' (''Nom d'utilisateur''). Cela peut être n'importe quoi souhaité par vos amis.

3. Entez le mot de passe (''password''), que vous avez précisé en démarrant le serveur.

4. Choisissez votre ''Rôle'' (''Role''). Vos amis peuvent se connecter en tant que MJ (''GM''), ou en tant que Joueur (''Player''). Assurez-vous qu'ils aient choisi le bon rôle par rapport au mot de passe saisi.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Choisir comment vous allez vous connecter===

La fenêtre '''Connect to Server''' propose trois méthodes pour se connecter à un serveur démarré.

====RPTools.net====

[[Image:mt-connect-registry.jpg|thumb|L'onglet RPTools dans '''Connect to Server''']]

Cet onglet (affiché par défaut) liste tous les serveurs qui se sont enregistrés (=ont signalé leur présence) auprès du ''Server Registry'' (registre des serveurs) du site RPTools.net. Quand vous démarrez votre serveur, vous aviez l'option de donner un  ''alias'', nom qui apparait dans cette liste. Le ''Server Registry'' enregistre les informations de connexion du serveur, ainsi vos amis ont juste à sélectionner le serveur qu'ils veulent et cliquez '''OK'''.

&lt;br style=&quot;clear:both;&quot;/&gt;

====LAN====

[[Image:mt-connect-lan.jpg|thumb|L'onglet '''LAN''' dans '''Connect to Server''']]

Cet onglet montrera tous les serveurs qui sont démarrés sur le ''réseau local''. Utile lorsque vous organisez une ''LAN Party'' MapTool, ou quand tous vos amis sont dans le même réseau local (par exemple, tout le monde a amené sont portable chez vous pour une soirée de jeu).

&lt;br style=&quot;clear:both;&quot;/&gt;

====Direct====

[[Image:mt-connect-direct.jpg|thumb|L'onglet '''Direct''' dans '''Connect to Server''']]

Lors d'une connexion directe, vos amis évitent l'onglet &quot;facile&quot; RPTools.net et tapent simplement l'adresse externe et le n° de port de votre serveur (ils savent, ou vous leur avez dit, que votre adresse IP sur Internet est, par exemple, &quot;213.34.45.2&quot; et le port est &quot;51234&quot;).

&lt;br style=&quot;clear:both;&quot;/&gt;

===Vérifier l'état de la connexion===

Lorsqu'un de vos amis se connecte à votre serveur MapTool, vous verrez une notification apparaître dans la fenêtre de Chat indiquant qu'une personne s'est connectée à votre serveur et qui ressemblera a :

&lt;font color=&quot;blue&quot;&gt;''JQRandom has connected.''&lt;/font&gt;

Vous pouvez aussi vérifier la fenêtre Connexions pour vérifier la liste des personnes connectées à votre serveur. Si vous ne voyez pas la fenêtre de connexions, allez dans le menu Fenêtres&gt;Connexions pour en récupérer la vue.

{{Languages|Introduction to Game Hosting}}[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Uninstalling</title>
    <ns>0</ns>
    <id>951</id>
    <revision>
      <id>3351</id>
      <parentid>3349</parentid>
      <timestamp>2009-05-11T15:24:10Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>updated OSX and Linux/Unix details</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1605">{{stub|Confirmed accuracy on Mac information, and Unix/Linux information.}}
MapTool does not have a specific uninstall program, but leaves a relatively small footprint on your computer. Here is what you need to do to remove it completely

If you are uninstalling because you did not like the program, be sure to visit [http://forums.rptools.net/ the forums] (specifically, the MapTool forum) and give us some feedback so we can improve it for the next person!

== Executed via WebStart ==
If you used the Java WebStart feature, simply open the Java Control Panel and empty the cache.

== Executed from Zip == 
If you executed MapTool, check your home directory (see below) and delete the *.maptool folder* That will remove all of the preloaded images and any cached campaign information.

'''Home Directory Locations'''
* Windows Vista or Windows 7: {{code|C:\Users\&lt;username&gt;\.maptool\}}
* Windows XP: {{code|C:\Documents &amp; Settings\&lt;username&gt;\.maptool\}}
* Macintosh OS X: {{code|~/.maptool/}} or {{code|/home/&lt;username&gt;/.maptool/}}
* Linux and other Unix: {{code|~/.maptool/}} or {{code|/home/&lt;username&gt;/.maptool/}}

Finally, delete the .zip and the directory you unzipped MapTool into.

== Removing all Preferences Settings ==
To delete the preferences associated with MapTool and Java you can look at the following ***WARNING*** Edit the registry ONLY if you know EXACTLY what you are doing:
* Windows (all): {{code|HKEY_CURRENT_USER\Software\JavaSoft\Prefs\/Map/Tool\}}
* Macintosh OS X: all files in {{code|Library/Preferences}} that begin with {{code|maptool.}}
* Linux and other Unix: ''unknown''</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Trim Number</title>
    <ns>0</ns>
    <id>952</id>
    <revision>
      <id>3355</id>
      <parentid>3354</parentid>
      <timestamp>2009-05-11T23:49:55Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2519">''' ''Requires MapTool 1.3b56'' '''&lt;br&gt;
The following is a user defined function that allows you to trim any trailing zeros from a floating point number(a number with decimal places). It also allows you to truncate the decimal places to a certain length and round any truncated decimal places in a certain direction.

===Usage===
&lt;source lang=&quot;mtmacro&quot; line&gt;
trimNumber(number)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
trimNumber(number, length)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
trimNumber(number, length, direction)
&lt;/source&gt;
'''Parameters:'''
{{param|number|The number to be trimmed.}}
{{param|length|How many decimal places the trimmed number should retain, defaults to {{code|10}}.}}
{{param|direction|A string containing the direction that any truncated decimals placed should be rounded it. Accepts {{code|&quot;up&quot;}}, {{code|&quot;u&quot;}}, {{code|&quot;down&quot;}}, and {{code|&quot;d&quot;}}, defaults to rounding to the nearest.}}

===Macros===
Place the following macros on the same library token(or on different library tokens if you're know what you're doing and what to change).
&lt;hr&gt;'''onCampaignLoad'''
&lt;source lang=&quot;mtmacro&quot;&gt;
[defineFunction(&quot;trimNumber&quot;, &quot;trimNumber@this&quot;, 1)]
&lt;/source&gt;
&lt;hr&gt;&lt;br&gt;
&lt;hr&gt;'''trimNumber'''
&lt;source lang=&quot;mtmacro&quot;&gt;
[assert(argCount() != 0, &quot;trimNumber() requires at least one parameter.&quot;)]
[assert(argCount() &lt;= 3, &quot;trimNumber() accepts a maximum of three parameters.&quot;)]
[NumberToTrim = arg(0)]
&lt;!-- Set truncation depth --&gt;
[if(argCount() &gt;= 2), code:
{
    [TruncationDepth = power(10, arg(1))]
};{
    [TruncationDepth = power(10, 10)]
}]
&lt;!-- Set rounding method --&gt;
[if(argCount() == 3), code:
{
    [RoundingMethod = substring(arg(2), 0 , 1)]
};{
    [RoundingMethod = 0]
}]
&lt;!-- Perform trim --&gt;
[switch(RoundingMethod):
    case &quot;u&quot;: NumberToTrim = ceiling(NumberToTrim*TruncationDepth)/TruncationDepth;
    case &quot;d&quot;: NumberToTrim = floor(NumberToTrim*TruncationDepth)/TruncationDepth;
    default: NumberToTrim = round(NumberToTrim*TruncationDepth)/TruncationDepth
]
[macro.return = NumberToTrim]
&lt;/source&gt;
&lt;hr&gt;&lt;br&gt;

===Examples===
&lt;source lang=&quot;mtmacro&quot;&gt;
[r: trimNumber(1.125000)]
&lt;/source&gt;
Returns {{code|1.125}}

&lt;source lang=&quot;mtmacro&quot;&gt;
[r: trimNumber(1.125000, 2)]
&lt;/source&gt;
Returns {{code|1.13}}

&lt;source lang=&quot;mtmacro&quot;&gt;
[r: trimNumber(1.124000, 2)]
&lt;/source&gt;
Returns {{code|1.12}}

&lt;source lang=&quot;mtmacro&quot;&gt;
[r: trimNumber(1.123000, 2, &quot;up&quot;)]
&lt;/source&gt;
Returns {{code|1.13}}

&lt;source lang=&quot;mtmacro&quot;&gt;
[r: trimNumber(1.128000, 2, &quot;down&quot;)]
&lt;/source&gt;
Returns {{code|1.12}}

[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>MapTool FAQ</title>
    <ns>0</ns>
    <id>953</id>
    <revision>
      <id>5018</id>
      <parentid>5017</parentid>
      <timestamp>2010-12-24T14:44:39Z</timestamp>
      <contributor>
        <username>JElmore</username>
        <id>281</id>
      </contributor>
      <minor/>
      <comment>Whoops, edited wrong one</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="702">===Where are the default resources located?===
The default resources that come with MapTool are located within the {{code|.maptool}} directory that is below your user directory.
* Windows Vista or Windows 7: {{code|C:\Users\&lt;username&gt;\.maptool\resource\Default\}}
* Windows XP: {{code|C:\Documents &amp; Settings\&lt;username&gt;\.maptool\resource\Default\}}
* Macintosh OS X: {{code|~/.maptool/resource/Default/}} or {{code|/Users/&lt;username&gt;/.maptool/resource/Default/}}
* Linux and other Unix: {{code|~/.maptool/resource/Default/}} or {{code|/home/&lt;username&gt;/.maptool/resource/Default/}}
'''Note:''' You should NOT place your own resources within this directory, or they could be deleted.

[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:FrameDemo.png</title>
    <ns>6</ns>
    <id>954</id>
    <revision>
      <id>3368</id>
      <timestamp>2009-05-25T03:04:58Z</timestamp>
      <contributor>
        <username>Ernimtir</username>
        <id>63</id>
      </contributor>
      <comment>Picture of a simple demonstration of the [frame():] roll option.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="64">Picture of a simple demonstration of the [frame():] roll option.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:frame (roll option)</title>
    <ns>1</ns>
    <id>955</id>
    <revision>
      <id>3371</id>
      <timestamp>2009-05-25T03:59:09Z</timestamp>
      <contributor>
        <username>Ernimtir</username>
        <id>63</id>
      </contributor>
      <comment>opened discussion on &quot;temporary&quot; parameter</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="493">The temporary option appears to either be bugged or not applicable to frames in my testing (using 1.3b56). Calling with the second parameter absent, with the secondary parameter set to &quot;temporary=1&quot; and with it set to &quot;temporary=0&quot; all result in the frame reopening at the location and size it was before being closed. If someone else could verify this and remove the references to an apparently unused  parameter it would be appreciated.  --[[User:Ernimtir|Ernimtir]] 03:59, 25 May 2009 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:isBarVisible</title>
    <ns>1</ns>
    <id>956</id>
    <revision>
      <id>3384</id>
      <parentid>3382</parentid>
      <timestamp>2009-05-30T11:43:29Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="284">It states in the error message that it expects 1 to 3 arguments, but I'm unsure of the other potential two.  Anybody have any ideas?
* There error message has not been converted over to the I18N system; it only accepts one parameter. [[User:Verisimilar|zEal]] 11:43, 30 May 2009 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Tokens/fr</title>
    <ns>0</ns>
    <id>957</id>
    <revision>
      <id>3694</id>
      <parentid>3499</parentid>
      <timestamp>2009-07-08T17:50:12Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Corrected link to Light/Sight tutorial</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22063">==Introduction à la gestion des pions==

Comme il est spécifié dans le guide [[Introduction_to_Mapping/fr|Introduction à la création de carte]], Un [[Macros:Glossary#P|pion]] (token) est dans le jargon de MapTool un marqueur visuel  placée sur une carte par l'intermédiaire du logiciel. L'utilisation la plus intuitive pour les pions est de leur faire représenter les personnages dans le jeu - en d'autres termes, les pions remplacent les figurines sur la table de jeu virtuelle.

===Pré-requis===

Ce guide suppose que vous avez déjà lu la partie [[Introduction_to_Mapping/fr|Introduction à la création de carte]], et que vous savez comment :

* Ajouter un répertoire à votre bibliothèque de ressources, mettre à jour/ajouter des images dans ces répertoires pour qu'ils apparaissent dans votre bibliothèque de ressources.
* Créer une carte dans MapTool.
* Placer des Pions (Token) sur une carte et les faire bouger.
* Modifier le nom, le nom MJ et le label d'un Pion.
* Modifier la taille d'un pion.
* Changer l'image d'un pion.
* Déplacer les pions d'une carte vers une autre.

Si vous ignorez comment faire ces choses, veuillez lire la section [[Introduction_to_Mapping/fr|Introduction à la création de carte]] - sinon les informations qui suivent pourraient bien n'avoir aucun sens pour vous.

Enfin, ce guide est principalement dédié au Maître de Jeu (celui qui a le contrôle complet sur tous les pions et les propriétés de la campagne). Les possibilités de modifications des joueurs (ceux qui rejoignent la partie avec le rôle &quot;Player&quot;) sont limitées pour tout ce qui se rapporte à la campagne en cours.

===Les différents calques===

Bien que la plupart des utilisateurs utilisent le terme &quot;pion&quot; ou &quot;token&quot; pour parler des images représentants les personnages et les monstres sur une carte, en réalité, cela peut s'appliquer à n'importe quel objet image déposé sur la carte. La manière dont un pion sera géré dépend du calque de carte sur lequel il est situé. Ces calques sont expliqués plus bas, car ils sont importants pour la compréhension du fonctionnement des pions.

*Les objets déposés sur le calque '''Token''' sont ce que nous appelons communément les ''pions'' - ils représentent les personnages, les monstres et les PNJ - les gens et les créatures du jeu. 
*Les objets déposés sur le calque '''Object''' sont des images de matériels divers, coffres et autres &quot;choses&quot; dans le monde du jeu - quelque chose que les créatures peuvent manipuler ou utiliser. MapTool les considèrera toujours comme des pions (en fait, n'importe quoi est un pion dans l'esprit étroit de MapTool) mais pour plus de clarté, la plupart des utilisateurs les appellent ''Objets'' pour les distinguer des pions représentant les ''personnages''.
*Les objets déposés sur le calque '''Background''' représentent ce qui fait le fond de la carte - murs, falaises, boue, herbe. Ils peuvent être uniques, mais sont plus souvent tamponnés un peu partout sur la carte soit à l'intérieur d'un dessin ou parce que vous utilisez plusieurs copies de la même image ( par exemple, utiliser plusieurs copies d'un mur permet de créer une pièce entière). A cause de cela, de nombreux utilisateurs appellent ces images des ''tampons''.

====Le calque caché (Hidden)====

Vous aurez remarqué que le calque '''caché''' n'a pas été abordé au paragraphe précédent. C'est à cause de son utilité quelque peu différente.

Alors que les calques Token, Object, et Background ont une utilisation très naturelle dans la manière de concevoir le monde -- je suis une ''personne ou une créature'', cet chose là est un ''objet'', et nous sommes entourés par cet ''arrière-plan'' -- le calque Hidden représente tout ce que vous ''ne pouvez pas voir''. Dans MapTool, tout ce qui est placé sur ce calque sera visible seulement pour le MJ, jusqu'à ce qu'il décide de le déplacer vers un autre calque.

Généralement, vous voudrez placer des personnages et des objets sur ce calque - il n'y a pas beaucoup de raisons de placer un élément de l'arrière-plan sur le calque caché, bien que je suis sûr que vous trouverez bien deux ou trois bonnes raisons.

Tout cela suffit pour dire que lorsque vous placez un pion sur une carte de MapTool, cela rapporte toujours de savoir sur quel calque vous l'avez mis !

==Création d'un nouveau Pion==

Créer un nouveau pion est aussi simple que déposer une image depuis votre bibliothèque de ressource sur le calque Token de votre carte (vous pouvez aussi le faire directement depuis l'explorateur Windows). Cependant comment créer d'abord une image adaptée? Il y a plusieurs options.

===Télécharger une Image===

La communauté d'utilisateur de MapTool a créé une grande quantité d'images de pions disponible pour votre usage. Allez sur le site [http://gallery.rptools.net RPTools Gallery] pour voir les centaines d'images de pions déjà téléchargeables.

===Créer un pion via TokenTool===

Une autre manière de faire consiste à utiliser [http://www.rptools.net/index.php?page=tokentool TokenTool], un programme réalisé par les concepteurs de MapTool pour créer vos propres images de pions rapidement et facilement. Pour cela :

1. Télécharger TokenTool et lancez-le en double-cliquant sur le fichier comportant l'extension '''.jar''' (il s'agit d'un fichier &quot;JAR&quot; exécutable  qui fonctionne avec l'environnement java). 

2. Trouvez une image qui vous convient (attention aux droits d'auteur) et déposez la sur le panneau de gauche de le fenêtre de TokenTool (la partie avec un petit anneau et un fond noir).

3. Quand l'image apparaît, cliquez en maintenant le bouton gauche enfoncé sur votre image puis déplacez la de façon à faire apparaître votre pion à l'intérieur de l'anneau. Vous pouvez avoir un aperçu de ce à quoi votre pion ressemblera dans le coin supérieur droit de la fenêtre TokenTool.
* '''Astuce''': Vous pouvez utiliser la molette de votre souris ou les boutons de zoom pour ajuster la taille de votre image jusqu'à ce qu'elle ait l'aspect désiré.
* '''Astuce''': Vous pouvez changer l'aspect, la couleur de la bordure, la taille finale de votre pion et beaucoup d'autres options en utilisant les menus déroulant à droite de la fenêtre TokenTool.

4. Lorsque vous êtes satisfait du résultat, allez dans '''File &gt; Save Token''', et sauvegardez le pion ainsi créé, soit directement dans le répertoire de votre bibliothèque de ressources, soit dans un répertoire que vous avez prévu d'ajouter ultérieurement à celle-ci. Notez bien que le fichier sera sauvegardé au format PNG (ce qui est une bonne chose, puisque ce format gère la transparence ! Ainsi votre pion ne débordera pas du cadre).

5. Retournez dans Maptool pour mettre à jour votre bibliothèque de ressources et vous pourrez voir votre nouveau pion ! Déposez le sur la carte et vous serez prêt à commencer.

===Dessinez votre pion vous-même===

Vous pouvez créer une image de pion en utilisant un logiciel de dessin et en sauvegardant le fichier au format PNG ou JPG, dans le répertoire de votre bibliothèque de ressources ou à un autre endroit. Le format PNG est recommandé pour les pions car il gère la transparence et présente un meilleur aspect. 

Vous pouvez aussi combiner vos propres création avec TokenTool pour obtenir de superbe pion au format approprié.

==Modifier un Pion==

Modifier un pion signifie changer n'importe laquelle des caractéristiques d'un pion, que cela soit son image, ses noms ou ses paramètres de configuration. Modifier les noms, image et taille d'un pion sont expliqués dans  [[Introduction_to_Mapping|Introduction à la création de carte]].  

La section suivante traite des différentes options, onglets et listes déroulantes dans la fenêtre '''Edit Token'''. 

===Type de pion===

Les pions sont de deux types possibles dans MapTool : PC (PJ) et NPC (PNJ). Les joueurs de jeux de rôles sont déjà familiers avec ceux-ci car ils signifient &quot;Personnage Joueur&quot; et &quot;Personnage Non Joueur&quot;, et l'usage le plus courrant pour ces deux types est pour faire la distinction entre les deux groupes au cours d'une partie. 

En général, les pions qui appartiennent à ''vos joueurs'' ont le type &quot;PC&quot;. Ceux qui ''vous'' appartiennent devraient avoir le type &quot;NPC&quot;. 

[[Image:Edit-token.jpg|thumb|La boite de dialogue '''Edit Token''']]

'''Remarque''': Le ''type'' d'un pion n'a rien à voir avec qui peut manipuler ce pion ou voir ses propriétés - à l'inverse, ce pouvoir est conféré au ''owner'' (propriétaire) ou ''owners'' (propriétaires) du pion. En tant que MJ, on considère que vous avez autorité sur tous les pions de la campagne. Voir la section [[Introduction_to_Tokens/fr#Appartenance|Appartenance]], plus bas, pour plus d'information. 

Pour changer le type d'un Pion :

1. Double-cliquez sur le Pion pour ouvrir la boite de dialogue '''Edit Token'''.

2. Dans le coin supérieur droit, utiliser le menu déroulant pour choisir '''Pc''' (PJ) ou '''Npc''' (PNJ). 

3. Cliquez sur '''OK'''.

===Notes===

[[Image:Notes-tab.jpg|thumb|L'onglet Notes de la boite de dialogue '''Edit Token''']]

L'onglet Notes présente deux zones de texte dans lesquelles vous pouvez saisir des remarques à propos du Pion. Ces champs acceptent les balises HTML de base, ainsi vous pouvez mettre ces remarques au format désiré (voir ce site sur les [http://starshoot.chez.com/html/listbalises.htm Balises HTML] pour plus de détails sur le sujet).

La partie supérieure est consacrée aux notes générales accessible à tous. La partie inférieure (intitulée '''GM Notes''') concerne les notes que seul le MJ peut consulter. 

Les Notes sont assez compliquées à utiliser - MapTool dispose d'un mécanisme pour les afficher dans une jolie bulle, mais pour cela, vous avez deux ou trois trucs à faire avant : 

# Saisissez les informations dans le champ notes du Pion.
# Placez le Pion sur le calque '''Object''' ou '''Background''' 
# En faisant un clic droit sur le Pion puis en sélectionnant '''Change To &gt;''', Ramenez le sur le calque '''Token'''

Maintenant, vous pouvez remarquer que lorsque vous placez le curseur de votre souris au dessus de votre Pion, le curseur se transforme en main. Si vous double-cliquez dessus, au lieu de l'habituelle boite de dialogue '''Edit Token''', vous pouvez admirer une petite bulle dans le coin inférieur gauche de la carte qui affiche vos remarques.

La principale leçon est que -- alors que vous pouvez accéder aux remarques concernant le Pion de différentes manières -- un des usages les plus courant est de placer des notes ou des penses-bêtes sur les Pions et Objets qui se trouveront sur les calques &quot;Object&quot; ou &quot;Background&quot;.

===Propriétés===

[[Image:Properties-tab.jpg|thumb|L'onglet '''Propriétés''']]

Comme les '''Propriétés''' sont fortement liées à la création et à l'utilisation des Macros des Pions, elles repésentent un sujet à part entière et disposent d'un guide complet. Cette section ne rentrera donc pas profondément dans le détail, mais présentera par contre les informations élémentaires sur le sujet.

N'importe quel Pion déposé sur le calque ''Token'' d'une carte MapTool gagne automatiquement un ensemble de '''propriétés''', qui peut typiquement être des valeurs, des caractéristiques ou des attributs (vous savez les chiffres sur une feuille de personnage). En effet, chaque Pion emporte avec lui sa feuille de personnage intégrée. En langage de programmation, les propriétés peuvent être assimilées à des variables qui peuvent être de différents types et utilisées ultérieurement par des Macros. 

* '''Remarque: bien que la plupart des gens  se réfèrent aux propriétés du Pion, les propriétés visibles dans la fenêtre de dialogue &quot;Edit Token&quot; concernent uniquement les propriétés qui ont été établies pour la campagne en cours.

Quand vous cliquez sur l'onglet '''Macros''' dans la fenêtre de dialogue &quot;Edit Token&quot;, vous voyez une liste de propriétés actuellement utilisées dans la campagne. Si vous ouvrez une nouvelle campagne (ou simplement si vous démarrez MapTool), vous aurez les ''propriétés par défaut'', ce qui ressemble à :

* Strength
* Dexterity
* Constitution
* Intelligence
* Wisdom
* Charisma
* HP
* AC
* Defense
* Movement
* Elevation
* Description

Pour la suite, les exemples fournis utiliseront les propriétés de la liste précédente.

La liste de propriété que vous voyez se trouve dans une table, avec le nom de la propriété à gauche, et une case vide à droite. Dans cet espace, vous pouvez saisir les valeurs que vous souhaitez attribuer à une propriété. Vous pouvez saisir du texte, des nombres et dans certains cas plus complexes, des résultats de macros à la place d'une propriété particulière.

Une fois que vous avez cliqué sur '''OK''', cette propriété se verra attribuer - pour le Pion en question - la valeur que vous avez saisie. Plus tard, si vous écrivez des macros, vous pourrez vous référer à ces propriétés pour réaliser vos calculs ou jets de dés.

Puisque les propriétés représentent un sujet majeur à elles toutes seules, consultez le guide [[Introduction to Properties/fr|Introduction aux Propriétés]] pour plus d'information.

===État===

[[Image:State-tab.jpg|thumb|L'onglet '''État''']]

[[Image:State-example.jpg|thumb|Un État a été appliqué sur ce Pion - la petite image rouge est une image d'état superposée à l'image du Pion]]

L''''État''' est un marqueur visuel qui peut être appliqué à un Pion (typiquement en apparaissant en surimpression sur l'image d'un Pion) qui peut être utilisé comme une sorte de d'indicateur dont vous pourriez avoir besoin en cours de jeu. Par exemple, si vous souhaitez un marqueur pour vous indiquer qu'un Pion de PNJ est mort, vous pouvez lui appliquer l'État &quot;Dead&quot;, et quelle que soit l'image que vous avez choisie pour indiquer la mort, elle apparaîtra sur le Pion.

Les États chargés par défaut lorsque vous lancez MapTool sont :

* Dead
* Disabled
* Hidden
* Prone
* Incapacitated
* Other
* Other 2
* Other 3
* Other 4

&lt;br style=&quot;clear:both;&quot;/&gt;

====Barre de santé====

[[Image:Bar-example.jpg|thumb|Une ''barre'' de sante a été appliquée en surimpression sur ce Pion. La barre peut être réglée pour correspondre à différentes quantités à travers des Macros]]

L'onglet Etat contient aussi des informations pour les '''barres''' que les Pions affichent ou peuvent afficher. Ces barres s'affichent en surimpression sur l'image du Pion (au dessus, en dessous ou sur le côté), et peuvent être utilisées pour afficher des informations comme la santé (ou les munitions, la magie, ou tout ce qui peut être perdu ou dépensé).

&lt;br style=&quot;clear:both;&quot;/&gt;

===Macros===

Obsolète depuis la version 1.3.b54, l'onglet Macro n'est plus activé. Il contenait à l'origine toutes les macros associées au Pion, mais avec la montée en puissance des capacités des macros, cet onglet est devenu de plus en plus inutile, jusqu'à ce qu'il soit enfin retiré. Il reste présent dans les versions précédentes, alors si vous voulez y jeter un œil...

===Dialogues===

[[Image:Speech-tab.jpg|thumb|L'onglet '''Dialogues''']]

Cet onglet contient la liste des dialogues pré-enregistrés du Pion sélectionné. Vous pouvez l'utiliser pour configurer des phrases, des aphorismes, des cris de batailles ou tout ce que vous pourriez vouloir faire dire à un Pion au cours d'un Chat. Il est composé de deux champs pour chaque objet dialogue :

* '''ID''': Ce champ est un identifiant court pour le dialogue. L'ID est utilisé en chat en référence au texte complet du dialogue. Cela peut être composé de caractères alphanumériques, aussi vous pouvez utiliser une combinaison de chiffres et de lettres. Toutefois, il ne peut pas contenir d'espace !
* '''Speech Text''': Il s'agit du texte qui sera affiché dans la fenêtre de Chat en résultat de votre commande. 

Pour utiliser un objet dialogue, procéder comme suit :

# Selectionnez le Pion à qui vous voulez faire &quot;dire&quot; quelque chose. 
# Dans la fenêtre de Chat, saisissez '''/tsay ID''', ou ID est remplacé par l'identifiant correspondant au dialogue souhaité. Ainsi si vous désirez que votre Pion hurle &quot;Mort aux gobelins unijambistes !!!&quot;, il faudra qu'au préalable, vous ayez saisis dans la fenêtre '''Speech''', un ''ID'' (par exemple :hurle1) et le ''Speech Text'' souhaité. Ensuite, dans la fenêtre de Chat, saisissez '''/tsay hurle1''' et tout le monde comprendra que vous avez une vieille rancœur à l'égard de cette catégorie de créatures.

===Appartenance===

[[Image:Ownership-tab.jpg|thumb|L'onglet '''Appartenance''']]

L'appartenance d'un Pion ('''ownership''') décide qui parmi les joueurs [[Introduction_to_Game_Hosting/fr|connectés à la partie]] est autorisé à sélectionner, déplacer ou afficher les informations détaillées d'un Pion donné. 

Si vous êtes le '''propriétaire''' d'un Pion, vous pouvez le sélectionner, double-cliquer dessus pour l'ouvrir et l'éditer, le déplacer sur la carte. Si vous n'êtes pas le propriétaire d'un pion, vous serez limités à observer ses mouvement sur la carte et les informations que le propriétaire aura rendues publiques -- vous ne pourrez pas le sélectionner, le déplacer ni voir ses propriétés ou sa configuration.

Pour attribuer un propriétaire, ouvrez l'onglet '''ownership''' et cocher simplement la case à côté du nom de son nouveau propriétaire. Les noms affichés correspondent aux noms de chaque joueur (y compris celui du MJ) connecté à la partie. Les Pions se &quot;souviennent&quot; du nom de leur précédent propriétaire aussi si vous avez récupéré le Pion via Internet, pensez à mettre à jour son appartenance.

Si vous souhaitez que le Pion soit accessible à plusieurs joueurs, vous pouvez cocher plusieurs noms. Si vous souhaitez que tout le monde puisse y accéder, cochez simplement la case '''All Players'''.

===Configuration===

[[Image:Config-tab.jpg|thumb|L'onglet '''Configuration''']]

Cet onglet contient un certain nombre de réglages qui affecte l'apparence, les mouvements et les interactions d'un Pion avec MapTool.

====Forme (Shape)====

Les Pions peuvent avoir trois types de forme dans MapTool :

* '''Top Down''': habituellement dessiné à la main ou créé par logiciel d'infographie, ils montrent des créatures, des objets ou des personnages comme si vous les regardiez de dessus. Choisir ce réglage autorise le Pion à être utilisé comme une figurine et à être tourné lorsque vous faites un clic-droit dessus et que vous choisissez '''Change Facing''' (de cette manière, votre figurine peut se tourner et faire face à ses ennemis).
* '''Circle''': Les Pions circulaires ressemblent aux jetons de poker - le cercle avec l'image représente une créature ou un personnage. Parce qu'il n'ont pas vocation à avoir un aspect réaliste, quand vous utilisez ''Change Facing'', au lieu de tournez l'image - ce qui serait moche - une petite flêche jaune apparaît pour indiquer la direction à laquelle le pion fait face.
* '''Square''': Les Pions carré fonctionnent comme les Pions circulaires sauf qu'ils sont ... carrés.

:'''Remarque :'''Quelle que soit la forme et l'apparence de votre Pion, vous pouvez appliquer n'importe quel type des trois formes possibles.

====Taille (Size)====

Un Pion peut se voir attribuer une taille, ce qui le fera grossir ou rapetisser.

Les tailles disponibles dépendent de la grille de la carte que vous avez [[Introduction_to_Mapping|réglée]] et sur laquelle le Pion se trouve. Si vous avez choisi une carte avec une grille (hexagonale ou carrée), vous aurez quand même l'option '''Free Size''' (ou taille libre qui vous permet de choisir la taille que vous voulez pour votre Pion) ou parmi certaines tailles allant de Minuscule (Fine) à Colossal (Colossal) (Si vous jouez à D&amp;D, elles vous sont probablement déjà familière).

Si vous n'avez pas mis de grille quand vous avez créé la carte, vous pourrez choisir un facteur d'échelle allant de -11 à +20.

====Propriétés (Properties)====

Ce champ vous permet de choisir parmi les jeux de propriétés disponibles pour votre campagne auquel votre Pion se rapporte. Le concepteur de la campagne peut développer plusieurs jeux différents pour être utilisés par des Pions différents (par exemple un jeu pour les PJ, un pour les PNJ). Ce menu déroulant vous permet de choisir lequel vous voulez utiliser.

====Vision====

Ce champ vous permet de choisir le type de [[Introduction_to_Lights_and_Sights|vision]] le Pion possède. Les différents réglages de la '''vision''' autorisent le MJ à simuler l'obscurité, la lumière, les objets cachés et les ennemis camouflés.

====Coller à la grille (Snap to Grid)====

Cette case à cocher indique simplement si le Pion doit coller à la grille existante lorsqu'il est déplacé. Cette case décochée, le Pion ne tiendra pas compte de la grille lorsqu'il sera déplacé sur la carte.

====Visible pour les Joueurs (Visible to Players)====

Cette case à cocher vous permet de rendre un Pion invisible au joueur - lorsqu'elle est cochée, aucun joueur connecté ne peut voir ou interagir avec d'une quelconque manière.

====Disposition, Portrait et Présentation (Layout, Portrait and Handout)====

Ces trois espaces traitent de l'apparence visuelle du Pion :

* '''Layout''': Montre comment le Pion apparaîtra sur la carte. Vous pouvez agir dessus pour ajuster l'image à la grille (position et taille).
* '''Portrait''': Il s'agit d'une image séparée qui apparaît dans le coin gauche de la carte quand vous passez la souris au dessus du Pion.
* '''Handout''': Vous permet d'afficher une autre image qui apparaît lorsque vous faites un clic-droit sur le Pion et que vous choisissez '''Show Handout'''.

[[Category:MapTool]]
{{Languages|Introduction to Tokens}}{{#customtitle:Introduction à la gestion des pions|Introduction à la gestion des pions}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:simple-input.jpg</title>
    <ns>6</ns>
    <id>958</id>
    <revision>
      <id>3422</id>
      <timestamp>2009-06-12T13:06:17Z</timestamp>
      <contributor>
        <username>Cronk</username>
        <id>71</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Editor/fr</title>
    <ns>0</ns>
    <id>959</id>
    <revision>
      <id>3588</id>
      <parentid>3439</parentid>
      <timestamp>2009-06-26T15:46:17Z</timestamp>
      <contributor>
        <username>Emmanuel D</username>
        <id>75</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1633">{{Languages|Editor}}
Vous trouverez ici toutes les informations pour éditer et créer vos pages wiki.

Il n'y a pas à proprement parler de charte graphique extrêmement détaillée, donc vous devrez jeter un œil aux articles existants et vous en inspirer. Si vous voulez être sûr que l'article que vous êtes en train de regarder est correctement formaté, vous pouvez rechercher les articles récemment édités dans la partie [[Special:RecentChanges|Modifications Récentes]].  

Les modèles sont intensément utilisés, alors lisez l'article [[Help:Editing|Aide:Édition]] qui vous permettra de comprendre la syntaxe de nos différents modèles.

Bien que vous puissiez occasionnellement tomber sur un article à l'intérieur d'une catégorie, nous avons maintenant placé tous les articles dans la catégorie principale (ce qui revient à dire pas de catégorie), avec une exception : la catégorie spécifique de cet éditeur. Si croisez un de ces articles encore à l'intérieur d'une catégorie, cela veut probablement dire qu'il va être divisé ou peut-être ré-écrit. Vous pouvez le déplacer sans crainte.

'''Pages d'Informations:'''
* [[Editor:Translation|Editeur : Traduction]]
* [[Help:Editing|Aide : Édition]]

'''Pages de Discussion:'''
* [[Editor:Wanted Pages|Editeur : On Recherche]]
* [[Editor:To Do|Editeur : à Faire]]

Si vous avez des informations sur votre page utilisateur qui pourraient être utiles à d'autres éditeurs, n'hésitez pas à ajouter un lien à la liste ci-dessous :

* [[User:Craig]]
* [[User:Cclouser]]
* [[User:Verisimilar]]
{{Languages|Editor}}{{#customtitle:Éditeur|Éditeur}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Help:Contents/fr</title>
    <ns>12</ns>
    <id>960</id>
    <revision>
      <id>3438</id>
      <parentid>3437</parentid>
      <timestamp>2009-06-12T19:32:52Z</timestamp>
      <contributor>
        <username>Thallaxwish</username>
        <id>70</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="634">'''Q: J'ai besoin d'aide ! Par où commencer ?'''

Lorsque vous serez familiarisé avec les spécificités décrites dans [[Help:Editing]], vous pourrez vous plonger dans nos tutoriels et voir s'il y a encore des choses à ajouter. Vous pouvez aussi regarder quelles pages sont marquées en tant que [http://lmwcs.com/maptool/index.php?title=Special%3AWhatLinksHere&amp;target=Template%3Astub Squelettes], ou quelles pages sont marquées comme ayant besoin de [http://lmwcs.com/maptool/index.php?title=Special%3AWhatLinksHere&amp;target=Template%3AClarify Clarifications].
{{Languages|Help:Contents}}{{#customtitle:Aide:Contenu|Aide:Contenu}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>HP and Health Bars</title>
    <ns>0</ns>
    <id>961</id>
    <revision>
      <id>4304</id>
      <parentid>4203</parentid>
      <timestamp>2010-06-23T06:03:38Z</timestamp>
      <contributor>
        <username>Aliasmask</username>
        <id>182</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6088">Updating hit points (or wounds, life points, or the like) using macros is a commonly requested macro procedure, and a very useful feature. When combined with MapTool's Bars feature (which can display health bars, ammo bars, and the like) it can be a simple and very cool way to keep an eye on how your character is doing. 

Setting up Health Bars and the macros that update them is easy too.

==The Bar==

To set up or change the various Bars you want in your game, you access the Bars dialog by selecting ''Edit &gt; Campaign Properties''', and selecting the tab named '''Bars'''. 

You will see that by default, MapTool has one bar already set up - the Health Bar. A preview of this bar is shown in the lower portion of the Bars dialog (it will appear as a green bar on a black background). Grab the &quot;Preview&quot; slider and move it up and down - that's what the bar will look like as it is depleted. 

To see a bar on a Token, drag a token on the map, right-click on it, and select '''Bars &gt; Health.''' A dialog will pop up that shows a slider, as well as a checkbox called &quot;Hide.&quot; Uncheck the box, and hit '''OK''', and the bar will appear over the token. 

We will not do anything fancy with the bar at this point - we'll leave it as is. 

==The Healing &amp; Hurting Macro==

Bars can be altered by macros; each bar has a name, and when you need to refer to it in a macro, the variable you use is ''bar.BarName''. So, for instance, the Health Bar - in macro speak - is ''bar.Health''. 

We're going to create a short macro, in the Campaign window, that will adjust the hit points of a token, and adjust the Health Bar correspondingly. Before we can start, we need to make sure two properties exist. 

===HP and MaxHP===

Since the length of a health bar is calculated in our macro by dividing the current Hit Points by the Maximum Hit Points, we obviously need two Token Properties to represent these concepts. So, to do that, we edit the Campaign Properties to include two items: &quot;HP&quot; and ''MaxHP'' (you can use whatever name you like, but I like those). 

To put these properties in (assuming that you are using the default set of properties):

# Select '''Edit &gt; Campaign Properties'''.
# In the Properties tab, select &quot;Basic&quot; in the left-hand list of property types.
# In the main text area, you will see a list of properties, including things like Strength, Dexterity, and so forth.
# Put your cursor in that text window, and add - at the bottom of the list - the property ''MaxHP''.
# Click the &quot;Update&quot; button. The property list will be updated with the new ''MaxHP'' property.
# Click '''OK'''. 

You'll note that we didn't add any property for &quot;current HP,&quot; because the default properties already include that - it's called HP, and in the property list, it appears as ''*@HP''. 

Once you click OK, you can then double click on a token, and see the new property in the list of Token Properties. Make sure to put a number in that box (for instance, a token with all of its Hit Points, and a maximum of 25 hit points, should have the value 25 in both HP and MaxHP).

===Writing the Macro===

Assuming you've successfully created the new token property ''MaxHP'', we can move on to the macro itself. We're going to create a macro that pops up a small dialog, asking you for a number of hit points, and whether that many hit points is being lost or gained (damage or healing, in other words). 

# In the Campaign macro window (if you don't see it, select '''Window &gt; Campaign'''), right-click and select &quot;Add New Macro.&quot;
# Right-click on the button labeled '''(new)''' and select '''Edit'''.
# In the macro editing dialog, label the new macro &quot;Damage or Healing.&quot;
# At the bottom of the screen, check the box &quot;Apply to Selected Tokens.&quot;
# In the &quot;Options&quot; tab, uncheck &quot;Allow Players to Edit Macro&quot; (if it is not already unchecked). 
# Finally, go back to the &quot;Details&quot; tab, and in the main macro editing area, paste in the macro below.


&lt;source lang=&quot;mtmacro&quot;&gt;
[h:status = input(
&quot;hpChange|0|Number of Hit Points&quot;,
&quot;dmgOrHealing|Damage,Healing|Is the character taking damage or being healed?|RADIO|SELECT=0&quot;)]
[h:abort(status)]

[if(dmgOrHealing == 0),CODE:
{
    [h:HP = HP - hpChange]
    [h:bar.Health = HP / MaxHP]
    [r:token.name] loses [r:hpChange] hit points.
};
{
    [h:diff = MaxHP - HP]
    [h:HP = min(HP+hpChange, MaxHP)]
    [h:bar.Health = HP / MaxHP]
    [r:token.name] is healed and gains  [r:min(diff,hpChange)] hit points. 
};]
&lt;/source&gt;


After pasting that macro into the macro editing dialog, click '''OK''', and you're all set. You should now be able to select a token (making sure the token has values for both HP and MaxHP - otherwise, you can get errors) and click the macro button, and you will be prompted to enter the amount of HP gained or lost. Once you hit &quot;OK&quot; on that dialog, the token's properties will be updated, and the health bar will update as well.

=== Nonlethal damage ===
This macro can be expanded to also allow for non-lethal damage fairly easily. To do so, add one more Property called ''Nlthl'' to track the token's nonlethal damage accumulation. Then the macro becomes:
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:status = input(
&quot;hpChange|0|Number of Hit Points&quot;,
&quot;dmgOrHealing|Damage,Healing|Is the character taking damage or being healed?|RADIO|SELECT=0&quot;,
&quot;lethalOrNo|Lethal,Nonlethal|Is the damage lethal?|RADIO|SELECT=0&quot;)]
[h:abort(status)]

[if(dmgOrHealing == 0),CODE:
{
    [if(lethalOrNo == 0),CODE:
    {
        [h:HP = HP - hpChange]
        [h:bar.Health = (HP - Nlthl) / MaxHP]
        [r:token.name] loses [r:hpChange] hit points.
    };
    {
        [h:Nlthl = Nlthl + hpChange]
        [h:bar.Health = (HP - Nlthl) / MaxHP]
        [r:token.name] loses [r:hpChange] hit points.
    };]
};
{
    [h:diff = MaxHP - HP]
    [h:HP = min(HP+hpChange, MaxHP)]
    [h:Nlthl = max(Nlthl+hpChange, 0)]
    [h:bar.Health = (HP - Nlthl) / MaxHP]
    [r:token.name] is healed and gains  [r:min(diff,hpChange)] hit points. 
};]
&lt;/source&gt;

== Links ==

# [http://forums.rptools.net/viewtopic.php?t=13493 Fading Arc Health bar]
[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Properties/fr</title>
    <ns>0</ns>
    <id>962</id>
    <revision>
      <id>3545</id>
      <parentid>3544</parentid>
      <timestamp>2009-06-23T14:25:19Z</timestamp>
      <contributor>
        <username>Thallaxwish</username>
        <id>70</id>
      </contributor>
      <comment>/* Pour aller un peu plus loin ... */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21845">{{Languages|Introduction to Properties}}
==Propriétés de Campagne==

Un des aspects les plus utiles dans MapTool est la capacité des [[Introduction_to_Tokens/fr|Pions]] à emporter avec eux tout un jeu de '''Propriétés''', attachée à ce Pion, et qui peuvent être manipulées à travers des Macros ou utilisées pour créer des aperçus rapides de certaines informations. En d'autres termes, ces jeux de propriétés ressemblent à des feuilles de personnage intégrées.

Toutefois, puisqu'ils sont si utiles, les développeurs de MapTool ont créé différents moyens pour les utiliser et les manipuler. Ce guide traitera donc de la création d'un Jeu de Propriétés de Campagne, des valeurs par défaut à saisir pour les différents paramètres et comment les utiliser pour manipuler la feuille de personnage.

==Un exemple de règles : MTRPG==

De manière à pouvoir disposer d'exemples concrets alors même que ce tutoriel était en cours d'écriture, de nombreux utilisateurs et contributeurs de MapTool ont développé [[Sample Ruleset|les règles de MTRPG (MapTool Role Playing Game)]] -- un système de jeu simple développé spécifiquement pour illustrer les différentes parties de MapTool. Pour ce guide, nous créerons un nouveau fichier de campagne puis nous construirons quelques '''propriétés de campagne''' (''campaign properties'') qui correspondent aux spécificités de MTRPG

==La fenêtre Propriétés de la Campagne (Campaign Properties)==

[[Image:Edit-campaign-props.png|thumb|Le menu Edit, montrant l'option '''Campaign Properties...''']]

Pour intervenir sur les propriétés de la campagne, vous devez aller dans '''Edit &gt; Campaign Properties...''', qui ouvrira la fenêtre Propriétés de la campagne (''Campaign Properties''). Dans cette fenêtre, vous verrez de nombreux onglets et une foule d'informations.

Quand vous ouvrez la fenêtre '''Propriétés de la campagne''' (''Campaign Properties''), six onglets apparaissent et concernent :

* '''Token Properties (Propriétés du Pion)''': cet onglet héberge toutes les jeux de propriétés qu'un Pion peut avoir.
* '''Repositories''': dans cet onglet, vous pouvez définir un site distant pour accueillir vos fichiers de campagne, et plus particulièrement les images, de manière à améliorer vos temps de chargement et votre vitesse lors des parties sur Internet.
* '''Sight (Vision)''': cet onglet est dédié au réglage et à la configuration de la vision.
* '''Light (Lumière)''': cet onglet est consacré a la configuration des sources de lumière et des auras .
* '''States (États)''': cet onglet sert à la configuration des [[Token:state|État des Pions]]. 
* '''Bars (Barres)''': ici vous pouvez régler les différentes [[bar.name|barres de Pion]].
Les informations affichées concernent uniquement la campagne en cours.

Ce guide est uniquement consacré au premier onglet '''Propriétés du Pion''' (''Token Properties'').

==L'onglet Propriétés du Pion (Token Properties)==

[[Image:Camp-props.png|thumb|L'onglet '''Propriétés du Pion''' (''Token Properties'') de la fenêtre Propriétés de la Campagne]]

Le premier onglet visible est l'onglet '''Propriétés du Pion''' (''Token Properties''). cela parait relativement simple, mais il abrite quelques possibilités vraiment formidables. Il y a trois zones de texte dans cet onglet :

* Nom (''Name''): Il s'agit du nom de l'ensemble de propriétés que vous êtes en train de consulter. Quand vous ouvrez la fenêtre, aucun ensemble de propriétés n'est sélectionné.
* Type: cette colonne sur le coté gauche n'est pas éditable, mais fournit une liste de tous les ensembles de propriétés de la campagne courante. Si vous n'avez chargé aucune campagne, la seule entrée est '''Basic'''.
* Une large zone de texte dans laquelle vous pouvez saisir les propriétés de la campagne courante. Vide à l'ouverture de la fenêtre, vous obtenez le nom et la valeur par défaut de toutes les propriétés associées à chaque ensemble lorsque vous les sélectionnez dans la partie '''Type de Pion''' (''Token Type'').

===Type===

Dans ce champ, vous obtenez les noms des différents types de propriétés (que vous pouvez considérer comme des ''ensembles'' de propriétés) qui ont été configurés dans la campagne en cours. Si vous n'avez chargé aucune campagne, l'ensemble de propriétés par défaut affiché sera '''Basic'''. Le champ ''type'' n'est pas modifiable directement par l'utilisateur.

===Nom (''Name'')===

Dans ce champ, vous pouvez saisir le nom que vous souhaitez à un ensemble de propriétés. Ce nom apparaîtra dans la liste ''Token Type'', lorsque vous cliquerez sur le bouton '''update''' (mettre à jour). Vous pouvez mettre n'importe quels noms; certains utilisateurs appellent des ensembles &quot;PNJ&quot; lorsque les caractéristiques et les traits des PNJ diffèrent de ceux des PJ, par exemple.

===Propriétés===

C'est à partir d'ici que ça devient intéressant. Dans cette zone de texte, vous pouvez créer tout et n'importe quoi pour refléter tous les nombres et caractéristiques qu'un personnage de jeux de rôle peut avoir (ainsi que toutes celles qu'il n'a pas -- de nombreux utilisateurs créent des propriétés qui leurs sont utiles pour l'écriture de leur Macros mais qui n'apparaissent pas dans la feuille de personnage !).

==Créer un ensemble de Propriétés==

===Propriétés sans valeur par défaut===

[[Image:Basic-default-props.png|thumb|Les propriétés par défaut contenues dans l'ensemble de propriétés '''Basic''']]

Si vous jetez un oeil aux [[Sample_Ruleset#Primary_Attribute|Attributs principaux de MTRPG]], vous verrez qu'il existe quatre attributs de base pour un personnage : ''Force'', ''Dextérité'', ''Intelligence'' et ''Endurance''. Nous allons nous débarrasser des propriétés par défaut et les remplacer par ces nouvelles caractéristiques.

1. Allez dans '''Edit &gt; Campaign Properties'''. Vous verrez sur le coté gauche, en dessous de ''Token Type'', que la seule entrée est &quot;Basic&quot;. Nous allons donc créer un nouvel ensemble de propriétés.

2. Dans la liste '''Token Type''' sur la gauche, sélectionnez ''Basic''. Ce faisant, vous apercevez tout un tas de propriétés avec plein de symboles tels que @ ou #. 

3. Dans la zone de texte contenant toutes les propriétés, utilisez la souris pour toutes les sélectionner, puis appuyer sur la touche Effacer (''Delete'') de votre clavier. Allez-y, ne soyez pas timide !

4. Ne touchez pas au champ '''Name''' - MapTools doit toujours avoir un ensemble de propriétés ''Basic'', en conséquence, vous ne pouvez pas changer ce nom.

[[Image:Default-props-replaced.png|thumb|Les propriétés par défaut ont été effacées et remplacées par les quatre attributs de base de MTRPG]]

5. Dans la zone de texte sous le champ '''Name''', saisissez le nom de chaque attributs de MTRPG, pour obtenir ceci:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Force&lt;br/&gt;
Dextérité&lt;br/&gt;
Intelligence&lt;br/&gt;
Endurance&lt;/tt&gt;&lt;/blockquote&gt;

Une fois remplie, la fenêtre de propriétés devrait ressembler à la capture d'écran sur la droite.

6. Une fois que vous aurez saisi les propriétés souhaitées, cliquez sur le bouton '''Update''' (''Mettre à jour''). Ne vous inquiétez pas de voir les propriétés disparaître, vous devrez sélectionner ''Basic'' dans la liste à gauche pour les voir ré-apparaître dans la zone de texte principale.

7. Cliquez sur '''OK''' pour confirmer vos changements et fermez la fenêtre '''Campaign Properties''' (''Propriétés de Campagne''). 

8. Allez dans '''File &gt; Save Campaign As''' et sauvegardez votre campagne sous '''MTRPG.cmpgn'''. Vous avez maintenant créé un nouveau fichier de campagne accompagné d'un nouvel ensemble de propriétés.

Quand vous créez des propriétés de cette façon -- en listant les valeurs les unes après les autres -- et que vous ouvrez un Pion, vous remarquerez que ces propriétés n'ont pas de valeurs. Cela ne signifie pas qu'elles sont égales à zéro ou qu'elles sont remplies avec des espaces blancs - cela veut littéralement dire qu'elles n'ont pas de valeurs. Cela ne signifie pas grand chose dans la plupart des cas, mais il s'agit d'une distinction importante en terme d'écriture de Macros (en programmation, il y une grande différence entre une ligne de blanc et une variable laissée vide !). 

Une fois les propriétés mises à jour, tous les Pions sur la carte ainsi que ceux à venir hériteront des nouvelles propriétés que vous avez définies.

'''NOTE''': Les noms des proprietes ne peuvent pas contenir d'espaces - ainsi si vous avez besoin d'une propriété ''Points de Vie'', vous devrez la saisir comme ''PointdeVie''.

===Créer des propriétés ayant des valeurs par défaut===

[[Image:Newprops-defvalues.png|thumb|Les propriétés de MTRPG ont maintenant des valeurs par défaut]]

Dans MTRPG, la valeur minimum qu'un attribut peut avoir est 1. Dans ces conditions, il parait sensé de régler la ''valeur par défaut'' de ses propriétés à 1 (ainsi, tous les Pions auront au moins la valeur minimum qu'un attribut peut avoir). Pour faire cela :

1. Ouvrez la fenêtre des ''propriétés de la campagne''.

2. Sélectionnez l'ensemble de propriétés ''Basic''.

3. Dans la zone de texte principale, éditez les propriétés de manière à obtenir :

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Force:1&lt;br&gt;
Dexterité:1&lt;br&gt;
Intelligence:1&lt;br&gt;
Endurance:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

4. Cliquez sur '''Update'''.

En plaçant deux points puis 1 à la fin du nom de chaque attribut, vous demandez à MapTool d'affecter 1 à la valeur par défaut pour ces propriétés (en d'autres termes, n'importe quelle valeur placée après les deux points devient la ''valeur par défaut'' de la propriété en question). Vous remarquerez qu'au bas de la zone de texte principale, se trouve une légende décrivant les différentes options que vous pouvez affecter à une propriété.

Maintenant, si vous déposer un nouveau Pion sur la carte et que vous regardez ses propriétés (double-cliquez sur le Pion et sélectionnez l'onglet Propriétés dans la fenêtre de dialogue ''Edit Token''), vous verrez que les propriétés du Pion ont les valeurs par défaut.

Ne vous inquiétez pas à propos des Pions dont vous avez déjà modifié les valeurs des propriétés - régler ou modifier les valeurs par défaut ne change en rien des propriétés déjà saisies. MapTool est assez intelligent pour gérer ça.

===Afficher les Propriétés dans la feuille de caractéristiques===

[[Image:Statsheet-props.png|thumb|La feuille de caractéristiques affichant les propriétés que vous avez établies. Vous verrez comment les faire apparaître dans cette section.]]

MapTool dispose d'une fonctionnalité sympathique appelée '''Statsheet''' (feuille de caractéristiques), laquelle est mentionnée brièvement dans la section [[Introduction to Tokens/fr|Introduction à la gestion des Pions]] - Il s'agit simplement d'une info-bulle qui apparaît dans le coin inférieur gauche de la carte, quand vous passez au dessus du Pion avec la souris.

Peut-être êtes vous en train de vous dire : &quot;Attendez... quand je passe au-dessus de ma figurine, il n'y a aucune feuille de caractéristiques ! Où est-elle?&quot; La raison pour laquelle vous ne voyez rien apparaître pour l'instant est que la feuille de caractéristiques est gérée par les propriétés de la campagne - elles affichent les propriétés du Pion (accompagnant une version plus grande de l'image de ce dernier) - mais ''seulement'' lorsqu'un certains nombre de pré-requis sont satisfaits :

* Les propriétés ont été réglées pour être affichées sur la feuille de caractéristiques.
* Les propriétés devant être affichées ont une valeur.

====Réglages permettant l'affichage des Propriétés====

[[Image:Newprops-visible.png|thumb|Remarquez l'astérisque en face de chaque nom de propriétés, autorisant ainsi ces propriétés à être visibles sur la feuille de caractéristiques]]

Au bas de l'onglet '''Token Properties''' (Propriété du Pion) de la fenêtre '''Campaign Properties''', une légende explique comment régler l'affichage d'une propriété dans la feuille de caractéristiques. Trois options d'affichage sont alors disponibles, chacune d'elles est sélectionnée en la plaçant en face de la propriété a afficher :

# '''&lt;nowiki&gt;*&lt;/nowiki&gt;''': un astérisque signifie &quot;afficher cette propriété dans la feuille de caractéristiques&quot;
# '''@''': signifie &quot;afficher cette propriété seulement pour le propriétaire du Pion (et pour le MJ)&quot;
# '''&lt;nowiki&gt;#&lt;/nowiki&gt;''': signifie &quot;afficher cette propriété seulement pour le MJ (même le propriétaire du Pion ne la verra pas)&quot;
L'astérisque est '''requis''' pour n'importe quelle statistique à afficher - si vous n'avez pas un astérisque en premier, rien ne s'affichera quoique vous ayez pu saisir dessus. Les symboles @ et # sont de leur coté optionnels.

Donc pour notre nouveau jeu, nous allons régler les propriétés pour qu'elles soient visibles de tout le monde (en utilisant simplement un astérisque). Pour ce faire, ouvrez les propriétés de votre campagne et éditez les de la façon suivante :

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Force:1&lt;br&gt;
 *Dextérité:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

Maintenant quand vous passez votre souris au-dessus d'un Pion, vous pouvez voir la feuille de caractéristiques apparaître (voir la copie d'écran ci-dessus) avec les valeurs par défaut en Force, Dextérité, Intelligence et Endurance. De cette manière, même un tout nouveau Pion aura des valeurs par défaut et la feuille de caractéristiques apparaîtra pour tous les Pions.

====Abréviations====

[[Image:Newprops-shortnames.png|thumb|Les Propriétés de la campagne disposent maintenant d'abréviations]]

Quelquefois, les noms de propriétés sont trop longs (ou n'ont pas une apparence agréable - pas d'espace...). MapTool vous permet de mettre une ''Abréviation'' pour chaque propriété. Pour cela, il suffit de mettre entre parenthèses l'abréviation, juste après le nom de la propriété, comme ceci :

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Force(FOR):1&lt;br&gt;
 *Dextérité(DEX):1&lt;br&gt;
 *Intelligence(INT):1&lt;br&gt;
 *Endurance(END):1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

Ces abréviations sont affichées dans la feuille de caractéristiques au lieu du nom complet de la propriété.

'''Les Abréviations sont utilisées uniquement pour l'affichage - lorsque vous référencez une propriété dans une Macro, vous devez utiliser son nom complet.'''

===Créer des Propriétés dérivées===

[[Image:Newprops-derived.png|thumb|Les Propriétés ''HP'' (Points de Vie) et ''MV'' (Mouvement) utilisent un code indiquant à MapTool de les calculer à partir de Propriétés existantes]]

[[Image:Statsheet-with-allnewprops.png|thumb|La feuille de caractéristiques montrant toutes les propriétés, y compris les propriétés dérivées]]

Essayons maintenant de faire quelque chose de plus sympa. Dan la plupart des jeux de rôles, certains attributs des personnages sont en fait calculées à partir d'autres - par exemple, dans l'appel de Chtulhu, la santé mentale est calculée en multipliant le pouvoir par 5. Il en est de même dans Donjons et Dragons où le score de constitution intervient dans le calcul des points de vie.

Maintenant, vous pourriez créer ces attributs dérivés en ajoutant une ligne et en saisissant manuellement les valeurs lorsque vous créez un nouveau Pion - mais pourquoi ne pas permettre à MapTool de calculer ces valeurs dérivées? En effet, les propriétés de campagne de MapTool peuvent être des nombres ou du texte, mais également des calculs et des équations basés sur d'autres propriétés du Pion.

Dans MTRPG, Il existe trois attributs ''dérivés'' : Les Points de Vie, L'Armure et la Vitesse. Ces attributs ont pour abréviations &quot;PV&quot; &quot;AR&quot; &quot;VT&quot;. Pour cet exemple, nous allons définir les ''Points de Vie'' et la ''Vitesse'' pour qu'ils soient calculés à partir de propriétés existantes. Nous ne définirons pas tout de suite l'Armure (le calcul est un peu plus complexe, et nous voulons avancer progressivement).

Premièrement, nous devons ajouter des propriétés pour ces trois attributs dérivés :

1. Ouvrez la fenêtre avec l'ensemble de propriétés Basic.

2. En dessous de ''Endurance'', ajoutez :

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *PointsdeVie(PV)&lt;br&gt;
 *Armure(AR)&lt;br&gt;
 *Vitesse(VT)&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

Vous remarquerez que jusque là, nous n'avons défini aucune valeur par défaut. N'appuyez pas tout de suite sur le bouton '''Update''' - attendez d'avoir entré quelques linges de code de Macros pour créer une valeur dérivée.

Nous pouvons voir dans l'exemple de règles [[Sample Ruleset|MTRPG]] que les ''Points de Vie'' sont égaux à la valeur de ''l'Endurance'' multipliee par 6. Reproduire ce calcul dans les proprietes de la campagne est tres facile. éditez la propriété ''PointsdeVie'' de la façon suivante :

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *PointsdeVie(PV):{Endurance * 6}&lt;/tt&gt;
&lt;/blockquote&gt;

Ce que nous avons fait ici revient à saisir une valeur par défaut pour la propriété (rappel : les valeurs par défaut viennent après les deux points), et à utiliser un peu de [[Introduction to Macro Writing|code de Macros]] pour expliquer à MapTool comment réaliser une opération afin de trouver la valeur d'une propriété. Deux choses ont été faites dans ce but :

# Nous avons inclus le calcul entre { }, ce qui avertit MapTool que le texte contenu entre les crochets doit être considéré comme une Macro et pas simplement comme du texte.
# Ce que nous avons écrit à l'intérieur des crochets signifie : &quot;trouve la valeur de la propriété ''Endurance'', multiplie-la par 6, et affecte le résultat à la valeur de la propriété ''PointsdeVie''&quot;

Maintenant, pour gérer l'attribut ''Vitesse'', notre travail sera encore plus simple : nous devons indiquer à MapTool qu'il doit prendre la valeur de la propriété ''Dextérité'', et l'affecter à la propriété ''Vitesse''. Pour cela, éditez la propriété ''Vitesse'' de la manière suivante :
&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Vitesse(VT):{Dextérité}&lt;/tt&gt;
&lt;/blockquote&gt;

Quand vous aurez fini, l'ensemble de propriétés devrait ressembler à cela :

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Force(FOR):1&lt;br&gt;
 *Dextérité(DEX):1&lt;br&gt;
 *Intelligence(INT):1&lt;br&gt;
 *Endurance(END):1&lt;br&gt;
 *PointsdeVie(PV):{Endurance * 6}&lt;br&gt;
 *Armure(AR)&lt;br&gt;
 *Vitesse(VT):{Dextérité}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

Maintenant, lorsque vous passez la souris au dessus d'un Pion, la feuille de caractéristiques devrait ressembler à la copie d'écran sur la droite. Souvenez-vous que même si nous avons décidé de faire apparaître l'Armure sur la feuille de caractéristiques, celle-ci n'affichera que les propriétés contenant une valeur - ''Armure'' est toujours vide, donc elle ne s'affichera donc pas tant que vous ne lui aurez pas donné de valeur.

==Quelques Détails techniques==

Dans ce guide et dans certains autres, nous avons parlé de propriétés visible dans la campagne ou de propriétés établies pour une campagne. Il y a une raison à cela.

Prenez un Pion - si vous le coupez et examinez son fonctionnement interne - est en fait un fichier XML contenant une tonne d'informations (image, taille, vision, éclairage, forme et - bien sûr - ses propriétés). Ce qui est important de comprendre ici, c'est que le Pion se souviendra non seulement des propriétés se rapportant à MTRPG, mais aussi de toutes celles qui ont un jour été sauvegardées en tant que fichier '''.rptok''' ou apportées depuis un autre fichier de campagne, campagne dont il se souviendra des propriétés également. même si elles ne sont pas visible, elles sont conservées à l'intérieur du Pion lui-même.

Ainsi, en réalité, un ensemble de propriétés de campagne indique les propriétés que :

* Vous pouvez voir si vous ouvrez le Pion en double-cliquant dessus.
* Vous pouvez éditer en cliquant sur la cellule à côté.

Ceci pourrait provoquer des catastrophes - qu'arrivera-il si vous modifiez une propriété déjà existante mais cachée ? Heureusement, MapTool ne tentera pas d'accéder à une propriété cachée à l'aide d'une Macro, à moins que vous ne lui ayez demandé de le faire au travers de deux fonctions de Macros spéciales. Donc soyez rassuré, vous ne pouvez donc pas modifier accidentellement une propriété qui n'a pas été mise au point dans les propriétés de la campagne.

==Pour aller un peu plus loin ...==

MapTool supporte des propriétés et des propriétés dérivées très élaborées, avec de nombreuses fonctions et opérations mathématiques. Parmi les plus utilisées, vous trouverez :

* '''Opérations mathématiques de base''': addition (+), soustraction (-), multiplication (*), et division (/)
** '''Exemple''': &lt;tt&gt;PointsdeVie: {Endurance * 6}&lt;/tt&gt;
* '''Approximation''': il existe quelques ''fonctions'' qui vous permettent d'arrondir des nombres (après une division par exemple).
** '''Plancher''': la fonction floor() arrondit ''à l'inférieur''. '''Exemple''': &lt;tt&gt;PointsdeVie:{floor(Constitution/2)}&lt;/tt&gt; divisera la constitution par deux et arrondira à l'inférieur
** '''Plafond''': la fonction ceil() marche comme floor(), mais arrondit ''au supérieur''. '''Exemple''': &lt;tt&gt;PointsdeVie:{ceil(Constitution/2)}&lt;/tt&gt;
[[Category:MapTool]]
{{Languages|Introduction to Properties}}{{#customtitle:Introduction aux Propriétés|Introduction aux Propriétés}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>MapTool Preferences/fr</title>
    <ns>0</ns>
    <id>963</id>
    <revision>
      <id>3723</id>
      <parentid>3722</parentid>
      <timestamp>2009-07-21T08:31:21Z</timestamp>
      <contributor>
        <username>Natha</username>
        <id>49</id>
      </contributor>
      <comment>/* Onglet Sons */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21206">{{Languages|MapTool Preferences}}{{#customtitle:Préférences de MapTool|Préférences de MapTool}}
{{note|'''Important :''' Il existe des préférences liées aux cartes qui vous permettent de définir des valeurs par défaut pour la création de nouvelles cartes. Alors que vous pouvez les modifier durant la création de la carte, certaines ne peuvent pas être modifiées après que la carte ait été créée. Ceci est le comportement de la version 1.3b56 et de toutes les versions antérieures. Les préférences qui suivent ayant ce comportement seront marquées avec {{mark}}&lt;br&gt;&lt;br&gt;'''NB :''' Toutes les captures d'écran de cet article sont montrées avec le paramétrage par défaut, qui n'est pas forcément le paramétrage ''recommandé'' pour votre utilisation.}}
__TOC__
==Onglet Interactions==
[[Image:prefs_tab_interactions.png|thumb|right|300px|L'onglet Interactions de la fenêtre de Préférences]]

===Cartes===
[[Image:prefs_interactions_maps.jpg|frame|right|La section Cartes (Maps)]] 
* '''Les nouvelles cartes ont le Brouillard de Guerre''' (''New maps have Fog of War'')
: Détermine si les nouvelles cartes doivent avoir le [[Fog of War|Brouillard de Guerre]] activé à la création. Si vous utilisez le [[Fog of War|Brouillard de Guerre]], cela semble évident de &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt; l'activer ; cependant, pendant que l'on crée plusieurs cartes pour une nouvelle campagne, cela semble souvent utile de le désactiver pour faciliter la modification des cartes, étant donné que même en tant que MJ, vous ne verrez pas complètement une carte couverte du [[Fog of War|Brouillard de Guerre]]. Lorsque la carte est terminée, il est simple de réactiver le [[Fog of War|Brouillard de Guerre]] sur celle-ci.
* '''Les nouvelles cartes sont visibles par les joueurs''' (''New maps visible to players'')
: Indique si les nouvelles cartes doivent être marquées 'Visible par les joueurs' (''Player Visible'') à la création. Bien qu'il y ait des exceptions, avoir cette option &lt;span style=&quot;font-size: 24px; line-height: 1px; color: red; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt; décochée est un paramétrage optimal ; de cette façon, vous ne laissez pas involontairement une carte accessible aux joueurs.
* '''Type de Grille par défaut''' (''Default Grid Type'') {{mark}}
** '''Cases''' (''Square'') [[Image:gridSquare.png|sub]]
** '''Hexagones horizontaux''' (''Horizontal Hex'') [[Image:gridHorizontalHex.png|sub]]
** '''Hexagones verticaux''' (''Vertical Hex'') [[Image:gridVerticalHex.png|sub]]
: détermine le type de grille proposé par défaut lors de la création d'une carte. Vous êtes libre de créer des cartes sans type de grille, mais aussi de type différent de celui spécifié ici, mais vous ne pouvez pas mettre le type par défaut proposé à &quot;Sans grille&quot;.
* '''Taille de grille par défaut''' (''Default Grid Size'') {{mark}}
: représente le nombre de pixels que vous voulez que MapTool utilise pour dessiner chaque cellule de la grille, à la résolution maximum. Le paramétrage par défaut de {{code|50}} pixels est idéal pour la plupart des ordinateurs, mais les ordinateurs haut de gamme peuvent gérer {{code|100}} ou même {{code|200}} pixels. Il n'y aucun pré requis pour utiliser des tailles spécifiques, mais {{code|50}} et {{code|100}} pixels sont utilisés couramment. Cette préférence déterminera aussi quelle taille prendre une image lorsqu'elle sera placée sur la carte ; si elle n'est pas paramétrée en taille libre (''Free-size'') et pas manuellement redimensionnée.
* '''Nombre d'unités par cellule par défaut''' (''Default Units Per Cell'') {{mark}}
: indique le nombre d'unités de mesure que représente chaque cellule de la grille. L'ambigüe &quot;unité&quot; est utilisé dans ce cas parce que VOUS décidez ce qu'il représente. Si vous voulez que chaque cellule représente 5 pieds (1,5m) comme dans D&amp;D3, ce paramètre devra être saisi à {{code|5}}. Si voulez que chaque cellule représente une case comme dans D&amp;D4, saisissez {{code|1}}. Si vous voulez que chaque cellule représente 4 kilomètres, choisissez {{code|4}}, etc... Cette unité est souvent mentionnée comme la ''Distance par Cellule'' (''Distance Per Cell'').
* '''Distance de vision par défaut''' (''Default Vision Distance''){{mark}}
: La distance maximum à laquelle les [[PC Token|Pions de joueurs]] peuvent dissiper le [[Fog of War|Brouillard de guerre]] après que les [[Light|lumières]], [[Sight|vues]], et les [[Vision Blocking Layer|calques de blocage de vision (VBL)]] aient été pris en compte. Il est important de noter que ce paramètre est mesuré en ''Distance par Cellule'' (cf. ci-dessus).
* '''Métrique de mouvement''' (''Movement metric'')
** '''Un_Deux_Un''' (''ONE_TWO_ONE'')
** '''Un_Un_Un''' (''ONE_ONE_ONE'')
** '''MANHATTAN''' 
** '''Pas de diogonales''' (''NO DIAGONALS'')
: détermine comment les mouvements doivent être calculés quand un [[Token|Pion]] se déplace en diagonal. Cela affecte le total de distance parcourue affiché sous un [[Token|Pion]] quand il est en train d'être déplacé ; cela est calculé en ''Distance par Cellule'' (''Distance Per Cell''). '''ONE_TWO_ONE''' spécifie que chaque diagonal fera deux fois la ''Distance par Cellule''. '''ONE_ONE_ONE''' : chaque diagonale fait une ''Distance par Cellule''. '''MANHATTAN''' spécifie que chaque diagonal fera deux fois la ''Distance par Cellule''. '''NO DIAGONALS''' indique que les [[Token|Pions]] ne peuvent pas se déplacer en diagonale. Le paramètre '''Movement metric''' n'a d'influence en jeu que sur les cartes utilisant une grille en case ; les cartes avec une grille hexagonale calculent les mouvements dans n'importe quelle direction en  ''Distance par Cellule'.

===Pions===
[[Image:prefs_interactions_tokens.jpg|frame|right|La section Pions (Tokens)]] 
* '''Aligner sur la grille''' (''Start Snap to Grid'')
: Détermine si les [[Token|Pions]] seront, par défaut, alignés sur la grille ('''Snap to Grid''' &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked). Avoir ce paramètre &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt; coché est optimal pour les cartes utilisant une grille, mais même sur de telles cartes, vous pouvez vouloir temporairement désactiver cette propriété (par exemple, lorsque l'on place beaucoup de pions &quot;d'accessoires&quot; sur le calque Objet pendant que l'on dessine la carte). 
* '''Les nouveaux pions sont visibles par les joueurs''' (''New tokens visible to players'')
: Indique si les nouveaux [[Token|Pions]] ont la propriété '''Visible''' &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt; activée à la création. Le paramétrage optimal dépend de votre style de jeu ; si vous avez de nombreuses rencontres aléatoires et les créez en cours de partie, il pourra vous être utile de désactiver cette option. 
* '''Numérotation des pions dupliqués''' (''Duplicate Token Numbering'')
** '''Incrémenter''' (''Increment'')
** '''2 chiffres aléatoires''' (''Random 2-digit'')
: va automatiquement ajouter 2 chiffres aux [[Token|Pions ]] ayant un nom dupliqué, lors de la création. '''Incrémenter''' n'ajoutera pas de chiffre au premier pion, mais numérotera chaque copie après cela, en démarrant au chiffre {{code|1}} (ex: Troll, Troll 1, Troll 2). '''2 chiffres aléatoires''' ajoutera un nombre aléatoire à deux chiffres au nom du pion, même s'il n'y a pas encore de doublon sur la carte. '''2 chiffres aléatoires''' pourrait être considéré le paramétrage optimal, car il ne donnera  à vos joueurs aucune indication sur le nombre exact de copies d'un Pion.
* '''Affiche la numérotation sur''' (''Show Numbering on'')
** '''le Nom''' (''Name'')
** '''le Nom MJ''' (''GM Name'')
** '''les Deux''' (''Both'')
: détermine comment le numéro issu du paramètre '''Numérotation des pions dupliqués''' est appliqué. '''le Nom''' ajoute le numéro après le nom (lui-même déterminé par '''Nommage d'un Nouveau Pion'''). '''le Nom MJ''' place le numéro dans le champ Nom MJ des options du pion. '''Les Deux''' ajoute le numéro après le nom ET place le numéro dans le champ Nom MJ des options du pion. Du fait d'un comportement étrange de MapTool lorsqu'il doit gérer deux pions avec le même nom, il est recommandé que vous utilisiez '''Nom''' ou '''les Deux''' mais jamais '''le Nom MJ'''.
* '''Nommage d'un nouveau pion''' (''New Token Naming'')
** '''Utiliser le nom de fichier''' (''Use Filename'')
** '''Utiliser &quot;Créature&quot;''' (''Use &quot;Creature&quot;'')
: détermine quel sera le nom d'un nouveau pion créé, ou comment sera pré rempli le champ ''Nom'' du dialogue de création de nouveau pion. '''Utiliser le nom de fichier''' indique que le nom du pion sera déduit du nom du fichier qui a été ajouté à votre bibliothèque de ressources (ex : si vous avez ajouter le fichier ''gobelinlaid.jpg'' à votre bibliothèque de ressources, les pions créés à partir de cette image auront un nom commençant par ''gobelinlaid''). '''Utiliser &quot;Créature&quot;''' fera que le nom de tous les nouveaux pions créés commencera par &quot;Creature&quot; (sans les guillemets). 
* '''Taille réelle''' (''Start Freesize'')
: Si vous utilisez une carte avec une grille, les [[Token|Pions]] ajoutés seront par défaut de la taille d'une cellule. En cochant ce paramètre &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;, les pions seront créés à la taille réelle de l'image, ce qui est très utile pour placer des accessoires sur le calque d'Objet ou des éléments de décors à l'échelle sur le calque de fond.
* '''Afficher le dialogue à la création d'un Pion''' (''Show Dialog on New Token'')
: Quand cette préférence est &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;cochée, une fenêtre ''Nouveau Pion'' (''New Token'') s'ouvrira lorsque vous ferez glisser une image sur la carte, vous permettant de modifier quelques options avant la création. Si vous désactivez ceci, tous les nouveaux pions seront créés avec le paramétrage par défaut déterminé par les différentes préférences décrites dans cette section.
* '''Taille du portrait de la Feuille de Statistiques''' ('' Stat Sheet Portrait Size'') 
: définit la taille en pixels) du portrait qui est affiché dans le coin inférieur droit de la carte lorsque la souris survole certains Pions ; l'image est redimensionnée proportionnellement. Un portrait est affiché sous quelques conditions différentes : si le Pion a des propriétés qui sont définies pour être affichées sur la feuille de statistiques et que ces propriétés ont une valeur, le portrait affichera l'image du pion. Si le pion a une image de portrait définie, il l'affichera avec ou sans la feuille de stats. 
* '''Mettre à zéro pour désactiver le portrait''' (''Set to 0 to disable portaits'') 
: Pourquoi voudriez-vous paramétrer ceci à {{code|0}} ? Au-delà de l'évidence (ne pas afficher le portrait), vous pourriez vouloir utiliser la feuille de stats, mais sans qu'un portrait apparaisse avec ; ou peut-être ne voulez pas utiliser ni de portrait ni de feuille de stats mais voulez utiliser &quot;l'emplacement&quot; de l'image de portrait pour d'autres utilisations, dans un Dialog ou une Frame par exemple.

===Chat===
[[Image:prefs_interactions_chat.jpg|frame|right|Section Chat]] 
* '''Afficher l'avatar à chaque ligne''' (''Show Avatar per line'')
: l'image du pion personnifié (''impersonnated'') est montrée à côté de chaque paragraphe de chat qu'il produit, quand cette option est &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt; cochée. Ceci est un paramétrage local du côté client et n'affecte pas les autres joueurs connectés à la même partie.
* '''Insérer les émoticones''' (''Insert Smilies'')
: remplace les suites de caractères d'émoticones courants par leur version graphique quand cette option est &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt; cochée. Si vous utilisez de nombreuses macros, il est recommandé de désactiver cette option, qui peut poser problème si n'importe quelle portion de votre code de macro peut être interprété comme un émoticone.
* '''Utiliser l'info-bulle pour les lancer''' (''Use ToolTips for Inline Rolls'')
: détermine quel est l'affichage par défaut ([[:Category:Display Roll Option|Options d'affichage de lancer]]) pour les lancers de dés dans le chat. Utilisera {{roll|tooltip}} si cette option est cochée &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt; cochée, sinon par défaut utilisera {{roll|expanded}}. 
* '''Couleur de fond du préfixe pour les macros de confiance''' (''Trusted Prefix Background'')
: détermine une couleur de fond personnalisée pour l'affichage des textes issu de [[Trusted Macro|Macro de Confiance]].
* '''Couleur de texte du préfixe pour les macros de confiance''' (''Trusted Prefix Foreground'')
: détermine une couleur de texte personnalisée pour l'affichage des textes issu de [[Trusted Macro|Macro de Confiance]].
* '''Délai entre les sauvegardes automatiques''' (''Time between autosaves'')
: Nombre de minutes entre deux sauvegardes automatiques de l'historique du chat. Cette fonction n'est pas active en 1.3b54.
* '''Fichier de sauvegarde automatique du chat''' (''Autosave Chat Log Filename'')
: Nom du fichier qui sera utilisé pour sauvegarder automatiquement l'historique du chat. Cette fonction n'est pas active en 1.3b54.

===Objets===
[[Image:prefs_interactions_objects.jpg|frame|right|Section Objets]] 
* '''Aligner sur la griller''' (''Start Snap to Grid'')
: Détermine si les Pions créés sur le calque &quot;object&quot; seront, par défaut, alignés sur la grille (Snap to Grid &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;). 
* '''Taille réelle''' (''Start Freesize'') 
: Si vous utilisez une carte avec une grille, les Pions ajoutés sur le calque &quot;object&quot; seront par défaut de la taille d'une cellule. En cochant ce paramètre &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;, les pions seront créés à la taille réelle de l'image.

===Backgrounds===
[[Image:prefs_interactions_backgrounds.jpg|frame|right|Backgrounds Section]] 
* '''Aligner sur la griller''' (''Start Snap to Grid'')
: Détermine si les Pions créés sur le calque &quot;Background&quot; seront, par défaut, alignés sur la grille (Snap to Grid &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;). 
* '''Taille réelle''' (''Start Freesize'') 
: Si vous utilisez une carte avec une grille, les Pions ajoutés sur le calque &quot;Background&quot; seront par défaut de la taille d'une cellule. En cochant ce paramètre &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;, les pions seront créés à la taille réelle de l'image.

===Orientation (Facing)===
[[Image:prefs_interactions_facing.jpg|frame|right|La section &quot;Orientation&quot; (Facing)]] 
* '''Sur les lignes''' (''On Edges'')
: L'orientation (''facing'') d'un Pion s'alignera sur les côtés des cellules quand ce paramètre est coché &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;.
* '''Sur les angles''' (''On Vertices'')
: L'orientation (''facing'') d'un Pion s'alignera sur les angles d'une cellule quand ce paramètre est coché &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;.

==Onglet Accessibilité (Accessibility)==
[[Image:prefs_tab_accessibility.png|thumb|right|300px|L'onglet &quot;Accessibility&quot; de la fenêtre des préférences]]
[[Image:prefs_accessibility_all.jpg|frame|right|Zoom sur l'onglet &quot;Accessibility&quot;]] 
* '''Taille de la police''' (''Chat Font Size'')
: Taille par défaut de la police dans le panneau de chat, mesurée en points.
* '''Délai initial des Infos-bulles''' (''ToolTip Initial Delay'')
: Temps nécessaire pour afficher une info-bulle lorsque la souris survole un élément possédant une info-bulle, mesurée en millièmes de seconde.
* '''Délai de disparition des Info-bulles''' (''ToolTip Dismiss Delay'')
: Temps nécessaire pour cacher une info-bulle lorsque la souris ne survole plus un élément possédant une info-bulle, mesurée en millièmes de seconde.

==Application Tab==
[[Image:prefs_tab_application.png|thumb|right|300px|L'onglet &quot;Application&quot;]]
===Sauvegarde (Save)===
[[Image:prefs_application_save.jpg|frame|right|La section &quot;Sauvegarde&quot; (Save)]] 
* '''Sauvegarder une récupération automatique toutes les [ ] minutes''' (''Save Autorecover every [ ] min'')
: Sauvegarde une copie de votre campagne dans l'intervalle spécifié. Contrairement à la sauvegarde automatique, cela n'écrira pas par dessus votre fichier de campagne, mais créera plutôt un nouveau fichier à chaque fois.
* '''Rappel de sauvegarde à la fermeture''' (''Save reminder on close'')
: Affiche un dialogue lorsque l'on tente de fermer MapTool et que des modifications non enregistrées ont été faites à la campagne, si cette option est cochée &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;.
* '''Compatibilité 1.3b50''' (''1.3b50 Compatability Mode'')
: du fait de certains changements dans la façon d'enregistrer certaines données au sein des fichiers de campagne, ces fichiers peuvent ne pas être compatibles avec des versions 1.3b50 et antérieures. Si ce paramètre est coché &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;, votre campagne sera enregistrée dans l'ancien format, compatible avec d'anciennes versions de MapTool mais perdant quelques nouvelles fonctionnalités.

===Valeurs par défaut de la Carte (Map Defaults)===
[[Image:prefs_application_mapdefaults.jpg|frame|right|La section &quot;Map Defaults&quot;]] 
* '''Épaisseur de la ligne de Halo''' (''Halo line width'')
: contrôle l'épaisseur du [[Halo]] lorsqu'il est affiché sur un [[Token|Pion]]. 
* '''Opacité de la Vision''' (''Vision opacity'')
: les zones qui ne sont pas directement visibles, mais qui n'ont plus de brouillard de guerre, seront obscurcies en les recouvrant d'un calque noir semi-translucide. Ce paramètre contrôle l'opacité de ce noir translucide.
* '''Utiliser la couleur du halo pour la vision''' (''Use halo color for vision'')
: lié à '''Opacité de la Vision'''. Si ce paramètre est coché &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;, le calque translucide au-dessus des zones déjà vues sera de la couleur du [[Halo]] du [[Token|Pion]], plutôt que noir.
* '''Découvrir automatiquement le BdG''' (''Autoshow Fog'')
: découvrira automatiquement le [[Fog of War|Brouillard de Guerre]] après le déplacement d'un [[Token|Pion]] si &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt; coché.

===Panneaux de Macro===
[[Image:prefs_application_macropanels.jpg|frame|right|La section des panneaux de Macro]] 
* '''Par défaut : autoriser les joueurs à modifier les macros''' (''Default: Allow Players to Edit Macros'')
: Pour qu'une macro soit considérée comme une [[Trusted Macro|Macro de Confiance]] (''Trusted Macro''), les joueurs ne doivent pas pouvoir la modifier. Ce paramètre détermine si une nouvelle macro sera par défaut éditable par les joueurs ou non. Désactiver ce paramètre peut être très utile si vous avez l'intention de créer de nombreuses macros de confiance.

==Onglet Sons==
[[Image:prefs_tab_sounds.png|thumb|right|300px|L'onglet Sons de la fenêtre des préférences]]
[[Image:prefs_sounds_all.jpg|frame|right|Zoom sur l'onglet Sons]] 
* '''Jouer les sons système''' (''Play system sounds'')
: Quand ce paramètre est &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt; coché, MapTool émettra un son lorsque du nouveau contenu est envoyé au panneau de chat.
* '''Seulement quand la fenêtre est active''' (''Only when window not focused'')
: Si &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt; coché, lorsque du nouveau contenu est envoyé au panneau de chat, MapTool ne produira du son que si le fenêtre MapTool est active (a le focus).
[[Category:MapTool]]
{{Languages|MapTool Preferences}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Zero-Proof eval</title>
    <ns>0</ns>
    <id>964</id>
    <redirect title="Custom Robust eval Function" />
    <revision>
      <id>3515</id>
      <timestamp>2009-06-17T17:29:40Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <comment>[[Zero-Proof eval]] moved to [[Custom Robust eval Function]]: No longer just zero-proof.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="41">#REDIRECT [[Custom Robust eval Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Macro Writing/fr</title>
    <ns>0</ns>
    <id>965</id>
    <revision>
      <id>3752</id>
      <parentid>3751</parentid>
      <timestamp>2009-08-05T13:37:08Z</timestamp>
      <contributor>
        <username>Thallaxwish</username>
        <id>70</id>
      </contributor>
      <comment>/* Utiliser les Propriétés des Pions */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="43645">{{Languages|Introduction to Macro Writing}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}
==Qu'est-ce qu'une Macro?==

Une Macro est une méthode simple d'automatiser des actions dans MapTool. La plupart du temps, les macros sont des scripts lus par un ''analyseur syntaxique'', qui les interprète et garantit que les différentes parties sont traitées de la bonne manière ( par exemple, en garantissant qu'une commande pour ajouter deux nombres entre eux et bien traitée comme une commande de Macro et pas comme du simple texte dans une fenêtre de discussion).

Les Macros ont commencé tout doucement dans MapTool, mais maintenant, le langage de script est devenu un ensemble très complet de commandes et de fonctions qui peuvent pratiquement exécuter toutes les opérations que vous pouvez imaginer !

==Ce que vous devriez déjà connaître==

Les Macros représentent le point à partir duquel nous commençons à approfondir les caractéristiques et les fonctionnalités les plus puissantes  - et les plus compliquées - de MapTool. Même si ce guide se veut le plus accessible possible, il y a quelques points que vous êtes supposés avoir déjà acquis :

# Nous supposons que vous avez lu &quot;[[Introduction to Mapping/fr|Introduction à la création de carte (fr)]]&quot;, et que vous êtes maintenant familiarisé avec l'interface de MapTool, que vous savez comment créer une nouvelle carte, sauvegarder des fichiers et placer des Pions sur la carte.
# Vous devez également avoir lu &quot;[[Introduction to Tokens/fr|Introduction à la gestion des Pions (fr)]]&quot;, et avoir les connaissances de base pour manipuler les Pions, examiner leurs propriétés et tout ce qui s'y rapporte.
# Enfin, puisque les Macros sont intimement liées aux propriétés des Pions, vous devez avoir lu les étapes qui y sont consacrées dans &quot;[[Introduction to Properties/fr|Introduction aux Propriétés (fr)]]&quot;et vous devez avoir créé un nouveau fichier de campagne basé sur [[Sample Ruleset|un exemple de règles de jeu]] créé pour permettre aux nouveaux joueurs de se familiariser avec MapTool. Si vous n'avez pas lu ce guide, faites-le - cela rendra la plupart des exemples suivants ''beaucoup'' plus compréhensible !

==Conventions utilisées pour ce Guide==

Le maximum sera fait pour conserver le langage et la terminologie les plus cohérents possible. Dans ce guide :

* '''Macro''' renvoie à une collection de commandes qui sont groupées ensemble pour exécuter automatiquement une tache.
* '''Commande Macro''' renvoie à toute commande individuelle particulière ou à toute fonction utilisée à ''l'intérieur'' d'une Macro.
* '''Le langage de Macro''' représente l'ensemble des commandes, fonctions et opérations que vous pouvez utiliser quand vous écrivez une Macro. Vous pouvez consulter la liste  des fonctions disponibles [[:Category:Macro Function|ici]].

De plus, Bien qu'il soit possible pour une Macro d'interagir avec une autre (on dit dans ce cas qu'elle &quot;appelle&quot; une autre Macro), dans ce guide, nous aborderons uniquement  les Macros accessibles depuis l'onglet Macro et qui peuvent affecter uniquement les Pions auxquels elles sont associées.

==Dans quels cas les utiliser ?==

Il n'y a aucune obligation d'utiliser des Macros pour pouvoir utiliser MapTool. En effet, la fonction principale de MapTool est de partager une carte avec des amis et de pouvoir jouer à des jeux ( lisez [[Introduction to Mapping/fr|Introduction à la création de carte (fr)]] et [[Introduction to Game Hosting/fr|Introduction à l'hébergement de partie (fr)]] pour apprendre comment créer et partager des cartes avec votre groupe de joueurs), et MapTool fournit tout ce dont vous avez besoin pour cela : des cartes, des pions et un système de discussion (''chat'') pour vous permettre de dialoguer ou effectuer des jet de dés.

Toutefois, les possibilités sont beaucoup plus importantes, pour peu que vous souhaitiez en apprendre un petit plus sur les capacités des Macros. Par exemple, si vous voulez avoir un bouton qui en cliquant dessus vous permettra de lancer 1D20 et d'ajouter le modificateur automatiquement, c'est possible en créant une Macro pour cela. Si vous voulez modifier les points de vie après une blessure, vous pouvez écrire une Macro pour le faire. Ce guide va vous montrer comment.

==Où trouver ces &quot;Macros?&quot;==

Les Macros sont intégrées à différentes parties de l'interface de MapTool et aux objets à l'intérieur. Il ressort qu'une Macro peut &quot;résider&quot; à trois endroits :

===Macros de Pion===

L'endroit le plus naturel où trouver une Macro est un [[Introduction to Tokens|Pion]]. Les Macros de Pion sont liées au Pion sur lequel elles ont été créées le resteront tant que vous les y laisserez.

Les Macros de Pion (''Token macros '') sont directement accessibles uniquement par les propriétaires du Pion, donc si vous ne possédez pas le Pion, vous ne pourrez pas interagir (ou même voir) les boutons de ces Macros.

===Macros de Campagne===

Les Macros de Campagne ne sont pas liées à un Pion en particulier, mais à la campagne toute entière. Ces Macros fonctionnent pratiquement comme une Macro de Pion, excepté ceci :

# Vous n'avez pas besoin de sélectionner. un Pion pour voir les Macros
# N'importe qui peut y accéder et les exécuter.

Les Macros de campagne sont particulièrement utiles au MJ et aux joueurs pour gérer des fonctions communes - en fait, si vous mettez en place une tache commune en tant que Macro de campagne, vous n'avez besoin que d'avoir une seule copie de celle-ci (au lieu d'une copie pour chaque Pion qui en aurait besoin).

===Macros Globales===

Les Macros globales se sont liées ni aux Pions, ni à une campagne - en fait, elles sont liées à votre exemplaire de MapTool. Ces Macros ne sont visibles de personne d'autre que vous, que vous soyez joueur ou MJ. 

C'est un bon endroit pour ranger les Macros exécutant des tâches que vous ne voulez pas que les autres voient - comme des informations que vous voudriez montrer uniquement au moment où vous l'avez décidé; ou des tâches que vous voulez faire faire à vos PNJ mais que vous ne voulez pas que les PJ puissent faire.

==Les fenetres de Macros==

[[Image:Macro-panels.jpg|thumb|Les quatre fenêtres de Macros]] [[Image:Tabbed-panels.jpg|thumb| Les quatre fenêtres empilées sur une seule, sélectionnables à travers les onglets situés en bas (de nombreux utilisateurs choisissent cette disposition pour gagner de la place)]]

Avec toutes ces discussions autour des Macros et de leur localisation (plus spécialement des boutons de Macros), vous vous demandez probablement où trouver ces boutons ? Vous les trouverez dans une des quatre fenêtres de Macros qui sont disponibles dans MapTool. Si vous ne trouvez pas ces fenêtres ou qu'une d'entre elles est manquante, vous pouvez les faire apparaître en allant dans le menu '''Windows''' (Fenêtres) et en cochant les fenêtres suivantes en fonction de vos besoins :

* Selection (Sélection)
* Impersonated (Interprétation)
* Campaign (Campagne)
* Global (Globale)

Vous devriez voir ces fenêtres apparaître dans MapTool si elle n'étaient pas déjà là. Si vous regardez les copies d'écran sur la droite, vous verrez que la fenêtre Globale est remplie avec un tas de boutons. Chacun d'eux exécute une Macro; les boutons apparaissent lorsque vous créez une nouvelle Macro

===Fenêtre Sélection et Interprétation===

Il y a deux fenêtres qui traitent directement des Macros des Pions : Sélection (''Selection'' et ''Impersonated'')

La fenêtre Sélection montre les boutons de toutes les Macros actuellement associées au Pion que vous avez sélectionné. Chaque bouton lance une série particulière de commandes Macro.

La fenêtre Interprétation (''Impersonated'') montre  les macros du Pion que vous avez choisi ''d'interpréter''. Interpréter un Pion est un moyen de faire comme si vous étiez le Pion - lorsque vous discutez, le texte apparaît comme s'il avait été dit par le Pion. Il est possible d'interpréter un Pion tout en en sélectionnant un autre, alors faites attention à la fenêtre que vous êtes en train d'utiliser !

===La fenêtre Campagne (''Campaign'')===

Cette fenêtre affiche toutes les Macros actuellement disponibles pour la campagne. Souvenez-vous qu'elles sont visibles de tout le monde.

===La fenêtre Globale===

Cette fenêtre contient les Macros globales que vous avez créées. Souvenez-vous qu'elles ne sont visibles ''que de vous''.

==Ecrire des Macros==

[[Image:Camp-panel-nomacros.png|thumb|La fenêtre '''Campagne''' (''Campaign''). Elle ne contient aucune Macro pour l'instant.]]

[[Image:Camp-panel-rcaddnew.png|thumb|Un clic-droit dans cette fenêtre vous permet d'ajouter une nouvelle Macro.]]

La création de Macros se fait en trois étapes (même si chaque étape peut en contenir une multitude!) :

1. Faites un clic-droit sur la fenêtre où vous voulez voir la Macro apparaître (la fenêtre Pion (''Token''), Campagne (''Campaign'') ou Globale) et choisissez '''Add New Macro''' (''Ajouter une nouvelle Macro''). Un bouton gris avec l'étiquette '''(new)''' apparaîtra.

2. Faites un clic-droit sur le bouton et choisissez '''Edit''' (''Editer'')

3. Saisissez du code Macro, attribuez lui un nom et cliquez sur '''OK'''. Bien ! Vous avez créé une Macro

Un instant... que voulez vous dire par &quot;code Macro&quot; ?

Comme indiqué précédemment, ces trois étapes peuvent contenir une quantité énorme de détails, étapes, astuces, réussites, échecs, frustrations et parfois hurlements et grincements de dents. Donc, nous allons reculer d'une étape regarder quelque Macros très simples avec une approche très progressive. Si vous voulez voir quelques Macros plus complexes, il en existe des tonnes à lire à travers les tutoriels et les comment-faire sur ce wiki. Pour l'instant, nous nous contenterons d'écrire quelque Macros très simples mais très utiles.

===Le Jet d'Initiative===

[[Image:Camp-panel-newbutton.png|thumb|Après avoir sélectionné &quot;Add New Macro,&quot; un bouton étiqueté '''(new)''' apparaît dans la fenêtre Campagne(''Campaign'').]]

[[Image:Camp-panel-rceditbutton.png|thumb|Un clic-droit sur le bouton permet d'ouvrir '''l'éditeur de Macro'''.]]

[[Image:Macro-editor-examplestring.png|thumb|Saisissez une étiquette pour la Macro ainsi que la commande Macro.]]

[[Image:Camp-panel-exbutton.png|thumb|La fenêtre Campagne (''Campaign'') avec votre nouvelle Macro dedans.]]

Les plus simples des Macros ne sont rien de plus que du texte qui est re-dirigée vers la fenêtre de discussion (''Chat''). En effet, une Macro contenant du texte (en fait toutes les Macros) envoie juste une ligne de commande à la fenêtre de discussion où elle est lue puis interprétée. La plupart des langages de programmation commencent avec le classique programme &quot;Hello World!&quot;, donc ce guide ne fera pas cela. A la place, essayons de faire quelque chose de plus &quot;rôlistique&quot; : créons le redoutable message &quot;Effectuez votre jet d'initiative !&quot;

1. Sélectionnez la fenêtre Campagne.

2. Faites un clic-droit dessus et choisissez '''Add New Macro'''.

3. Faites un clic-droit sur la nouvelle Macro et cliquez sur '''Edit'''.

4. Dans le champ '''Label''' (''Etiquette''), saisissez &quot;Jet d'initiative&quot;

5. Laissez les champs '''Group''' et '''Sort Prefix''' vide.

6. Dans le champ '''Command''', tapez  

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;Effectuez votre jet d'initiative !&lt;/tt&gt;&lt;/blockquote&gt;

7. Cliquez sur '''OK'''. 

8. Vous voyez maintenant que votre bouton a changé - il est maintenant écrit dessus : '''Jet d'initiative''', et lorsque vous cliquez dessus, ô merveilles, le texte &quot;Effectuez votre jet d'initiative !&quot; apparaît dans la fenêtre de discussion.

Ceci représente la base de l'écriture de Macros : vous saisissez du texte dans la Macro, puis, lorsque vous appuyez sur le bouton, ce texte est lu par l'analyseur syntaxique et envoyé à la fenêtre de discussion.

===Toujours plus intéressant===

Le &quot;Jet d'initiative&quot;, tout effrayant qu'il soit lorsqu'il est demandé par votre MJ, n'est par ce qu'on peut trouver de plus intéressant en terme de Macro. Vous vous êtes probablement demandé &quot;pourquoi ne pas le taper tout simplement dans la fenêtre de discussion ?&quot; Et la réponse est &quot;vous auriez sûrement mieux fait !&quot; Alors essayons de faire quelque chose de plus intéressant, que nous voudrions garder au premier plan en utilisant MapTool (après tout, nous ne sommes pas là pour écrire des programmes - nous sommes ici pour jouer) : nous allons ajouter quelques ''commandes Macro'', en complément du simple texte. Les commandes Macro sont des instruction spéciales qui, lorsqu'elles sont lues par l'analyseur syntaxique, lui demandent de faire des choses en plus que simplement afficher du texte dans la fenêtre de discussion, comme lancer des dés ou calculer des valeurs.

Les commandes Macro doivent ''toujours'' être encadrées par des crochets ([''commande Macro'']) ou des accolades ({''commande Macro''}). Les encadrer de cette manière indique à l'analyseur syntaxique qu'une commande est en train d'arriver - autrement, il traitera la commande comme du simple texte et l'affichera dans la fenêtre de discussion.

====Quelques jets de dés====

[[Image:Macro-editor-rolldice.png|thumb|Une Macro contenant du texte et un jet de dés basique de 1D20+7]]

Ceci est une Macro simple qui va automatiquement lancer un dé 20 et ajouter le nombre 7 à ce jet, avant d'afficher l'ensemble dans la fenêtre de discussion.

1. Créez une nouvelle Macro (à l'endroit que vous voulez - sur un Pion, dans la fenêtre Campagne ou globale), et ouvrez l'éditeur de Macro (souvenez vous que pour faire cela, vous devez faire un clic-droit surle bouton '''(new)'''.

2. Dans le champ '''Label''' donnez le nom &quot;jet d'attaque&quot; ou &quot;jet de dés&quot;.

3. Dans le champ '''Command''', entrez:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;Mon jet d'attaque est : [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

4. Cliquez sur '''OK'''. Vous devriez voir un bouton avec le nom que vous avez choisi précédemment. Quand vous cliquez dessus, vous voyez apparaître quelque chose comme ceci dans la fenêtre de discussion :

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;Chris: Mon jet d'attaque est : &lt;font style=&quot;background-color:lightgray;&quot;&gt;8&lt;/font&gt;!&lt;/blockquote&gt;

Ce qui s'est passé est que MapTool a lu le contenu de la Macro et quand il est arrive à la partie '''[1d20+7]''', il a su qu'il devait :

# Lancer 1 dé à 20 faces (ou plus exactement choisir un nombre aléatoire entre 1 et 20),
# Ajouter 7 à ce résultat,
# Afficher le résultat dans la fenêtre de Discussion correctement placé après le texte.

Vous avez remarqué que le nombre 8 a un fond gris. Si vous laissez la souris au-dessus un moment, une info-bulle apparaîtra expliquant comment ce chiffre a été obtenu. Dans notre cas, j'ai obtenu 1 sur le dé 20 (un échec critique !). Si vous ne pouvez pas voir l'info-bulle, vérifiez vos réglages de [[MapTool Preferences#Chat|discussion]] et  choisissez '''Use ToolTips for Inline Rolls''' (''utiliser les info-bulles pour les jets en interne'').

De plus, vous ne verrez probablement pas le mot &quot;Chris&quot;, à moins que vous ne vous appeliez également Chris. Cette partie de la fenêtre de discussion est juste pour indiquer qui &quot;a dit&quot; ce morceau de texte en particulier. Si c'était un Pion, vous auriez eu le nom du Pion avec son image au lieu de l'ennuyeux &quot;Chris&quot;.

====Autre chose que des nombres ?====

Les commandes Macro peuvent fonctionner avec des nombres et avec du texte -- vous pouvez manipuler les ''lignes'' (des collections de caractères alphanumériques) de la même façon grâce au langage de Macros de MapTool. Disons que pour l'occasion, vous voulez effectuer un jet de dé, mais vous voulez aussi que le nom de votre cible soit affiché dans la fenêtre de discussion.

[[Image:Macro-editor-basiccommands.png|thumb|Une Macro avec une commande de dé et une variable appelée ''target'' (cible)]]

[[Image:Prompt-undeclared-variable.png|thumb|Une boite de dialogue pour une &quot;variable indéfinie&quot;]]

Vous pouvez ainsi modifier votre Macro ''Jet de dés'' de la manière suivante :

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;J'ai obtenu [1d20+7] à mon jet d'attaque contre [cible] !&lt;/tt&gt;&lt;/blockquote&gt;

Lorsque vous lancez cette Macro, une boite de dialogue apparaît vous demandant : &quot;Value For cible.&quot; Que s'est-il passé ?

Et bien, quand MapTool a analysé la Macro, il a vu une commande macro disant simplement '''[cible]'''. MapTool part du principe que tout mot entre crochet et qui n'est pas reconnu par l'analyseur syntaxique comme partie d'une commande macro, représente une variable (en d'autres termes, sa valeur peut changer).

MapTool a aussi remarqué que nulle part dans la Macro, il n'était précisé à quoi était égale la variable ''cible''. Les langages de programmation appelle ce genre de situation des ''variables non déclarées'' (vous n'avez jamais précisé à quoi elle était égale). Puisque MapTool n'a aucun moyen de savoir ce que ''cible'' pourrait être, il vous le demande ! Si vous tapez un nom, un nombre ou tout ce qui vous passe par la tête dans cette boite de dialogue, MapTool prendra cette information et l'attribuera à la variable ''cible'', avant de poursuivre le déroulement de la Macro.

Continuez et saisissez &quot;cet orque désobligeant&quot; (vous pouvez retirer les guillemets) dans cette boite de dialogue, et cliquez sur '''OK'''. vous devriez obtenir dans la fenetre de discussion quelque chose comme :

&lt;blockquote style=&quot;border:1px solid gray;&quot; width:50%;&gt;Chris: J'ai obtenu  &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt; à mon jet d'attaque contre &lt;font style=&quot;background-color:lightgray;&quot;&gt;cet orque désobligeant&lt;/font&gt; !&lt;/blockquote&gt;

Encore une fois, l'analyseur syntaxique parcourt le texte et les commandes macro que vous avez placés dans la Macro, et à la place indiquée par les commandes macro (entre crochet), MapTool substitue le résultat approprié.

==Utiliser des Variables dans une Macro==

Nous avons vu une paire d'exemples avec quelques utilisations de variables (comme {{code|cible}} dans l'exemple précédent) dans une Macro, mais nous n'avons pas encore été très loin dans cette matière. Pourtant, les variables et leurs utilisations représentent vraiment le cœur de l'écriture de macro. Il est donc impossible de passer outre ce sujet.

===Qu'est-ce qu'une Variable?===

Si vous avez déjà fait de la programmation, vous devez déjà savoir tout cela, mais si vous venez juste de vous lancer dedans, une définition simple de ''variable'' en terme de langage de Macro est :

:'''Une variable est une valeur qui peut changer et qui est basée sur une propriété d'un Pion, sur un calcul ou une autre commande Macro'''.

Puisque la valeur d'une variable n'est pas fixe, nous devons lui donner un nom (on dit qu'on ''déclare'' la variable pour que le système sache qu'elle existe) de manière à pouvoir l'utiliser. Ensuite, quel que soit le moment où nous aurons besoin de la valeur de la variable ''à ce moment'', nous n'aurons qu'à placer son nom dans une commande Macro (entre crochet), et MapTool remplacera la valeur adéquate à ce moment là.

Pensez de cette manière : si le résultat d'un jet de dés peut être n'importe quoi entre 1 et 20, vous pouvez par exemple dire qu'un résultat particulier a été un 19, un 2, un 7 ou n'importe quoi. Donc, à la place vous pourriez dire &quot;quel que soit le résultat du jet de dés, affiche ce résultat-ci !&quot;

:'''Remarque''': cela ne signifie pas que MapTool va substituer la valeur ''correcte'' en fonction de ''vos'' besoins; cela signifie qu'il va remplacer la valeur correspondant à la variable par une autre quand vous le lui demanderez. Donc si votre Macro contient une erreur, le résultat risque d'être faux - mais MapTool n'a aucun moyen de savoir si un résultat est faux, il ne fait qu'exécuter ce que vous lui demander.

===Affectation de Variables===

Lorsque vous voulez donner à une variable une valeur donnée, cela est appelé &quot;affecter&quot; une valeur à la variable. &quot;L'opérateur d'affectation&quot; dans MapTool est le signe égal ( = ). Cela semble facile, mais cela signifie juste que vous utilisez le signe égal pour dire à MapTool qu'une certaine variable a une valeur particulière. Un exemple d'affectation de variables est :

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:mesPV = 30]
&lt;/source&gt;
&lt;/blockquote&gt;

Comme vous l'avez déjà deviné, ce que fait cette ligne est :
# déclarer l'existence d'une variable appelée {{code|mesPV}},
# assigner la valeur {{code|30}} dans cette variable.
Il s'agit ici d'une affectation de variable à la racine - ''une variable'' égale ''une valeur''.

Vous vous souvenez de l'exemple où vous était demandé de saisir le nom de la cible que vous utilisiez comme variable sans lui avoir affecté de valeur. Vous aviez déclaré l'existence de la variable, mais sans lui assigner de valeur, en conséquence, MapTool vous demandait cette valeur. Ce qu'il faut retenir ici, c'est qu'une Macro utilisant des variables a besoin de connaître les valeurs de celles-ci pour pouvoir se terminer. Il n'est cependant pas toujours nécessaire de les affecter auparavant, quelquefois il est indispensable de demander à l'utilisateur quel paramètre utiliser.

===Comment déclarer une affectation===

MapTool traite chaque commande Macro à l'intérieur d'une Macro dans l'ordre, en commençant par le haut. En conséquence, à moins que vous ne vouliez que MapTool vous demande la valeur de toutes les variables que vous projetez d'utiliser, vous devrez affecter des valeurs à ces variables avant ''d'utiliser'' la Macro ! Par exemple dans la commande Macro suivante :

{{code|Ce coup inflige [Dommages] points de dégâts de [TypedeDommages], vous laissant avec [PVrestants] points de vie!}}

A moins que vous ne vouliez que MapTool n'ouvre des boites de dialogue pour vous demander la valeur de  {{code|Dommages}}, {{code|TypedeDommages}}, et {{code|PVrestants}}, vous devrez vous assurer de leur avoir donné une valeur ''avant'' que MapTool n'exécute cette ligne. Peut-être avec quelque chose comme ceci :

&lt;blockquote style=&quot;background-color:lightgray;&quot;&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:Dommages = 1d6+4]
[h:TypedeDommagese = &quot;feu&quot;]
[h:PVrestants = 30 - Dommages]
Ce coup inflige [Dommages] points de dégâts de [TypedeDommages], vous laissant avec [PVrestants] points de vie!
&lt;/source&gt;
&lt;/blockquote&gt;

Comme vous pouvez le voir, nous avons fait trois affectations de variables avant qu'elles ne soient utilisées dans la ligne gérant le coup reçu. Nous avons affecté la valeur d'un jet de dés à six face plus quatre à la variable {{code|Dommages}}, la valeur {{code|&quot;feu&quot;}} à la variable {{code|TypedeDommages}}, et le résultat de l'opération {{code|30 - Dommages}} à la variable {{code|PVrestants}}.

si vous regardez attentivement, vous verrez que nous avons même utilisé une variable pour affecter une valeur dans une autre variable : la valeur de la variable {{code|Dommages}} est utilisée quand nous affectons une valeur à la variable {{code|PVrestants}} - donc, des variables peuvent être utilisées pour définir ou manipuler d'autres variables.

===Règles concernant les Variables===

Il y a deux règles à se souvenir quand on crée une variable :

# aucun espace : les noms de variables ne peuvent contenir d'espace, ainsi vous ne pouvez utiliser la variable : {{code|Points de Vie}}, mais plutôt choisir celle-ci : {{code|PointsdeVie}}.
# Variables spéciales : il existe plusieurs &quot;variables spéciales&quot; que MapTool se réserve - ce qui signifie que vous ne pouvez pas les utiliser pour autre chose que ce qui a déjà été prévu par MapTool. En général, vous pouvez les reconnaître facilement car elles ont un point dans leur nom, comme {{code|[[roll.count]]}} ou {{code|[[macro.args]]}}. Ces variables spéciales seront traitées dans un autre guide, mais pour l'instant vous devez juste savoir que vous ne pouvez pas créer de variable avec un nom se trouvant dans la [[:Category:Special Variable|liste suivante]].

==Mettre à niveau notre jeu==

Les exemples précédents montre des utilisations basiques des Macros : afficher du texte dans la fenêtre de discussion lorsqu'on clique sur un bouton, effectuer un jet de dés simple à l'intérieur d'une Macro et même récupérer des infos de la part de l'utilisateur pour terminer une Macro.

Allons maintenant un peu plus loin : nous allons jouer avec les options de mise en page, modifier les valeurs des propriétés des Pions et jeter un œil à quelques boucles très simple (lorsque vous faites et refaites quelque chose) et au embranchement (faire des choses différentes en fonction des conditions ou de la situation).

===Options de mise en page===

Le résultat d'une Macro (tout comme n'importe quelle ligne dans la fenêtre de discussion) peut être formaté en utilisant les balises [http://www.codeshttp.com/baliseh.htm HTML] de base, de même que quelques options propres à MapTool. Nous examinerons brièvement la partie HTML, pour observer quelques [[:Category:Display Roll Option|options d'affichage de jet de dés]].

====Jets de dés explicites====

Dans MapTool 1.3.b54, la manière habituelle d'afficher un résultat d'un jet de dés ou d'un calcul consiste à n'afficher que le total ou le résultat final. Ainsi si vous lancez 1D20+7, seul le résultat final apparaître dans la fenêtre de discussion, avec une info-bulle (si vous passez la souris sur le résultat) affichant le détail du calcul.

Si vous le souhaitez, vous pouvez demander à MapTool de décomposer le résultat du calcul également, en utilisant une option de formatage des jets de dés - appelée '''Jets de dés explicites'''.

Pensez à ces options de formatage comme à un interrupteur qui dirait à MapTool comment s'occuper du résultat d'un jet de dés. Pour obtenir la forme explicite, éditez votre Macro sur le jet d'attaque comme ceci :

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;J'ai obtenu [e:1d20+7] à mon jet d'attaque contre [cible] !&lt;/tt&gt;&lt;/blockquote&gt;

Lorsque vous lancerez la Macro plus tard, vous obtiendrez dans la fenêtre de discussion :

&lt;blockquote style=&quot;border:1px solid gray;width:50%;&quot;&gt;J'ai obtenu &lt;font style=&quot;background-color:lightgray; &quot;&gt;« 1d20+7 = 1 + 7 = 8 »&lt;/font&gt; à mon jet d'attaque contre &lt;font style=&quot;background-color:lightgray; color:blue;&quot;&gt;cet orque désobligeant&lt;/font&gt; !&lt;/blockquote&gt;

Vous pouvez ainsi voir le détail du résultat de votre jet de dés.

====Affichage exclusif du résultat====

A l'inverse, que se passe-t-il si vous ne voulez pas que qui que ce soit puisse voir le détail d'un résultat (par exemple, si vous ne voulez pas que vos joueurs puissent en déduire la puissance ou les faiblesses de leur adversaire). Pour cela choisissez l'option '''d'affichage exclusif du résultat'''. Éditez votre macro de la manière suivante :

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;J'ai obtenu [r:1d20+7] à mon jet d'attaque contre [cible] !&lt;/tt&gt;&lt;/blockquote&gt;

Et le résultat apparaîtra comme ceci :

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;J'ai obtenu 11 à mon jet d'attaque contre &lt;font style=&quot;background-color:lightgray&quot;&gt;cet orque désobligeant&lt;/font&gt; !&lt;/blockquote&gt;

Remarquez qu'il n'y a plus de fond gris derrière le nombre 11, et qu'aucune info-bulle n'apparaît lorsque vous passez la souris sur ce dernier. L'affichage exclusif ne fournit que du texte standard. Si vous voulez également vous débarrasser sur sur-lignage entourant les mots &quot;cet orques désobligeant&quot;, vous n'avez qu'à éditer la Macro comme suit :

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;J'ai obtenu [r:1d20+7] à mon jet d'attaque contre [r:cible] !&lt;/tt&gt;&lt;/blockquote&gt;

Et le nom de la cible s'affichera sans sur-lignage particulier.

====Résultats cachés====

Quelquefois, vous ne voulez pas du tout afficher le résultat d'une Macro - peut-être avez vous juste besoin d'afficher du texte et de faire les calcul en tâche de fond, sans rien révéler. Dans ce cas, vous devriez remplacer les &quot;r:&quot; ou les &quot;e:&quot; dans les exemples précédents par des &quot;h:&quot;, comme dans l'exemple suivant :

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
[h:PVmax = 30]&lt;br/&gt;
[h:EnPeril =PVmax / 2]&lt;br/&gt;
Je suis en péril si j'ai moins de [EnPeril] points de vie.&lt;/tt&gt;&lt;/blockquote&gt;

L'exemple ci-dessus est caractéristique de l'utilité du '''résultat caché'''. Dans cette Macro, nous faisons trois choses :

# régler la variable ''PVmax'' à 30, mais demander à MapTool de ne pas afficher le résultat,
# attribuer à la valeur de la variable ''EnPeril'' la moitié de la valeur ''PVmax'', mais demander là aussi à MapTool de ne pas afficher le résultat,
# afficher du texte en insérant la valeur ''EnPeril'' à l'endroit approprié.

Si vous lancez cette Macro, vous obtiendrez :
&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
Je suis en péril si j'ai moins de &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt; points de vie.
&lt;/blockquote&gt;

En revanche, si vous ''n'utilisez pas'' la fonction '''résultat caché''', la sortie ressemblera à :

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
&lt;font style=&quot;background-color:lightgray;&quot;&gt;30&lt;/font&gt; &lt;font style=&quot;background-color:lightgray&quot;&gt;15&lt;/font&gt;Je suis en péril si j'ai moins de &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt; points de vie.
&lt;/blockquote&gt;

Les nombres en plus proviennent des deux déclarations de variables ''avant'' la ligne de texte. Vous n'avez aucun intérêt à montrer ces choses, alors il est bien pratique de pouvoir les cacher.

====Formatage HTML====

Les Macros dans MapTool supportent les balises HTML de base. Disons que vous voulez afficher le nom de votre cible sur une ligne, le résultat du jet d'attaque sur la suivante et enfin le résultat du jet de dommages éventuels sur la troisième. Vous pourriez éditer votre Macro de cette manière :

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;J'ai fait un jet d'attaque !&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Cible    &lt;/b&gt;: [r:cible]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attaque  &lt;/b&gt;: [1d20+7]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Dommages &lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;
&lt;/tt&gt;&lt;/blockquote&gt;

En lançant la Macro, vous obtiendrez :

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
J'ai fait un jet d'attaque !&lt;br/&gt;
'''Cible    ''': cet orque désobligeant&lt;br/&gt;
'''Attaque  ''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;&lt;br/&gt;
'''Dommages ''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;7&lt;/font&gt;&lt;br/&gt;
&lt;/blockquote&gt;

Il s'agit simplement d'une mise en page - vous pourriez envoyer le résultat dans une table, changer les fontes, les couleurs de fond, les tailles de polices... de nombreuses options sont possibles.

'''REMARQUE''': si vous êtes déjà familier avec le HTML, notez bien que MapTool supporte le format HTML 3.2 - ainsi des balises telles que &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;  ne doivent pas être ''fermées'' - utilisez &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt; au lieu de &lt;nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt;.  De plus, MapTool supporte partielement les feuilles de style en cascade au standard CSS 1. Pour plus d'informations sur les balises CSS supportées consultez cette [[Supported CSS Styles|partie]].

===Utiliser les Propriétés des Pions===

Ainsi, nous savons manipuler quelques variables définies préalablement, ou que MapTool demande à chaque fois que nous lancons une Macro. Nous savons en outre mettre en forme une attaque en listant la cible, le jet d'attaque et les eventuels dommages. Pourtant, nous devons encore coder en dur les valeurs dans les Macro ou laisser l'utilisateur les insérer lui-meme chaque fois que c'est nécessaire. Puisque les personnages de JDR ne sont pas tous les memes, nous devons imaginer un moyen d'automatiser certains de ces nombres, ainsi, nous pouvons :

# créer une Macro que differentes personnes ou personnages peuvent utiliser
# Réduire au strict minimum les différentes saisies au clavier !

Comme indiqué dans la section [[Introduction to Tokens/fr]], tous les Pions emportent avec eux leur propre &quot;feuille de personnage&quot; à l'intérieur de l'onglet ''properties''. Ces propriétés peuvent etre ''référencées'' par une macro - vous pouvez ainsi par exemple écrire une macro disant &quot;lance 1D20, et ajoute la dextérité de mon personnage au résultat.&quot; Je suis sur que vous voyez à quel point cela peut etre utile.

====Mise en place de quelques exemples de Propriétés====

Of course, for token properties to work, we've got to set them up. It's a good thing you read the [[Introduction to Properties]] and created a campaign file for the MapTool RPG [[Sample Ruleset]]!

The first step is to open up the '''MTRPG.cmpgn''' file (or whatever name you saved it as), and drag a token onto the map (if you don't already have one on there). If you've got no idea what that means, check out the [[Introduction to Mapping]] to learn about making maps and putting tokens on them. Now, follow these steps:

1. Double click on a token to open the '''Edit Token''' dialog.

2. Go to the tab marked '''Properties'''.

3. You'll see a spreadsheet-style list of all the properties in the token that you can edit directly (tokens have other properties that can be edited only with macros, but for now, let's not worry about them!). You should see (if you're using the MTRPG.cmpgn file we set up in [[Introduction to Properties]]):

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;
 *HitPoints(HP):{Endurance * 6}&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV):{Dexterity}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

4. Click in the cell next to Strength. A cursor will appear, showing that you can type in that cell. Enter a number in that cell as the token's Strength value. I'm going to use 6. 

5. Repeat step 4 for Dexterity, Intelligence, and Endurance, choosing whatever number you like (I'm going to use 3, 2, and 6, respectively). Remember that ''HitPoints'' and ''Movement'' will be automatically calculated!

6. Click '''OK'''. You have just manually updated the token's properties. If you double-click on the token, and look at those properties again, you'll see that the numbers you entered are remembered. 

You'll also see that now, when you hover your mouse over the token, a little popup appears in the lower right corner of the map, showing the values for the properties you've entered. This popup is called the '''Statsheet''', and is a quick way to look at the token's properties - it's basically a convenient quick-reference &quot;character sheet.&quot;

====Referencing a Token Property in a Macro====

Now that we've configured some token properties, let's use them in a macro. For our first macro, we're going to roll 1d20, and instead of adding 7, we're going to add the token's '''Strength'''. 

1. Open up your Attack Roll macro.

2. In the lower left corner, make sure the box '''Apply to Selected Tokens''' is checked (otherwise, the macro won't know which token's Strength to use!)

3. Edit your macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;I make an attack roll!&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Target&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attack&lt;/b&gt;: [1d20+Strength]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Damage&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

You'll note I replaced the 7 with the word &quot;Strength.&quot; Since ''Strength'' is not in quotes, MapTool will know that you mean it to be a variable, and it will look on the ''current token'' (that is, the token that is selected) for a property called ''Strength''. If it doesn't find it (or if the property has never been set), it will prompt you for it (just like you were prompted for the value of ''target''). If it ''does'' find it, MapTool will put the value of ''Strength'' into the macro when it runs. 

4. Select your token, and run the macro by clicking the button. The output will look something like:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br&gt;
Target: Nasty Orcses&lt;br&gt;
Attack: &lt;font style=&quot;background-color:lightgray;&quot;&gt;27&lt;/font&gt;&lt;br&gt;
Damage: &lt;font style=&quot;background-color:lightgray;&quot;&gt;6&lt;/font&gt;
&lt;/blockquote&gt;

The important thing to note is that if you hover over the attack roll result, the tooltip will now say something like ''&amp;laquo; 1d20 + Strength = 17 + 10 &amp;raquo;'' indicating that the value being plugged in to the dice roll is the property ''Strength''.

====Changing a Property with a Macro====

Token properties can also be changed using a macro. Suppose we want to reduce the token's hit points after an enemy hit the character. You can manually edit the token and change the value in the ''HP'' property, or, you can create a macro that subtracts the amount of damage from the value of ''HP''. Here's how:

1. Create a new macro on the '''Campaign''' panel.

2. In the '''Label''' field, enter &quot;Damage&quot;.

3. In the '''Command''' field, enter:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
Aarrgh! I'm hit! I have [HitPoints = HitPoints - damage] hit points left. &lt;/tt&gt;
&lt;/blockquote&gt;

4. Check the box '''Apply to Selected Tokens''' (in the lower left corner).

5. Click '''OK'''. When you run the macro, you will be prompted for a value to put in the variable ''damage''. I put in the number 7. The output will look something like this:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
Aarrgh! I'm hit! I have &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt; hit points left
&lt;/blockquote&gt;

And, if you double click on the token, you will see that the property ''HP'' is now 23. What this macro did was:

# Prompt the user for a value for ''damage'' (in this example, I entered 7)
# Retrieve the value of ''HitPoints'' from the token (in this example, the value is 30, because it is equal to Endurance * 6)
# Subtract the value of ''damage'' from the value of ''HitPoints'' (30 - 7, resulting in 23)
# Set the value of ''HitPoints'' (originally 30) to the newly calculated total (23)
# Output the text and the new value of ''HitPoints'' to chat

===String Concatenation===

An essential ability to master when writing macros is the ability to assemble ''strings'' - that is, collections of alphanumeric characters that are then manipulated or sent to chat. Frequently, you'll want to construct a string from some text that is always the same (&quot;hardcoded&quot; text) and text that can change (text that is the value of a variable, in other words). The construction of a string is often called &quot;concatenation,&quot; but it just means &quot;building a long string out of multiple short pieces.&quot;

There are two ways to do this in a macro - outside of a macro command, and inside of a macro command.

====Outside of a Command====

The basic way a macro works is this:

# The parser reads through the whole macro, and separates the macro commands from the plain text
# The parser diverts those macro commands to the appropriate places to be processed (so, numbers are added up, dice are rolled, etc.)
# The processed commands are sent ''back'' to the parser, which substitutes the ''results'' of those commands in the place where each command was.
# The whole mess - plain text, and the results of the commands (now sitting in place of the actual commands) is sent to the chat window.

So, when you want to display the result of a command along with some text (for instance, you want to print the word &quot;Attack:&quot; and then next to it print the result of a 1d20 roll) in a macro, the easiest way is to just insert a command in the right place in your text, like so:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
Attack: [1d20]
&lt;/source&gt;
&lt;/blockquote&gt;

The parser will read that whole thing, send off the command {{code|[1d20]}} to be processed, and when it gets that result back, plug it in in place of the command, and send it off to chat. The result will be something like &quot;Attack: 17.&quot; 

That's the most straightforward way to send text to chat - just put the variables you want displayed in the right place in the text, and they will be shown in the chat window.

====Inside of a Macro Command====

Sometimes, though, you need to use strings ''inside'' of the square brackets. In that case, putting them together is a little different. First of all, within square brackets, you need to use single or double quotes to surround something you want to be treated as a string. Otherwise, MapTool will think you want each word to be a variable! For example:

'''Correct String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = &quot;This is a string&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

'''Incorrect String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = This is a string]
&lt;/source&gt;
&lt;/blockquote&gt;

Remember - outside of square brackets, no need for quotes. Inside? QUOTES.

So what if we need to build up a string dynamically? That is, what if we need to make a string that is partly &quot;hardcoded,&quot; and partly based on user input? You can't guess what the user is going to say, so you can't write that part ahead of time. What you ''can'' do is ''concatenate'' the user input into your hardcoded string. The way to do that is to use the plus sign ('''+'''), which - when it's used with ''strings'' - will piece them together into a long string. 

Here's an example: suppose we want the user to enter the name of a skill, and we then want to put that skill name into an existing, hardcoded string, which will be stored in another variable. You would do that like this:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:existingString = &quot;The skill name you entered is &quot;]
[h:concatString = existingString+skill+&quot;.&quot;]
[r:concatString]
&lt;/source&gt;
&lt;/blockquote&gt;

What happens here is this:

* Line 1 sets the &quot;hardcoded&quot; portion of the output
* Line 2 sets the concatenated string - {{code|concatString}} to equal the value of {{code|existingString}} ''plus'' the value of {{code|skill}} (which MapTool will prompt for). However, in this case, since MapTool knows that {{code|existingString}} is a string, it will not try to add them mathematically, but just append the value of {{code|skill}} after the value of {{code|existingString}}. To be grammatically correct, we concatenate another little string on the end, this time, the period. Remember - strings inside square brackets need to be in quotes (but variable names, of course, do not!)
* Line 3 displays the final value of {{code|concatString}}, after {{code|skill}} has been appended to it. The output will look something like:

&lt;blockquote&gt;
The skill name you entered is Archery.
&lt;/blockquote&gt;

That's a very simple example, but it illustrates the essence of constructing strings - you &quot;add&quot; them together with a plus sign.

==Where do We Go From Here?==

This guide barely brushes the surface of the full potential of the macro language in MapTool. However, using just the basic techniques shown here, you can create a lot of very handy, convenient macros to make playing your game easier and more fun. In future guides, I'll cover more advanced macro commands and techniques.
{{Languages|Introduction to Macro Writing}}{{#customtitle:Introduction à l'écriture de Macro|Introduction à l'écriture de Macro}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:samp-dungeon.png</title>
    <ns>6</ns>
    <id>966</id>
    <revision>
      <id>3642</id>
      <timestamp>2009-07-07T15:45:44Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Sample dungeon for VBL and Sight/Light tutorials.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="49">Sample dungeon for VBL and Sight/Light tutorials.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Vbl-toolbar-btn.png</title>
    <ns>6</ns>
    <id>967</id>
    <revision>
      <id>3643</id>
      <timestamp>2009-07-07T15:46:19Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>VBL toolbar button.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">VBL toolbar button.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Vbl-tools.png</title>
    <ns>6</ns>
    <id>968</id>
    <revision>
      <id>3644</id>
      <timestamp>2009-07-07T15:46:41Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>VBL tools buttons.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">VBL tools buttons.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Vbl-map-zoomed-extents.png</title>
    <ns>6</ns>
    <id>969</id>
    <revision>
      <id>3645</id>
      <timestamp>2009-07-07T15:47:19Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Sample dungeon, zoomed to see the full play area.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="49">Sample dungeon, zoomed to see the full play area.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Vbl-createsolidvbl.png</title>
    <ns>6</ns>
    <id>970</id>
    <revision>
      <id>3646</id>
      <timestamp>2009-07-07T15:48:42Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Creating a block of solid VBL to cover the entire dungeon.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="58">Creating a block of solid VBL to cover the entire dungeon.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Vbl-complete-cover.png</title>
    <ns>6</ns>
    <id>971</id>
    <revision>
      <id>3647</id>
      <timestamp>2009-07-07T15:49:59Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Dungeon completely covered by VBL.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">Dungeon completely covered by VBL.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Vbl-erasingvbl.png</title>
    <ns>6</ns>
    <id>972</id>
    <revision>
      <id>3648</id>
      <timestamp>2009-07-07T15:50:28Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Erasing blocks of VBL.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">Erasing blocks of VBL.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Vbl-erased.png</title>
    <ns>6</ns>
    <id>973</id>
    <revision>
      <id>3649</id>
      <timestamp>2009-07-07T15:50:58Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Dungeon rooms erased from VBL.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">Dungeon rooms erased from VBL.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Vbl-polyline-wall.png</title>
    <ns>6</ns>
    <id>974</id>
    <revision>
      <id>3650</id>
      <timestamp>2009-07-07T15:51:46Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Drawing wall VBL using the poly line VBL tool.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="46">Drawing wall VBL using the poly line VBL tool.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Vbl-drawx.png</title>
    <ns>6</ns>
    <id>975</id>
    <revision>
      <id>3651</id>
      <timestamp>2009-07-07T15:52:20Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>An &quot;X&quot; drawn with VBL, frequently used for pillars and statues.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="63">An &quot;X&quot; drawn with VBL, frequently used for pillars and statues.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Vision Blocking</title>
    <ns>0</ns>
    <id>976</id>
    <revision>
      <id>4109</id>
      <parentid>3666</parentid>
      <timestamp>2010-01-17T15:32:18Z</timestamp>
      <contributor>
        <username>Akryas</username>
        <id>117</id>
      </contributor>
      <minor/>
      <comment>Added translation tag</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11674">{{Languages|Introduction to Vision Blocking}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}

==Vision Blocking==

In MapTool, [[Token:token|tokens]] can be given [[Introduction to Lights and Sights|sight]], which lets the program model vision and lighting in-game. In other words, when you configure the token with vision, it can then &quot;see&quot; other tokens and areas of the map. In addition, MapTool provides for [[Introduction to Lights and Sights|lighting]] - so a token can &quot;see&quot; only to the extent of its light source (or nearby light sources) - and Vision Blocking, which lets you establish boundaries to the token's visual range (so you can indicate where the walls are in a dungeon, for instance). 

This introductory element will briefly review the Vision Blocking Layer tools in MapTool (sometimes also called ''topology'' tools), and how to use them to create a sample dungeon environment. Remember, Vision Blocking is intimately connected to the '''Sight''', '''Light''', and '''Fog of War''' features of MapTool, so once you've read this tutorial, go check out the [[Introduction to Lights and Sights]] and see how it all works together!

===First, Get a Map===

[[Image:samp-dungeon.png|thumb|Sample Dungeon]]

To start off, we'll need a map of a dungeon. Somewhere suitably subterranean and dank, full of twisty little passages, all alike. 

Well, maybe we won't get too crazy with the mazes of twisty passages. Created using an [http://forums.rptools.net/viewtopic.php?f=34&amp;t=7418 awesome tileset] created by Jonathan Roberts (Torstan on the [http://forums.rptools.net RPTools Forums]), the map shown to the right will be used for the examples in this introductory tutorial.

==Activating the Vision Blocking Tools==

[[Image:Vbl-toolbar-btn.png|thumb|The VBL toolbar button]]

[[Image:Vbl-tools.png|thumb|The VBL tools, activated when you click on the VBL toolbar button]]

To activate the Vision Blocking Tools, click on the &quot;Eye&quot; icon in the MapTool toolbar. (eye icon screenshot). When you do so, a new set of buttons will appear - these are the various Vision Blocking drawing tools you can use. If you hover over them, a tooltip will pop up explaining what each one does. From left to right, they are:

* '''Draw a Rectangular VBL''': this creates solid rectangular areas that block vision (these are generally called Vision Blocking Layers, or &quot;VBL&quot; for short). . Tokens outside the area cannot see into it or through it; tokens inside the area cannot see anything at all (it is solid and opaque). 
* '''Draw a Hollow Rectangular VBL''': this, as it implies, creates hollow VBL - if a token is ''inside'' the area, they will see everything inside it, but will not be able to see ''beyond'' the boundary; for tokens outside the VBL area, they will see everything outside, but cannot see ''into'' the rectangular area. 
* '''Draw a Circular VBL''': like the rectangular one, this creates a circular (in reality, a polygon approximating a circular area; actual circular curves are performance-intensive!) VBL
* '''Draw a Hollow Circular VBL''': behaves like the hollow rectangle
* '''Draw Closed Poly Line VBL''': this lets you draw an arbitrary polygonal shape using line segments, and when finished, closes it and makes a solid VBL out of it. To start the polyline shape, left-click on the map, and draw the first segment. To attach the next segment, ''right-click'' and move the mouse to create the next line segment. When finished with the full shape, left-click to close it. 
* '''Draw Poly line VBL''': as above, but creates a hollow polygon

===Best Practices===

Vision blocking and vision processing is processor-intensive, and overuse of (or overly-complex) VBL can cause serious performance issues with MapTool - slowdowns, inability to navigate a map, and so forth. Some rules of thumb:

# '''Use square VBL wherever possible''' - and minimize the use of circular or highly irregular VBL
# '''Use solid VBL wherever possible''' - this prevents gaps between polylines, which can be performance hogs. Instead, cover the map with VBL, and cut out the areas that the tokens should be able to see.
# '''Use as little VBL as necessary to get the effect you seek''' - make it efficient!
# It is frequently a good idea to set up a vision boundary at the edges of the play area on your map - maps in MapTool are theoretically infinitely sized, but if your tokens are going to be only in the dungeon area, there's no reason for MapTool to have to be calculating what they see all the way out to the edge of the universe. 

These will help keep performance from bogging down. You ''can'' use the other kinds of VBL, but simply be aware of how complex your vision blocking setup is getting. 

==Putting VBL on the Sample Map==

Now, to add some vision blocking to the map. We will use a recommended technique, which is to cover the entire map with a solid block of VBL, and then &quot;cut out&quot; of that block the areas that the players will see. 

===Cover the Entire Dungeon with Solid VBL===

[[Image:Vbl-map-zoomed-extents.png|thumb|Zooming out so the entire dungeon area is visible]]

[[Image:Vbl-createsolidvbl.png|thumb|Creating a block of solid VBL over the whole dungeon]]

# Zoom the map so you can see the whole thing.
# Select the Draw a Rectangular VBL button.
# Left-Click to place the upper-left corner of the solid VBL. Do not hold down the left-mouse button.
# Drag the mouse to define the size of the VBL. You'll see it traced out in a transparent red color as you drag. 
# Click the left mouse button again to place the lower-right corner of the VBL. The VBL will turn blue (if you go to the toolbar and select one of the other tools on the left side - switching off the VBL tools - the blue VBL indicators will disappear. They are only visible when the VBL tools are active). 

[[Image:Vbl-complete-cover.png|thumb|The entire dungeon area covered by solid VBL]]

You've now covered the entire map with VBL. If a token was placed outside that area, and had a &quot;sight&quot; setting active, it would not be able to see into that area.

===Cut out the Visible Areas from the Solid VBL===

[[Image:Vbl-erasingvbl.png|thumb|Erasing a section of VBL - hold down Ctrl to make the area snap to the map grid.]]

Now, we cut out the rooms. This process is a bit trickier - to keep the VBL efficient, make sure you get the edges lined up as best you can and you don't leave any narrow gaps or thin lines of VBL between rooms (a trick to doing this is in the instructions below). For this part, I will be clearing all VBL, out to the outer walls. We will work on the interior walls later.

# Zoom the map until you are comfortable with the zoom level.
# Select the Draw a Rectangular VBL tool.
# Hold down the Shift key, and left-click to mark the upper-left corner of the area of VBL you want to erase. A white, transparent box will follow the mouse cursor (if it's not white, you forgot to hold shift!)
# Drag the mouse until you've reached where you want the lower-right corner of the cleared area to be, and left-click. The blue VBL will disappear. You have now erased the VBL for that area, and tokens in that area would be able to see (their vision would be blocked, of course, once it reached any VBL!). 
# Repeat this process for the rest of the rooms, tunnels, and so forth. 

[[Image:Vbl-erased.png|thumb|The VBL is now erased over the dungeon rooms themselves.]]

Afterwards, you'll have a large blue area, with the dungeon &quot;cut out&quot; inside it. 

'''TIP''': if you hold down Ctrl while you trace your VBL, it will snap to the gridlines of the map. This is very useful for aligning VBL. I used this technique to erase the VBL on the sample map, because it makes the VBL align easily and squarely on the dungeon walls.

===Interior VBL===

[[Image:Vbl-polyline-wall.png|thumb|Drawing VBL on the walls with the Poly Line VBL tool.]]

Finally, we will put VBL on the interior walls. This will make it so that the walls ''inside'' the dungeon block vision too. 

# Zoom the map to focus on a particular wall.
# Select the &quot;Draw Polyline VBL&quot; tool.
# Hold down Ctrl, and left-click on the map to place the beginning of the line segment. I recommend starting the line somewhere in the solid VBL, so that there are no gaps at the edges of the walls. 
# Drag the mouse to draw the line segment. (in the screenshot, the line segment is the thin red line inside the yellow circle; the yellow circle was drawn on the screenshot to show you where the polyline is - it's not part of the VBL process)
# Left-click to place the end of the line segment. The red line will turn blue, indicating that there is VBL now on that wall. 
# Repeat the process for the other walls, until you are satisfied.

===VBL and Objects===

There are lots of objects in a dungeon that can block vision - doors, pillars, piles of rubble, chests...you name it. It is possible to draw VBL anywhere on a map - however, at this time, VBL is not linked to particular objects. This means that you can't, for instance, put VBL on a door and have it &quot;open&quot; with the door when your players open it. You can simulate this by deleting the VBL that crossed the doorway, but you can't have the VBL automatically move with an object. 

You'll have to experiment with the VBL for the objects in your dungeon, but here are some tips:

* '''Doors''': for doors, if they are closed, simply draw the VBL along the wall in which the door sits. When (if) the door is ever opened, you can rotate the door object, and use Solid Rectangular VBL to erase the vision blocking layer that covered the doorway (remember, hold down Shift to erase VBL). Make sure to use ''solid'' VBL - if you use a hollow rectangle, it will only erase where the hollow rectangle's boundary intersects the other VBL. 

[[Image:Vbl-drawx.png|thumb|An &quot;X&quot; drawn with VBL, typically used for pillars, statues, and similar objects]]

* '''Pillars, statues, and standing objects''': remember that, when you use VBL, the tokens cannot see into or through it at all (and, because of this, the ''players'' won't see anything covered by or hidden inside VBL on their screens). If you want the players to be able to see some of an object - like a large pillar - one of the recommended tricks is to draw an &quot;X&quot; on the pillar using poly line VBL (instead of covering the whole pillar with a circular or rectangular solid VBL. Using an X means that the players can see some of the pillar, depending on where their tokens are. It makes for a much nicer look. If you look at the screenshot, you'll see an &quot;X&quot; drawn using VBL on top of one of the barrels.

==VBL Limitations==

The Vision Blocking Layer in MapTool is a tool for helping to simulate what a character can see during a game. However, it does have limitations, and doesn't &quot;completely simulate vision&quot; or anything like that. We touched on one limitation earlier, the fact that VBL cannot be attached to specific objects, and so if you open a door that is covered by VBL - the door object might move, but the VBL stays put. Here are a couple other limitations of the current (as of MapTool 1.3.b56) Vision Blocking Tools.

* '''Vision Blocking is Binary''': VBL in MapTool is on or off. There is no &quot;partially transparent&quot; or &quot;one way&quot; VBL in the current version of MapTool.
* '''Vision Blocking is Total''': Related to the above, VBL blocks all forms of vision. There are no vision types currently that can see through VBL.
* '''Vision Blocking has no Elevation''': VBL cannot at this point be given a particular height - it stretches to infinity, up and down, and so there's no way to set up VBL so a tall character can see &quot;over&quot; it


{{Languages|Introduction to Vision Blocking}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Cprops-lighttab.png</title>
    <ns>6</ns>
    <id>977</id>
    <revision>
      <id>3656</id>
      <timestamp>2009-07-07T18:27:24Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Light tab on Campaign Properties.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">Light tab on Campaign Properties.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:cprops-sighttab.png</title>
    <ns>6</ns>
    <id>978</id>
    <revision>
      <id>3657</id>
      <timestamp>2009-07-07T18:28:05Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Sight Tab in Campaign Properties dialog.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">Sight Tab in Campaign Properties dialog.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Token-config-sight.png</title>
    <ns>6</ns>
    <id>979</id>
    <revision>
      <id>3658</id>
      <timestamp>2009-07-07T18:28:41Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Configuring sight for a token.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">Configuring sight for a token.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Token-config-light.png</title>
    <ns>6</ns>
    <id>980</id>
    <revision>
      <id>3659</id>
      <timestamp>2009-07-07T18:29:10Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Setting a light source on a token.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">Setting a light source on a token.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Map-vision-mode.png</title>
    <ns>6</ns>
    <id>981</id>
    <revision>
      <id>3660</id>
      <timestamp>2009-07-07T18:32:43Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Setting the Vision mode for a Map.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">Setting the Vision mode for a Map.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Lights and Sights</title>
    <ns>0</ns>
    <id>982</id>
    <revision>
      <id>4335</id>
      <parentid>4126</parentid>
      <timestamp>2010-08-12T08:05:30Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <comment>/* Sight Types */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20299">{{Languages|Introduction to Lights and Sights}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}
==What are Sight, Light==

MapTool offers three features that help to simulate the idea that when a character is adventuring in an environment, they are not always granted an &quot;ominiscient view&quot; of the entire area - they can't see through walls, around corners, or into the depths of dark dungeons. This is a difficult thing to simulate when playing face to face, but with a computer, it becomes possible to restrict a character's vision to what they might actually see - thus raising the tension and possibly the immersion of the game. The three features that MapTool offers are '''Sight''', '''Light''', and '''Fog of War'''. 

===Sight===

Sight is the ability for a [[Token:token|token]] to &quot;see&quot; its surroundings - in this case, what a player's token can &quot;see&quot; becomes visible to the player on their instance of MapTool (the GM can always see everything on the map; players, on the other hand, can be limited in what they see by things like [[Introduction to Vision Blocking|Vision Blocking Layers]], light, and [[Introduction to Fog of War|Fog of War]]). This makes for a more immersive game, as players will wonder &quot;What's around that corner?&quot; and, &quot;I hope my torch doesn't burn out...it's dark in this dungeon!&quot;

===Light===

Light is a feature that allows tokens and objects to cast &quot;light&quot; over a certain area, illuminating it. This means that in a dark dungeon, torches on the walls can illuminate small areas of the dungeon (removing/erasing any Fog of War that might cover that area) and be seen by the players (in other words, the area illuminated by the light source becomes visible to the players, assuming that the player's token has sight, and there is no VBL in the way). 

Light is critical when a map is using &quot;Night&quot; mode for vision, since without light, a token is stuck in the pitch black!

===Fog of War===

Fog of War is a system that represents what a token has seen as it is moved about the Map, and what part of the map or environment the token can directly see at that time. Fog of War should '''not''' be confused with shadows or darkness. You can have Fog of War on a Map that has no light or vision mode active at all. 

When a token with sight &quot;sees&quot; into an area of Fog of War, the Fog is erased, letting the player see the map that was hidden beneath the opaque Fog of War. When an area that a token ''has'' seen is no longer ''directly'' visible to the token, the opaque Fog of War (the &quot;Hard Fog&quot;) is replaced by a semitransparent Fog (called &quot;Soft Fog&quot;). This is a visual reminder that the player ''has'' seen that area, but cannot see it ''right now.'' Any token in the Soft Fog is hidden from the character just as if it were in Hard Fog.

&lt;p align=&quot;center&quot;&gt;'''Remember''': ''Fog of War simply indicates what area of the maps have been directly seen by a token.''&lt;/p&gt;

Fog of War is a sufficiently complex discussion on its own that - even though it is intimately connected with light and sight - it deserves its own brief, but separate, tutorial. Check out [[Introduction to Fog of War]] to get details and screenshots on using Fog of War in your games.

==The Sample Dungeon==

[[Image:samp-dungeon.png|thumb|The sample dungeon map used in this tutorial.]]

A sample dungeon is used for all of the screenshots and examples in this tutorial (and in the [[Introduction to Vision Blocking]]). A screenshot of the sample dungeon is shown at right; you can also download the Campaign File for this dungeon [[here]].

==Configuring Sight Types and Light Sources==

Both Sight Types and Light Sources are configured from the Campaign Properties window, under the Sight and Light tabs. To open the Campaign Properties dialog, go to '''Edit &gt; Campaign Properties.'''

===Sight Types===

[[Image:cprops-sighttab.png|thumb|The Sight tab in the Campaign Properties dialog]]

The Sight Types tab lets you set up different kinds of &quot;sight&quot; (such as low-light, or darkvision/infrared, or normal vision, and so forth). MapTool has some default sight types set up when you first open it. If you look at the sight tab, you'll see the following:

 Conic Vision: cone arc=120 
 Normal Vision - Short Range: circle distance=10.0 
 Lowlight: circle x2 
 Darkvision: circle r60 
 Square Vision: square 
 Normal: circle 

Each of those items defines a '''Sight Type'''. The sight type is defined using a specific syntax, explained in the Campaign Properties window. The most basic one is simply a shape, as in:

 Normal: circle

This simply says that &quot;normal sight is circular.&quot; There is no limit to the range except the vision distance set on the ''Map itself'', which defaults to 1,000 units. You can set e.g. distance=10 to limit the sight, this can reflect a thick fog for example where the players wade through.

A more complex entry is the one for &quot;Lowlight&quot; sight:

 Lowlight: circle x2

In this case, the vision name is '''Lowlight''', and the shape is circular. However, an additional option was added on the end - ''x2''. This is an option that interacts with ''light sources'', multiplying their effective radius by 2 for any token that has the Lowlight vision. So where a token with Normal vision might see 20 units when using a torch, a token with Lowlight vision can see ''40'' units. 

Looking at an even more complex entry, consider the one for &quot;Darkvision&quot;:

 Darkvision: circle r60

In this entry, there are four components.

* '''Darkvision''': this is, of course, the ''name'' of the Sight Type (you could call it &quot;Thermographic Vision&quot; if you like). This name appears in the token configuration dialog when you want to activate token sight.
* '''circle''': this signifies the shape of the visual area, in this case, indicating that the visual area is circular; we've seen this before.
* '''r''': this is a code that signifies that this sight type has a &quot;personal&quot; light source - in other words, it is effectively a light source only ''that token'' can see. This is what makes this &quot;darkvision,&quot; for instance - the token can see just fine in the dark, but that token's ''allies'' might be completely blind. 
* '''60''': this is the range of the sight type, starting from the center of the token's square, and counted in &quot;map units&quot; (so if your map is 5 units per cell, this will cover 12 map cells; if your map is 1 unit per square, this will cover 60 squares). Note that since range is measured from the ''center'' of the square or hex, many users add a fractional amount to the range so that the end of the range lines up nicely with a hex or square boundary. 

'''Tip:'''you can use r0.5 in normal vision, this way when you turn on night mode, players that do not have a light source can at least still see there own token. This setting could look like:  &quot;Normal: circle r0.5&quot;, adding limited vision in the mix, this would become: &quot;Normal Vision - Short Range: circle r0.5 distance=10.0 &quot;

Configuring sight types is unique to the game being played, and so the specifics of it need to be left to the campaign designer. However, suffice it to say that Sight is a configurable option and offers a great deal of flexibility. 

====Sight Type Limitations====

Flexible as it is, there are a few limitations on Token Sight. 

* '''One sight type at a time''': tokens can only have one kind of sight active at a time (a token cannot have Darkvision and Normal sight active simultaneously)
* '''Sight has no color''': sight types do not have colors of their own. Any color visible to the players will be based on the color of the light source, not the sight type (there is one exception to this, however: in [[MapTool Preferences]], you can opt to have the vision color of the token match its [[token.halo|Halo]] color)

===Light Sources===

[[Image:Cprops-lighttab.png|thumb|The Light tab in the Campaign Properties dialog.]]

The Light tab provides an interface very similar to the Sight tab - a text window with a number of different items defined as a simple string of text. The default MapTool campaign properties show the following light sources: 

 D20
 ----
 Candle - 5 : 5 10#000000 
 Lamp - 15 : 15 30#000000 
 Torch - 20 : 20 40#000000 
 Everburning - 20 : 20 40#000000 
 Lantern, Hooded - 30 : 30 60#000000 
 Sunrod - 30 : 30 60#000000 
 Generic
 ----
 5 : 5 
 15 : 15 
 20 : 20 
 30 : 30 
 40 : 40 
 60 : 60 

====Groups====

In the above default lights, there are two groups: D20 and Generic. A group is defined by typing its name, and placing beneath it four hyphens in a row: {{code|----}}. Groups appear in the right-click menu on a token, and are basically a way for you, as GM, to organize the different light sources in your game.

[[Aura]] is not included by default and must be added manually.

====Light Source Syntax====

Beneath each group header are a list of light sources. The syntax for these is very similar to the syntax for Sight Types, with a couple exceptions. Let's look at the entry for Sunrod:

 Sunrod - 30: 30 60#000000

There are three elements shown here:

* '''Sunrod - 30''': the name of the light source; this is what appears in the right-click menu on a token, under the appropriate Light Source group
* '''30''': this is a light source radius of 30 units; the &quot;first&quot; radius of the light
* '''60#000000''': this is a ''second'' radius to the light, and a hexadecimal color code.
** '''Light Source Radii''': A light source can have one or more radii, each of which can be set to a different color. In the sunrod example, the first radius has no color (or rather, it has the default color of white, which means that the area it covers is completely illuminated). The second radius (60) has the color #000000, which, when rendered by MapTool, makes a &quot;dim light&quot; area (translucent gray) from 30 units to 60 units. The overall effect is that from the center of the light source out to 30 units, the light is &quot;bright,&quot; and everything is fully illuminated. From 30 units to 60 units, the light is a big darker, and items in that area are less brightly lit. 

One element is left out here, which is the light source ''shape.'' Like Sight Types, light sources can have shapes. The default shape is circular, and so if you do not specify a shape, the light source will default to circle-shaped. The other shapes are:

* '''Cone''': create a conic area with a user-defined arc. This projects the light along the current facing of the token.
* '''Square''': this creates a square light area
* '''[[Aura]]''': this is a special light source, because while it is blocked by VBL and can cast colored light, it does not actually illuminate anything (therefore, an [[aura]] will not reveal hidden areas to a player, but it does act as a way to see how far from a token its aura extends).

===Giving Tokens and Objects Sight and Light===

[[Image:Token-config-sight.png|thumb|Set the &quot;Has Sight&quot; checkbox to give a token a sight type.]]

[[Image:Token-config-light.png|thumb|Use the right-click menu for the token to select a Light Source.]]

To give a token Sight and Light, do the following:

# Double-click on the token and go to the Config tab. There, check the Has Sight box, and select the appropriate sight type. Remember that a token can only have one type of sight active at a time. 
# Click '''OK''' to save the sight settings.
# Right-click on the token, and go to Light Source. Navigate through the submenus until you can select a specific light source. The token now has a light source. 

==Vision Modes==

[[Image:Map-vision-mode.png|thumb|Setting the vision mode on a map.]]

Recent builds of MapTool introduced the concept of Vision Modes, which let the GM dictate how vision and light will affect a given map. There are three Vision Modes: '''Off''', '''Day''', and '''Night''', each of which alters the way in which light and vision interact for a token. 

In the following discussion of vision modes, what is visible to the player as they move their token is based on what is visible to the ''token itself''. Thus, if, under the proper settings, an enemy token is visible to the player's token, the player will see it on the Map. However, if that enemy token is ''not'' visible to the player's ''token'', it will not appear on the player's instance of MapTool.

===Off===

When Map Vision is set to &quot;Off,&quot; Token vision settings are not taken into account when displaying information to players: all things are visible at all times, unless hidden beneath Fog of War.

===Day===

In Day mode, light sources are not considered when evaluating token vision and what lies inside the tokens visual range. Furthermore, no part of the map is hidden from the players (that is, they will see the entire map - not necessarily all the ''tokens'' on a map, but they will see the layout of the entire dungeon, building, or area). Effectively, the Day mode assumes that a bright sun is shining down on everything, illuminating it all, and everything is visible unless blocked by VBL or covered by Fog of War.

===Night===

This mode incorporates Light Sources into the calculations, effectively assuming that it is &quot;night&quot; in the game, and that without a light source, the tokens are in a pitch-black environment and can see nothing. If Fog of War is used with Night Mode, light sources will reveal areas covered by Fog of War, assuming a token can see the light source and the area is not blocked by VBL.

===Vision Modes and Fog of War===

You can use Fog of War with any of the Vision modes: Off, Day, or Night. 

* When Map Vision is Off, Fog is removed to the extent of the token's sight (set using the Token Properties dialog). Soft Fog does not appear when using Off Mode, as tokens do not actually &quot;see&quot; anything in this mode. VBL works normally.
* In Day Mode, the Fog will be removed out to the limit of the token's visual range (which, if you note when you create a map, defaults to 1,000 units), and token vision is blocked by VBL. In this mode, Fog of War has both Hard and Soft Fog, as token vision is active. 
* In Night Mode, Fog of War (when removed) is cleared to the maximum radius of a token's light source (remember, though - the token must a) have sight, and b) have a light source - without a light source, the token can't see at all!). Thus, when using Fog of War and Night mode for vision, the fog will be removed only where the light source illuminates it. Soft Fog works in this mode just as it works in Day mode.

==Using Sight and Light in a Game==

Sight, Light, and Fog interact in a number of ways in-play. To start, let's look at using Sight without Light or Fog of War. The examples below will use the sample dungeon shown to the right. Note that the sample dungeon uses [[Introduction to Vision Blocking|Vision Blocking]], a feature of MapTool that blocks the line of sight of a token (meaning you can use it to indicate the placement of walls, pillars, and similar objects that would obstruct a character's vision). 

===Vision Range===

[[Image:Nofog-sight-boundary.png|thumb|MapTool shows a white boundary illustrating the limit of the token's visual range.]]

[[Image:Nofog-sight-boundvbl.png|thumb|When the token with sight is on a map with [[Introduction to Vision Blocking|VBL]], the token's sight boundary follows the VBL.]]

When you configure a token to have sight, when you hover your mouse token over the token, MapTool will illustrate the limit of the token's visual range with a white border (a circle if the sight type is circular, or square if square, or a cone if it's cone shaped, etc.). The screenshot to the right shows a PC token with the sight type &quot;Normal - Short Range&quot; configured. Note the white circle indicating the boundary of the token's vision.

In the first screenshot to the right, there is no VBL on the map, so the token's visual range is unaffected. For a more practical illustration of the &quot;line of sight&quot; boundary, consider the second screenshot, taken using the same token, but on the dungeon map, which employs VBL along the the walls of the dungeon. If you look closely, you'll see the white boundary - however, instead of being circular, it is blocked in certain areas by the VBL of the map, and thus has an irregular shape.

==Vision Modes and Sight==

As mentioned above, there are three vision modes - '''Off''', '''Day''', and '''Night'''. Each setting affects how token vision is evaluated by MapTool.

===Sight when Vision is &quot;Off&quot;===

[[Image:Nofog-visionoff-gmview.png|thumb|The GM's view of a map with no vision. Note that if the map has VBL on it, the white boundary of token sight range will appear, but it's not actually used to determine what is visible - since vision is disabled.]]

[[Image:Nofog-visionoff-plyrview.png|thumb|The Player's view of the same map.]]

When Vision is set to '''Off''', the token's sight settings are not taken into account when deciding what to display to the player. Instead, the player can look at all of the items and backgrounds on the map. VBL will still block the &quot;visual boundary&quot;, but it won't actually block vision in any way - something on the far side of VBL from a token is still visible on the player's screen. 

The two screenshots to the right illustrate this: the top screenshot is the GM's view of the screen, while the shot on the bottom is the Player's view of the same map - note that they both see the same items. The only items a player will not see are those items on the Hidden layer, or those items that the GM has explicitly flagged as invisible to players.

===Sight when Vision is &quot;Day&quot;===

[[Image:Nofog-visionday-gmview.png|thumb|GM's view of a map with Vision set to ''Day'' mode.]]

[[Image:Nofog-visionday-plyrview.png|thumb|Player's view of the same map. Note that the other tokens that the GM can see are ''not'' visible to the player, since VBL blocks them.]]

When Vision is set to '''Day''', the token's sight settings are take into account when determining what objects and other tokens are visible to the player. Light source settings are ''not'' taken into account. If an object or token lies outside the player's token's vision, it will not be visible to the player. Likewise, if an object or token lies beyond VBL from the player token, it will not be visible.

The screenshots to the right show this (again, the top is the GM's view, and the bottom is the Player view). Note that in the player view, the Dragon and Hero token are not visible to the Elf token (the player token), because they are hidden by VBL.

===Sight when Vision is &quot;Night&quot;===

[[Image:Nofog-visionnight-gmview.png|thumb|GM's view of a Map with vision set to Night mode.]]

[[Image:Nofog-visionnight-plyrview.png|thumb|Player's view of the same map - note that the Elf token (the player's token) is not visible, because the Elf has no light source!]]

[[Image:Nofog-visionnight-plyrview-candle.png|thumb|The player's Elf token is now visible, because it has a light source.]]

When vision is set to '''Night''', both the token's sight settings ''and'' the token's light source setting is taken into account when determining what the token is able to see. If a token lacks a light source, it will be unable to see anything unless it has a sight type that indicates ''personal light'' (in other words, a sight type like the &quot;Darkvision&quot; type discussed previously) - in fact, the token itself will not be visible to the player!

The screenshots to the right show Night-mode vision in effect. The top screenshot is the GM view; the second two show the Player view ''without'' a light source on the player's Elf token, and then with the &quot;Candle - 5&quot; light source selected. There are several things to note about this:

# &quot;Night&quot; mode vision does not add &quot;darkness&quot; to the map in any visual way - it simply means that without a light source, tokens cannot see other tokens, objects, or themselves. 
# In the first Player screenshot, the player's Elf token is not visible in the lower left room of the dungeon - that's because the player's token doesn't have a light source, so it can't see - and therefore, the ''player'' can't see anything but the map background.
# In the second Player screenshot, the Elf is now visible because it has a light source active. This light source means that the player can see out to the limit of its light source's area.

{{Languages|Introduction to Lights and Sights}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Nofog-sight-boundary.png</title>
    <ns>6</ns>
    <id>983</id>
    <revision>
      <id>3672</id>
      <timestamp>2009-07-07T23:17:37Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Vision boundary lines.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">Vision boundary lines.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Nofog-sight-boundvbl.png</title>
    <ns>6</ns>
    <id>984</id>
    <revision>
      <id>3673</id>
      <timestamp>2009-07-07T23:18:26Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Sight boundaries interacting with VBL.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">Sight boundaries interacting with VBL.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Nofog-visionoff-gmview.png</title>
    <ns>6</ns>
    <id>985</id>
    <revision>
      <id>3674</id>
      <timestamp>2009-07-07T23:19:10Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Vision off, no Fog, GM's view.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">Vision off, no Fog, GM's view.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Nofog-visionoff-plyrview.png</title>
    <ns>6</ns>
    <id>986</id>
    <revision>
      <id>3675</id>
      <timestamp>2009-07-07T23:19:49Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Vision off, no Fog, Player's view.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">Vision off, no Fog, Player's view.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Nofog-visionday-gmview.png</title>
    <ns>6</ns>
    <id>987</id>
    <revision>
      <id>3676</id>
      <timestamp>2009-07-07T23:20:27Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Vision Day, no Fog, GM's view.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">Vision Day, no Fog, GM's view.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Nofog-visionday-plyrview.png</title>
    <ns>6</ns>
    <id>988</id>
    <revision>
      <id>3677</id>
      <timestamp>2009-07-07T23:21:08Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Vision Day, no Fog, player's view.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">Vision Day, no Fog, player's view.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Nofog-visionnight-gmview.png</title>
    <ns>6</ns>
    <id>989</id>
    <revision>
      <id>3678</id>
      <timestamp>2009-07-07T23:21:51Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Vision Night, no Fog, GM's view.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">Vision Night, no Fog, GM's view.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Nofog-visionnight-plyrview.png</title>
    <ns>6</ns>
    <id>990</id>
    <revision>
      <id>3679</id>
      <timestamp>2009-07-07T23:22:34Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Vision Night, no Fog, player view without light source.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="55">Vision Night, no Fog, player view without light source.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Nofog-visionnight-plyrview-candle.png</title>
    <ns>6</ns>
    <id>991</id>
    <revision>
      <id>3680</id>
      <timestamp>2009-07-07T23:23:14Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Vision Night, no Fog, player view with light source.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="52">Vision Night, no Fog, player view with light source.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Dicebox27.png</title>
    <ns>6</ns>
    <id>992</id>
    <revision>
      <id>3746</id>
      <parentid>3732</parentid>
      <timestamp>2009-07-27T23:54:47Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:Dicebox27.png]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">Dicebox v. 27 default layout.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Diceboxconfig.png</title>
    <ns>6</ns>
    <id>993</id>
    <revision>
      <id>3733</id>
      <timestamp>2009-07-25T22:29:25Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Config Screen for Dice Box v. 27</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">Config Screen for Dice Box v. 27</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Db27 dragtomap.png</title>
    <ns>6</ns>
    <id>994</id>
    <revision>
      <id>3734</id>
      <timestamp>2009-07-25T22:30:21Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Dragging Dice Box to the map.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">Dragging Dice Box to the map.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Dicebox vistoplayers.png</title>
    <ns>6</ns>
    <id>995</id>
    <revision>
      <id>3736</id>
      <parentid>3735</parentid>
      <timestamp>2009-07-25T22:33:56Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:Dicebox vistoplayers.png]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">Dice box configuration.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Toggle State</title>
    <ns>0</ns>
    <id>996</id>
    <revision>
      <id>3743</id>
      <timestamp>2009-07-26T18:54:14Z</timestamp>
      <contributor>
        <username>Hawke</username>
        <id>55</id>
      </contributor>
      <comment>New page: ==Toggle State==  This is a very simple macro that allows you to toggle the state of selected tokens. It is potentially useful to a GM who has players that can mark - simply set the name o...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="780">==Toggle State==

This is a very simple macro that allows you to toggle the state of selected tokens. It is potentially useful to a GM who has players that can mark - simply set the name of the state at the beginning of the macro. It is useful to have a different button (stored locally or in campaign macros) for each player's mark. You can quickly select several enemies when marking with a blast/burst power or for switching marks you can select both the old mark and the new mark and it will toggle as wanted. 

Special thanks to zEal who made this macro for me. 

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: StateName = &quot;Marked_red&quot; ]
[h, foreach( Selected, getSelected(&quot;json&quot;) ):

setState(StateName,if(getState(StateName, Selected),0,1),Selected)

]
 &lt;/source&gt;


[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:Introduction to Dialogs and Frames</title>
    <ns>1</ns>
    <id>997</id>
    <revision>
      <id>4351</id>
      <parentid>3747</parentid>
      <timestamp>2010-08-26T14:50:11Z</timestamp>
      <contributor>
        <username>CartographerCatfish</username>
        <id>223</id>
      </contributor>
      <comment>/* Final Example */ new section</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="805">The example at the very bottom for the advanced character sheet references the macro &quot;CharSheetHeader&quot; but doesn't actually outline what exactly goes into it, anywhere on the page. Presumably that's the bit that's holding the &quot;Main&quot; and &quot;Weapons&quot; links at the top of the screenshot, but something like this should probably be spelled out somewhere.--[[User:Xazak|Xazak]] 08:42, 1 August 2009 (UTC)

== Final Example ==

The last example in this tutorial seems incomplete - the CharSheet macro calls another macro called CharSheetHeader, but this macro doesn't seem to have been written (or I'm going blind, which is possible). Has anyone worked out how to do this? I'm new to using HTML so some advice would be helpful.

Also, the campaign file at the bottom of the screen doesn't seem to load in MapTool.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Editor:Translation/ja</title>
    <ns>0</ns>
    <id>998</id>
    <revision>
      <id>3849</id>
      <parentid>3754</parentid>
      <timestamp>2009-09-08T14:12:34Z</timestamp>
      <contributor>
        <username>Gginc</username>
        <id>94</id>
      </contributor>
      <minor/>
      <comment>add translation bar and TOC／翻訳バーと目次を追加。</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4529">{{Languages|Editor:Translation}}{{Translation}}
__TOC__
==記事を翻訳するための手順==
このページが君が翻訳する最初のページだと思うので、下記の手順ではこのページを例として用いる。ここで{{code|Editor:Translation}}と書かれた部分は君が翻訳しようとするページの名前に置き換わることになる。このページの翻訳が完了した後、wiki上のどのページを翻訳することも快適になるだろう。
# 既存のページを編集し最下部に {{code|&lt;nowiki&gt;{{Languages|Editor:Translation}}&lt;/nowiki&gt;}}を追加する。既にある場合は必要ない。{{code|Editor:Translation}} は君が訳しているページの名前に変わることを忘れないように。
# 君の翻訳の出発点として使用するために英文のコンテンツをクリップボードにコピーしよう。
# 何か変更を加えたなら英文を保存しよう。なにも変更していないのであればそのまま編集を中止する。
# 翻訳を開始するために、英語ページのURLが表示されているブラウザのアドレスバーに入り、URLの末尾に{{code|/ja}}を追加する必要がある。ここの例では、URLは最終的に{{code|&lt;nowiki&gt;http://lmwcs.com/rptools/wiki/Editor:Translation/ja&lt;/nowiki&gt;}}のようになる。{{code|/ja}}の場合日本語コードとなる。この記事の最下部にある表から適切な言語コードを見つけることができる。
# 翻訳したページに日本語のタイトルをつけるため、{{code|&lt;nowiki&gt;{{#customtitle:編集:翻訳|編集:翻訳}}&lt;/nowiki&gt;}}を追加する。
# 君が翻訳したページは可能な範囲で英語版と同じ書式とレイアウトをそれ相応に維持していることだろう。とはいえ、これには2、3の例外がある。翻訳された記事のソース全体は次のようになっているだろう：
&lt;pre&gt;
{{Languages|Page Name}}{{Translation}}
__TOC__
※ここには君の翻訳したページ
{{Languages|Page Name}}{{#customtitle:編集:翻訳|編集:翻訳}}
&lt;/pre&gt;

==System Messages to Translate==
{{code|@}}の使用は変数要素がどこで使用されているか示している。番号付けは厳密に行うように。さもなくばかなりの確率で場違いなところにメッセージが表示されるだろう。
# 下記の記事英語版の記事の翻訳です。
# 下記の記事は英語版の記事の古い翻訳です。
# ナビゲーション
# 基本的な使い方
# チュートリアル
# チャット・コマンド
# ダイスの式
# 用語集
# マクロ・リファレンス
# 関数の一覧
# ロール・オプション
# 特殊変数
# マクロのレシピ集
# 編集者
# 編集者のディスカッション
# 最近の変更
# 初心者
# この記事は初心者向けです
# 中級
# この記事は中級者向けです
# 上級
# この記事は上級者向けです
# 注：この関数は削除されました。現在の機能性について@を参照してください。
# @ 関数
# バージョン @ で導入
# 最後に互換性を確認したのはバージョン @
# 使い方
# 例
# 例
# 関連項目
# バージョンの変更
# 注：この記事はメイン・コードベースでまだ実装されていない変更案について言及します。
# @ ロール・オプション
# 注：この関数は信頼されたマクロの中でのみ使用可能です
# 注：このパラメーターは信頼させたマクロの中でのみ使用可能です
# この記事は未完成です。この記事を拡充することで RPTools Wiki プロジェクトに手伝うことができます。
# この記事に必要なモノ：

==言語コード==
このwikiに関する記事を以下に記載されていない言語に翻訳したいなら、私たちにお知らせください！
{| border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
!ページ名 || 言語 
|-
|  || English
|-
| '''/ar''' || {{#language:ar}}
|-
| '''/de''' || {{#language:de}}
|-
| '''/el''' || {{#language:el}}
|-
| '''/es''' || {{#language:es}}
|-
| '''/fr''' || {{#language:fr}}
|-
| '''/it''' || {{#language:it}}
|-
| '''/ja''' || {{#language:ja}}
|-
| '''/ko''' || {{#language:ko}}
|-
| '''/pt''' || {{#language:pt}}
|-
| '''/ru''' || {{#language:ru}}
|-
| '''/zh''' || {{#language:zh}}
|}
{{DISPLAYTITLE:Translation Instructions}}
{{Languages|Editor:Translation}}
{{#customtitle:編集:翻訳|編集:翻訳}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Mapping/ja</title>
    <ns>0</ns>
    <id>999</id>
    <revision>
      <id>4312</id>
      <parentid>4272</parentid>
      <timestamp>2010-06-29T02:04:36Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25262">{{Languages|Introduction to Mapping}}{{#customtitle:はじめてのマップ作成|はじめてのマップ作成}}{{Translation}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}__TOC__
==はじめに==

===まずはじめに：MapToolとは何か？===

おそらくMapToolがどのようなモノであるか理解していると思うが、MapToolの主要な目的をより確かに理解するため少し待ってほしい。 

&lt;p align=&quot;center&quot;&gt;'''MapTool は『仮想的な卓』を仲間と共有することを助け、ゲームをプレイすることができるプログラムである。''' &lt;/p&gt;

これがMapToolの行うことであり、その機能は 目的を遂げるための一連の選択（ 簡単なものから複雑なものからなる）を提供することを意図されている。 

ここや他の案内に続くすべてのマクロやプロパティやテーブルについての会話によって、MapToolを調べている理由を見失ってはいけない。それは友人とゲームをプレイする方法だ。 

===この案内について===

この案内の目的はマップツールのマクロ記述システム、照明効果、プロパティ、または 複雑なことの seamy underbelly（訳注：汚らしい弱点？）を徹底的に調べることではない。その代わり、この案内がロール・プレイング・ゲーム用の『マップ作成』プログラムとしてのマップツールを使い方を授けるだろう。その他の案内では [[Introduction_to_Game_Hosting/ja|オンライン・ゲームをホストする]]、[[Introduction_to_Tokens/ja|トークンの扱い]]、 [[Introduction to Lights and Sights/ja|視界と照明を準備する]]、[[Introduction_to_Macro_Writing/ja|マクロの書き方]]のような話題に取り組んでいる。 

この後に、マップツールの戦闘マップ／通常マップ作成用の道具としての使い方を説明しよう。その前にいくつか前提となることがある：

# マップ画像の作り方、又は入手方法を理解している。Web上にはテラバイトもの（いやいやもっと大量の！）マップ画像がある。[http://gallery.rptools.net RPTools Gallery]や[http://www.rpgmapshare.com RPGMapShare]から大量にあるあらゆるクールな画像を持ち出してくれ。
# マップツールを自分のコンピューターで動かすことができる。マップツールは Java 1.5 が君の機械にインストールされている必要がある。この作業を見つけて執り行うのは君に任せた。

では始めようか。まず始めに、当然のことを：

# マップツールを http://rptools.net から手に入れる。最新『ビルド』バージョンのマップツールは、いつも[http://www.rptools.net/index.php?page=downloads#MapTool this list]の上部から見つけることができる。現在の最新ビルドは1.3.b56だ。'''注'''：ダウンロードしたりzipファイルを解凍することなく、[http://www.rptools.net/index.php?page=launch Java WebStart]からマップツールを起動することもできる。
# マップツールのzipファイルをダウンロードしたら、君のコンピューターの好きな場所に解凍して動作の確認をする。備え付けの.batファイルは起動時のパラメーター（メモリの確保などなど）が設定してある。.jarファイルをダブルクリックすれば起動するが、君に警告を出すだろう。さらにWindowsを使っているなら、さらに設定変更が簡単なWindows Lancherを使うことができる。

では、使いやすいマップ作成に進もう。

==入手した画像をマップツールのリソースライブラリに入れよう==

マップツールの『リソースライブラリ』は、実際のところ、マップツールで使おうとしている画像を置いている君のコンピューター上のフォルダーへの『ポインタ』か『リンク』だ。マップツールは標準の画像集を備えているが、君の望むどんな画像でも（どの画像がマップツールで利用可能か管理して）追加することができる。&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mt-f-addtoreslib.jpg|thumb|'''リソース・ライブラリを追加する'''を表示しているファイルメニュー]]

[[Image:File-dialog.jpg|thumb|'''資産ツリーをロードする'''ダイアログ]]

1. 画像（マップなど）をどこからか手に入れる。画像はWebからダウンロードしてきたものでも、自分で作ったものでも構わない。それらを君が思い出せるディレクトリーに置く。このディレクトリーはステップ3で重要となる。

2. マップツールを開く。

3. '''File -&gt; Add to Resource Library'''を選択（下記の左を参照）。'''Load Asset Tree'''のダイアログが開くだろう。（本来のサイズの画像を表示するにはサムネールをクリック） 

4. ダイアログの中で、君が追加したいマップ画像を格納したフォルダーに行き、'''Open'''をクリックする。マップツールはディレクトリ内のイメージを処理し、新しいフォルダーをリソース・ライブラリ・ツリーに加える。 

'''注'''：マップツールのリソースライブラリにおけるディレクトリの名前は、ステップ3で君が選んだディレクトリと同じ名前になるだろう。 

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mtreslib.jpg|thumb|Folders in the MapTool Resource Library. These are pointers to folders on your hard drive.]]

5. それ以後、リソースライブラリのフォルダーを選択した場合（下記画像のように）、そのフォルダーに含まれる画像のサムネールを確認できる。注：君のフォルダーにサブフォルダがある場合、フォルダーツリーを展開するには'''＋'''をクリックする。また、MapToolは君が選択したディレクトリを憶えているので、同じものを再び追加する必要はない。

'''注'''：リソース・ライブラリに表示されているフォルダーは実際はハードディスクにあるフォルダーへのポインターであるから、マップツールがそれぞれのファイルをコピーすることを心配しなくても良い。リソース・ライブラリは、どこに画像があるかをマップツールに把握させる手段にすぎないのだ。

&lt;br style=&quot;clear:both;&quot;/&gt;

==マップを作る==

[[Image:Map-newmap.jpg|thumb|The '''New Map''' menu item]]

[[Image:Map-new-dialog.jpg|thumb|The '''Map Properties''' dialog]]

1. '''Map -&gt; New Map'''に進める。''Map Properties''ダイアログが表示されるだろう。

2. ''Map Properties''ダイアログの左側に、いくつかの選択フィールドとテキスト・フィールドがあるはずだ。

* '''Name'''：これはマップのタイトルだ。マップの画像を選んだ場合、タイトルは画像のファイル名に設定しなおされることを憶えておこう。一番のお勧めは、xqmap2.jpgや他の名前の代わりにもともと呼ばれている名前を付けることだ。君の好きなように呼べばよい。* '''Cell Type'''：6角形または正方形のマップ、またはグリッドなし。* '''Distance Per Cell'''：各セルごとにいくつの単位を割り当てるか（''例''：ダンジョンズ＆ドラゴンズ第4版では、すべてマスとして数えられるので、1を設定すればよい）。（訳注：1マスを数えるときの単位。5を設定すると5→10→15と数える。）
* '''Pixels per cell'''：各セルがいくつのピクセルを占めるのか。標準は50。君がダウンロードしたマップ画像の縮尺を合わせることは最も大事なことだ。* '''Vision Distance'''：マップツールは視覚、fog-of-war、その他の機能を持つため、キャラクターがマップ上を見渡せる距離の標準値を設定する。

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Background-dialog.jpg|thumb|The '''Choose Background''' dialog]]

3. '''Background'''ボタンをクリック。いくつか選ぶことのできるポップアップ・ダイアログが表示されるはずだ。背景テクスチャと背景色は全ての方向にどこまでも繰り返し配置される。

* '''Swatch'''：一定の色をマップの背景として使用する。
**&lt;font color=&quot;red&quot;&gt;'''警告：''' 最新バージョンの1.3.b53では、左上の色見本（''白''の色見本）を選択した場合、マップツールはエラーを生み出す。このエラーは、マップツールをクラッシュさせたりする原因ではないが、背景に白は設定されないだろう。代わりに、HueやRGBのタブを使って背景を白に設定できる。&lt;/font&gt;
* '''Hue/RGB'''：選択した色見本の代わりに色を指定する。
* '''Texture''' （私はたいていこれを使用する）：リソース・ライブラリにアクセスし、背景として役立つテクスチャを選択できる。

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-mapbutton.jpg|thumb|The '''Map''' button on the map properties dialog]]

4. 君にマップ画像の候補（ダウンロードしたものやフォトショップなどのソフトで作ったもの）があるなら'''Map'''ボタンをクリックしよう。If you have a map image in mind (like a downloaded one, or one you created in Photoshop or something like that), click the '''Map''' button. リソース・ライブラリが表示されているダイアログが現れるはずだ。使用したい画像を選択する。この画像は君がこれまでに選んだ背景の上に重ねられる。

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-create-done.jpg|thumb|The '''Map Properties''' dialog after a map has been selected from the Resource Library. Note the map thumbnail in the preview.]]

5. 背景とマップのできに納得したら（you have a map image in mind）、タイトルをつけて'''OK'''をクリックしよう。これでマップがマップツールのメイン・ウィンドウに読み込まれるはずだ。

&lt;br style=&quot;clear:both;&quot;/&gt;

===一つのキャンペーンに複数のマップを作製する===

マップツールには複数のマップを作成でき、すべてのマップを一つのキャンペーンに入れることができる。この行程は非常に簡単だ：単に[[Introduction_to_Mapping/ja#Creating_a_Map|マップを作る]]のステップを繰り返して新しいマップを作り、新しい画像を選び、背景、タイトルを設定するだけだ。

作成した新しいマップは、それぞれ自動的に現在作業しているキャンペーンの中に作られる。（作成した新しいマップは自動的にキャンペーンに保存されないので、作業が終わったら[[Introduction_to_Mapping/ja#Saving_Your_Work|作業を保存する]]を行うように）

また、新しいマップを既に保存しているキャンペーンに追加することもできる。キャンペーンを開き（'''File &gt; Open Campaign'''を選択）マップを作製するステップを行えばよい。

==マップツールのメイン・ウィンドウ==

===マップツールのレイヤー===

[[Image:Layer-window.png|thumb|The '''Layer''' window, which is present on all maps in MapTool]]

マップを開くと、マップウィンドウ上に''Layer''とタイトルがついた小さなボックスがある。マップツールは4つのレイヤーを持つ：

* '''Background'''：画像、背景のマップ、その他、移動しないものを置くレイヤーだ。
* '''Hidden'''：オンライン・ゲームでは、GMだけが見ることのできるレイヤーだ。
* '''Object'''：トークンのようなオブジェクト、移動する可能性のあるもの、プレイヤーが動かすことのできるもの（ランプ、テーブル、などなど）を置くレイヤーだ。
* '''Token'''：トークンを置くレイヤーだ（トークンとはキャラクターやNPCを表す小さな画像だ）。キャラクターと敵をマップ上に追加するとき、Tokenレイヤーが選択されているか確認すること。

マップツールのレイヤーは、異なる4枚のアセテート・シートやトレーシング・ペーパーが順に重なったものと考えればよい。一番下のレイヤー（'''Background'''）にはマップの基本的なパーツ（壁、床、木など）を描く。その次のトレーシング・ペーパー（'''Objects'''）には、キャラクターが使用したり、干渉したり、壊したりする''もの''を描く。ドア、宝箱、テーブル、椅子、などなど。その上のレイヤー（'''Hidden'''）には、GMだけが見ることのできるものを置く。（概ね物体であろう。''しかし''隠れているキャラクターかも！）最後に、一番上のレイヤー（''Token''レイヤー）にはミニチュア（ゲームの世界のモンスターやキャラクター、またはNPCたち）を配置する。 

トークンはマップツールの4つのレイヤーのうちどこにでも配置しても良い。そうするには、トークン画像の上で右クリックして'''Change To'''を選択。メニューから変更したいレイヤーを選択するとトークンが移動するはずだ。

===マップを選ぶ===

[[Image:Blueglobe.jpg|thumb|The Globe button, where you can select among your maps]]

[[Image:Maplist.jpg|thumb|A list of maps, which appears after you click the Globe button.]]

君がキャンペーンでマップを1つしか使っていないのなら、標準のマップとして読み込まれ、そのマップだけを見ることができる。

[[Introduction_to_Mapping/ja#Creating_Multiple_Maps_in_One_Campaign|複数のマップを作成]]していたり、複数のマップからなるキャンペーンを扱っているなら、マップツール・ウィンドウの右上にある青くて丸いアイコンをクリックすると有効なマップの一覧が現れるので、その中から選べば良い。一つしかマップがない場合、青丸アイコンをクリックするとそのマップの名前が表示されることに注意。

&lt;br style=&quot;clear:both;&quot;/&gt;

===拡大縮小と移動===

ホイール付きのマウスを使っているなら、ホイールを使ってマップを拡大・縮小することができる。また、イコール（=）を使って拡大、マイナス（-）を使って縮小することができる。 

プラス（＋）を押すと拡大縮小が1:1に設定される。 

右クリックからのドラッグでマップを移動することができる。あらゆる方向にマップがパンするだろう。

==トークンの基本==

[[Token:token|マップツールのトークン]]（単に''トークン''と呼ぶ）は、マップツール内のさまざまなモノを視覚的に表現した小さな画像とことだ。もっとも一般的なトークンの使い方はPCとNPCを表現したものだろう。別のたとえをすれば、仮想マップ上のミニチュアと呼べる。 

トークン（その他もろもろ）は[[Macros:Glossary#R|リソース・ライブラリ]]にしまわれている画像ファイルから始まる。マップツールはいくつかの標準トークン（それとトークンを作成することができる素晴らしい独立したプログラム『トークンツール』）を搭載している。また、君が探してきたものを使うこともできる。

初めてのマップ作成のこのセクションではマップツールのトークンの使用方法のごく基本的な部分を扱う。トークンにはこのガイドに書ききれないほどの特徴や仕掛け、小粋な機能が''たくさん''ある。 

===マップ上にトークンを配置する===

[[Image:Default-library.jpg|thumb|The ''Default'' folder in the Resource Library]]

1. 前説で触れたトークンを表示するために、 ''リソース・ライブラリ''の Default フォルダの'''+'''をクリックしてフォルダツリーを展開する。

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Default-tokens.jpg|thumb|The ''Tokens'' subfolder]]

2. Tokens フォルダを選択。

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-drag-to-map.jpg|thumb|Dragging a token onto the map]]

[[Image:Token-on-map.jpg|thumb|The token appears!]]

3. その下のサムネールが表示されたウィンドウから、マウスを使いトークンをマップ上にドラッグする。カーソルが手の形に変わるので、マップ上の好きな場所まで持っていきマウスボタンを離す。

マウスボタンを離すと、トークン（サムネールと同じもの）がマップ上に表示される。

&lt;br style=&quot;clear:both;&quot;/&gt;

===トークンを動かす===

マップ上に配置されたトークンは、マウスを使って選択し（クリックして選択）ドラッグや移動ができ、カーソルキーを使って移動させ'''D'''キーを押して移動を決定することができる。 

複雑な軌道をたどりたい場合は、スペースキーを押し移動経路の通過点を決める事ができる。 

===トークンの名前、GM用の名前、ラベルを変更する===

[[Image:Token-default-name.jpg|thumb|A token, showing the default name assigned when it was first dragged onto the map.]]

[[Image:Edit-token.jpg|thumb|The '''Edit Token''' dialog]]

トークンは指定可能な3つの有効な''名前''を持つ。トークンが最初にマップ上にドラッグされたときは標準の名前が設定される。通常は、トークンのPC上の''ファイル名''から拡張子を省いたものだ。例えば、下に表示された画像のトークンはマップツールの標準トークンセットからドラッグされたものであり、標準の名前は''Hero''だ。

トークンの持つ3つの有効な名前とは：

*'''Token Name''':全てのユーザーに表示される名前。これは必ず使われる。
**&lt;font color=&quot;red&quot;&gt;'''注'''：各トークンには固有の名前をつけるように！さもなければ、マップツール・マクロは意図した通りに動かすことはできなないだろう。&lt;/font&gt;
*'''GM Name''': これはマップツールに''GM''として接続しているときにだけ表示される名前だ。
*'''Label''': トークンの名前の下に表示されるテキストであり、接続している全員表示される。

トークンの名前、GM用の名前、ラベルを変更するには：

1. マップ上のトークン画像をダブルクリつくする。下記のような'''Edit Token'''ダイアログが表示されるはずだ。

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changednames.jpg|thumb|Editing the token's name, GM name, and label]]

[[Image:New-token-names.jpg|thumb|Token showing the new names and label]]

2. '''Name'''フィールドに、お好みの名前を入力。この例では、&quot;Bork the Brave&quot;と入力している。

3. '''GM Name'''フィールドに名前を入力。この例では&quot;Cork the Cowardly&quot;と入力している。

4. '''Label'''フィールドにラベルを入力する。ここでは&quot;Human Warrior&quot;と入力している。 

5. 変更を保存するために'''OK'''をクリックする。

OKを押したら、トークンが変更されたことがわかるはずだ： 

君がマップ上に配置したどのトークンでも名前を変更することができる。

&lt;br style=&quot;clear:both;&quot; /&gt;

===トークンの画像を変更する===

ときには、新しいトークンを作成する際にトークンを表す画像を変更したいと思うこともあるだろう。例えば、邪悪なる暴君にぴったりのイカした画像を見つけたけど、君はすでに暴君のトークンを完成させていた。画像を変えるためだけにトークンそのものを破棄したくはない。そうだろ？そうとも、それはやりすぎだ。その代わり、トークンの画像だけ変更するには次の手順を踏めば良い：

[[Image:Edit-token.jpg|thumb|The '''Edit Token''' dialog]]

1. 新しいトークン画像がPNG形式かJPEG形式であり、マップツールのリソースライブラリで利用可能になっていることを確認する。上記[[Introduction_to_Mapping/ja#Getting_Images_into_your_MapTool_Resource_Library|入手した画像をマップツールのリソースライブラリに入れよう]]のセクションにマップ画像をリソースライブラリに追加する方法が述べられている。同じように、トークン画像（ていうか''あらゆる''画像）も全く同じ方法でリソースライブラリに追加することができる。 

2. トークンをダブルクリックして'''Edit Token'''ダイアログを開く。 

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changeimage.jpg|thumb|The button to change the token image]]

3. ダイアログの左上にある緑色の小さなしるしをクリック。

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:New-image-picked.jpg|thumb|A new image is selected from the resource library]]

4. '''Choose Image'''ダイアログで、新しいトークン画像があるリソースライブラリ・フォルダを選び画像を選択し（赤と白の枠が選択中の画像であることを示している）、'''OK'''をクリックする。

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-image-changed.jpg|thumb|The token's image has been changed]]

5. '''OK'''を押すと Edit Token ダイアログに戻され、トークン画像が選択した画像に変更されたことを確認できるだろう。

&lt;br style=&quot;clear:both;&quot; /&gt;

===トークンの大きさの変更===

[[Image:Token-rightclick.jpg|thumb|Changing the token size using the right-click menu]]

トークンは標準ではグリッドの正方形と同じサイズ（マップツールのグリッドの標準は50×50ピクセル）になっている。トークン上で右クリックすると、たくさんの項目を持つメニューがあり、その中に'''Size'''がある。大きさの値を設定することで、大型（large）、超大型（huge）、巨大（gargantuan）、さらにより大きな大きさにすることができる。下の画像は、トークンの右クリックメニューを示している。

注：大きさの値（large, huge, gargantuan, etc.）はグリッドを持つマップでのみ適用される。（マップを作る際、グリッドなしのマップを作ることができることを忘れないように）グリッドなしのマップでは、大きさの値はより細かくなる。

&lt;br style=&quot;clear:both;&quot;/&gt;
==作業を保存する==

マップツールでは標準の''保存''形式を''Campaign File''と呼ぶ。このキャンペーンファイル（拡張子''.cmpgn''）は君が設置したマップとトークンを保持する。このファイルは何か？キャンペーンファイルの中身はZip圧縮されたXMLファイルだ。 

これまでの作業経過を保存するには、'''File → Save Campaign'''を選び、キャンペーンの名前をつければ良い。簡単でしょ？ 

キャンペーンを保存するとき、マップツールはマップ上のすべてのトークンの場所を保存するおかげで、君は中断したところから作業を再開できる！

==マップ画像をエクスポートする==

マップツールでは君のマップ画像を画像ファイル（PNG形式）にエクスポートすることが可能だ。君の望む場所に画像をエクスポートするには：

1. '''File→Export'''から'''Screenshot As'''を選択する。

2. 現れたダイアログで、&quot;View&quot;を選択。（GM ViewかPlayer VIewのいずれか。GM Viewはすべてのものが表示され、Player View は''プレイヤー''が確認可能なものだけ表示されたもの。マップツールにはナイスな視界機能が備わってるいる！）

3. Browse ボタンを使ってファイルの保存先を選ぶ。（またはFTPサーバーに送る）

4. '''Export'''をクリック。

==次の段階==

これで君は基本的なマップを作り、マップ上にトークンを配置することができるようになった。次はインターネット越し（または目の前で）に友達とネットワーク接続しマップツールを使ってゲームセッションをしてみよう！この話題は[[Introduction to Game Hosting/ja|はじめてのゲーム開催]]で取り上げられている。

{{Languages|Introduction to Mapping}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Main Page/ja</title>
    <ns>0</ns>
    <id>1000</id>
    <revision>
      <id>5649</id>
      <parentid>4895</parentid>
      <timestamp>2011-08-09T04:40:36Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <comment>/* マップツールの基本的な使い方 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3800">{{Languages|Main Page}}{{Translation}}
__NOTOC__
RPTools Documentation Wiki へようこそ。このWikiは今のところ[http://www.rptools.net/index.php?page=maptool MapTool]の文書を中心に扱っているけれども、そのほかの[http://www.rptools.net RPTools]スイートについてのどんなアプリケーションの記事も歓迎している。

このウィキは'''書きかけの未完成品'''であり、今のところ{{NUMBEROFARTICLES}}個の記事（その多くはマクロ関数についての記事である）で構成されている。そのため、君が必要としているものを正確に見つけ出すのには多少の手間がかかるかも知れない。もし君がこのウィキの整備に協力したいと考えているのであれば、自由にアカウントを作成し、[[Editor:Translation/ja|編集のガイドライン]]に目を通して欲しい。

{| width=100% cellpadding=5px &lt;!--- Do not edit this line ---&gt;
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;'''有用なトピック一覧:'''&lt;/big&gt;

==マップツールの基本的な使い方==

* [[MapTool FAQ]]
* [[Introduction to Mapping/ja|はじめてのマップ作成]]
* [[Introduction to Game Hosting/ja|はじめてのゲーム・ホスティング]]
* [[Introduction to Tokens/ja|はじめてのトークン]]
* [[Introduction to Properties/ja|はじめてのプロパティ]]
* [[MapTool Preferences/ja]]（未了）
* [[Introduction to Macro Writing/ja|はじめてのマクロ作成]]
** [[Introduction to Macro Branching/ja|はじめてのマクロ分岐]]
** [[More Branching Options/ja|続・分岐オプション]]
** [[Introduction to Macro Loops/ja|はじめての繰り返し]]
* [[Stack Size/ja|Javaスタックサイズについて]]（未了）
* [[Glossary|MapTool Glossary]]
* [[Introduction to Vision Blocking/ja|はじめての遮光レイヤー]]
* [[Introduction to Lights and Sights/ja|はじめての照明と視界]]
* [[Introduction to Campaign Repositories/ja|はじめてのキャンペーン・リポジトリー]]
* [[Shortcut_Keys/ja|ショートカット・キー]]

===チャット機能とダイスの振り方===

* [[Chat Commands/ja|チャット・コマンド]]
* [[Dice Expressions/ja|ダイスの記法]]
* [[Macros:Roll:types | [ ] Roll formatting options]]
* [[Macros:Roll:output|Roll visibility options]]

===ユーザ向けのリソース===

* [[Dice Box/ja|ダイスボックス]]
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;&amp;nbsp;&lt;/big&gt; &lt;!--- To even out spacing with the first column ---&gt;

==マクロ技術リファレンス==

* [[:Category:Macro|Macro Reference]]
* [[:Category:Macro Function|List of Functions]]
* [[Macros:Branching and Looping | Branching and Looping Options]]
* [[Variable Types]]
* [[:Category:Special Variable|Special Variables]]
* [[:Category:Tutorial|Macro Tutorials]]
* [[:Category:How To|Macros How To]]
* [[:Category:Cookbook|Macro Code Cookbook]]
* [[Macro Tips and Tricks]]
* [[Macro FAQ]]

===トークン===

* [[Token/ja|マップツールのトークン]]
* [[Token Types/ja|トークンの種類]]

===その他の記事===

* [[Supported CSS Styles]]
* [[Sample Ruleset]]
* [[MapTool ChangeLog (by build version)]]

==日本語版対応コンテンツ==

* [[Bilingual_Glossary/ja|英日対訳表]]
* [[Talk:Bilingual_Glossary/ja|英日翻訳プロジェクト会議室]]
* [http://meta.wikimedia.org/wiki/%E3%83%98%E3%83%AB%E3%83%97:%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E7%B7%A8%E9%9B%86 MediaWiki記法ヘルプ（外部リンク）]
* [[Help:Editing|RPtools Documentation Wiki独自の記法ヘルプ（未訳）]]

|} &lt;!--- Do not edit this line ---&gt;


{{Languages|Main Page}}{{#customtitle:メインページ|メインページ - MapToolDoc}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Editor:Translation/de</title>
    <ns>0</ns>
    <id>1001</id>
    <revision>
      <id>3775</id>
      <parentid>3774</parentid>
      <timestamp>2009-08-23T12:30:05Z</timestamp>
      <contributor>
        <username>Tosimosi</username>
        <id>86</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4058">{{Languages|Editor:Translation}}
__TOC__

==Schritte zum Übersetzen von Artikeln==
Da dies die erste Seite sein sollte die du übersetzt, dienen die nachfolgenden Schritte als Beispiel. Jedes Vorkommen von {{code|Editor:Translation}} sollte mit dem Namen der Seite die du übersetzt ersetzt werden. Nachdem du die Übersetzung der Seite abgeschlossen hast, solltest du jede Seite des Wikis übersetzen können.
# Bearbeite die existierende Seite und füge am Ende der Seite {{code|&lt;nowiki&gt;{{Languages|Editor:Translation}}&lt;/nowiki&gt;}} an, falls dies nicht bereits schon gemacht wurde. Erinnere dich daran, dass {{code|Editor:Translation}} auf den Namen der Seite die du übersetzt geändert werden muss.
# Kopiere den Inhalt der englischen Übersetzung in deinen Zwischenspeicher um ihn als Vorlage für den Beginn der Übersetzung zu benutzen.
# Speichere deine Änderungen in der englischen Übersetzung, falls du welche gemacht hast. Wenn du keine Änderungen angebracht hast, brich die Bearbeitung einfach ab.
# Um mit der Übersetzung zu beginnen, musst du der englischen Übersetzung in der Browser-Adresszeile {{code|/fr}} am Ende der Adresse anfügen. In diesem Beispiel würde die endgültige URL {{code|&lt;nowiki&gt;http://lmwcs.com/rptools/wiki/Editor:Translation/fr&lt;/nowiki&gt;}} lauten. In diesem Fall steht {{code|/fr}} für den französischen Sprachcode. Du findest die passenden Sprachcodes in der Tabelle weiter unten in diesem Artikel. 
# Deine übersetzte Seite sollte sinnvollerweise, so gut wie möglich, das selbe Format und Layout wie die englische Übersetzung aufweisen. Ausnahmen kann es immer wieder geben. Der gesammte Quellcode des übersetzten Artikels sollte wie folgt aufgebaut sein:
&lt;pre&gt;
{{Languages|Page Name}}{{Translation}}
__TOC__
DEINE ÜBERSETZTE SEITE
{{Languages|Page Name}}{{#customtitle:Editor:Übersetzung|Editor:Übersetzung}}
&lt;/pre&gt;

==Systemnachrichten zum Übersetzen==
Mit dem verwenden von {{code|@}} kannst du auf variable Elemente zugreifen. Behalte die Nummerierung intakt, ansonsten erscheinen die Nachrichten in den falschen Bereichen.
# Der folgende Artikel ist eine Übsersetzung des englischen Artikels.
# Der folgende Artikel ist eine veraltete Übersetzung des englischen Artikels.
# Navigation
# Grundbenutzung
# Anleitungen
# Chat Befehle
# Würfelausdrücke
# Glossar
# Makro Referenz
# Funktionsliste
# Wüfeloptionen
# Spezielle Variablen
# Makro Kochbuch
# Editoren
# Editorer Diskussion
# Jüngste Änderungen
# Anfänger
# Dies ist ein Anfängerartikel
# Mittelschwer
# Dies ist eine mittelschwerer Artikel
# Fortgeschritten
# Die ist ein Artikel für Fortgeschrittene
# Hinweis: Diese Funktion ist veraltet. Siehe unter @ für die aktuellen Funktionen.
# @ Funktion
# Eingeführt in Version @
# Letzter Kompatibilitätscheck mit Version @
# Anwendung
# Beispiel
# Beispiele
# Siehe ebenfalls
# Versionsänderungen
# Hinweis: Dieser Artikel bezieht sich auf eine vorgeschlagene Änderung die noch nicht implementiert ist.
# @ Würfeloptionen
# Hinweis: Diese Funktion kann nur in einem sicheren Makro eingesetzt werden
# Hinweis: Dieser Parameter kann nur in einem sicheren Makro eingesetzt wersen
# Dieser Artikel hält sich noch sehr kurz, du kannst das RPTools Wiki Projekt unterstützen, indem du diese Artikel erweiterst.
# Dieser Artikel benötigt:

==Sprachcodes==
Wenn du einen Artikel in diesem Wiki in eine Sprache übersetzen willst, die nicht aufgelistet ist, lass es uns wissen!
{| border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
! Seitenname || Sprache 
|-
|  || English
|-
| '''/ar''' || {{#language:ar}}
|-
| '''/de''' || {{#language:de}}
|-
| '''/el''' || {{#language:el}}
|-
| '''/es''' || {{#language:es}}
|-
| '''/fr''' || {{#language:fr}}
|-
| '''/it''' || {{#language:it}}
|-
| '''/ja''' || {{#language:ja}}
|-
| '''/ko''' || {{#language:ko}}
|-
| '''/pt''' || {{#language:pt}}
|-
| '''/ru''' || {{#language:ru}}
|-
| '''/zh''' || {{#language:zh}}
|}
{{DISPLAYTITLE:Translation Instructions}}
{{Languages|Editor:Translation}}{{#customtitle:Editor:Übersetzung|Editor:Übersetzung}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Main Page/de</title>
    <ns>0</ns>
    <id>1002</id>
    <revision>
      <id>3793</id>
      <parentid>3792</parentid>
      <timestamp>2009-08-23T13:56:56Z</timestamp>
      <contributor>
        <username>Tosimosi</username>
        <id>86</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2398">{{Languages|Main Page}}
__NOTOC__

Willkommen auf dem RPTools Dokumentations Wiki. Derzeit sind wir stark auf die Dokumentation von [http://www.rptools.net/index.php?page=maptool MapTool] konzentriert, aber auch Dokumentation für andere Applikationen aus der [http://www.rptools.net RPTools] Suite sind willkommen.

Dieses Wiki ist '''stetig im Ausbau''' und umfasst im Moment {{NUMBEROFARTICLES}} Artikel (die meisten davon betreffen Makro-Funktionen). Um also genau das zu finden was du suchst, musst du wohl ein wenig Zeit aufwenden. Wenn du dazu beitragen möchtest dieses Wiki am Leben zu halten, erstelle dir einen Account und schau dir die [[Editor|Editor Anleitungen]] an.

{| width=100% cellpadding=5px &lt;!--- Do not edit this line ---&gt;
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;'''Themen die dich interessieren könnten:'''&lt;/big&gt;
==Grundsätzliche MapTool-Benutzung==

* [[MapTool FAQ|MapTool FAQ (Häufig gestellte Fragen)]]
* [[Introduction to Mapping]]
* [[Introduction to Game Hosting]]
* [[Introduction to Tokens]]
* [[Introduction to Properties]]
* [[MapTool Preferences]]
* [[Introduction to Macro Writing]]
** [[Introduction to Macro Branching]]
** [[More Branching Options]]
** [[Introduction to Macro Loops]]
* [[Stack Size|About Java Stack Size]]
* [[Glossary|MapTool Glossary]]
* [[Introduction to Vision Blocking]]
* [[Introduction to Lights and Sights]]
* [[Introduction to Campaign Repositories]]

===Chat &amp; Würfeln===

* [[Chat Commands]]
* [[Dice Expressions]]
* [[Macros:Roll:types | [ ] Roll formatting options]]

===Ressourcen für Benutzer===

* [[Dice Box|Dice Box]]
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;&amp;nbsp;&lt;/big&gt; &lt;!--- To even out spacing with the first column ---&gt;

==Makro technische Referenz==

* [[:Category:Macro|Macro Reference]]
* [[:Category:Macro Function|List of Functions]]
* [[Macros:Branching and Looping | Branching and Looping Options]]
* [[Variable Types]]
* [[:Category:Special Variable|Special Variables]]
* [[:Category:Tutorial|Macro Tutorials]]
* [[:Category:How To|Macros How To]]
* [[:Category:Cookbook|Macro Code Cookbook]]
* [[Macro Tips and Tricks]]
* [[Macro FAQ]]

===Tokens===

* [[Token|MapTool Tokens]]
* [[Token Types]]

===Diverses===

* [[Supported CSS Styles]]
* [[Sample Ruleset]]
|} &lt;!--- Do not edit this line ---&gt;

{{Languages|Main Page}}{{#customtitle:Hauptseite|Hauptseite}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Editor/de</title>
    <ns>0</ns>
    <id>1003</id>
    <revision>
      <id>3787</id>
      <parentid>3786</parentid>
      <timestamp>2009-08-23T13:46:22Z</timestamp>
      <contributor>
        <username>Tosimosi</username>
        <id>86</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1388">{{Languages|Editor}}
__TOC__

Wir haben im Moment noch keine vollständig erfassten Richtlinine für Editoren zusammengestellt. Im Moment richtest du dich am Besten an den bereits erfassten Artikeln. Ein guter Weg um sicherzustellen, dass ein Artikel im richtigen Format vorliegt ist, in den zuletzt editierten Funktionsartikeln [[Special:RecentChanges]] nachzusehen und einen Blick auf Rumble's neueste Anleitungsserie zu werfen.

Wir benutzen viele Vorlagen, das lesen der [[Help:Editing]] Artikeln wird dir das Verständnis für den Syntax unserer benutzerdefinierten Vorlagen vermitteln.

Although you might stumble across an article within a namespace, we currently place all articles in the main namespace(which is to say, no namespace), with the exception of this special Editor namespace. If you happen to come across one of those articles that is still within a namespace, it is most likely due to plans of splitting it, or perhaps rewriting it, don't worry about moving it.

'''Informationsseiten:'''
* [[Editor:Translation|Editor:Übersetzung]]
* [[Help:Editing]]

'''Diskussionsseiten:'''
* [[Editor:Wanted Pages]]
* [[Editor:To Do]]

Wenn du informationen auf deiner Benutzerseite hast, welche andere Editoren ebenfalls interessieren könnten, setze deinen Link:

* [[User:Craig]]
* [[User:Cclouser]]
* [[User:Verisimilar]]

{{Languages|Editor}}{{#customtitle:Editor|Editor}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>MapTool FAQ/de</title>
    <ns>0</ns>
    <id>1004</id>
    <revision>
      <id>3791</id>
      <parentid>3790</parentid>
      <timestamp>2009-08-23T13:55:17Z</timestamp>
      <contributor>
        <username>Tosimosi</username>
        <id>86</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="762">===Wo sind die Standardressourcen zu finden?===
Die Standardressourcen die mit MapTool kommen, sind im Verzeichnis {{code|.maptool}} in deinem Benutzerverzeichnis zu finden.

* Windows Vista oder Windows 7: {{code|C:\Benutzer\&lt;BENUTZERNAME&gt;\.maptool\resource\Default\}}
* Windows XP: {{code|C:\Dokumente und Einstellungen\&lt;BENUTZERNAME&gt;\.maptool\resource\Default\}}
* Macintosh OS X: {{code|~/.maptool/resource/Default/}} or {{code|/home/&lt;BENUTZERNAME&gt;/.maptool/resource/Default/}}
* Linux und andere Unix: {{code|~/.maptool/resource/Default/}} or {{code|/home/&lt;BENUTZERNAME&gt;/.maptool/resource/Default/}}

'''Hinweis:''' Du solltest deine eigenen Ressourece NICHT in diesem Verzeichnis speichern, da sie ansonsten gelöscht werden könnten.

[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Mapping/de</title>
    <ns>0</ns>
    <id>1005</id>
    <revision>
      <id>3798</id>
      <parentid>3797</parentid>
      <timestamp>2009-08-23T14:20:27Z</timestamp>
      <contributor>
        <username>Tosimosi</username>
        <id>86</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19505">{{Languages|Introduction to Mapping}}{{#customtitle:Einführung in die Kartenerstellung|Einführung in die Kartenerstellung}}
[[Category:MapTool]][[Category:Tutorial]]

{{Beginner}}

__TOC__

==Einleitung==

===Vorwort: Was ist MapTool?===

Obwohl du vermutlich schon weisst was MapTool ist und macht, möchte ich einen Moment darauf eingehen was das Hauptziel von MapTool ist:

&lt;p align=&quot;center&quot;&gt;'''MapTool ist ein Programm dass dir hilft einen virtuellen Spieltisch mit deinen Freunden zu teilen, um gemeinsame Spiele darauf zu spielen.''' &lt;/p&gt;

Das ist was MapTool macht, und seine Funktionen sind darauf ausgerichtet, eine Vielzahl von Möglichkeiten von der einfachsten bis zur komlexesten umzusetzen, um dieses Ziel zu erreichen.

In all the talk of macros and properties and tables and scripting that will follow in this and other guides, don't lose sight of the reason you're checking MapTool out anyway: it's a way to play games with friends. 

===Über diese Anleitung===

The purpose of this guide is not to delve into the seamy underbelly of MapTool's macro scripting system, lighting, properties, or any of that complex stuff. Instead, this guide should get you started on the path of using MapTool as a ''mapping'' program for role-playing games. Other guides address topics like [[Introduction_to_Game_Hosting|hosting an online game]], [[Introduction_to_Tokens|working with tokens]], [[Introduction to Lights and Sights|setting up vision and light]], and [[Introduction_to_Macro_Writing|writing macros]]. 

The following instructions should get you up and running with MapTool to use as a battle mapping/general mapping tool. This assumes a few things:

# You know how to create or get some map images. There are terabytes (exabytes! yottabytes!) of map images out there on the web. Check out the [http://gallery.rptools.net RPTools Gallery] or [http://www.rpgmapshare.com RPGMapShare] for tons of way cool images. 
# You can run MapTool on your computer. MapTool requires Java 1.5 to be installed on your machine; it's up to you to go find and handle that business.

So here we go. To begin with, the no-brainers:

# Get MapTool from http://rptools.net. The latest &quot;build&quot; version of MapTool can always be found at the top of [http://www.rptools.net/index.php?page=downloads#MapTool this list]. Currently, the latest build is 1.3.b56. '''NOTE''': You can also run the [http://www.rptools.net/index.php?page=launch Java WebStart] to run MapTool without downloading and unzipping the file.
# If you download the zip file of MapTool, unzip it somewhere on your computer and make sure it runs. The built in .bat files set some parameters when you run, like allocated memory and so forth. It will run if you double-click on the .jar file, but it will give you warnings. If you use Windows, you can use the Windows Launcher as well, which makes altering the settings very convenient.

Now, let's get some useful mapping going.

==Bilder in die MapTool-Bibliothek einfügen==

MapTool's '''Resource Library''' is actually a collection of &quot;pointers&quot; or &quot;links&quot; to folders on your computer containing images you want to use with MapTool. MapTool comes with a default set of images, but you can add any images you wish - you are in control of what images are available to MapTool. 
&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mt-f-addtoreslib.jpg‎|thumb|File menu showing '''Add to Resource Library''']]

[[Image:File-dialog.jpg|thumb|'''Load Asset Tree''' dialog]]

1. Obtain some images (maps, for instance) from somewhere: these can be downloaded off the web, or created by you. Put them in a directory where you'll remember them - this directory is important for step 3.

2. Open MapTool.

3. Select '''File -&gt; Add to Resource Library''' (shown below, left). This will open a dialog called '''Load Asset Tree''' (click on the thumbnails to see the full images to the right). 

4. In the dialog, go to the folder where you stored the map images you want to add, and click '''Open'''. MapTool will process the images in the directory, and add a new folder in the Resource Library tree. 

'''NOTE''': The name of the directory in MapTool's Resource Library will be the same as the name of the directory you picked in step 3. 

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mtreslib.jpg|thumb|Folders in the MapTool Resource Library. These are pointers to folders on your hard drive.]]

5. Afterwards, if you select one of the folders in your resource library (as seen in the image below), you'll see thumbnails of the images inside that folder. NOTE: if your folder has subfolders, hit the '''+''' to expand that folder tree. Also, you won't need to add that directory again - MapTool remembers what you picked.

'''NOTE''': Because the folders that appear in the Resource Library are in reality pointers to folders on your hard drive, you don't need to worry that MapTool is duplicating every file -- the Resource Library is just a way for MapTool to know where the images are.

&lt;br style=&quot;clear:both;&quot;/&gt;

==Kartenerstellung==

[[Image:Map-newmap.jpg|thumb|The '''New Map''' menu item]]

[[Image:Map-new-dialog.jpg|thumb|The '''Map Properties''' dialog]]

1. Go to '''Map -&gt; New Map'''. This will bring up the ''Map Properties'' dialog.

2. On the left hand side of the ''Map Properties'' dialog, you’ll see several options and text fields.

* '''Name''': this is the map’s title. Note that if you select a map image, the title resets itself to the filename of the image. Best bet is to title the map ''last'', so you can call it something you like, instead of xqmap2.jpg or whatever it was originally called.
* '''Cell Type''': hex or square map, or no grid at all.
* '''Distance Per Cell''': this is how many arbitrary units each cell covers (''e.g.'', for Dungeons &amp; Dragons 4th Edition, since everything is counted in squares, you can just set this to 1)
* '''Pixels per cell''': this is how many pixels each cell should cover – the default is 50. This is most important for scaling to map images you downloaded.
* '''Vision Distance''': MapTool has vision, fog-of-war, and other functions, so this indicates how far, by default, a character can see on the map.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Background-dialog.jpg|thumb|The '''Choose Background''' dialog]]

3. Click the '''Background''' button. You’ll get a pop-up dialog offering several options. The background texture and/or color are infinitely tiled in all directions.

* '''Swatch''': lets you use a uniform color as the map background. 
**&lt;font color=&quot;red&quot;&gt;'''Warning:''' As recently as version 1.3.b53, if you select the top-leftmost swatch (the &quot;white&quot; swatch), MapTool will generate an error. The error will not cause MapTool to crash or anything, but it will not set the background to white. As a workaround, you can set the background to white via the Hue or RGB tabs.&lt;/font&gt;
* '''Hue/RGB''': lets you specify colors instead of selecting a color swatch
* '''Texture''' (what I use most often): gives you access to your resource library, where you can select a texture to serve as the background.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-mapbutton.jpg|thumb|The '''Map''' button on the map properties dialog]]

4. If you have a map image in mind (like a downloaded one, or one you created in Photoshop or something like that), click the '''Map''' button. You’ll be taken to a dialog that shows your Resource Library. Select the image you want to use. This image will be layered above the background you already selected.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-create-done.jpg|thumb|The '''Map Properties''' dialog after a map has been selected from the Resource Library. Note the map thumbnail in the preview.]]

5. When you’re satisfied with the background and map – you’ll be given a preview thumbnail to double check, as shown below - give it a title, and click '''OK'''. The map will now be loaded into the main window of MapTool.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Mehrere Karten in einer Kampagne erstellen===

MapTool lets you create multiple maps, all of which will be in one campaign. The process is very simple: you simply repeat the [[Introduction_to_Mapping#Creating_a_Map | Creating a Map]] steps for each new map, selecting a new image, background color/texture, and title for each new map.

Each new map you create will automatically be created within the campaign you are currently working on (creating a new map does not automatically save your campaign, so make sure to [[Introduction_to_Mapping#Saving_Your_Work | save your work]] when you're finished).

You can also add new maps to a campaign you've already saved - just open the campaign file (by going to '''File &gt; Open Campaign''') and follow the steps to create a new map.

==MapTool Hauptfenster==

===MapTool Layer===

[[Image:Layer-window.png|thumb|The '''Layer''' window, which is present on all maps in MapTool]]

Once you have a map loaded, you’ll see a small box in the map window titled ''Layer''. MapTool maps have four layers:

* '''Background''': this is the layer for images, background maps, and anything that isn’t going to move.
* '''Hidden''': for online games, this is a layer only the GM can see.
* '''Object''': this is a layer for token-like objects, things that might move, or that players might be able to move (lamps, tables, etc.).
* '''Token''': this layer is the layer that tokens go on (tokens are small images that represent characters or NPCs). Make sure you have the Token layer selected when you’re adding characters and enemies to the map.

Think of the MapTool Layers as four different sheets of acetate or tracing paper, one on top of the other. The bottom one - the '''Background''' - is where you draw the basic parts of the map: walls, floors, trees, etc. On the next sheet of tracing paper, the one called '''Objects''' you draw the ''things'' that your characters might use, mess with, or break: doors, chests, tables, chairs, and so forth. On the next one up - the '''Hidden''' layer - you put things only the GM can see (which might be objects ''or'' hidden characters!). Finally, on the very top layer - the '''Token''' layer, you put your miniatures - the monsters, characters, and NPCs of the game world. 

Tokens can be put on any of the 4 layers in MapTool. To do so, just right-click on the token image, and select '''Change To &gt;'''. In the menu, select the layer you want to change the token to, and it will be moved.

===Karten wählen===

[[Image:Blueglobe.jpg|thumb|The Globe button, where you can select among your maps]]

[[Image:Maplist.jpg|thumb|A list of maps, which appears after you click the Globe button.]]

If you create only one map in your campaign, it will be loaded by default and will be the only map you can see.

If you [[Introduction_to_Mapping#Creating_Multiple_Maps_in_One_Campaign|create multiple maps]] or have a campaign with multiple maps, you can choose between them by clicking the blue globe icon in the upper right hand side of the MapTool window – this will present a list of possible maps. Note that if you have only one map, clicking on the blue globe will show that map's name.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Zoomen und Verschieben===

To zoom the map, you can use the mouse scroll wheel (if you have one), or you can use the equals sign to zoom in, and the hyphen to zoom out. 

Hitting the plus sign will zoom to 1:1. 

To move the map, right click on it and move the mouse. This will pan the map in any direction.

==Token Basiswissen==

[[Token:token|MapTool Tokens]] (or just &quot;Tokens&quot;) are small images that act as visual representations of many things in a MapTool map. The most common use for tokens is to represent player and non-player characters - in other words, tokens take the place of miniatures on the virtual map. 

Tokens, like everything else, start as image files that are stored in your [[Macros:Glossary#R|Resource Library]]. MapTool comes with some default tokens (and they have a great, separate program called [http://www.rptools.net/index.php?page=tokentool TokenTool] that lets you make tokens), or you can supply your own from wherever you find them.

This section of the Introduction to Mapping guide deals with only a few of the most basic, common things you might want to do with MapTool Tokens. There are ''many'' features, tricks, and cool functions available when working with tokens - so many that they deserve a guide all to themselves. 

===Tokens auf der Karte platzieren===

[[Image:Default-library.jpg|thumb|The ''Default'' folder in the Resource Library]]

1. To see the default tokens mentioned above, go to the Default folder in your ''Resource Library'', and click the '''+''' to expand it.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Default-tokens.jpg|thumb|The ''Tokens'' subfolder]]

2. Select the Tokens folder.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-drag-to-map.jpg|thumb|Dragging a token onto the map]]

[[Image:Token-on-map.jpg|thumb|The token appears!]]

3. In the window below (where the thumbnails appear), use the mouse to drag a token onto the map. The cursor will change to a hand, and you just need to hold the token over the map somewhere and release the button.

When you release the mouse button, the token will appear on the map, as shown in the thumbnail.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Token bewegen===

Once a token is on the map, it can be dragged around using the mouse, or moved by selecting the token (clicking on it) and using the arrow keys to move the token, and pressing the '''D''' key to complete the move. 

If you want to create a complex path, you can hit the space bar to make a waypoint in your path. 

===Changing a Token's Name, GM Name, and Label===

[[Image:Token-default-name.jpg|thumb|A token, showing the default name assigned when it was first dragged onto the map.]]

[[Image:Edit-token.jpg|thumb|The '''Edit Token''' dialog]]

Tokens have three possible &quot;names&quot; you can assign to them. When a token is first dragged onto the map, it is given a default name (typically, the same as the token's ''filename'' on your computer, with the extension trimmed off). For example, the token shown in the image below was dragged from MapTool's default token set, and its default name is &quot;Hero.&quot;

The three possible names a token can have are:

*'''Token Name''': The name of the token that will appear to all users. This is not optional.
**&lt;font color=&quot;red&quot;&gt;'''NOTE''': Make sure each token has a unique name! Otherwise, MapTool macros may behave unpredictably.&lt;/font&gt;
*'''GM Name''': This name appears only to the person(s) currently connected to MapTool in the role of &quot;GM.&quot; 
*'''Label''': This text appears below the Token Name, and is visible to all connected individuals.

To change a token's name, GM name, and/or label:

1. Double-click on the token image on the map. This will open the '''Edit Token''' dialog, as shown below.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changednames.jpg|thumb|Editing the token's name, GM name, and label]]

[[Image:New-token-names.jpg|thumb|Token showing the new names and label]]

2. In the '''Name''' field, enter the name you'd like. For this example, I've entered &quot;Bork the Brave&quot;

3. In the '''GM Name''' field, enter a name. For this example, I've entered &quot;Cork the Cowardly&quot;

4. In the '''Label''' field, enter a Label. For this example, I've entered &quot;Human Warrior&quot;. 

5. Click '''OK''' to save your changes.

Once you've clicked okay, you'll see that the token has changed: 

You can do this name changing process with any token you drop on the map.

&lt;br style=&quot;clear:both;&quot; /&gt;

===Ein Tokenbild ändern===

Sometimes, when you create a new token, you will want to change the image on the token's face. Say, for instance, you find a cool new picture that you just ''have'' to use for your evil overlord, but you already have a token made up for him - you don't want to delete the whole token just to change the image, right? That's overkill. Instead, just change the token image using the following steps:

[[Image:Edit-token.jpg|thumb|The '''Edit Token''' dialog]]

1. Make sure you have a new token image in PNG or JPG format, already available in your MapTool Resource Library. If you look at [[Introduction_to_Mapping#Getting_Images_into_your_MapTool_Resource_Library|Getting Images Into your MapTool Resource Library]] section, above, it talks about how to get map images into your Resource Library: well, token images (in fact, ''any'' image) can be added to your resource library in exactly the same way. 

2. Double-click on the token to open the '''Edit Token''' dialog. 

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changeimage.jpg|thumb|The button to change the token image]]

3. In the upper-left of that dialog, click the small green plus sign.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:New-image-picked.jpg|thumb|A new image is selected from the resource library]]

4. In the '''Choose Image''' dialog, select the Resource Library folder that has the new token image in it (a red-and-white border will indicate the image you've selected), and click '''OK'''.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-image-changed.jpg|thumb|The token's image has been changed]]

5. Once you hit '''OK''', you are taken back to the Edit Token dialog, and you will see that the token image has been changed to the one you selected.

&lt;br style=&quot;clear:both;&quot; /&gt;

===Tokengrösse ändern===

[[Image:Token-rightclick.jpg|thumb|Changing the token size using the right-click menu]]

Tokens will default to the size of one grid square (note that by default, MapTool’s grid is 50x50 pixels). If you right-click on a token, the menu has a lot of options – one of which is '''Size'''. You can then set it using the size values there, so you can make large or huge or gargantuan creatures, and so forth. The image below illustrates the right-click menu for a token.

NOTE: these size values (large, huge, gargantuan, etc.) only apply to maps that have a grid (remember, when you create a map, you have the option to make a map with no grid). If you use a gridless map, the size values are more fine-grained.

&lt;br style=&quot;clear:both;&quot;/&gt;
==Saving Your Work==

MapTool's default &quot;save&quot; format is called a ''Campaign File''. The Campaign File (which has the extension ''.cmpgn'') contains the maps and tokens that you've set up. If you're interested in this sort of thing, the campaign file is actually a zipped XML file. 

To save your work so far, choose '''File -&gt; Save Campaign''', give your campaign a name, and that’s all there is to it. 

When you save a campaign, MapTool saves the locations of the tokens on all of the maps, so you can pick up right where you left off!

==Kartenbilder exportieren==

MapTool can export your map images to an image file (PNG format). To export an image to a location of your choice:

1. Go to '''File-&gt;Export''' and select '''Screenshot As'''.

2. In the dialog that comes up, select a &quot;View&quot; (either GM view, where you can see everything, or Player View, where the only things visible are what ''players'' can see...I told you MapTool had some cool vision capabilities!)

3. Select the destination for your file using the Browse button (or, alternatively, send it to an FTP server)

4. Click '''Export'''.

==Nächste Schritte==

Now that you can create a basic map and put some tokens on it, the next step is connecting up with some friends over the Internet (or face to face) and using it for a game session! This topic is covered in the [[Introduction to Game Hosting]].
{{Languages|Introduction to Mapping}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:MapTool FAQ</title>
    <ns>1</ns>
    <id>1006</id>
    <revision>
      <id>3811</id>
      <parentid>3810</parentid>
      <timestamp>2009-09-07T07:30:53Z</timestamp>
      <contributor>
        <username>Gginc</username>
        <id>94</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="142">2009.09.07_Mon_1630 wrote by gginc:

英語サイトのデータが壊れているようです。訳す必要は今のところなさそう。</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Chat Commands/ja</title>
    <ns>0</ns>
    <id>1007</id>
    <revision>
      <id>3917</id>
      <parentid>3913</parentid>
      <timestamp>2009-09-11T17:30:19Z</timestamp>
      <contributor>
        <username>Gginc</username>
        <id>94</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5068">{{Languages|Chat Commands}}{{Translation}}
__TOC__
　Maptoolのチャットシステムでは、チャットに直接入力することで特定のアクションを実行することができるような、多くの「スラッシュ・コマンド」（slash commands）をサポートしている。この〔スラッシュという〕名前は、コマンドの直前に“/”を打ち込むことに由来している。

==一般的な使い方==

　チャット・コマンドを使うときは、チャット画面に直接、以下のようなフォーマットで入力するとよい：

&lt;source lang=&quot;mtmacro&quot; line&gt;
/command argument
&lt;/source&gt;

　''command''のところには、〔このページの〕下の一覧表にあるコマンドのうち一つを入力する。そして''argument''の部分には、コマンドの動作に適した引数が入る（ダイスを振る場合、テキストを入力する場合、などなど……）。
 '''重要なこと''': すべてのコマンドの直前にスラッシュ（'''/'''） の文字列が入ることを忘れないように。

==コマンド一覧==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |コマンド
! style=&quot;background-color:#e0ddd5;&quot; |組込み済の略語&lt;br /&gt;（あれば）
! style=&quot;background-color:#e0ddd5;&quot; |コマンドの説明
|-
| addtokenstate || tsa || トークンに対して新たなトークン・ステータスを追加する。 
|-
| alias || alias || コマンドの略語（＝エイリアス）を作成する。
|-
| clear || clr || チャット画面をクリアする。
|-
| clearaliases || || すべてのコマンド略語〔の設定〕をクリアする。
|-
| color || cc || チャットの文字色を変更する。色の指定は16進数形式でなければならない。例：''/cc #ff0099''
|-
| emit || e || 接続中のすべてのプレイヤーに対して、送信したという事実を隠したままテキストを送信する（GM専用コマンド）。
|-
| emote || me || emoteを接続された全てのプレイヤーに送信する。（original： Broadcast an emote to all connected players.)
|- 
| gm || togm || GMだけにテキストを送信する。
|-
| goto || g ||特定のロケーションあるいは特定のトークンに〔視点を〕移す。例：''/goto X,Y'' or ''/goto tokenname''
|-
| help || h || 使用可能なコマンド一覧を表示する。
|-
| impersonate || im || まるで誰か、あるいは何かであるかのように話す（ふつう、トークンに対して使う）
|- 
| loadaliases || || 略語が盛り込まれたファイルを読み出す。略語は、一行ごとに書かれた特定の名前と値が（あなた自身が入力したそのままで）読み出される。（original: Load a file that contains aliases, one per line, with a : between the name and the value (just as if you were typing it in.）
|-
| loadtokenstates || tsl || 全てのトークン・ステータスをファイルから読み出す。
|-
| ooc || || プレイヤー発言（＝アウトオブキャラクター）として喋る。この発言は二重丸カッコ（（～～））で閉じられる。
|-
| reply || rep || 最後にあなたに囁いたプレイヤーに対して返信する。
|- 
| roll || r || ダイスを振り([[Dice_Expressions/ja|ダイスの記法（日本語ページ：翻訳未了）]]を参照せよ)、結果を全てのプレイヤーに見せる。
|-
| rollgm || rgm || ダイスを振り、結果を自分自身とGM〔の二人〕だけに見せる。
|-
| rollme || rme || ダイスを振り、結果を自分自身にだけ見せる。
|-
| rollsecret || rsec|| ダイスを振り、結果をGMにだけ見せる（〔出目の〕結果は振った本人でさえ見えない）。
|-
| savealiases || || 現在のすべてのコマンド略語をファイルに保存する。
|-
| savetokenstates || tss || 現在のトークン・ステータスをファイルに保存する。
|-
| say || s || 接続している全てのプレイヤーにメッセージを送信する。
|-
| self || || 自分自身にだけメッセージを送信する。
|-
| settokenproperty || stp ||  [[Token_Property/ja|トークン・プロパティ（日本語ページ：翻訳未了）]]の値を設定する。
|-
| settokenstate || sts || [[Token_State/ja|トークン・ステータス（日本語ページ：翻訳未了）]]の値を設定する。
|-
| table || tbl || テーブル・ルックアップを実行する。例：''/tbl tablename value-to-lookup''
|-
| tmacro || tm || 選択したトークンに対して任意のマクロを実行する。
|-
| tsay || ts || 選択したトークンに対して任意の発話を実行する。
|-
| whisper || w || 特定のプレイヤーにメッセージを送信する。
|}


[[Category:MapTool]]

{{DISPLAYTITLE:Chat Commands}}
{{Languages|Chat Commands}}{{#customtitle:チャット・コマンド|チャット・コマンド}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Chat Commands/jp</title>
    <ns>0</ns>
    <id>1008</id>
    <redirect title="Chat Commands/ja" />
    <revision>
      <id>3827</id>
      <timestamp>2009-09-07T08:57:24Z</timestamp>
      <contributor>
        <username>Gginc</username>
        <id>94</id>
      </contributor>
      <comment>[[Chat Commands/jp]] moved to [[Chat Commands/ja]]: /jp is wrong URL. Sorry.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Chat Commands/ja]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Dice Expressions/ja</title>
    <ns>0</ns>
    <id>1009</id>
    <revision>
      <id>4655</id>
      <parentid>3931</parentid>
      <timestamp>2010-10-06T01:44:03Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <comment>/* 一般的なダイスの記法 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7763">{{Languages|Dice Expressions}}{{Translation}}


MapTool's chat window and macro system supports several of the most common dice expressions based on the formats '''XdY''' and '''dY'''.

Maptoolのチャット・ウィンドウとマクロ・システムは、 '''XdY''' と '''dY''' を基本的な形式とする、いくつかの一般的なダイスの記法をサポートしている。

In the tables below, the variable ''Y'' is described as the &quot;number of sides&quot; on the dice being rolled; in reality the dice roller is picking a random number between 1 and ''Y''. The end result is the same. 

以下のテーブルにおけるさまざまな''Y''は、振るダイスの「面の数」を表している。実際には、ダイスローラーは1から''Y''までの乱数を取り出す。結果の出力については同じである。

Additionally, in the expressions, capital letters signify an argument you must provide, while the lower-case letters are a fixed part of the dice expression. For example, in the expression '''XdYsS''', you replace ''X'', ''Y'', and ''T'' with numbers to indicate the number of dice, how many sides the dice have, and what number indicates a success, respectively. The lower case &quot;d&quot; and &quot;s&quot; are left alone. 

（加えて～以下未訳）

Finally, note that when entering a dice roll directly in chat, you need to use the /roll [[Chat:Commands|Chat Command]] to execute the roll. In a macro, you would enclose the roll expression in square brackets. For example, if you wanted to roll one twenty sided die, one six sided die, and add 8 to the result:

　最後に、チャットで直接ダイスを振りたいときは、実行するための[[Chat:Commands/ja|チャット・コマンド]]「/roll」を使う必要がある
。マクロでは、大カッコ [] でダイスの記法で書かれたものを囲むとよい。たとえば、君が1個の20面体ダイスと1個の6面体ダイスを振り、その結果に8を加える場合、次のように書く：

''Directly in chat'': &lt;pre&gt;/roll 1d20+1d6+8&lt;/pre&gt;

''チャットに直接書き込む場合'': &lt;pre&gt;/roll 1d20+1d6+8&lt;/pre&gt;

'' [[Macros:introduction/jp|マクロ]]で書く場合'': &lt;pre&gt;[1d20+1d6+8]&lt;/pre&gt;


You may also access these dice expressions directly using macro functions, see [[:Category:Dice Function]].

　マクロ機能を使うことで、これらのダイスの記法〔それ自体〕に対してもアクセスすることができる[[:Category:Dice Function]]。

==一般的なダイスの記法==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |記法
! style=&quot;background-color:#e0ddd5;&quot; |機能
! style=&quot;background-color:#e0ddd5;&quot; |解説
! style=&quot;background-color:#e0ddd5;&quot; |用例
|-
| '''XdY''' || || ''Y'' 面体のサイコロを ''X'' 個ぶん振って（もし X が含まれていない場合は、 1個の ''Y'' 面体を振るものと見なす）、出目のすべてを足し合わせた数字をチャットに表示する〔註：個々の出目は表示してくれない〕。 || ''/roll 1d20'' は1個の20面体を振り、出た結果をチャットに表示する。 
|-
| '''XdYdN''' || drop || ''Y''面体のサイコロを''X''個ぶん振り、出目の低い順に''N''個ぶんのさいころを捨てる。 || ''/roll 4d6d1''は4個の6面体を振り、一番低い出目のサイコロを捨て、残ったサイコロの合計をチャットに表示する。
|-
| '''XdYkN''' || keep || Roll ''X'' dice with ''Y'' sides each, and keep the highest ''N'' dice afterwards || ''/roll 4d6k3'' rolls four six-sided dice, keeps the highest 3 rolls, and presents the total in the chat window
|-
| '''XdYrL''' || reroll || Roll ''X'' dice with ''Y'' sides each, rerolling any results lower than ''L'' || ''/roll 3d8r2'' rolls three eight-sided dice, rerolls any dice that are lower than 2, and then sums and presents the total in chat
|-
| '''XdYsT''' || success || Roll ''X'' dice with ''Y'' sides each, and count any rolls that meet or exceed ''T'' (the &quot;target number&quot;)|| ''/roll 4d6s4'' rolls four six-sided dice, and counts any individual roll that exceeds four, presenting the number of &quot;successes&quot; in chat
|-
| '''XdYe''' || explode || Roll ''X'' dice with ''Y'' sides each, and reroll any dice that roll ''Y'', add the new roll to the total || ''/roll 2d6e'' rolls two six-sided dice, and if either rolls a 6, it is rerolled and added to the total (this continues until neither die rolls a 6).
|-
| '''XdYesT''' || exploding success || As success rolls, above, but the individual dice can &quot;explode&quot; (''i.e.'', they are rerolled if they roll their maximum value) || ''/roll 4d6es8'' will roll 4 six-sided dice, explode any that roll their maximum, and then total the rolls that exceed 8
|-
| '''XdYo''' || open || Roll ''X'' dice with ''Y'' sides each, and explode any dice that roll ''Y'', then return the value of all rolls, as well as the highest roll || ''/roll 5d6o'' rolls 5 six-sided dice, and explodes any that roll 6
|}

==個別のゲーム向けの記法==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |Expression
! style=&quot;background-color:#e0ddd5;&quot; |Game&amp;nbsp;System
! style=&quot;background-color:#e0ddd5;&quot; |Function
! style=&quot;background-color:#e0ddd5;&quot; |Description
|-
| '''XdYh''' || Hero || Stun Dice || Rolls ''X'' dice with ''Y'' sides each, keeping track of the results for hero rolls for body damage. Where a roll of 1 = 0 body damage, a roll of ''Y'' = 2 body damage and a roll in between these two values = 1 body damage.
|-
| '''XdYb''' || Hero || Body Dice || Returns the body damage from the last XdYb Hero Stun Dice roll as long as ''X'' and ''Y''
matches the Stun Dice roll
|-
| '''Xdf''' || Fudge || Fudge Dice || Rolls ''X'' [http://www.fudgerpg.com/fudge.html Fudge] dice (which return -1, 0, or 1), summing the dice and returning the sum
|-
| '''Xdu''' || Ubiquity || Ubiquity Dice || Rolls ''X'' Ubiquity dice, which return 0 or 1, summing the result and returning that value to chat
|-
| '''Xsr4''' || Shadowrun 4th Ed. || Shadowrun Basic Roll || Roll ''X'' number of 6 sided dice. Output the number of Hits (Rolls 5 or above) and the numbers of Ones rolled. If the number of Ones is half or more of ''X'', display '''Glitch'''. If the number of Ones is half or more of ''X'' and there are no Hits, display '''Critical Glitch'''.
|-
| '''Xsr4gT''' || Shadowrun 4th Ed. || Shadowrun Gremlin Roll || Roll ''X'' number of 6 sided dice. Output the number of Hits (Rolls 5 or above) and the numbers of Ones rolled. If the number of Ones is half or more of ''X'' minus ''T'', display '''Glitch'''. If the number of Ones is half or more of ''X'' minus ''Y'' and there are no Hits, display '''Critical Glitch'''.
|-
| '''Xsr4e''' || Shadowrun 4th Ed. || Shadowrun Exploding Roll || Roll ''X'' number of 6 sided dice. Output the number of Hits (Rolls 5 or above) and the numbers of Ones rolled. Reroll any 6 adding it to the pool. If the number of Ones is half or more of ''X'', display '''Glitch'''. If the number of Ones is half or more of ''X'' and there are no Hits, display '''Critical Glitch'''.
|-
| '''Xsr4egT''' || Shadowrun 4th Ed. || Shadowrun Exploding Gremlin Roll || Roll ''X'' number of 6 sided dice. Output the number of Hits (Rolls 5 or above) and the numbers of Ones rolled. Reroll any 6 adding it to the pool. If the number of Ones is half or more of ''X'' minus ''T'', display '''Glitch'''. If the number of Ones is half or more of ''X'' minus ''T'' and there are no Hits, display '''Critical Glitch'''.
|}
[[Category:MapTool]]

{{DISPLAYTITLE:Dice Expressions}}
{{Languages|Dice Expressions}}{{#customtitle:ダイスの記法}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token Property/ja</title>
    <ns>0</ns>
    <id>1010</id>
    <revision>
      <id>3838</id>
      <timestamp>2009-09-08T08:01:17Z</timestamp>
      <contributor>
        <username>Gginc</username>
        <id>94</id>
      </contributor>
      <comment>create a ja page.／日本語翻訳ページの設置。</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2313">{{Languages|Token Property}}{{Translation}}


A ''token property'' is a variable (string or numeric) that resides on a particular [[Token:token|token]] within MapTool, and may be called upon or evaluated by macros.

Token properties are tailored to fit each individual campaign file and the macros contained in that campaign. Multiple sets of token properties can be created (allowing them to be applied to different classes of token - for example, PC tokens versus NPC tokens). These multiple sets are called [[Token:token_property_type | token property types]]. 

==既定のトークン・プロパティ==

By default, MapTool has the following set of token properties.

 Strength (Str)
 Dexterity (Dex)
 Constitution (Con)
 Intelligence (Int)
 Wisdom (Wis)
 Charisma (Char)
 *@HP
 *@AC
 Defense (Def)
 Movement (Mov)
 *Elevation (Elv)
 Description (Des)

==キャンペーン・プロパティの設定==

Campaign properties are edited using the Campaign Properties dialog, which is found under '''Edit -&gt; Campaign Properties''' on the MapTool menu. They can be directly edited in the Campaign Properties dialog, or pasted in from a text editor of choice. 

===トークン・プロパティの書式===

The format for all token properties. 

 #*@PropertyName(ShortName):default value

===Example Token Property===

 *@HealingSurges(Surges):9

Will display '''Surges: 9''' in the statsheet.

===Controlling Token Property Display===

There are three &quot;switches&quot; (shown in the format string above) that control how campaign properties are displayed in the popup ''statsheet'' when the user hovers his mouse over a token:

&lt;nowiki&gt;*&lt;/nowiki&gt; - Displays the property on the ''statsheet''

&lt;nowiki&gt;@&lt;/nowiki&gt; - Property will be visible only to the owner of that token

&lt;nowiki&gt;#&lt;/nowiki&gt; - Property will be visible only to the GM

Note that the '''*''' switch is essential for the property to be displayed on the statsheet; the '''@''' and '''#''' are optional modifiers to that display. If no switch is set in the property string, the property will be present on the token and accessible to macros but will ''not'' be displayed in the popup statsheet.
[[Category:Token]]

{{DISPLAYTITLE:Token Property}}
{{Languages|Token Property}}{{#customtitle:トークン・プロパティ|トークン・プロパティ}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token State/ja</title>
    <ns>0</ns>
    <id>1011</id>
    <revision>
      <id>3839</id>
      <timestamp>2009-09-08T08:07:21Z</timestamp>
      <contributor>
        <username>Gginc</username>
        <id>94</id>
      </contributor>
      <comment>New page: {{Languages|Token State}}{{Translation}}   A ''token state'' is a binary (''i.e.'', it has two possible values, on or off) condition that is set for a given [[Token:token | token]]. States...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2970">{{Languages|Token State}}{{Translation}}


A ''token state'' is a binary (''i.e.'', it has two possible values, on or off) condition that is set for a given [[Token:token | token]]. States are frequently used for conditions or statuses that affect a particular character in a game (for example &quot;Bloodied&quot; or &quot;Fatigued&quot; or &quot;Fighting Defensively&quot;) and frequently have images associated with them that are displayed to players and the GM. However, they can be used for any application in which a condition having only two possible values would be useful. 

The image below shows a token state with an associated image applied to the token. In this case, the state name was configured by the individual creating the campaign to be called &quot;Bloodied&quot; and to have the associated image overlay (the state image is courtesy of the RPTools forum member AidyBaby).

[[Image:State-example.jpg]]

==トークン・ステータスのセット・アップ==

States are configured by the user and are specific to a given campaign. States are configured via the Campaign Properties window, under the '''States''' tab. See [[States:Configuring_states|Configuring States]] for details on setting up states for your campaign. 

==マクロにトークン・ステータスを追加する==

States are special variables that can be referenced by macros using the general format ''state.statename'' where ''statename'' is the name configured by the user for a given state.

===用例===

States can be retrieved using macros.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:isBloodied=state.Bloodied]
[isBloodied]
&lt;/source&gt;

Will return 0 if ''state.Bloodied'' is off (in other words, the token does ''not'' currently have the state called &quot;Bloodied&quot; set), and 1 if ''state.Bloodied'' is on. 

==マクロによるトークン・ステータスの設定==

States can also be set using macros, by assigning a value of 1 or 0 to the token state.

===用例===

Suppose we want to check to see if a token is &quot;dead&quot; and if so, set the &quot;Dead&quot; state on that token. We are assuming two things:

# &quot;Death&quot; occurs if the token's hit points (HP) have been reduced to 0 or below; and
# A state called &quot;Dead&quot; has been configured in the Campaign Properties.

To check for &quot;death&quot; and, if required, set the appropriate state, we write the following simple macro:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:state.Dead=if(HP &lt;= 0, 1, 0)]
&lt;/source&gt;

This statement evaluates the condition within the if() statement, and if true, assigns the value 1 to ''state.Dead''. If the condition ''HP &gt;= 0'' is false, on the other hand, the value 0 is assigned to ''state.Dead''.

Finally, if an image overlay is associated with the state called &quot;Dead&quot;, it will appear if ''state.Dead'' equals 1, and disappear if ''state.Dead'' equals 0.

Use the {{func|setState}} function instead if your state name has a space in it.
[[Category:Token]]

{{DISPLAYTITLE:Token State}}
{{Languages|Token State}}{{#customtitle:トークン・ステータス}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Dice Box/ja</title>
    <ns>0</ns>
    <id>1012</id>
    <revision>
      <id>4577</id>
      <parentid>4576</parentid>
      <timestamp>2010-09-28T09:32:25Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <comment>原文：2010年6月25日 (金) 01:23 版に同期</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11212">{{Languages|Dice_Box}}{{Translation}}
==ダイスボックス==

&lt;div style=&quot;color:gray&quot;&gt;''Dice Box'' is a collection of MapTool macros that provide a visual, user friendly interface for making basic dice rolls. MapTool has an extensive set of chat commands that let users roll dice in the main chat window (dice commands that look like '''/roll 1d20+9'''). The Dice Box scripts add a visual, easy-to-understand window for rolling dice and sending the results to the chat window. &lt;/div&gt;

''ダイスボックス''とは、見やすく分かりやすいインターフェイスで基本的なダイス振りを行うための、MapToolのマクロ群のことだ。MapToolには多種多様なチャットコマンドが用意されており、メイン・チャット・ウィンドウ上でこれを使ってダイスを振ることができる（コマンドは'''/roll 1d20+9'''のような形式だ）。ダイスボックスのスクリプトでは、ビジュアルで分かりやすいウインドウを使ってダイスを振り、その結果をチャット・ウィンドウに送り込む。

&lt;div style=&quot;color:gray&quot;&gt;The instructions below assume you are familiar with how to start MapTool and how to navigate around MapTool. If you aren't, please check out the [[Introduction_to_Mapping|Introduction to Mapping]] for a quick guide to getting started with MapTool.&lt;/div&gt;

下記の解説では、MapToolの立ち上げや使い方について理解できていることを前提としている。もしそうでないな ら、[[Introduction_to_Mapping|Introduction to Mapping]]のページを見て、MapToolを始めるためのガイドを読んで欲しい。

===使用環境===
&lt;div style=&quot;color:gray&quot;&gt;
# MapTool '''1.3.b66'''  or later. It may work on previous versions, but is untested.
# A Java [[Stack_Size|stack size]] higher than 512KB.
&lt;/div&gt;
# MapTool '''1.3.b66'''  以降。それ以前のバージョンでも使えるかも知れないが、テストはしていない。
# Java [[Stack_Size|stack size]] が512KB以上

===ダイスボックス・トークンを取得する===
&lt;div style=&quot;color:gray&quot;&gt;
# Download Dice Box from [http://www.houseofgenius.com/files/mtfw/dicebox/diceBox_v31.rptok my website]. The latest version is '''3.1'''. You should receive a file called '''diceBox_v31.rptok'''
# Download the [http://www.houseofgenius.com/files/mtfw/dicebox/colordice.mttable table of colorful dice images]. This contains the images and is required for Dice Box to function. You should get a file named '''colordice.mttable'''. If it is renamed to colordice.zip, make sure to change the extension to &quot;mttable&quot;. 
&lt;/div&gt;
# ダイスボックスを[http://www.houseofgenius.com/files/mtfw/dicebox/dicebox_v31.rptok my website]からダウンロードする。最新バージョンは'''3.1'''だ。ダウンロードされるファイル名は'''dicebox_v31.rptok'''である。
# [http://www.houseofgenius.com/files/mtfw/dicebox/colordice.mttable table of colorful dice images]　をダウンロードする。この中にはダイスボックスで使用される画像が含まれており、必須のファイルである。ダウンロードされるファイル名は'''colordice.mttable'''だ。もしcolordice.zipという名前になっているようなら、かならず拡張子を&quot;mttable&quot;に変更して欲しい。

&lt;div style=&quot;color:gray&quot;&gt;'''Tip''': Files with an '''.rptok''' extension are MapTool's format for saving tokens and all of the macros and information they may contain. Files with a '''.mttable''' extension are MapTool's format for tables within the system.&lt;/div&gt;

'''Tip''': 拡張子が'''.rptok'''となっているのは、MapToolがトークンやその内部に持っているマクロをセーブするためのフォーマットを持つファイルだ。'''.mttable'''はシステム内のテーブルを収めるためのフォーマットを持っている。

===ダイスボックスの「インストール」===

[[Image:Db27_dragtomap.png|thumb|トークンをMapTool上のマップへドラッグする]]

[[Image:Diceboxconfig.png|thumb|The '''Ownership''' tab]]

[[Image:Dicebox_vistoplayers.png|thumb|The '''Config''' tab]]

[[Image:Dicebox27.png|thumb|ダイスボックスが表示された！]]

&lt;div style=&quot;color:gray&quot;&gt;Though this section is called &quot;Installing Dice Box,&quot; bear in mind that we're not actually ''installing'' anything - you won't need to run any programs besides MapTool, and your MapTool files will not be changed. However, for simplicity's sake, I used the term &quot;installing.&quot; Anyway, here's how to get the Dice Box on your system:&lt;/div&gt;

この章は「ダイスボックスの『インストール』」と書かれているが、実際には何も「インストール」していない。実行するプログラムはMapToolだけで、MapTool上のファイルも一切変更されていない。ただ、話を分かりやすくするために「インストール」という言葉を使っただけだ。ともかく、あなたのシステムにダイスボックスを載せるための手順は以下の通りだ：
&lt;div style=&quot;color:gray&quot;&gt;
# Open MapTool. 
# Drag the file '''dicebox_v31.rptok''' from wherever you downloaded it, onto the MapTool map. You should see a token called '''Lib:Play''' appear on the map. '''Tip''': if you are familiar with MapTool's Resource Library, you can save your token there, too, and drag it from your Resource Library onto the map. Also, once you put the token on one map, ''don't put it on any others'' - the way Library Tokens work, they can only be on '''''one''''' map. So once you've put it on one map, that's all you need to do.
# Double-click on the token to get the '''Edit Token''' window. 
# Go to the '''Ownership''' tab and make sure ''nothing'' is checked.
# Go to the '''Config''' tab and make sure '''Visible to Players''' is checked. 
# Click '''OK''' to close the Edit Token window. 
# Go to '''Window &gt; Tables'''
# Click the &quot;Import&quot; button. 
# Navigate to where you saved the file '''colordice.mttable''' and select it. Click &quot;Open.&quot; A new table called &quot;NewDice&quot; will appear in the Tables window.
# Go to '''File &gt; Save Campaign As''' and save your work so far as a Campaign File, giving it whatever name you like (such as &quot;Basic.cmpgn&quot;). 
# Select the Dice Box token, and in the selection window (if you don't see that window, go to '''Window &gt; Selection''') and click the button labeled '''onCampaignLoad'''. The Dice Box frame will pop up!
&lt;/div&gt;
# MapToolを開く
#　'''dicebox_v28.rptok'''をダウンロードした場所からドラッグして、MapToolの地図上に持ってくる。地図上には'''Lib:Play'''というトークンが表示されるはずだ。&lt;br /&gt;'''Tip''': もしあなたがMapToolのリソース・ライブラリについて詳しいのなら、ここでトークンをセーブして、リソース・ライブラリからマップ上にドラッグしてもいい。また、一度マップ上にこのトークンを置いたら、''他の場所には置かないこと。''ライブラリ・トークンの仕組み上、'''''一つの地図上でしか'''''動作できない。そのため、トークンを地図上に置いたら、それでやることは終わりだ。
# このトークンをダブルクリックし、'''Edit Token'''ウィンドウに出す
# '''Ownership'''タブを選んで、''何も変更されていない''ことを確認する
# '''Config'''タブを選んで、'''Visible to Players'''がチェックされていることを確認する
# '''Ok'''をクリックして、'''Edit Token'''ウィンドウを閉じる
# '''Window &gt; Tables'''を開く
# &quot;Import&quot;ボタンをクリックする
# 先ほど'''colordice.mttable'''をセーブしておいた場所を開き、そのファイルを選択して、&quot;Open&quot;をクリックする。するとTablesウィンドウに&quot;NewDice&quot;という名前の新しいテーブルが表示される。
# '''File &gt; Save Campaign As'''を選んで、この作業をとりあえずキャンペーン・ファイルとしてセーブしておく。名前は好きに決めていい（&quot;Basic.cmpgn&quot;とか）。
# ダイスボックスのトークンを選択し、その選択ウィンドウ（もしこのウィンドウが表示されていなければ、'''Window &gt; Selection'''を行ってください）の中から '''onCampaignLoad''' という名前のボタンをクリックする。すると、ダイスボックスのフレームが表示されるはずだ。

===ダイスボックスの使い方===

[[Image:Dicebox-output.jpg|thumb|ダイスボックスの出力例]]

ダイスボックスの使い方は簡単だ:
&lt;div style=&quot;color:gray&quot;&gt;1. Click on the pictures of the dice you need to roll. Each time you click, you'll add one more die of that type to the roll. The total for each kind of die is shown below or beside the corresponding image.&lt;/div&gt;

1. 振りたいダイスの画像をクリックする。１回クリックするごとにそのダイスの個数が１つ増える。ダイスの総数はその画像の傍に表示されている。

&lt;div style=&quot;color:gray&quot;&gt;2. Add any fixed amount in the last box (for instance, if you want to add 7 to the total dice roll, put a 7 in the last box). &lt;/div&gt;

2. 最後のボックスの中に固定値を入れる（例えば、出目の合計値に7を足したければ、このボックスに7を入れる）。

&lt;div style=&quot;color:gray&quot;&gt;3. Click on the '''Show Results To:''' link to switch between making the results visible to everyone, or visible only to the GM and yourself. Click on &quot;Results&quot; to change between a &quot;tooltip&quot; that shows only the ''total'' of each group of dice, or shows the total ''and'' the results of each individual die. &lt;/div&gt;

3. '''Show Results To:'''のリンクをクリックして、結果を全員またはＧＭと自分だけに公開するよう設定する。&quot;Results&quot;をクリックして、&quot;tooltip&quot;の中身を、それぞれのダイス種類ごとの''total''とするか、totalとそれぞれのダイスの出目の''両方''とするかを選ぶ。

&lt;div style=&quot;color:gray&quot;&gt;4. Once you've selected the dice you want to roll, click '''Roll'''. The result of the roll will appear in the chat window, as shown below:&lt;/div&gt;

4. 振るダイスを決めたら'''Roll'''をクリックする。振った結果はチャット・ウィンドウに以下のように表示される：

&lt;div style=&quot;color:gray&quot;&gt;5. If you make a mistake, you can hit &quot;Clear All&quot; to clear out the dice you've selected, and start over.&lt;/div&gt;

5. もし間違えたら、&quot;Clear All&quot;をクリックして、選んだダイスを全てクリアし、またやり直す。

&lt;div style=&quot;color:gray&quot;&gt;If you need to adjust the layout of the Dice Box (to fit your MapTool window better) click &quot;Change Layout,&quot; and pick from one of the options. &lt;/div&gt;

（MapToolと組み合わせ易いように）ダイスボックスの中のレイアウトを変更したければ、&quot;Change Layout&quot;をクリックし、オプションの中から選択する。

[[Category:Cookbook]]
{{Languages|Dice_Box}}{{#customtitle:ダイスボックス|ダイスボックス}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Game Hosting/ja</title>
    <ns>0</ns>
    <id>1013</id>
    <revision>
      <id>4821</id>
      <parentid>4311</parentid>
      <timestamp>2010-11-02T02:09:21Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23502">{{Languages|Introduction to Game Hosting}}{{#customtitle:はじめてのゲーム・ホスティング|はじめてのゲーム・ホスティング}}{{Translation}}
{{Beginner}}__TOC__
==はじめに==

[[Introduction_to_Mapping/ja|初めてのマップ作製]]で述べたように、MapTool は、RPGセッションで使用する仮想マップの作成機能と仮想『ミニチュア』（マップツールでは[[Introduction_to_Tokens/ja|トークン]]という用語が使われる）機能を提供する。この機能はテーブル上に広げた地図とミニチュアによく似ている。実のところ、MapTool が『仮想テーブル』、『VTT（訳注：virtual tabletopの略）』と呼ばれるゆえんだ。このガイドでは『インターネット上で他のプレイヤーとマップを共有する』ことの基礎を、手順を追って説明しよう。

'''注：'''マップツールが''役立つ''のはオンライン上のプレイ''だけ''ではない。実物のマップではできないことが仮想マップで実現できるので、多くの人がオフラインのセッションでもマップツールを使用している。おまけに、マップ上にコーラをぶちまける心配もしなくて良い。しかしここではオンラインで遊ぶことを前提に案内を進める。 

『初めてのマップ作成』ではマップツールの入手、使い始め、マップと地図の配置の基礎について説明している。また、キャンペーン・ファイルの保存、マップの移動と拡大・縮小、トークンの移動についても説明している。これらはプログロラムの最も重要な機能であり、これなしでは残りの説明をよんでも役には立たないだろう。

ホストを立てても君のゲームに誰も接続しなければまったく楽しくないので、このガイドの最後のセクションではマップツール・サーバーへの接続方法を説明している。接続方法を友人に伝える必要があるので、そのセクションを必ず読むように!

なお、このガイドではオンライン・セッションを''ホストする''ことを扱うので、『君』とは『サーバーを実行している人』のことだ。

==基本仕様==

オンライン・セッションで使う場合、マップツールは''クライアント・サーバー''アーキテクチャを用いる。つまり、ある人物（通常GMだが、そうでなくても良い） がマップツールを''サーバー''として開始させて、メンバーの他の人はそのサーバーに''クライアント''として接続する。 

サーバーを開始し参加者が接続したなら、キャンペーン・ファイル（全てのマップ、トークン、その他の情報を含む）はプレイヤー全員に共有されるので、同じマップを見て、仲間が動かしたトークンの移動を見る事ができ、チャット・ウィンドウにテキストを入力することができる。あとは大いに楽しむだけだ。 

==ネットワークに関する用語==

『仮想ゲーム卓』プログラムを含む、多くのクライアント・サーバー型のアプリケーションと同じように、マップツール・セッションの準備における課題の一つとして、君のマップツール・サーバーに接続する友人を、君のホーム・ネットワークに接続できるように設定する事だ。 

マップツールをインターネット上でホストできるように設定するにはいくつかの方法がある。UPnP、ポート・フォワーディング、外部仮想プライベート・ネットワーク（VPN）ソフトのパッケージ。君のPC、接続プロバイダ、ハードウェア（ケーブル・モデム、DSLモデム、ルーターなど）により、どの方法を選ぶか決まるだろう。ホーム・ネットワークやネットワーク機器にはたくさんの種類があるので、成功を得るための方法を一つにしぼる事はできない。

===UPnP===

ポート・フォワーディングに変わるものは（ルーターにその機能が備わっていれば）''UPnP''（''ユニバーサル・プラグ・アンド・プレイ''の略）と呼ばれる。この機能は、ルーターに「ポートXYZの通信はここに！」と指示する代りに、「ゲームをする間、ポートXYZを通らなくてはならないので空けといてくれないかな？」と言うようなものだ。

言いかえれば、ポートとトラフィックの出入りをシームレスに、シンプルに扱う機能だ。もちろん、常にUPnPがサポートされているわけではないのが欠点であり、 君のネットワークが対応しているかどうか考えなればならないだろう。とはいえ、君のネットワーク機器がUPnPをサポートしているのであれば、それが君の MapTool サーバーを稼働する方法として''何にもまして''最も簡単な方法である。

===ポートフォワーディング===

ルーターや物理ファイアウォールを使用しているホームネットワークでは、''ポートフォワーディング''の設定が必要となるだろう。これは君のネットワークに訪れ、特定のポートの上に到着する情報があなたのネットワークの中で適当な場所に送られるメカニズムである。これはマップツール・サーバーを立てている君にとって重要であり、仲間に正しい場所の情報を伝えなければならない。

ポートフォワーディングの設定の特定の部分は機器に依存するので説明書を確認しなければならないだろう。しかし、基本的な考え方はルーター／スイッチ／ファイアウォールに2つのことを示すということだ：

# どのポートをマップツールが使うのか（より多くのマップツールのポートは後ほど）。これはルーターに「情報は○○ポートからやって来るので注意せよ」と伝えることだ。
# その情報の行き先は、ネットワーク内のどのコンピューターなのか。つまり「情報が○○ポートへ到着したら、ここへ送れ」
## ついでながら、ポートフォワーディングの設定は、ルーターに、送信するデータがどこに到達できるかを伝える。 

以上がポートフォワーディングの概要だ。ほとんどのルータ（特に、セキュアにかつ適切に構成されているものなら）では無作為に入って来る情報は到達できないため、上記の設定をしなければならない。 

===より多くの、より良いネットワークについての情報===

Azhreiにより投稿された素晴らしい[http://forums.rptools.net/download/file.php?id=116 FAQ]（[http://forums.rptools.net MapTool Forums]内）をしっかりと理解したので、ネットワークについての綿密なセクションを書き始める準備が整った。ポートフォワーディング、ルーターの設定、ネットワークに関する作業全般になじみがないなら、このFAQをぜひ読んでほしい。 

ネットワークの設定やホームネットワークの管理に慣れているなら（特にソフトをサーバーとして稼働させたり、ポートフォワーディングの設定をすることができるのなら）、マップツールをサーバーとして稼働させることは雑作もないことだろう。基本的にルーターにマップツールのネットワークトラフィックを通過させるためにルーターを設定しなければならない。 

君のネットワーク機器に固有のポートフォワーディングの設定情報が必要なら、[http://www.portforward.com Portforward.com]に大量にある特定のネットワーク機器、特定のソフトの操作手順の書かれた文書の中から探し出してくれ。

その他、上記のこと全てが意味不明なら、[http://forums.rptools.net/download/file.php?id=116 Networking FAQ]を読んでくれ！わからないことは全て解決するぞ！

それでは作業に取りかかろう。

==マップツール・サーバーを開始する==

===前提===

これ以降の説明では、君のネットワークがマップツールのトラフィックを（ポートフォワーディングやUPnPを通して）扱えるように設定済みであることを前提として書かれている。そうではないなら、君の仲間が使用可能なサーバーを立ち上げる前に、その方法を理解しなければならないだろう。

===サーバー開始のダイアログ（Start Server ダイアログ）===

[[Image:mt-file-menu-startserv.jpg|thumb|Fireメニューより''Start Server''を選択]]

[[Image:mt-start-server.jpg|thumb|'''Start Server''' ダイアログ]]

1. '''File → Start Server'''を選択。

2. '''Start Server''' ダイアログが表示される。ここにはたくさんのオプション項目がある。

===サーバー・オプションと設定===

====サーバー構成の設定を行う====

* '''Username'''：この項目は、チャットやConnectionsウィンドウに表示される名称だ。君の好きな名前を設定できる。
* '''Role'''：このドロップダウンの項目は、君が''どの種類のユーザー''であるかマップツールに伝えるものだ。君はGM（すなわち全宇宙の支配者）を担当するのか？ それともプレイヤー（GMの気まぐれに付き合う者、またはプレイヤー機能のみ使える者）かな？セッションでは1名以上のGMを持つこともできる！
* '''Port'''：''非情に重要な設定''であり、ルーターへ転送できるように設定したポートを MapToll に伝える部分だ。間違ったポートを指定した場合、MapTool の通信は君のネットワークへ入ることも出ることも入ることもできないだろう。つまりゲームはできないということだ！
* '''RPTools Alias'''：このフィールドは、君のサーバーを RPTools サーバー・レジストリ上に表示するための、サーバーの『別名（エイリアス）』を設定することができる。これは基本的にプレイヤーたちに『IPアドレス 123.45.678.9 のサーバーに接続してくれ』と言うかわりに『Sugoi Server という名前を見つけて、そこに接続してくれ』と言うためのものだ。
* '''Passwords'''：パスワードを設定することで、君のサーバーへのアクセスを保護することができる。サーバーへのパスワードの設定は必須ではないが、設定しなければ、君のサーバーを見つけられる誰もがプレイヤーとして接続可能になる。ここには二つのパスワードのカテゴリーがある：
** '''GM'''：GMパスワードは遠隔地にいる者へ、キャンペーンへの全ての操作権限を与えるために使用される。しかし、キャンペーンの読み込みなどのいくつかの機能は遠隔操作できない。通常、GMパスワードはサブマスターがGMの作業を分担できるようにするために使用されるが、GMが適切にホスティングを開始できず、プレイヤーの1人がセッションをホストする、といった場合でも使うことができる。
** '''Player'''：プレイヤーとしてサーバーに接続する人は、接続のためにこのパスワード使うことになる。

====『Ownership』、『Vision』、及び『Behavior』====

* '''Strict Token Ownership'''：MapToolは&quot;token ownership&quot;と呼ばれる概念を用いる。これは、特定のトークンの操作（選択、移動、[[Macros:Glossary#P|プロパティ]]を見る）をどの参加者が行えるかを制御するためのものだ。''Strict Token Ownership''を有効にした場合、特定のトークンの''owner''だけがトークンを自由に動かすことができ、その他の人はトークンを見ることしかできない。
* '''Players can reveal vision'''：MapToolには視覚（vision）と戦雲（fog-of-war）の（トークンがマップを『見る方法』が設定する）システムが備わっている。このオプションを有効にした場合、プレイヤーはGMの介入無しにトークンの『見える範囲』を公開することが可能になる。（言い換えれば、 トークンにとって隠された範囲は Fog of War で覆われており、画面上に不透明なものを表示する。これを公開した場合、不透明な覆いが消え、園下のマップが見えるようになる）。そうしないのであれば、マップの公開は、全てGMが行わなければならない。
* '''Use Individual Views'''：上記で述べた視覚のシステムにおいて、プレイヤーのトークンが視覚を『共有』できるか（''例：''あるキャラクターが見ているものを全員が見る）、又は、個人用の視界を持つのか。
* '''Restricted Player Impersonation'''：プレイヤーが演じることができるのは、自分が所有権（ownership、上記参照）を持つトークンのみに制限する。
* '''Players Receive Campaign Macros'''：MapTool では[[Macros:introduction|マクロ]]の機能を提供する。マクロとは、基本的には一定の活動を自動化するために使用する、一連のテキスト、トークン、ダイス振りコマンドのことだ。基本的に、''何を行うか''手順を記した短い文章である。このオプションを有効にした場合、GMは全てのプレイヤーが利用可能な『キャンペーンマクロ』を作成することができる。
* '''Use Tooltip for [] rolls'''：このオプションを有効にすることで、各括弧で閉じられたダイスロールはいずれもロールの結果のみを表示し、ロールの完全な詳細はロール結果にマウスポインタをかざすことで表示されるようになる。

===接続のテストを行う===

サーバーを開始する前に、'''Test Connection（接続テスト）'''ボタンを押すことは良いことだ。これはRPTools.netのサーバーに君のコンピューターへの接続テストを依頼する。要するに、RPTools接続テストサーバーがネットワーク越しに君のコンピューターを認識できるかどうか調査することだ!

'''成功！このコンピューターを見つけることができました！'''と表示されたのであれば、 サーバー実行時に他の人がサーバーを見つけることができると考えて間違いないだろう。

接続テストの成功のメッセージを''確認できないのであれば''、正しいポートを設定しているか、その他もろもろの設定が万事滞りなくできいるか調べる必要があるだろう。

===接続情報（Connection Infomation）を取得し、仲間に伝える===

[[Image:mt-file-menu-cinfo.jpg|thumb|File メニューから ''Connection Information'' を開く]]

[[Image:connection-info.jpg|thumb|'''Connection Information''' ダイアログ]]

ここでは接続テストに成功し、'''OK'''を押してサーバーを開始したことを前提に話を進める。設定を再確認するために ''Connection infomation'' を詳しく確認することにしよう。以下は、仲間がサーバーに接続できるようにするために必要となる設定だ。

1. メニューより '''File &gt; Connection Information''' を選択。

MapTool が現在認識している君のコンピューターの情報が表示される。まだサーバーを起動していないのであれば、コンピューターの外部IPアドレスと内部IPアドレスが表示される。（この情報は有用であるが、ポートフォワーディングの設定をまだ行っていないのであれば特に重要である）

サーバーの開始しているのであれば、サーバーの名前（設定している場合のみ）と、サーバーが通信に使用しているポートも表示されるはずだ。

2. 仲間に次の情報を伝える：''Server Name（サーバー名）''（RPTools Aliasとも呼ばれる。設定している場合のみ）、''外部''IPアドレス、''ポート番号''。この情報は、仲間が君のサーバーに接続するとき '''Conect to Server''' ダイアログ上で情報を入力する際に必要になる。

&lt;br style=&quot;clear:both;&quot;/&gt;

==MapTool サーバーに接続する==

ここまでの手順で、他の人がMapToolサーバーに接続できるように設定することを説明してきた。もちろん、サーバーに誰も接続させないのであれば、さまざまなことはすぐに退屈なことになるだろう。    ここで説明する手順は、君が立ち上げた''サーバーに接続する君の仲間''を対象にしている。

===前提===

ここで学ぶ内容は、次に示すことを全て満たしていることを前提とする。次のうち1つでも満たしていなければ、非常に短い旅行になるだろう。

* 友達がいる。
* マップツール・サーバーを立ち上げている。
* 友達は下記の内容を把握している：
** サーバーの''名前''、または、サーバーの''外部IPアドレス''。（できれば両方！）
** 割り当てた''パスワード''（GM用かプレイヤー用のうちどちらか）
** サーバーが使用している''ポート番号''
* '''とても重要：君の友達が使用しているMapToolのバージョンが、サーバーのMatpToolと同じバージョンであること!!'''

===『Connect to Server』ダイアログを開く===

[[Image:mt-connect-to-server.jpg|thumb|'''Connect to Server''' ダイアログ]]

上記の条件を満たしているなら、友達に伝えることは次の通り：

1. '''File → Connect to Server''' を選択し、 '''Connect to Server''' ダイアログを開く。

2. ''User name'' を入力。友達が望む名前で構わない。

3. パスワードを入力（サーバー起動時に設定したもの）。

4. 接続する人の''Role''を選ぶ。GMまたはプレイヤーとして接続することができる。パスワードに対応している適切な Role を選択しているか確認すること!!

&lt;br style=&quot;clear:both;&quot;/&gt;

===接続方法を選ぶ===

'''Connect to Server''' ダイアログには起動しているサーバーに接続する3つの方法が表示される。

====RPTools.net====

[[Image:mt-connect-registry.jpg|thumb|'''Connect to Server''' に表示された『RPTools』タブ]]

このタブ（標準で表示）には RPTools.net の ''Server Registry'' に登録されたすべてのサーバーが一覧表示される。サーバーを準備するときに、 ''alias'' を選択した場合、この一覧に表示される。''Server Registry'' にはサーバーの接続情報が保存されているので、君の友達はサーバーを選択し'''OK'''をクリックするだけで良い。

&lt;br style=&quot;clear:both;&quot;/&gt;

====LAN====

[[Image:mt-connect-lan.jpg|thumb|'''Connect to Server''' に表示された '''LAN''' タブ]]

このタブには'''ローカル・ネットワーク'''内で起動しているサーバーが表示される。これはMapToolのLANパーティを開きたいときや、友達が全員同じネットワーク上にいるときのためのものだ（みんながゲーム会にノートパソコンを持ち寄ってくるときなど）。

&lt;br style=&quot;clear:both;&quot;/&gt;

====Direct====

[[Image:mt-connect-direct.jpg|thumb|'''Connect to Server''' に表示された '''Direct''' タブ]]

直接接続とは、簡単なRPTools.net タブを使用せず、サーバーの外部IPアドレスとポート番号を入力して接続することだ。

&lt;br style=&quot;clear:both;&quot;/&gt;

===接続の確認===

友達がMapToolサーバーに接続したとき、誰かがサーバーに接続したことが'''Chat Pane'''に次のように通知される。

&lt;font color=&quot;blue&quot;&gt;''JQRandom has connected.''&lt;/font&gt;

また、'''Connections Pane''' でサーバーに接続している参加者全員の一覧が確認できる。Connections Pane を表示するには、'''Window → Connections''' を選択すること。{{Languages|Introduction to Game Hosting}}[[Category:MapTool]]

==マップ上のトークン==

君がMapToolを自分で使うために起動した場合、MapToolは君をGMと見なすので、マップ上のトークンとアイテムを扱うことができる。（つまり、マップが象徴する小さな世界の全能神となるわけだ。）しかし、ゲームをホスティングしているとき、MapTool は接続する人たちのために、これまで説明してきたように異なる役割を持っている。'''GM'''の役割ではマップ上のすべてのものを選択し、操作することができる全権を保持するが、'''Player'''の役割ではプレイヤーの''ownership''が設定されているアイテムだけを扱える、非常に制限されたことしかできない。

上記の理由により、君がサーバーを立ち上げたときは、プレイヤーが担当するトークンを操作できるように ownership を設定しなければならないだろう。プレイヤーが接続した後にトークンの所有権を設定し忘れるのは、新しいサーバーを立ち上げたときに見落としがちな落とし穴だ。

トークンの所有権は[[Introduction to Tokens/ja|はじめてのトークン]]にて詳しく説明しいる。しかし、このチュートリアルの目的は、サーバーを立ち上げ、君の友達をプレイヤーとして接続させ、ゲームに接続した各々のプレイヤーに次に示すことを行うことである。

# プレイヤーが担当するキャラクターのトークンをダブルクリック（下記の注記を参照）。
# token type を PC に設定。
# '''Ownership''' タブを開く。
# 所有権を与えるために該当する ''プレイヤーの名前''の先頭にあるチェックボックスにチェックを入れる。
# 設定を有するために '''OK''' をクリックする。

以上の操作で、そのプレイヤーは自分のトークンを動かしたり情報を編集したりすることができるようになる。

また、全員がトークンを操作する必要があるのであれば、トークンの所有権を全てのプレイヤーに与えることもできる。

'''注：'''君が望むのであれば、NPCトークンの所有権をプレイヤーに与えることもできる（操作方法は手順2を除いて同じ）が、少なくとも各プレイヤーの担当するトークンに所有権を与えなければないないだろう。</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Macro Writing/ja</title>
    <ns>0</ns>
    <id>1014</id>
    <revision>
      <id>4298</id>
      <parentid>3926</parentid>
      <timestamp>2010-06-20T10:12:42Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <minor/>
      <comment>原文を淡色表示にしました。</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="92594">{{Languages|Introduction to Macro Writing}}{{#customtitle:はじめてのマクロ作成|はじめてのマクロ作成}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}
==マクロとは何か?==

&lt;div style=&quot;color:gray&quot;&gt;As mentioned in the Token Macros page, a macro is simply a way to automate a task in MapTool. Essentially, macros are scripts that are read by a ''parser'', which interprets them and ensures that the right parts are processed in the right way (for instance, ensuring that a command to add two numbers together is processed as a macro command, and not simply text to put into the chat window). &lt;/div&gt;

トークン・マクロのページでも言ったとおり、単にマクロと言えば、MapTool上での処理を自動化するための手段のことである。マクロは基本的にはスクリプトであり、''パーザー''がこれを読み取って、解釈し、正しいパーツが正しいやり方で処理されていることを保障する（例えば、ある二つの数値が与えられたとき、そのテキストをチャット・ウィンドウに出力するのではなく、両者を足し合わせる処理をマクロ・コマンドとして実行する、というように）。

&lt;div style=&quot;color:gray&quot;&gt;Macros started off small in MapTool, but at this point, the macro scripting language has become a very full-featured set of commands and functions that can perform nearly any operation you can imagine! &lt;/div&gt;

当初、MapToolの中ではマクロの扱いはささやかなものだったが、今ではマクロ記述言語は非常に充実した命令や関数のセットを持っており、考えうるほとんどの処理をこなせるようになった。

==知っているべきこと==

&lt;div style=&quot;color:gray&quot;&gt;Macros are where we begin to delve into the more powerful - and more complicated - features and capabilities of MapTool. While this guide attempts to be easy for even brand new users to follow, there are a few things I assume you've read and already know how to do:&lt;/div&gt;

マクロは、MapToolの機能や能力ををより深く―そして複雑なやり方で―利用していく手がかりとなるものだ。このガイドはまったくの初心者でもついてこられるように噛み砕いた内容になるよう心がけてはいるが、あらかじめ理解していることを前提としていることもいくつかある：

&lt;div style=&quot;color:gray&quot;&gt;
# I assume you've read the [[Introduction to Mapping]], so you are familiar with the MapTool interface, and how to create maps, save campaign files, and put tokens on maps.
# I assume you've also read the [[Introduction to Tokens]], so you have a basic idea how to manipulate tokens, look at their properties, and so forth.
# Finally, because macros are usually intimately connected to token ''properties'', I assume that you have read and followed the steps in the [[Introduction to Properties]], and created a new campaign file based on the [[Sample Ruleset|Sample RPG ruleset]] created to help new users learn about MapTool. If you haven't read that guide, please do - it will help some of the examples below make a ''lot'' more sense!
&lt;/div&gt;

# [[Introduction to Tokens]]に目を通していること。トークンの操作について基本的な概念を理解していて、そのプロパティを見るなどができる。
# マクロはトークンの''プロパティ''と密接に関わっているのが普通なので、最終的には[[Introduction to Properties]]を読み、そのステップを実行して、[[Sample Ruleset|Sample RPG ruleset]]に基づいて新しいキャンペーン・ファイルを作成している必要がある。この文書は、新しいユーザーがMapToolについて学ぶために作られたものだ。もしまだそのガイドを読んでいないのなら、ぜひそうして欲しい。そうすれば、この下で挙げている例を''かなり''理解しやすくなるはずだ。

==このガイドの用語規約==

&lt;div style=&quot;color:gray&quot;&gt;I will do my best to keep my language and terminology consistent. In this guide:&lt;/div&gt;

述語や用語については一貫したものになるよう努力する。このガイドでは以下の用語を用いる：

&lt;div style=&quot;color:gray&quot;&gt;
* '''Macro''' refers to a collection of commands that are grouped together to automate a task
* '''Macro command''' will refer to any particular ''individual'' command or function you use ''inside'' a macro
* '''Macro language''' will mean the whole collection of commands, functions, and operations you can use whenever you write macros. You can see a huge array of functions at the [[:Category:Macro Function|List of Macro Functions]].
&lt;/div&gt;

* '''マクロ'''とは、ある処理を自動化するための一連のコマンドを一つにまとめたものことを指す。
* '''マクロ・コマンド'''とは、一つのマクロの中に含まれていて、マクロの内部で使われている一つ一つのコマンドや関数のことを指す。
* '''マクロ言語'''とは、マクロを書くときに使うコマンド、関数、処理全体のことを指す。膨大な関数のリストが[[:Category:Macro Function|List of Macro Functions]]にある。

&lt;div style=&quot;color:gray&quot;&gt;Also, although it is possible for one macro to trigger another (called &quot;calling&quot; another macro), for this guide, the only macros we'll talk about are triggered by clicking a button on the appropriate Macro Panel, and only affect the tokens they run ''on''.&lt;/div&gt;

なお、一つのマクロが別のマクロを起動することも可能だが（これを他のマクロを「呼び出す」という）、このガイドでは、マクロ・パネル上にあるボタンをクリックして起動し、そのマクロが実行されているトークン''にだけ''影響を及ぼすものについてのみ話すことにする。

==なぜマクロを使うの？==

&lt;div style=&quot;color:gray&quot;&gt;There's nothing requiring you to use macros at all when you use MapTool. Remember, the core purpose of MapTool is to share a map with your friends, and play games (read the [[Introduction to Mapping]] and the [[Introduction to Game Hosting]] to learn how to make and share maps with your gaming groups), and MapTool gives you everything you need to do that: maps, tokens, and a chat system that lets you chat in- and out-of-character, roll dice, and take on the roles of whatever character you are playing. &lt;/div&gt;

MapToolを使うからと言って、マクロを使わなければならないなどということは全くない。MapToolの最大の目的は、友達とマップを共有し、ゲームをプレイすること（グループ内でマップを共有する方法については、[[Introduction to Mapping]]と[[Introduction to Game Hosting]]を読んで欲しい）であり、Maptoolはそれに必要な全てを提供している。マップ、トークン、そしてあなたがプレイしているキャラクターとして、あるいはプレイヤーとしてそれぞれ話し、ダイスを振り、その役割をこなすことのできるチャットツールもある。

&lt;div style=&quot;color:gray&quot;&gt;However, there's a lot more that can be done with MapTool, if you're interested in learning a little bit about the macro capabilities. For example, if you want to click a button that will automatically roll 1d20 and add a modifier to it, it's possible to create a macro for that. If you want to change your hit points after getting hurt, you can write a macro to do that. And this tutorial will show you how.&lt;/div&gt;

ただ、マクロについてちょっと勉強して見る気になってくれれば、MapToolには他にもたくさんできることがある。たとえば、自動的に1d20を振ってそれに修正値を加えてくれるボタンが欲しければ、それをやるマクロを作ることもできる。攻撃を受けたあとで自分のヒットポイントの値を変えたければ、それをやるマクロを書ける。このチュートリアルではその方法を説明する。

==「マクロ」と呼ばれているものはどこにあるの？==

&lt;div style=&quot;color:gray&quot;&gt;Macros are associated with various parts of the MapTool interface and the objects in it. It turns out that there are three places a macro can &quot;reside,&quot; so to speak:&lt;/div&gt;

マクロはMapTool上のインターフェイスのさまざまな部分や、その内部のオブジェクトと関連している。どうやらマクロが「住み着く」ことのできる場所には、三つの種類があるようだ：

===トークン・マクロ===

&lt;div style=&quot;color:gray&quot;&gt;The first, and most common place, is for a macro to reside on a [[Introduction to Tokens|token]]. Token macros are associated with the token on which they are created, and will travel around with that token as long as you let them.&lt;/div&gt;

第一の、そして最もよくある住処は、[[Introduction to Tokens|token]]だ。トークン・マクロはそのマクロが生成されたトークンと関連しており、そのトークンと一緒について回る。

&lt;div style=&quot;color:gray&quot;&gt;Token macros are only directly accessible to the people who own the token, so if you don't own the token, you won't be able to click (or even see!) the button for that macro. &lt;/div&gt;

トークン・マクロにアクセスできるのは、そのトークンの直接的なオーナーだけだ。つまり、オーナーでないトークンのマクロのボタンはクリック（それどころか見ることも！）できない。

===キャンペーン・マクロ===

&lt;div style=&quot;color:gray&quot;&gt;Campaign Macros are macros that aren't linked to a specific token in a campaign, but to the campaign as a whole. These macros work in almost every respect exactly like a token macro, except that:&lt;/div&gt;

キャンペーン・マクロは、キャンペーン上の特定のマクロと関連しているのではなく、そのキャンペーン全体と関連している。このマクロはトークン・マクロとあらゆる面で同じように機能するが、以下の点で違っている：

&lt;div style=&quot;color:gray&quot;&gt;
# You don't have to select a token to see the macros
# Anyone can access them and run them
&lt;/div&gt;

# トークンを選択しなくても見ることができる
# 誰でもアクセスでき、実行できる

&lt;div style=&quot;color:gray&quot;&gt;Campaign Macros are quite useful for the GM and for the Players to handle common functions - in fact, if you set up a common task as a campaign macro, then you only need to make one copy of it (instead of making copies on every token that needs it). &lt;/div&gt;

キャンペーン・マクロはＧＭとプレイヤーが共通の機能を扱うのにとても便利だ。実際、共通のタスクをキャンペーン・マクロとして設定しておけば、複数作る必要はないのだ（そのマクロを必要とする全てのトークンにそのマクロを書いてやる必要はない）。

===グローバル・マクロ===

&lt;div style=&quot;color:gray&quot;&gt;Global Macros aren't linked to a token or a campaign - instead, they are macros that are linked with your copy of MapTool. These macros are ''not'' visible to anyone else who connects to your game.&lt;/div&gt;

グローバル・マクロはトークンやキャンペーンとは結びついていない。その代わりに、あなたのMapToolと結びついている。このマクロは、ゲームに接続している他の人たちからは''見えない''のだ。

&lt;div style=&quot;color:gray&quot;&gt;This is a good place to put macros for tasks you ''don't'' want other people seeing - like information you want to show to players only when ''you'' decide; or tasks you want to perform on your NPCs but you don't want PCs to be able to do.&lt;/div&gt;

この場所は、他の人には''見られたくない''タスクのためのマクロを置くのに便利だ。例えば、''あなたが''他のプレイヤーたちに見せたいと思ったときにだけ見せるような情報や、NPCにだけ実行させて、PCたちには実行できないようにしたいタスクなどだ。

==マクロ・パネル==

[[Image:Macro-panels.jpg|thumb|The four Macro Panels]] [[Image:Tabbed-panels.jpg|thumb| ４枚のパネルが重ね合わせてあり、下部にあるタブで選択できる（スペースを節約するために、このようにパネルを重ねておくプレイヤーは多い）]]

&lt;div style=&quot;color:gray&quot;&gt;With all this talk about macros and locations and especially the macro &quot;buttons,&quot; you are probably wondering - where are these buttons? You'll find macro buttons on one of the 4 '''macro panels''' that appear in MapTool. If you cannot see any of the macro panels, go to the '''Windows''' menu, and make sure that these four windows are checked:&lt;/div&gt;

マクロとその居場所について、特にマクロの「ボタン」について話してきたが、疑問に思っている人もいるだろう。そのボタンはどこにあるのか、と。マクロ・ボタンは、MapTool内に表示されている４枚の'''マクロ・パネル'''の上にある。マクロ・パネルが見当たらない場合には、'''Windows'''メニューに行き、以下の４つのウィンドウがチェックされていることを確かめて欲しい。

* Selection
* Impersonated
* Campaign
* Global

&lt;div style=&quot;color:gray&quot;&gt;You should see these windows pop up in MapTool if they were not already there. If you look at the screenshots to the right, you will see that the Global panel is covered with a bunch of buttons. Each of those buttons will execute a macro; the buttons appear when you create a new macro. &lt;/div&gt;

もしまだ表示されていなかったのなら、MapTool内に現れたのが見えるはずだ。右にあるスクリーンショットを見ると、グローバル・パネルにいろいろなボタンが載っているのが見えるだろう。それぞれのボタンがマクロを実行する。新しいマクロを作ると、新しいボタンが現れる。

&lt;div style=&quot;color:gray&quot;&gt;'''Please note''', however, that the Global panel contains macros that are specific to ''your'' computer and ''your'' installation of MapTool. The buttons you see in the Global Panel screenshots are ''my'' Global macros; yours...well, you'll have to write some!&lt;/div&gt;

'''注意'''　グローバル・パネルには''あなたの''コンピューターと、''あなたの''MapToolにのみ存在するマクロが含まれている。先ほどのグローバル・パネルのスクリーンショットにあるのは''私の''グローバル・マクロだ。あなたのパネルにはないって？……そのうちできると思うよ。

===セレクション・パネルとインパーソネイテッド・パネル===

&lt;div style=&quot;color:gray&quot;&gt;There are two panels that deal directly with token macros: Selection, and Impersonated. &lt;/div&gt;

トークン・マクロを直接扱うのが、セレクションとインパーソネイテッドの二つのパネルだ。

&lt;div style=&quot;color:gray&quot;&gt;The '''Selection''' panel will show buttons for all of the macros that are currently residing on the token you have selected (you select tokens by clicking on them with the mouse). Each of these buttons runs a particular group of macro commands.&lt;/div&gt;

'''セレクション'''パネルには、あなたが今選択している全てのトークン上にあるマクロのボタンが表示されている（トークンを選択するには、それをマウスでクリックすればいい）。

&lt;div style=&quot;color:gray&quot;&gt;The '''Impersonated''' panel shows buttons for the macros on the token you are ''impersonating''. Impersonating a token is a way to &quot;assume the token's persona&quot; - when you chat, text will appear as if the token was speaking, and so forth. It is possible to impersonate one token, and select another, so make sure you know what panel you're looking at!&lt;/div&gt;

'''インパーソネイテッド'''パネルは''何かに扮している''トークンのマクロのボタンを表示している。トークンをインパーソネイトするということは、「そのトークンのペルソナを想定する」ということだ。チャットをしていると、そのトークンが喋っているかのようにテキストが表示される、というように。あるトークンをインパーソネイトし、それから次、というようにして、今自分が誰に向いているのかを確認することもできる。

===キャンペーン・パネル===

&lt;div style=&quot;color:gray&quot;&gt;This panel shows all of the macros currently set up for the Campaign. Remember, these are visible to everybody.&lt;/div&gt;

このパネルには、そのキャンペーン用に設定されている全てのマクロが表示される。このマクロは誰でも見ることができるということを忘れないように。

===グローバル・パネル===

&lt;div style=&quot;color:gray&quot;&gt;This panel contains the Global Macros you've set up. Remember, these are ''only visible to you.''&lt;/div&gt;

このパネルには、あなたが設定しているグローバル・マクロが表示されている。このマクロは''あなたにしか見えない''点に注意。

==マクロを書く==

[[Image:Camp-panel-nomacros.png|thumb|'''キャンペーン・パネル'''。今のところマクロはない。]]

[[Image:Camp-panel-rcaddnew.png|thumb|キャンペーン・パネルの上で右クリックすると、新しいマクロを作ることができる]]

&lt;div style=&quot;color:gray&quot;&gt;Macro creation is a three-step procedure (though those three steps can contain multitudes!):&lt;/div&gt;

マクロは三つの手順を踏んで作成する（ただし、それぞれの手順はさらに細かく分けられることもある）。

&lt;div style=&quot;color:gray&quot;&gt;1. Right-click on the panel where you want the macro to appear (either one of the token panels, the Campaign panel, or the Global panel) and select '''Add New Macro'''. A gray button with the label '''(new)''' will appear.&lt;/div&gt;

1. そのマクロを置きたいパネル（二つのトークン・パネルのどちらか、キャンペーン・パネル、グローバル・パネル）の上で右クリックし、'''Add New Macro'''を選ぶ。'''(new)'''というラベルの灰色のボタンが現れる。 

&lt;div style=&quot;color:gray&quot;&gt;2. Right-click on the button, and select '''Edit'''.&lt;/div&gt;

2. そのボタンを右クリックし、'''Edit'''を選ぶ。

&lt;div style=&quot;color:gray&quot;&gt;3. Enter your macro code, give it a name, and hit '''OK'''. There! You've created a macro!&lt;/div&gt;

3. マクロのコードを書き込み、名前を付け、それから'''OK'''を押す。ほら、マクロができた！

&lt;div style=&quot;color:gray&quot;&gt;But wait...what do you mean, &quot;macro code?&quot; &lt;/div&gt;

……ちょっと待て。「マクロのコード」って何だ？

&lt;div style=&quot;color:gray&quot;&gt;As I said, those three steps can contain a ''huge'' amount of details, steps, tips, tricks, victories, failures, frustrations, and sometimes, hollering and gnashing of teeth. So, we'll take a step back and look at some very simple macros in a step-by-step fashion. If you want to see what some advanced macros can look like, there are plenty of tutorials and how-tos on this wiki to read through. For now, though, we'll do some simple, but useful, macro writing.&lt;/div&gt;

先ほども言ったように、この三つのステップの中にはさらに「膨大な」ディティール、ステップ、コツ、ワザ、勝利、敗北、欲求不満、それに時には「やったー！」とか「歯軋りギリギリギリ」などが含まれることがある。そんなわけで、ここで一旦立ち止まって、簡単なマクロをステップ・バイ・ステップで見ていくことにしよう。高度なマクロがどういうものか見てみたいと言う人向けには、このwiki上にチュートリアルやハウトゥがたくさん載せてある。ただし今は、シンプルな、でも役に立つマクロの書き方をやっていこう。

===イニシアティブを振る===

[[Image:Camp-panel-newbutton.png|thumb|&quot;Add New Macro&quot;を選択すると、キャンペーン・パネル上に'''(new)'''というラベルのボタンが出てくる]]

[[Image:Camp-panel-rceditbutton.png|thumb|そのボタンを右クリックすると、マクロ・エディタが開く]]

[[Image:Macro-editor-examplestring.png|thumb|マクロのラベルと、マクロ・コマンドを入力する]]

[[Image:Camp-panel-exbutton.png|thumb|新しく作ったマクロが'''キャンペーン・パネル'''に載っている]]

&lt;div style=&quot;color:gray&quot;&gt;The simplest macros are no more than text, which is output to the chat window. In effect, a macro containing text (in fact, all macros) just send a string of commands to the chat window where it is read and interpreted. Most programming languages start off with the classic &quot;Hello World!&quot; program, so this guide is ''not'' going to do that. Instead, let's do something a bit more RPG: create the dreaded &quot;Roll for Initiative!&quot; message!&lt;/div&gt;

最もシンプルなマクロは単なるテキストで、それをチャット・ウィンドウに出力するだけのものだ。実際のところ、テキストを含むマクロ（すなわち全てのマクロは）チャットウィンドウにコマンド文字列を送るもので、チャットウィンドウがその文字列を読み取って解釈している。ほとんどのプログラム言語はお約束の&quot;Hello World!&quot;プログラムからスタートしているから、このガイドではその定石に''従わない''。その代わりに、もうちょっとRPGっぽいことをしよう：あの恐ろしい「イニシアティブを振れ！」メッセージだ。

&lt;div style=&quot;color:gray&quot;&gt;1. Select the Campaign Panel.&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;2. Right-click on it, and select '''Add New Macro'''.&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;3. Right-click on the new macro button, and click '''Edit'''.&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;4. In the '''Label''' field, enter &quot;Roll for Initiative!&quot;&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;5. Leave the '''Group''' and '''Sort Prefix''' fields blank.&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;6. In the '''Command''' field, type &lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;Roll for Initiative!&lt;/tt&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;7. Click '''OK'''. &lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;8. When you're done, you'll see that the button has changed - it now says '''Roll for Initiative!''' on it, and when you click it, lo and behold, the text &quot;Roll for Initiative!&quot; appears in the chat window.&lt;/div&gt;

1. キャンペーン・パネルを選択する

2. 右クリックして、'''Add　New Macro'''を選択する

3. 新しいマクロのボタンを右クリックし、それから'''Edit'''をクリックする

4. '''Label'''フィールドの中に&quot;イニシアティブを振れ!&quot;と入力する

5. '''Group'''と'''Sort Prefix'''のフィールドは空にしておく

6. '''Command'''フィールドの中に以下のように入力する

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;イニシアティブを振れ!&lt;/tt&gt;&lt;/blockquote&gt;

7. '''OK'''をクリックする。

8. ボタンの姿が変わっているのが見えるはず。'''イニシアティブを振れ!'''という表示になっていて、それをクリックすると、驚くなかれ、なんとチャット・ウィンドウに「イニシアティブを振れ！」と表示されるではないか。

&lt;div style=&quot;color:gray&quot;&gt;That is macro writing at its most basic: you enter some text in the macro, and that text is read by the parser and sent to the chat window when you press the button. &lt;/div&gt;

これはマクロ作成の中でも最も基本的なものだ。つまり、マクロにテキストを入れておくと、パーザーがそのテキストを読み取り、あなたがボタンを押したときにチャット・ウィンドウに送り込む、というものだ。

===もう少し面白いことをやってみる===

&lt;div style=&quot;color:gray&quot;&gt;&quot;Roll for Initiative,&quot; though scary when your GM utters it, is not all that ''interesting'' a macro. You probably thought, &quot;why wouldn't I just type that in chat?&quot; And in fact, the answer is, &quot;you probably would.&quot; So let's do something more interesting, and more in keeping with why we're using MapTool in the first place (after all, we're not here to write programs - we're here to play games): we're going to add some ''macro commands'' to the macro, in addition to just plain text. Macro commands are special instructions that, when read by the parser, tell it to do something more than just print text in the chat window, like roll some dice or calculate a value.&lt;/div&gt;

GMに「イニシアティブを振れ」と言われるのは恐ろしいが、マクロとして'''面白い'''かというと、決してそんなことはない。たぶんあなたはこう考えているだろう。「チャットでそう書けばいいんじゃないの？」と。そして事実、その質問に対する答えは「十中八九そうするだろうね」だ。だからもうちょっと手ごたえがあって、MapToolを使うべき理由と関係していることをやろう（だいたい私たちがこうしているのはプログラムを書きたいからではなく、ゲームをプレイしたいからだ）。これからこのマクロにいくつかの''マクロ・コマンド''を付け加えて、プレーンテキスト以外のものを入れる。マクロ・コマンドは特殊な命令であり、それを読み込んだパーザーに対して、チャット・ウィンドウにテキストを出力する以外のことをするように指図する。例えばダイスを振ったりとか、値を計算したりといった具合に。

&lt;div style=&quot;color:gray&quot;&gt;Macro commands must ''always'' be enclosed in square brackets (e.g, [''macro command'']) or curly braces (e.g., {''macro command''}). Enclosing them in this fashion is what clues the parser in that a command is coming - otherwise, it will treat the command just like any other text, and print it in chat. &lt;/div&gt;

マクロ・コマンドは''必ず''大カッコか（例えば、[''macro command''] ）、中カッコで（{''macro command''}）くくっておかなければならない。こうすることでパーザーはコマンドが来たことを検知できる。そうしておかないと、コマンドを他のテキストと同じものだと思って、そのままチャット・ウィンドウに表示してしまう。

====ダイスを振ってみる====

[[Image:Macro-editor-rolldice.png|thumb|テキストと基本的なダイス 1d20+7 を持つマクロ]]

&lt;div style=&quot;color:gray&quot;&gt;This is a simple macro that's going to automatically roll some dice, and add a number to that roll, before displaying the whole thing in the chat window. &lt;/div&gt;

これは、いくつかのダイスを振って、自動的にその出目を合計してからチャット・ウィンドウに表示するという、シンプルなマクロだ。

&lt;div style=&quot;color:gray&quot;&gt;1. Create a new macro (this can be created anywhere you like - on a token, in the campaign panel, or in the global panel), and open the edit dialog (remember, you do that by right-clicking on the button labeled '''(new)'''). &lt;/div&gt;

1. 新しいマクロを作り（好きな場所に作っていい。トークン、キャンペーン・パネル、グローバル・パネルのどの上ででも）、編集ダイアログを開く（覚えてるかな。'''(new)'''というラベルのボタンの上で右クリックするんだ）

&lt;div style=&quot;color:gray&quot;&gt;2. In the '''Label''' field, call the macro something like &quot;Attack Roll&quot; or &quot;Dice Roll&quot;&lt;/div&gt;

2. '''Label'''フィールドに名前を入れる。&quot;攻撃ロール&quot;とか&quot;ダイスロール&quot;とか。

&lt;div style=&quot;color:gray&quot;&gt;3. In the '''Command''' area, enter:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll is [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;&lt;/div&gt;

3. '''Command'''エリアの中に、次のように入力する：

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;私の攻撃ロールは [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;4. Click '''OK'''. You should see a button labeled with whatever you chose in Step 2, above. When you click it, you'll see something like the following appear in chat:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;Chris: My attack roll is &lt;font style=&quot;background-color:lightgray;&quot;&gt;8&lt;/font&gt;!&lt;/blockquote&gt;&lt;/div&gt;

4. '''OK'''をクリックする。ステップ2でつけた名前がボタンについているのが見えるはずだ。これをクリックすると、こんな感じにチャット・ウィンドウに表示されるはずだ。

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;Chris: 私の攻撃ロールは &lt;font style=&quot;background-color:lightgray;&quot;&gt;8&lt;/font&gt;!&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;What has happened is that MapTool read through the contents of the macro, and when it got to the section '''[1d20+7]''', it knew to:&lt;/div&gt;

MapTool がマクロの中身を読み、'''[1d20+7]'''の所まで来ると、こういう風に理解する：

&lt;div style=&quot;color:gray&quot;&gt;
# Roll a 20-sided die (or, in reality, choose a random number between 1 and 20), and
# Add 7 to that result, and
# Display the results in the chat window, inserted into the text in the right place
&lt;/div&gt;

# 20面ダイスを振り（実際には、1から20までの値をランダムに選ぶ)
# その出目に7を足し
# その結果をテキスト内の適切な場所に挿入して、チャット・ウィンドウに表示する。

&lt;div style=&quot;color:gray&quot;&gt;You'll see that the number 8 has a gray background. If you hover over that number, a &quot;tooltip&quot; will pop up showing how that number was reached. In this case, I managed to roll a 1 on the 1d20 (bummer! a critical fumble!)  If you don't see this tooltip, check your [[MapTool Preferences#Chat]] settings, specifically '''Use ToolTips for Inline Rolls'''.&lt;/div&gt;

8という数字の背景が灰色になっていることに気づくだろう。その上にマウスポインタを持ってくると、&quot;tooltip&quot;がポップアップして、その値がどうやって得られたのかを表示してくれる。今回の場合、私は1d20で1の目を出したわけだ（ぎゃあ！クリティカル・ファンブルじゃないか！）。このtooltipが表示されない場合、[[MapTool Preferences#Chat]]の設定を確認して欲しい。特に'''Use ToolTips for Inline Rolls'''のところを。

&lt;div style=&quot;color:gray&quot;&gt;Also, you probably won't see the name &quot;Chris&quot;, unless your name happens to be Chris. That part of the chat output is just indicates who &quot;said&quot; that particular bit of text; if it was a token, it would have the token's picture and name instead of boring old &quot;Chris.&quot;&lt;/div&gt;

また、おそらく&quot;Chris&quot;という名前も表示されていないはずだ。あなたが&quot;Chris&quot;という名前でない限りはね。チャット出力のこの部分は、誰がその文字列を「言った」のかを表している。トークンから出たものなら、面白くもない&quot;Chris&quot;なんて文字じゃなくて、そのトークンの画像と名前が表示される。

====数字だけでは面白くない====

&lt;div style=&quot;color:gray&quot;&gt;Macro commands can work with numbers and with text -- you can manipulate ''strings'' (that is, collections of alphanumeric characters) as well using the MapTool macro language. Say, for instance, you wanted to roll your attack, but wanted to enter the name of your target so that it showed up in chat.&lt;/div&gt;

マクロ・コマンドは数字と文字とを組み合わせることができる。つまり、MapToolのマクロ言語を使えば、''文字列''を操作できるということだ（ちなみに文字列というのは英数字の並びのことだ）。例えば、攻撃のダイスを振るときに、その攻撃対象の名前を入力して、チャット・ウィンドウに表示させることもできるということだ。

[[Image:Macro-editor-basiccommands.png|thumb|基本的なダイス・コマンドと''target''と言う名前の変数を持つマクロ]]

[[Image:Prompt-undeclared-variable.png|thumb|&quot;未定義変数&quot;を入力するためのプロンプト]]

&lt;div style=&quot;color:gray&quot;&gt;What you can do is edit your Attack Roll macro to look like this:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;&lt;/div&gt;

あなたがやるべきなのは、攻撃ロール・マクロを次のように編集することだ：

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;私の [target] に対する攻撃ロールは [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;When you run this macro, though, suddenly a window pops up in your face demanding a &quot;Value For target.&quot; What happened?&lt;/div&gt;

このマクロを実行すると、突然目の前にウィンドウが現れて、&quot;Value for target&quot;を入力しろと言ってくる。いったい何が起きたんだろうか？

&lt;div style=&quot;color:gray&quot;&gt;Well, when MapTool looked at that macro, it saw a macro command that just says '''[target]'''. MapTool assumes that any word ''inside'' a macro command that is ''not'' enclosed in quotes is actually the name of a ''variable'' (in other words, a value that might change). &lt;/div&gt;

Maptoolがこのマクロを読んでいるときに、'''[target]'''とだけ書いてあるマクロ・コマンドを見つけたんだ。MapToolは、マクロ・コマンドの''中''にあって引用符で囲まれていない文字列を''変数名''だと解釈する（変数の値は変化するかも知れない）。

&lt;div style=&quot;color:gray&quot;&gt;MapTool also noted that nowhere in that macro do we say ''what'' the variable ''target'' happens to equal. Programming languages call this sort of situation an ''undeclared variable'' (in other words, you never declared what it equaled). Since MapTool has no way of knowing what ''target'' should be, it asks! If you type a name, number, or pretty much anything in that popup window, MapTool will take that information, assign it to the variable ''target'', and finish the macro. &lt;/div&gt;

さらにMapToolは、このマクロの中にはこの''target''の値が''何''と等しいのかが書いていないことにも気づく。プログラム言語の世界では、こういう状況のことを''未定義変数''という（要は、その変数と等しいものが何かを宣言していないということだ）。MapToolはこの''target''がどんな値をとるべきかを知る手段がないので、質問する！ あなたがこのポップアップ・ウィンドウに名前、数字、あるいは他の何かを入力すると、MapToolはその情報を拾って、''target''変数の値に割り付け、そしてマクロを終える。

&lt;div style=&quot;color:gray&quot;&gt;Go ahead and type &quot;Nasty Orcses&quot; (you can leave off the quotes) in the box, and hit '''OK'''. You should see in the chat window something like:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;&lt;blockquote style=&quot;border:1px solid gray;&quot; width:50%;&gt;Chris: My attack roll against &lt;font style=&quot;background-color:lightgray;&quot;&gt;Nasty Orcses&lt;/font&gt; is &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt;!&lt;/blockquote&gt;&lt;/div&gt;

さっそくボックスの中に&quot;Nasty Orcses&quot;と入力して（引用符は入れなくていい）、'''OK'''をクリックしてみよう。チャット・ウィンドウにこんな風に表示されているはずだ：

&lt;blockquote style=&quot;border:1px solid gray;&quot; width:50%;&gt;Chris: 私の &lt;font style=&quot;background-color:lightgray;&quot;&gt;Nasty Orcses&lt;/font&gt; に対する攻撃ロールは &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt;!&lt;/blockquote&gt;


&lt;div style=&quot;color:gray&quot;&gt;Once again, the parser read through the text and macro commands you put inside the macro, and in the places where a macro command was indicated (by the square brackets, remember), MapTool substituted the appropriate information.&lt;/div&gt;

ここでも、あなたがこのマクロの中に書き込んだテキストとマクロ・コマンドをパーザーが解釈し、マクロ・コマンドの部分（大カッコで囲まれている箇所だ）を、適切な情報で置き換えている。

==マクロ内で変数を使う==

&lt;div style=&quot;color:gray&quot;&gt;We've seen in a couple of the examples some use of variables (like {{code|target}} in the example above) in a macro, but we haven't gone into the process too deeply yet. However, variables, and their use, is really the core of macro writing, so it would be remiss of me to leave it go.&lt;/div&gt;

これまでに変数を使ったマクロの例（先ほどの{{code|target}}などのような）をいくつか見てきたが、その処理についてはまだ深入りしてこなかった。だが、変数とその使い方は、マクロ作成の本当の核心部分なので、これを解説しないで済ませてしまえば、怠慢と言われても仕方ないだろう。

===変数とは何か？===

&lt;div style=&quot;color:gray&quot;&gt;If you're familiar with programming at all, you will know this already, but if you're just stepping into this stuff cold, the simple definition of a ''variable'' in terms of the macro language is:&lt;/div&gt;

プログラミングに慣れている人ならとっくに知っているはずのことだが、新しく足を踏み入れたばかりの人のために説明すると、マクロ言語における''変数''を簡単に言うと：

:'''A variable is a value that might change (i.e., vary) based on a token property, a calculation, or another macro command'''

:'''変数とは、トークンのプロパティ、計算結果、他のマクロ・コマンドなどによって変化する（さまざまな値をとる）ことのある数のことである'''

&lt;div style=&quot;color:gray&quot;&gt;Since the value of a variable might change, we have to give it a name (which is called ''declaring'' the variable - you declare that &quot;this variable exists!&quot;) in order to talk about it. Then, whenever we need to use whatever value the variable has ''at that time'', we just put its name in the macro command, and MapTool will substitute the appropriate value at that time. &lt;/div&gt;

変数の値は変化することがあるので、それについて話すためには、名前をつける必要がある（これを変数の''宣言''と言う。「この変数は存在するんだ！」と宣言するわけだ）。それから、その変数が''その時点で''とっている値を使うために、その名前をマクロ・コマンドに書いておく。MapToolはその名前をその時点での適切な値に置き換える。

&lt;div style=&quot;color:gray&quot;&gt;Think of it this way: if the value of a dice roll could be anything between 1 and 20, for example, you can't just enter 19 wherever you need to use that dice roll - it could be 19, or 2, or 7, or whatever. So instead, you'd want to say &quot;whatever this dice roll is, put that number here.&quot;&lt;/div&gt;

こういう風に考えて欲しい。例えば、あるダイスロールが１から２０までの値をとりうるのなら、ダイスを振る必要があるときに、そこに必ず１９を入れればいいというわけにはいかない。それが１９以外の２、７、などの値でも同じだ。だからそうする代わりに、「ダイスロールの結果がどうであれ、その出目をここに入れろ」と書きたいということになる。

:'''Note''': that doesn't mean that MapTool will substitute the ''correct'' value for ''your'' needs; it means it will substitute the value corresponding to that variable at that time. So if your program has a mistake in it, the value might end up being wrong - but MapTool doesn't understand &quot;wrong,&quot; it just understand &quot;this is what it says right now.&quot; 

:'''注意''':ただし、これは必ずしもMapToolが''あなたにとって''正しい値に置き換えてくれるということではない。ただ、その時点でその変数と結びついた値に置き換えられるだけだ。もしあなたの書いたプログラムに間違いがあったなら、変数は正しい値をとらないだろう。しかし、MapToolにはその値が「間違っている」ことが分からない。単に「今はそういう値なんだ」と思うだけだ。

===変数への代入===

&lt;div style=&quot;color:gray&quot;&gt;When you want to give a variable a value, this is called &quot;assigning&quot; a value to the variable. The &quot;asignment operator&quot; in MapTool is the equals sign ( = ). That sounds fancy, but it just means that you use an equals sign to tell MapTool that a particular variable has a particular value. An example of a variable assignment is &lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:myHP = 30]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

変数に値を与えることを、その変数に値を「代入する」と呼ぶ。MapToolでは、この「代入演算子」は等号（=）だ。少々洒落すぎているように見えるかもしれないが、この等号を使って、特定の変数に特定の値を代入したことをMapToolに伝えることができる。以下は変数代入の例だ。

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:myHP = 30]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;As you have probably figured out, what that line does is first ''declare'' a variable called {{code|myHP}} exists, and then ''assign'' it the value {{code|30}}. That is variable assignment at its root - ''some variable'' equals ''some value''. &lt;/div&gt;

おそらくもう気が付いていると思うが、ここでは{{code|myHP}}という名前の変数が存在することを''宣言''しており、それからその変数に{{code|30}}という値を''代入''している。これが変数への代入の基本的な考え方だ。つまり、''何らかの変数''イコール''何らかの値''ということだ。

&lt;div style=&quot;color:gray&quot;&gt;You'll remember from the example where you were prompted for the name of a target that you can use a variable name without assigning a value to it. If you do that, you have declared that the variable exists, but no value is assigned, so MapTool asks you (or whoever runs that macro) for a value. The lesson learned is that a variable needs to have a value assigned to it for the macro to finish, but you don't always have to enter it ahead of time - sometimes you want to get ''input'' from the user.&lt;/div&gt;

以前に、target の名前を入力した例を覚えていると思う。値を代入しなくても変数として使える例だ。これを行う場合、つまりある変数が存在することは宣言するが、その変数に値を代入しない場合、MapTool（や、実行されているマクロ）はその変数の値を尋ねてくる。ここで理解しておくべきなのは、マクロが動作を完了するには、変数に値が代入される必要があるが、その値を最初から代入しておく必要はない、ということだ。ユーザーに入力を求めることにしてもいい。

&lt;div style=&quot;color:gray&quot;&gt;Variable assignments are the only way to set or change the value of a variable; no variables are modified in-place. If you're using a function to change the value of a variable the function returns the content of the modified variable which must be assigned to the existing variable or a new variable.&lt;/div&gt;

変数に値をセットしたり、その値を変えることのできる唯一の手段が代入だ。変数の値をその場で変更することはできない。ある変数の値を変更するために関数を利用するのであれば、その関数が返した値は、既存の変数か新規の関数に代入しなければならない。

===いつ代入するのか===

&lt;div style=&quot;color:gray&quot;&gt;MapTool processes each macro command in a macro in order, starting at the top. Therefore, unless you want MapTool to pop up a window asking for input from the user, you have to assign a value to a variable ''before'' you use it! For example, in the macro command:&lt;/div&gt;

{{code|The hit does [damage] [damageType] damage, leaving you with [remainingHP] hit points!}}

MapToolは一つのマクロの中にあるマクロ・コマンドを先頭からひとつずつ実行していく。従って、ポップアップ・ウィンドウを出してユーザーからの入力を要求したいのでもない限り、変数の値はマクロを実行する''前に''代入しておかなければならない。例えば、以下のマクロ・コマンドでは：

{{code|その攻撃は [damage]点の [damageType] ダメージを与え, あなたの残りヒットポイントは [remainingHP] 点になった!}}


&lt;div style=&quot;color:gray&quot;&gt;Unless you want MapTool to prompt the user for the variables {{code|damage}}, {{code|damageType}}, and {{code|remainingHP}}, you'll want to make sure to give them a value ''before'' you get to that line. Maybe something like:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote style=&quot;background-color:lightgray;&quot;&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:damage = 1d6+4]
[h:damageType = &quot;fire&quot;]
[h:remainingHP = 30 - damage]
The hit does [damage] [damageType] damage, leaving you with [remainingHP] hit points!
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

{{code|damage}}、{{code|damageType}}、{{code|remainingHP}}といった変数の値をユーザーに入力させたいのでないのなら、そこよりも''前の''行で値を与えておく必要がある。たぶんこんな風に：

&lt;blockquote style=&quot;background-color:lightgray;&quot;&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:damage = 1d6+4]
[h:damageType = &quot;fire&quot;]
[h:remainingHP = 30 - damage]
その攻撃は [damage]点の [damageType] ダメージを与え, あなたの残りヒットポイントは [remainingHP] 点になった!
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;As you can see, we've made three variable assignments ''before'' the variables are used in the line about the hit. We've assigned the value of a dice roll of 1d6+4 to the variable {{code|damage}}, the value {{code|&quot;fire&quot;}} to the variable {{code|damageType}}, and the value of the operation {{code|30 - damage}} to the variable {{code|remainingHP}}. &lt;/div&gt;

ご覧の通り、ここでは三つの変数について、攻撃が命中してその変数が使われる''前に''代入を行っている。{{code|damage}}には1d6+4、{{code|damageType}}には{{code|&quot;fire&quot;}}、そして{{code|remainingHP}}には{{code|30 - damage}}という計算の結果を与えている。

&lt;div style=&quot;color:gray&quot;&gt;If you look carefully, you'll see that we've even used one variable in assigning a value to another variable: the value of the variable {{code|damage}} is used when we assign a value to {{code|remainingHP}} - so variables can be used to set and manipulate other variables. &lt;/div&gt;

注意してみると、ある変数に代入する値に別の変数を使っていることが分かるだろう。変数{{code|remainingHP}}の値を決めるときに{{code|damage}} の値が使われている。つまり、変数は他の変数にセットされる値を決めたり、操作するために使うことができる。

===変数の命名規則===

&lt;div style=&quot;color:gray&quot;&gt;There are two rules to remember when making up variables:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
# No spaces: variable names can't have spaces in them, so you can't use the variable {{code|Hit Points}} - it has to be {{code|HitPoints}}. 
# Special Variables: there are several &quot;special variables&quot; that MapTool has reserved - which means you can't use them for other purposes than what MapTool already reserves them for. You can usually tell a special variable because it has a period it's name, like {{code|[[roll.count]]}} or {{code|[[macro.args]]}}. We'll get into those in another guide, but for now, just know that you can't create a variable with the same name as any of the variables on the [[:Category:Special Variable|Special Variables]] page.
&lt;/div&gt;

変数の名前をつけるには、以下の二つの規則を守らなければならない：

# スペース禁止： 変数名はスペースを含んではならない。従って、{{code|Hit Points}}という変数名は使えない。使うなら{{code|HitPoints}}とすること。
# 特殊な変数名： MapToolがあらかじめ予約している&quot;特殊な変数名&quot;がある。特殊変数の名前には、{{code|[[roll.count]]}} や {{code|[[macro.args]]}}というように、たいていピリオドがついているのですぐに見分けがつく。これについては別のガイドで詳しく説明するが、とりあえず今は、[[:Category:Special Variable|Special Variables]]にあるものと同じ名前の変数は作れないと覚えて欲しい。

==ゲームのレベルを上げてみる==

&lt;div style=&quot;color:gray&quot;&gt;The examples above show very basic macro use: printing text to the chat window at the click of a button; making a simple dice roll inside a macro; and even getting some simple input from the user in order to complete a macro.&lt;/div&gt;

これまでに挙げてきた例は、マクロの使い方の中でもとても基礎的なものだ。ボタンをクリックするとチャット・ウィンドウにテキストを表示するとか、マクロ内で簡単なダイス振りを行うとか、マクロの動作に必要な入力をユーザーに求めるといったものだ。

&lt;div style=&quot;color:gray&quot;&gt;Now, let's step it up: we'll play with some formatting options, change token properties, and look at some basic looping (doing the same thing over and over again) and branching (doing different things based on some condition or situation). &lt;/div&gt;

さて、それではステップアップと行こう。フォーマット・オプションや、トークンのプロパティの変更、それに繰り返し処理（同じ処理を何度も繰り返すこと）と分岐処理（ある条件や状況に応じて異なる処理をすること）の基本を見てみるとしよう。

===フォーマット・オプション===

&lt;div style=&quot;color:gray&quot;&gt;Macro output (like any chat output) can be formatted using basic HTML tags, as well as some options built into MapTool. We'll first look at the HTML briefly, and then at a couple [[:Category:Display Roll Option|Display Roll Options]].&lt;/div&gt;

マクロの出力は（チャットの出力と同じように）簡単なHTMLタグや、MapToolに組み込まれているいくつかのオプションを使ってフォーマットすることができる。まずはHTMLについてざっと見てから、[[:Category:Display Roll Option|Display Roll Options]]をいくつか見てみよう。

====展開ロール====

&lt;div style=&quot;color:gray&quot;&gt;In MapTool 1.3.b54, the default way to output the result of a dice roll or calculation is just to print out the total or final value. So if you rolled 1d20+7, what will appear in chat is just the final result, with the tooltip (remember when you hovered your mouse over the number) showing the mathematical breakdown. &lt;/div&gt;

MapTool 1.3.b54 では、ダイスロールや計算結果の出力フォーマットのデフォルトは、単に合計値や最終的な値のみを出力するだけになっている。つまり1d20+7を振ると、チャット・ウィンドウには最終的な値と、（その上にマウスポインタを持ってくると）計算式を見せるtooltipだけが表示される。

&lt;div style=&quot;color:gray&quot;&gt;If you wish, you can instruct MapTool to print out the full math breakdown for a roll too, by using a Roll Formatting Option - specifically, the '''Expanded Roll'''.&lt;/div&gt;

もし必要なら、Roll Formatting のオプションを指定して、Maptoolに対して計算過程を全て表示するよう指示することもできる。これを特に'''展開ロール'''という。

&lt;div style=&quot;color:gray&quot;&gt;Think of a formatting option as a switch telling MapTool how to treat the results of a roll. To get the expanded form, edit your attack roll macro to show:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [e:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;&lt;/div&gt;

フォーマット・オプションとは、ダイスを振った結果をどう扱うのかをMapToolに指示するためのものだと考えてみて欲しい。展開した形式で出力させたければ、攻撃ロール・マクロを以下のように修正すればいい：

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;私の [target] に対する攻撃ロールは [e:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;Then, when you run it, you'll get something like this in the chat:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;&lt;blockquote style=&quot;border:1px solid gray;width:50%;&quot;&gt;My attack roll against &lt;font style=&quot;background-color:lightgray; &quot;&gt;Nasty Orcses&lt;/font&gt; is &lt;font style=&quot;background-color:lightgray; color:blue;&quot;&gt;« 1d20+7 = 1 + 7 = 8 »&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;

それからこのマクロを実行すると、チャット・ウィンドウにこんな感じで表示されるはずだ：

&lt;div style=&quot;color:gray&quot;&gt;Now you can see the full breakdown of your roll. &lt;/div&gt;

&lt;blockquote style=&quot;border:1px solid gray;width:50%;&quot;&gt;私の &lt;font style=&quot;background-color:lightgray; &quot;&gt;Nasty Orcses&lt;/font&gt; に対する攻撃ロールは &lt;font style=&quot;background-color:lightgray; color:blue;&quot;&gt;« 1d20+7 = 1 + 7 = 8 »&lt;/font&gt;&lt;/blockquote&gt;

====結果ロール====

&lt;div style=&quot;color:gray&quot;&gt;But what if you ''don't'' want anyone to be able to see the breakdown? So far, both options still let everyone see the actual roll. For this, you use the '''Result Roll''' option. Edit your macro to look like this:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;&lt;/div&gt;

ところで、ロールの過程を他の人に''知られたくない''場合にはどうしたらいいだろうか？ 今のところは、どちらのオプションを使っても、全員にロールの結果が見えてしまう。これを行うには、'''結果ロール'''オプションを使えばいい。マクロの内容を以下のように編集する：

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;私の [target] に対する攻撃ロールは [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;And your output will look like this:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;My attack roll against &lt;font style=&quot;background-color:lightgray&quot;&gt;Nasty Orcses&lt;/font&gt; is 11!&lt;/blockquote&gt;&lt;/div&gt;

出力結果はこういう風になる：

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;私の &lt;font style=&quot;background-color:lightgray&quot;&gt;Nasty Orcses&lt;/font&gt; に対する攻撃ロールは 11!&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;Note that there's no gray background behind the number 11, and you can't get a tooltip if you hover over it. The Results Roll option strips out the special formatting, giving you just the plain text. If you wanted to get rid of the highlight behind the words &quot;Nasty Orcses,&quot; you can just change the macro to:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;&lt;/div&gt;

なお、11という数字には背景色がついておらず、その上にマウスポインタを持っていってもtooltipが出てこない点に注意。結果ロールのオプションは特殊なフォーマットを全て削除し、単純なプレーンテキストのみを出力させる。&quot;Nasty Orcses&quot;のハイライトも消したければ、以下のようにすればいい：

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;私の [r:target] に対する攻撃ロールは [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;And the name of the target will be shown without any special highlighting. &lt;/div&gt;

そうすれば、targetの名前にも特殊なハイライトは付かない。

====秘密ロール====

&lt;div style=&quot;color:gray&quot;&gt;Sometimes, you don't want to see any output from the macro - maybe you just want it to show some text, and do the math in the background, without revealing everything. In those cases, you would replace the &quot;r:&quot; or &quot;e:&quot; in the above examples with an &quot;h:&quot;, like in the example below:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
[h:myHP = 30]&lt;br/&gt;
[h:Bloodied = myHP / 2]&lt;br/&gt;
My bloodied value is [Bloodied].&lt;/tt&gt;&lt;/blockquote&gt;
&lt;/div&gt;

時には、自分のマクロの出力内容を他の人に見られたくない場合がある。マクロにはあるテキストだけ表示させて、バックグラウンドで計算をさせ、その全てが分かってしまわないようにする、などだ。こうした場合、上の例にある&quot;r:&quot;や&quot;e:&quot;を&quot;h:&quot;に置き換えればいい。こんな具合に：

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
[h:myHP = 30]&lt;br/&gt;
[h:Bloodied = myHP / 2]&lt;br/&gt;
私の流血度は [Bloodied]です&lt;/tt&gt;&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;The example above is a very simple illustration of how the '''hidden roll''' is useful. In that macro, we're doing three things:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
# Setting the value of the variable ''myHP'' to 30, but telling MapTool to hide this calculation
# Setting the value of the variable ''Bloodied'' to the value of ''myHP'' divided by 2, but telling MapTool to hide this calculation too
# Displaying some text, and inserting the value of ''Bloodied'' in at the end of the text output.
&lt;/div&gt;

上の例は'''秘密ロール'''が役に立つとても簡単な例を挙げてみたものだ。このマクロの中では以下のことをやっている：

# 変数''myHP''に30を入れるが、MapToolにはこれを表示させないようにする。
# 変数''Bloodied''に変数''myHP''を２で割った値を入れるが、この計算も表示しないようにする。
# 変数''Bloodied''の値に置き換えてテキスト出力する

&lt;div style=&quot;color:gray&quot;&gt;
If you run this macro, the output will look like:
&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
My bloodied value is &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

このマクロを実行すると、その出力はこういう風になるはずだ：

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
[h:myHP = 30]&lt;br/&gt;
[h:Bloodied = myHP / 2]&lt;br/&gt;
私の流血度は 15 です&lt;/tt&gt;&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;However, if you ''don't'' use the '''hidden roll''' option, the output would look like:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
&lt;font style=&quot;background-color:lightgray;&quot;&gt;30&lt;/font&gt; &lt;font style=&quot;background-color:lightgray&quot;&gt;15&lt;/font&gt; My bloodied value is &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

もし、'''秘密ロール'''のオプションを''使わない''なら、表示はこういう風になるはずだ：

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
&lt;font style=&quot;background-color:lightgray;&quot;&gt;30&lt;/font&gt; &lt;font style=&quot;background-color:lightgray&quot;&gt;15&lt;/font&gt; 私の流血度は &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;です
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;The extra numbers come from the two calculations ''before'' the line of text. You don't need to see those, so, conveniently, you can hide them!&lt;/div&gt;

余計な数値が２つ表示されているが、これはテキストを出力するよりも''前の行''で行われている計算によるものだ。表示させたくないなら、隠せばいい。便利だね。

====HTMLフォーマット====

&lt;div style=&quot;color:gray&quot;&gt;MapTool macros support formatting using some basic HTML tags. Let's say you wanted to put the name of your target as one line, the attack roll you're making as another, and as a third line, you wanted to add a dice roll for damage. You might edit your Attack Roll macro to look like this:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;I make an attack roll!&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Target&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attack&lt;/b&gt;: [1d20+7]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Damage&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;
&lt;/tt&gt;&lt;/blockquote&gt;
&lt;/div&gt;

MapToolのマクロでは基本的なHTMLタグを使ったフォーマットにも対応している。例えば、標的の名前、攻撃ロール、ダメージ用のロール結果をそれぞれ別にして三行で表示したいのであれば、例の攻撃ロール・マクロをこんな風に編集すればいい：

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;攻撃ロールをするよ！&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;標的&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;攻撃&lt;/b&gt;: [1d20+7]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;ダメージ&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;
&lt;/tt&gt;&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;When you run that macro, your output in chat will look like:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br/&gt;
'''Target''': Nasty Orcses&lt;br/&gt;
'''Attack''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;&lt;br/&gt;
'''Damage''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;7&lt;/font&gt;&lt;br/&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

このマクロを実行すると、出力はこういう風になる：

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br/&gt;
'''標的''': Nasty Orcses&lt;br/&gt;
'''攻撃''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;&lt;br/&gt;
'''ダメージ''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;7&lt;/font&gt;&lt;br/&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;That's just simple formatting - you could put the output in a table, change the font and background colors, change its size...many options are available!&lt;/div&gt;

とても単純なフォーマットだ。必要なら、テーブルにもできるし、背景色を変えたり、文字サイズを変えたりもできる。たくさんのオプションが使えるんだ。

'''NOTE''': If you're handy with HTML, be aware that MapTool supports HTML 3.2 - so things like the &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt; tag should ''not'' be closed - it's &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;, not &lt;nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt;. Additionally, MapTool supports a subset of CSS 1 in the form of in-line styles, and also style sheets in certain instances. More information on the supported CSS tags can be found at [[Supported CSS Styles]].


'''注意'''： あなたがHTMLを上手く使いこなせるのであれば、MapToolでサポートしているのは HTML 3.2 だということに注意して欲しい。つまり、&lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;タグは''閉じない''ということだ。&lt;nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt;ではなく、&lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;と書く。さらに、CSS 1 のインラインstyleといくつかのスタイルシート・インスタンスに対応している。対応しているCSSタグについての情報は[[Supported CSS Styles]]を参照して欲しい。

===トークン・プロパティを使ってみる===

&lt;div style=&quot;color:gray&quot;&gt;So far, we've manipulated some variables that are entered ahead of time, or that MapTool will ask for when you run a macro. We've got a formatted attack macro that lists a target, an attack, and a damage roll. However, we're still either ''hardcoding'' the values into the macro, or having the user put them in themselves every time they're needed. Since RPG characters are not all the same, we'll have to figure out a way to automate some of the numbers, so we can:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
# Make one macro that many people or characters can use
# Minimize how much typing we have to do!
&lt;/div&gt;

ここまで私たちが操作してきた変数は、あらかじめ値が代入されているか、実行時にMapToolが問い合わせをしてくるようなものだった。標的、攻撃、ダメージのロール結果を三行で出すようにしたフォーマット型攻撃マクロも作った。だが、変数の値をマクロの中に''じかに''書いていたり、必要になるたびにユーザーが入力しなければならなかった。だが、RPGのキャラクターはみんな同じものではないので、どうにかしてこれを自動化する方法を考えなければならない。そこでこうすることにする：

# マクロを複数の人やキャラクターに使えるものにする
# 入力の手間を最低限に減らす！

&lt;div style=&quot;color:gray&quot;&gt;As discussed in the [[Introduction to Tokens]], every token carries around with it a personal &quot;character sheet&quot; of sorts, in the form of the token's ''properties''. These properties can be ''referenced'' by a macro - so you can, for instance, write a macro that says &quot;Roll 1d20, and add my character's Dexterity to the roll.&quot; I'm sure you see how this might be useful.&lt;/div&gt;

[[Introduction to Tokens]]の中でも話したとおり、全てのトークンにはそれぞれの「キャラクターシート」のようなものがあり、それをトークンの''プロパティ''として持っている。このプロパティはマクロから''参照''できる。つまり、例えば「1d20を振ってそのキャラクターのDexterityと足した結果を出す」マクロを書くことができるということだ。これがどれだけ便利かは分かってもらえると思う。

====プロパティをセットしてみる====

&lt;div style=&quot;color:gray&quot;&gt;Of course, for token properties to work, we've got to set them up. It's a good thing you read the [[Introduction to Properties]] and created a campaign file for the MapTool RPG [[Sample Ruleset]]!&lt;/div&gt;

当然のことだが、トークン・プロパティが上手く機能するためには、まず最初に設定をしなければならない。あらかじめ[[Introduction to Properties]]を読んで、MapTool RPG[[Sample Ruleset]]用のキャンペーン・ファイルを作っておくといいだろう。

&lt;div style=&quot;color:gray&quot;&gt;The first step is to open up the '''MTRPG.cmpgn''' file (or whatever name you saved it as), and drag a token onto the map (if you don't already have one on there). If you've got no idea what that means, check out the [[Introduction to Mapping]] to learn about making maps and putting tokens on them. Now, follow these steps:&lt;/div&gt;

最初のステップは、'''MTRPG.cmpgn'''（もしくは、あなたが以前にセーブしたファイル名）ファイルを開いて、（もしまだマップ上にトークンがないのなら、）マップ上にトークンをドラッグしてくることだ。何のことだか分からないというのであれば、[[Introduction to Mapping]]を読んで、マップの作成と、その上にトークンを置く方法について調べて欲しい。さて、それでは以下のステップに従う：

&lt;div style=&quot;color:gray&quot;&gt;1. Double click on a token to open the '''Edit Token''' dialog.&lt;/div&gt;

1. トークンをダブルクリックして、'''Edit Token'''ダイアログを開く

&lt;div style=&quot;color:gray&quot;&gt;2. Go to the tab marked '''Properties'''.&lt;/div&gt;

2. '''Properties'''タグを開く

&lt;div style=&quot;color:gray&quot;&gt;3. You'll see a spreadsheet-style list of all the properties in the token that you can edit directly (tokens have other properties that can be edited only with macros, but for now, let's not worry about them!). You should see (if you're using the MTRPG.cmpgn file we set up in [[Introduction to Properties]]):&lt;/div&gt;

3. そこにはスプレッドシート形式の表があって、そのトークンのプロパティのうち、直接編集できるもののリストが載っているはずだ（トークンのプロパティには、他にもマクロでだけ編集できるものがあるが、今はそのことは心配しなくていい）。（もしあなたが[[Introduction to Properties]]で設定したMTRPG.cmpgnを使っているのなら）そこには以下のものが並んでいるはずだ：

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;
 *HitPoints(HP):{Endurance * 6}&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV):{Dexterity}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;4. Click in the cell next to Strength. A cursor will appear, showing that you can type in that cell. Enter a number in that cell as the token's Strength value. I'm going to use 6. &lt;/div&gt;

4. Strength の隣にあるセルをクリックする。カーソルが現れて、セルに入力できるようになる。このセルの中に値を入れると、そのトークンのStrengthの値になる。私は6を入れることにする。

&lt;div style=&quot;color:gray&quot;&gt;5. Repeat step 4 for Dexterity, Intelligence, and Endurance, choosing whatever number you like (I'm going to use 3, 2, and 6, respectively). Remember that ''HitPoints'' and ''Movement'' will be automatically calculated!&lt;/div&gt;

5. Dexterity、Intelligence、Enduranceについても同じようにステップ4を繰り返す。数字は好きに決めていい（私は順に3、2、6と入れることにする）。''HitPoints''と''Movement''は自動的に計算されることに注意。

&lt;div style=&quot;color:gray&quot;&gt;6. Click '''OK'''. You have just manually updated the token's properties. If you double-click on the token, and look at those properties again, you'll see that the numbers you entered are remembered. &lt;/div&gt;

6. '''OK'''をクリックする。これでトークンのプロパティを手作業で編集したことになる。トークンをダブルクリックして再びプロパティを表示してみると、あなたが入れた値が記憶されていることが分かる。

&lt;div style=&quot;color:gray&quot;&gt;You'll also see that now, when you hover your mouse over the token, a little popup appears in the lower right corner of the map, showing the values for the properties you've entered. This popup is called the '''Statsheet''', and is a quick way to look at the token's properties - it's basically a convenient quick-reference &quot;character sheet.&quot;&lt;/div&gt;

さらに、そのトークンの上にマウスポインタを持ってくると、地図の右下に小さなポップアップが表示されて、その中にはあなたが入力したプロパティが出るはずだ。このポップアップは'''Statsheet'''と呼ばれるもので、トークンのプロパティを手早く調べることができる。これはそのトークンの「キャラクターシート」をさっと参照するのに便利だ。

====マクロ内部でトークン・プロパティを参照する====

&lt;div style=&quot;color:gray&quot;&gt;Now that we've configured some token properties, let's use them in a macro. For our first macro, we're going to roll 1d20, and instead of adding 7, we're going to add the token's '''Strength'''. &lt;/div&gt;

さて、トークン・プロパティの設定もしたので、マクロからそれを利用してみよう。最初のマクロとして、1d20を振った後、それに7を足すのではなく、そのトークンの'''Strength'''を足すことにしよう。

&lt;div style=&quot;color:gray&quot;&gt;1. Open up your Attack Roll macro.&lt;/div&gt;

1. あなたの攻撃ロール・マクロを開く

&lt;div style=&quot;color:gray&quot;&gt;2. In the lower left corner, make sure the box '''Apply to Selected Tokens''' is checked (otherwise, the macro won't know which token's Strength to use!)&lt;/div&gt;

2. 左下の隅にある'''Apply to Selected Tokens'''のチェックボックスをチェックしておく（そうでないと、どのトークンの'''Strength'''を使っていいのか分からないからね）

&lt;div style=&quot;color:gray&quot;&gt;3. Edit your macro to look like this:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;I make an attack roll!&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Target&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attack&lt;/b&gt;: [1d20+Strength]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Damage&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;&lt;/tt&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

3. マクロを以下のように編集する：

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;攻撃ロールをするぞ！&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;標的&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;攻撃&lt;/b&gt;: [1d20+Strength]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;ダメージ&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;You'll note I replaced the 7 with the word &quot;Strength.&quot; Since ''Strength'' is not in quotes, MapTool will know that you mean it to be a variable, and it will look on the ''current token'' (that is, the token that is selected) for a property called ''Strength''. If it doesn't find it (or if the property has never been set), it will prompt you for it (just like you were prompted for the value of ''target''). If it ''does'' find it, MapTool will put the value of ''Strength'' into the macro when it runs. &lt;/div&gt;

7を&quot;Stregth&quot;という単語で置き換えたのが分かるだろう。この''Strength''は引用符で囲まれていないので、MapToolにはこれが変数であるということが理解でき、''current token''（つまり現在選択しているトークンのことだ）の中の''Strength''という名前の変数を探してくれる。もし見つからなかったら（あるいはそのプロパティが一度も設定されていなければ）、MapToolは入力を要求してくるだろう（前に''target''の入力を求めてきたときのようにね）。もしその変数が''見つかった''ら、マクロをを実行するときに、そのトークンの''Strength''の値を入れてくれる。

&lt;div style=&quot;color:gray&quot;&gt;4. Select your token, and run the macro by clicking the button. The output will look something like:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br&gt;
Target: Nasty Orcses&lt;br&gt;
Attack: &lt;font style=&quot;background-color:lightgray;&quot;&gt;27&lt;/font&gt;&lt;br&gt;
Damage: &lt;font style=&quot;background-color:lightgray;&quot;&gt;6&lt;/font&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

4. トークンを選択してから、マクロのボタンをクリックして実行する。こういう具合に出力されるはずだ：

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
攻撃ロールをするぞ！&lt;br&gt;
標的: Nasty Orcses&lt;br&gt;
攻撃: &lt;font style=&quot;background-color:lightgray;&quot;&gt;27&lt;/font&gt;&lt;br&gt;
ダメージ: &lt;font style=&quot;background-color:lightgray;&quot;&gt;6&lt;/font&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;The important thing to note is that if you hover over the attack roll result, the tooltip will now say something like ''&amp;laquo; 1d20 + Strength = 17 + 10 &amp;raquo;'' indicating that the value being plugged in to the dice roll is the property ''Strength''.&lt;/div&gt;

マウスポインタをロールの結果の上に持ってくると、tooltipは''&amp;laquo; 1d20 + Strength = 17 + 10 &amp;raquo;''という表示になって、マクロが''Strength''の値を取り出していることが分かる点に注意して欲しい。

====マクロを使ってトークンのプロパティを変更する====

&lt;div style=&quot;color:gray&quot;&gt;Token properties can also be changed using a macro. Suppose we want to reduce the token's hit points after an enemy hit the character. You can manually edit the token and change the value in the ''HP'' property, or, you can create a macro that subtracts the amount of damage from the value of ''HP''. Here's how:&lt;/div&gt;

トークンのプロパティはマクロを使って変更することもできる。例えば、敵の攻撃がキャラクターに命中した後で、そのトークンのヒットポイントを減らしたいと考えてみる。トークンを手で編集してその''HP''プロパティの値を変えることもできる。だが、''HP''の値からダメージの値を引いてやるマクロを作ることもできる。以下はそのやり方だ：

&lt;div style=&quot;color:gray&quot;&gt;1. Create a new macro on the '''Campaign''' panel.&lt;/div&gt;

1. '''Campaign'''パネルの上に新しいマクロを作る

&lt;div style=&quot;color:gray&quot;&gt;2. In the '''Label''' field, enter &quot;Damage&quot;.&lt;/div&gt;

2. '''Label'''フィールドに&quot;Damage&quot;と入力する

&lt;div style=&quot;color:gray&quot;&gt;3. In the '''Command''' field, enter:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
Aarrgh! I'm hit! I have [HitPoints = HitPoints - damage] hit points left. &lt;/tt&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

3. '''Command'''フィールドに、以下のように入力する：

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
ぎゃーす！ やられた！ 俺のヒットポイントはもう [HitPoints = HitPoints - damage] よ &lt;/tt&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;4. Check the box '''Apply to Selected Tokens''' (in the lower left corner).&lt;/div&gt;

4. '''Apply to Selected Tokens'''のチェックボックスをチェックする（左下の隅にある）

&lt;div style=&quot;color:gray&quot;&gt;5. Click '''OK'''. When you run the macro, you will be prompted for a value to put in the variable ''damage''. I put in the number 7. The output will look something like this:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
Aarrgh! I'm hit! I have &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt; hit points left
&lt;/blockquote&gt;
&lt;/div&gt;

5. '''OK'''をクリックする。このマクロを実行すると、''damage''の値を入力するよう要求される。私は7と入れた。そうするとこういう出力が得られるはずだ：

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
ぎゃーす！ やられた！ 俺のヒットポイントはもう &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt; よ
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;And, if you double click on the token, you will see that the property ''HP'' is now 23. What this macro did was:&lt;/div&gt;

そして、このトークンをダブルクリックすると、そのプロパティ''HP''の値が23になっていることが分かる。マクロはこんな風に動作している：

&lt;div style=&quot;color:gray&quot;&gt;
# Prompt the user for a value for ''damage'' (in this example, I entered 7)
# Retrieve the value of ''HitPoints'' from the token (in this example, the value is 30, because it is equal to Endurance * 6)
# Subtract the value of ''damage'' from the value of ''HitPoints'' (30 - 7, resulting in 23)
# Set the value of ''HitPoints'' (originally 30) to the newly calculated total (23)
# Output the text and the new value of ''HitPoints'' to chat
&lt;/div&gt;

# ユーザーに''damage''の値を入力させる（この例では、私は7を入れた）
# トークンの''HitPoints''値を取り出す（この例では30になっているが、これはEndurance*6 で求められているからだ）
# ''damage''の値を''HitPoints''の値から引く （30-7で、23になる）
# トークンの''HitPoints''プロパティを、元の値(30)から計算後の新しい値(23)に書き換える
# テキストと''HitPoints''の新しい値をチャット・ウィンドウに表示する

===文字列の連結===

&lt;div style=&quot;color:gray&quot;&gt;An essential ability to master when writing macros is the ability to assemble ''strings'' - that is, collections of alphanumeric characters that are then manipulated or sent to chat. Frequently, you'll want to construct a string from some text that is always the same (&quot;hardcoded&quot; text) and text that can change (text that is the value of a variable, in other words). The construction of a string is often called &quot;concatenation,&quot; but it just means &quot;building a long string out of multiple short pieces.&quot;&lt;/div&gt;

マクロを作成するときに必須となるのは、''文字列''、つまり英数字の連結したもの、を組み立てる能力だ。組み立てられた文字列には操作が行われたり、チャット・ウィンドウに送り込まれたりする。マクロを作る際には、変化しない（マクロ内に「埋め込まれている」テキスト）文字列や、変化する文字列（別の言い方をすると、変数の値となっているテキスト）を使うことが頻繁にあるだろう。文字列の組み立て作業のことをしばしば「連結」と呼ぶが、これは単に「より短い文字列から長い文字列を作りだす」という意味でしかない。

&lt;div style=&quot;color:gray&quot;&gt;There are two ways to do this in a macro - outside of a macro command, and inside of a macro command.&lt;/div&gt;

マクロでこれを行うには二つの方法がある。マクロ・コマンドの外で行うものと、マクロ・コマンドの中で行う者だ。

====コマンドの外で連結する====

&lt;div style=&quot;color:gray&quot;&gt;The basic way a macro works is this:&lt;/div&gt;

マクロは基本的に以下のように動作する：

&lt;div style=&quot;color:gray&quot;&gt;
# The parser reads through the whole macro, and separates the macro commands from the plain text
# The parser diverts those macro commands to the appropriate places to be processed (so, numbers are added up, dice are rolled, etc.)
# The processed commands are sent ''back'' to the parser, which substitutes the ''results'' of those commands in the place where each command was.
# The whole mess - plain text, and the results of the commands (now sitting in place of the actual commands) is sent to the chat window.
&lt;/div&gt;

# パーザーがマクロ全体を読み込み、プレーンテキストとマクロ・コマンドとを切り分ける
# パーザーはそれぞれのマクロ・コマンドを適切な処理を行うべき場所に分岐させる（その先で、数値を合計したり、ダイスを振ったりする）
# 処理されたコマンドはパーザーへと''送り返され''、それぞれのマクロ・コマンドをその''結果''で置き換える
# プレーンテキストとコマンドの結果（もともとのコマンドの位置に置かれている）は一緒くたにされて、チャット・ウィンドウに送り込まれる

&lt;div style=&quot;color:gray&quot;&gt;So, when you want to display the result of a command along with some text (for instance, you want to print the word &quot;Attack:&quot; and then next to it print the result of a 1d20 roll) in a macro, the easiest way is to just insert a command in the right place in your text, like so:&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
Attack: [1d20]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

つまり、一つのマクロの中で、コマンドの結果とテキストとをいっしょに表示させたいのなら（例えば、&quot;攻撃:&quot;という単語の後に1d20の結果を表示するとか）、最も簡単な方法は、テキスト上の適切な位置にマクロを置けばいい。こんな具合に：

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
攻撃: [1d20]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;The parser will read that whole thing, send off the command {{code|[1d20]}} to be processed, and when it gets that result back, plug it in in place of the command, and send it off to chat. The result will be something like &quot;Attack: 17.&quot; &lt;/div&gt;

パーザーはこれ全体を読み込んで、コマンド{{code|[1d20]}}を実行させ、その結果を受け取って、コマンドのあった位置に突っ込んでから、チャットへ送り込む。結果はだいたい「攻撃: 17」みたいな感じになる。

&lt;div style=&quot;color:gray&quot;&gt;That's the most straightforward way to send text to chat - just put the variables you want displayed in the right place in the text, and they will be shown in the chat window.&lt;/div&gt;

これはテキストをチャットに送り込むときの最も真っ正直なやり方だ。つまり、表示したい変数をテキスト上の表示したい位置に置く。するとそれがチャット・ウィンドウに表示される。

====コマンドの中で連結する====

&lt;div style=&quot;color:gray&quot;&gt;Sometimes, though, you need to use strings ''inside'' of the square brackets. In that case, putting them together is a little different. First of all, within square brackets, you need to use single or double quotes to surround something you want to be treated as a string. Otherwise, MapTool will think you want each word to be a variable! For example:&lt;/div&gt;

とは言え、大カッコの''内側''で文字列を使わなければならないこともある。こうした場合、文字列の置き方が少し違ってくる。まず、大カッコの中では、文字列として扱われたいものはダブルクォートかシングルクォートで括らなければならない。そうしておかないと、MapToolはそれぞれの単語が変数なのだと思ってしまう。例えばこうだ：

&lt;div style=&quot;color:gray&quot;&gt;
'''Correct String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = &quot;This is a string&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

'''Incorrect String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = This is a string]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

'''正しい文字列'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = &quot;これは文字列です&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

'''誤った文字列'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = これは文字列です]
&lt;/source&gt;
&lt;/blockquote&gt;


&lt;div style=&quot;color:gray&quot;&gt;Remember - outside of square brackets, no need for quotes. Inside? QUOTES.&lt;/div&gt;

覚えておこう。カッコの外側ではクォート不要。内側なら？ クォート必須！。

&lt;div style=&quot;color:gray&quot;&gt;So what if we need to build up a string dynamically? That is, what if we need to make a string that is partly &quot;hardcoded,&quot; and partly based on user input? You can't guess what the user is going to say, so you can't write that part ahead of time. What you ''can'' do is ''concatenate'' the user input into your hardcoded string. The way to do that is to use the plus sign ('''+'''), which - when it's used with ''strings'' - will piece them together into a long string. &lt;/div&gt;

では、文字列を動的に作りたい場合にはどうしたらいいだろうか？ つまり、文字列の一部は「埋め込み」で、別の一部は入力内容に基づいて作りたいといった場合は、どうしたらいいのか？ ユーザーが何を言うかは分からないので、ユーザーが入力する部分の文字列を予め作っておくことはできない。これは、ユーザーの入力と埋め込み文字列とを''連結''することで''可能だ''。これを行うには、プラス('''+'''）の符号を使う。これを''文字列どうし''に対して使うと、文字列を連結して一つの長い文字列にしてくれる。

&lt;div style=&quot;color:gray&quot;&gt;Here's an example: suppose we want the user to enter the name of a skill, and we then want to put that skill name into an existing, hardcoded string, which will be stored in another variable. You would do that like this:&lt;/div&gt;

例を挙げよう： ユーザーに技能の名前を入れて欲しいとする。そしてその技能名の文字列を、予め埋め込まれている文字列と組み合わせて、別の変数に入れる。それはこんな風に実現できるだろう：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:existingString = &quot;The skill name you entered is &quot;]
[h:concatString = existingString+skill+&quot;.&quot;]
[r:concatString]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:existingString = &quot;あなたが入力した技能名は &quot;]
[h:concatString = existingString+skill+&quot;.&quot;]
[r:concatString]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;What happens here is this:&lt;/div&gt;

ここで何が行われているかというと、こうなっている；

&lt;div style=&quot;color:gray&quot;&gt;
* Line 1 sets the &quot;hardcoded&quot; portion of the output
* Line 2 sets the concatenated string - {{code|concatString}} to equal the value of {{code|existingString}} ''plus'' the value of {{code|skill}} (which MapTool will prompt for). However, in this case, since MapTool knows that {{code|existingString}} is a string, it will not try to add them mathematically, but just append the value of {{code|skill}} after the value of {{code|existingString}}. To be grammatically correct, we concatenate another little string on the end, this time, the period. Remember - strings inside square brackets need to be in quotes (but variable names, of course, do not!)
* Line 3 displays the final value of {{code|concatString}}, after {{code|skill}} has been appended to it. The output will look something like:
&lt;/div&gt;

* １行目では出力文字列のうち、「埋め込み」部分をセットしている
* 2行目では連結された文字列を変数にセットしている。{{code|concatString}}に{{code|existingString}} と{{code|skill}}（ここでMapToolは入力を求めてくる）の値を''プラスした''ものを代入する。しかしこの場合、MapToolは{{code|existingString}}が文字列だと知っているので、数字として加算するのではなく、{{code|existingString}} 値の後に{{code|skill}}の値をくっつける。文法的に正しくするために、この文字列の最後に短い文字列を付け加える。今回はピリオドだ。注意して欲しいのは、大カッコの内側にある文字列はクォートで囲まなければならない、というところだ（ただしそれが変数なら話は別だ。囲んじゃだめだよ！）。
* 3行目では、{{code|skill}}が連結された後の、{{code|concatString}}の最終的な値を表示する。表示内容はこんな風になるはずだ：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
The skill name you entered is Archery.
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
あなたが入力した技能名は Archery.
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;That's a very simple example, but it illustrates the essence of constructing strings - you &quot;add&quot; them together with a plus sign.&lt;/div&gt;

これはとてもシンプルな例だが、文字列連結の基本を解説したものだ。つまり、プラス符号を使って文字列同士を「加える」ということだ。

==ここから先はどこへ行こうか？==

&lt;div style=&quot;color:gray&quot;&gt;This guide barely brushes the surface of the full potential of the macro language in MapTool. However, using just the basic techniques shown here, you can create a lot of very handy, convenient macros to make playing your game easier and more fun. In future guides, I'll cover more advanced macro commands and techniques.&lt;/div&gt;

このガイドでは、MapToolのマクロ言語のポテンシャルのほんの一部に軽く触れただけだ。しかし、ここに上げられている基本的な技法を使うだけでも、使いやすくて便利で、ゲームをもっと簡単に楽しく遊べるようなマクロを作り上げることができる。今後のガイドでは、高度なマクロ・コマンドや技法を紹介する予定だ。

{{Languages|Introduction to Macro Writing}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Bilingual Glossary/ja</title>
    <ns>0</ns>
    <id>1015</id>
    <revision>
      <id>4651</id>
      <parentid>4642</parentid>
      <timestamp>2010-10-05T14:58:48Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <minor/>
      <comment>/* 英語-日本語対訳表 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6476">__NOTOC__

　英文を日本語に翻訳するにあたり、単語の訳について合意をつくるためのページを作成しました。

　その都度ここのテーブルで語を参照し合っていきましょう。

　現在進行形で編集中です。追加・補正ウェルカム。


==記号・特殊表現対応表==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |記号
! style=&quot;background-color:#e0ddd5;&quot; |名称
! style=&quot;background-color:#e0ddd5;&quot; |日本語版への対応
|-
|&quot;abc&quot;||ダブルクォーテーション（二重引用符）||中身が日本語で書ける場合、カギ括弧 「～～」 に置換。&lt;br /&gt;中身がプログラム名など、英語原文のままの方が良い場合は二重引用符を継承。
|-
| ''abc'' || イタリック（斜体）||そのまま斜体を継承。
|-
|'''abc'''||ボールド（太字）||そのまま太字を継承。
|-
|Alpha Beta Gamma||キャピタリゼーション（大文字使用）||固有名として捉え、中黒（・）を抜いてそのままカタカナで表示。
|-
|'''abc''' (as command, tab, menu,etc.)||プログラム関係の単語||プログラムの日本語版が出るまでは、原文のまま表示。
|-
|''(作品名x）''||作品名||日本語で記述できる場合、二重カギ括弧『～～』に置換。英文そのままの場合は斜体。
|-


|}


==英語-日本語対訳表==

二通り以上の解釈が有るとき、訳語の直前に以下の品詞記号を置きます。

* a.:形容詞(adjective)
* ad.:副詞(adverb)
* n.:名詞(noun)
* v.:動詞(verb)


{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |英単語
! style=&quot;background-color:#e0ddd5;&quot; |対応する日本語
! style=&quot;background-color:#e0ddd5;&quot; |訳語のコンセプトについて補足（あれば）
|-
|alias||略語〔チャット・コマンド参照〕||
|-
|argument||引数||
|-
|aura || オーラ ||
|-
|Campaign Property||キャンペーン設定||
|-
|chat command(s)　|| チャット・コマンド ||
|-
|chat window || チャット・ウィンドウ ||
|-
|clear||n. クリア;&lt;br /&gt;v. クリアする||
|- 
|click||n. 〔マウスボタンによる〕クリック;&lt;br /&gt;v. クリックする||
|-
|dice || ダイス ||翻訳の混乱を避けるため「サイコロ」とはしないことを推奨します。&lt;br /&gt;--[[User:Gginc|gginc]] 19:32, 9 September 2009 (UTC)
|-
|Dice Box || ダイスボックス || 大文字ルールを適用。
|-
|dice roll(s) ||ダイス振り ||
|-
|documentation　|| ドキュメンテーション or ドキュメント ||
|-
|Expanded Roll || 展開ロール || 個々のダイス目まで出力するマクロコマンド。「詳解ロール」でもいいかも 
|-
|export||エクスポート||コマンドの場合、原文ママでOK。
|-
|Fog-of-War||不明領域||
|-
|halo||色枠||
|-
|hexadecimal format||16進数形式||
|-
|Hidden Roll || 秘密ロール || ダイスを振った本人にのみ結果が表示されるマクロコマンド 
|-
|import||インポート||コマンドの場合、原文ママでOK。
|-
|initiative ||イニシアティヴ or イニシアチブ|| 「イニシアチブ」が一般的ではないでしょうか。&lt;br /&gt;--[[User:Fourwoods|fourwoods]] 12:13, 7 June 2010 (UTC)
|-
|interface || インターフェイス　||
|-
|Light || 照明 ||
|-
|load ||v. 読み出す；&lt;br /&gt;n. 読み出し ||これは「ロード」でもよいと思ってますが、&lt;br　/&gt;「保存」と対応するよい訳が思い浮かびませんので暫定とします。&lt;br /&gt;より良い意見を求む。&lt;br /&gt;--[[User:Gginc|gginc]] 19:32, 9 September 2009 (UTC)
|-
|macro(s)||マクロ||
|-
|macro command||マクロ・コマンド||
|-
|macro language||マクロ言語||
|-
|Maptool||Maptool||通常は英語のままで。&lt;br /&gt;本文で何度も使われている時は、&lt;br /&gt;慣用として「マップツール」と書いても問題はないと思います。&lt;br /&gt;--[[User:Gginc|gginc]] 20:05, 9 September 2009 (UTC)
|-
|MapTool Property||環境設定||
|-
|object(s)||オブジェクト||時に「対象」と訳した方が適切な場合もあるかもしれませんが、&lt;br /&gt;基本はこちらで。&lt;br /&gt;--[[User:Gginc|gginc]] 20:05, 9 September 2009 (UTC)
|-
|option(s) || オプション||
|-
|parser||パーザー or パーサ or パーザ or パーサー||「構文解析ツール」の訳語は未確定。&lt;br /&gt;--[[User:Gginc|gginc]] 20:05, 9 September 2009 (UTC)&lt;br
/&gt;「パーサー」が一般的な印象です。&lt;br /&gt;--[[User:Fourwoods|fourwoods]] 12:13, 7 June 2010 (UTC)
|-
|property|| プロパティ || トークンの属性(値)。マクロ用語
|-
|out-of-character(=ooc) ||プレイヤー発言||
|-
|Resource Library||リソースライブラリ||大文字ルールを適用。
|-
|Result Roll || 結果ロール || 過程を省いて結果の値だけ表示するマクロコマンド。Expanded - の逆
|-
|save ||v. 保存する；&lt;br /&gt;n. 保存||「セーブ」ではなく「保存」で統一することを提案します。&lt;br /&gt;--[[User:Gginc|gginc]] 19:32, 9 September 2009 (UTC)
|-
|Sight || 視界 ||
|-
|stat || データ || statistics の略の場合
|-
|statistics || データ ||
|-
|state(s)　|| ステータス ||そのまま読むと「ステート／状態」ですが、&lt;br　/&gt;日本の慣用は意味が通りにくいためこのように訳しました。&lt;br /&gt;--[[User:Gginc|gginc]] 19:32, 9 September 2009 (UTC)&lt;br /&gt;
「状況」「状態」あたりを推したいです。--[[User:Fourwoods|fourwoods]] 15:20, 15 June 2010 (UTC)
|-
|Statsheet || データシート ||
|-
|string(s)||文字列||
|-
|table(s)||テーブル〔＝表としての〕||
|-
|token||トークン||
|-
|token property　||トークン・プロパティ||
|-
|trusted macro||承認マクロ||
|-
|tutorial||チュートリアル||
|-
|slash command(s)||スラッシュ・コマンド||
|-
|type ||v. 〔キーボードで文字列を〕打ち込む;&lt;br /&gt;n.タイプ ||
|-
|version ||バージョン　||
|-
|Vision || 視覚 ||
|-
|Vision Blocking Layer（VBL） || 遮光域レイヤー or 遮光域 || 「遮光」はそれなりに馴染みのあることばなので。
|-
|wiki　||wiki　|| 
|-
|}

[[Category:MapTool]]

{{DISPLAYTITLE:Bilingual Glossary}}
{{#customtitle:英日対訳表|英日対訳表}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:Bilingual Glossary/ja</title>
    <ns>1</ns>
    <id>1016</id>
    <revision>
      <id>4948</id>
      <parentid>4947</parentid>
      <timestamp>2010-12-02T18:13:40Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2833">==連絡帳==

ここには上げていませんが関数の概要と usage をAから訳し始めました。
--[[User:Fourwoods|fourwoods]] 17:43, 2 December 2010 (UTC)

了解です、ありがとうございます。英日併記はもうしばらく残していただければ、後で英日対訳表に反映することができると思います（25日以降にはできるはず）。
--[[User:Gginc|gginc]] 05:29, 18 September 2009 (UTC)

マクロ関係の翻訳を続けています。英日併記でずっとやっています。適当なところで英文を削除する作業をしようと思っていますが、訳語の統一性などの理由から、しばらくは併記を残しておきたいです。問題などあればご指摘ください。--[[User:Thalion|thalion]] 05:58, 16 September 2009 (UTC)

[[Chat Commands/ja|チャット・コマンド]]訳出完了しました。（ただし、二カ所ほど英日併記しているところがあります）。次は[[Dice Expressions/ja|ダイスの記法]]に取り組みます。--[[User:Gginc|gginc]] 20:25, 11 September 2009 (UTC)

ここは[[Bilingual Glossary/ja|英日対訳表]]のノート・ページです。
RPTools Documentation Wiki 日本語翻訳プロジェクトの会議室として、ここの利用を提案してみます。
最新の発言を上に書くようにすれば話がしやすいと思います。最後に書名ボタンで書名を押すと、議論の流れもわかりやすくなると思います。&lt;br /&gt;
--[[User:Gginc|gginc]] 18:35, 9 September 2009 (UTC)

{{DISPLAYTITLE:Talk:Bilingual Glossary}}
{{#customtitle:英日翻訳プロジェクト会議室|英日翻訳プロジェクト会議室}}

== 未整理の訳語メモ ==

; stack : スタック
; stack size : スタックサイズ 
; light source : 光源
; Java Virtual Machine : Java仮想マシン
; memory : メモリー
; main memory : メインメモリー
; campaign repository : キャンペーン・リポジトリー
: リポジトリーは馴染みがないので「貯蔵庫」のほうがマシかも。
; campaign : 『セッション』と読み替えるべきか？
; bar : バー、ゲージ、メーター
; state : 状態
; status : ステータス
; rectangle : 矩形、長方形、四角形
; poly : 多角形
; branch : ［マクロ］分岐、条件分岐
; loop : ［マクロ］繰り返し
; condition : ［マクロ］条件式
; variable : ［マクロ］変数
; special variable : ［マクロ］特殊変数
; function : ［マクロ］関数
; expression : ［マクロ］式
; argument : ［マクロ］引数
; parameter : ［マクロ］パラメーター
; operator : ［マクロ］演算子
; roll option : ロールオプション
; roll : ロール？

--[[User:Fourwoods|fourwoods]] 03:25, 19 November 2010 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:Chat Commands/ja</title>
    <ns>1</ns>
    <id>1017</id>
    <revision>
      <id>3915</id>
      <parentid>3914</parentid>
      <timestamp>2009-09-11T17:10:26Z</timestamp>
      <contributor>
        <username>Gginc</username>
        <id>94</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="263">== このページの訳出について ==

#emote, loadaliesの説明文の意味が取りにくいため、原文を残しています。
#主な対訳は[[英日対訳表]]に転記しておきました。

--[[User:Gginc|gginc]] 17:10, 11 September 2009 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Macro Branching/ja</title>
    <ns>0</ns>
    <id>1018</id>
    <revision>
      <id>4590</id>
      <parentid>3944</parentid>
      <timestamp>2010-09-29T01:27:50Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <minor/>
      <comment>原文を淡色表示。</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="54794">[[Category:MapTool]][[Category:Tutorial]]{{Languages|Introduction to Macro Branching}}{{Translation}}{{#customtitle:はじめてのマクロ分岐|はじめてのマクロ分岐}}{{Intermediate}}
==はじめに==

&lt;div style=&quot;color:gray&quot;&gt;When you write a macro, you'll frequently find yourelf wanting to either repeat an operation several times, or to choose from several options based on the outcome of a macro command. In game terms, you might want to make an damage roll several times in a row (say, one time for each enemy caught by a grenade blast), or you might want your macro to give you a damage roll ''if'' you hit, and say {{code|You missed!}} if you miss. &lt;/div&gt;

マクロを書いていると、何度も同じ処理を繰り返したり、マクロ・コマンドの結果に応じて複数の選択肢から一つを選んで実行したりしたくなることが良くある。ゲームを例に取るなら、（例えば手榴弾の爆発に複数の敵を巻き込んだときのように、）何度も続けてダメージ・ダイスを振りたいこともあるだろうし、また、''もし''攻撃が命中したらダメージ・ダイスを振り、外したら{{code|ハズレ!}} と表示してくれるようなマクロを作りたいと考えるかも知れない。

&lt;div style=&quot;color:gray&quot;&gt;In programming jargon, those concepts are called ''looping'' (where you go through a process repeatedly, or &quot;loop through it&quot;), and ''branching'' (where your program - in this case, the macro - &quot;branches&quot; down different paths). The MapTool macro language has several roll options (and one function) to let you branch and/or loop your commands. &lt;/div&gt;

プログラム用語では、こういう概念を''繰り返し''（一つの処理を繰り返す）と''分岐''（プログラム―ここではマクロだが―が異なる複数の処理に枝分かれする）と呼ぶ。MapToolのマクロ言語にはダイスを振るための複数のオプション（や関数）があり、これであなたの命令を分岐・繰り返しさせることができる。

&lt;div style=&quot;color:gray&quot;&gt;Finally, because there are a lot of times when you'll want to do ''several'' things at the same time when you branch or loop, there's a special roll option called ''code'' that tells MapTool to treat several macro commands as a single &quot;unit&quot; when you loop or branch. That may sound confusing, but you'll see what it all means shortly!&lt;/div&gt;

そして最後に、分岐や繰り返しを使って一度に''複数の''事をさばきたいと感じるのは良くあることなので、繰り返しや分岐の際に複数のマクロ・コマンドをまとめて一つの「単位」として扱える''code''というオプションも用意されている。ちょっと分かりにくいかも知れないが、すぐに分かるようになる。

&lt;div style=&quot;color:gray&quot;&gt;Since there's a lot of ground to cover, this tutorial will cover ''branching'' (running different commands based on some condition). The [[Introduction to Macro Loops]] will handle looping (running a process repeatedly, until you wish it to stop).&lt;/div&gt;

話さなければならないことが沢山あるので、このチュートリアルでは''分岐''（ある条件によって異なる命令を実行する）について説明することにする。繰り返し（ある処理を止めるまで繰り返す）については[[Introduction to Macro Loops]]で解説する。

==想定する読者==

&lt;div style=&quot;color:gray&quot;&gt;We're going to get to using these options pretty fast, so I assume you've read the [[Introduction to Macro Writing]] and have knowledge of how to create a new macro and use some very basic commands in it (like creating a variable or a dice roll). &lt;/div&gt;

これから急ぎ足でいろいろなオプションを使っていくことになる。そんなわけで、[[Introduction to Macro Writing]]を読み終え、新しいマクロの作り方を知っていて、その中に含まれていた（変数を作ったり、ダイス振りをしたりするなどの）基本的なコマンドが使えると想定することにする。

&lt;div style=&quot;color:gray&quot;&gt;There are a couple concepts that should be introduced first, since they're going to be a great way to illustrate some of the branching concepts (and looping concepts, in the [[Introduction to Macro Loops]]. You'll get an explanation of the new concepts below.&lt;/div&gt;

まず最初にいくつかの概念を理解してもらうが、これは分岐という概念を（そしてこの先[[Introduction to Macro Loops]]で説明する繰り返しの概念を）理解するという大変な作業を行うために必要だからだ。その新しい概念について、これから説明していこう。

==新しい概念: CODE オプション==

&lt;div style=&quot;color:gray&quot;&gt;Normally, in any branching or looping technique, MapTool lets you do ''one thing'' - that is, one command. So if you had a statement that said &quot;if a condition is true, do something cool,&quot; then &quot;something cool&quot; can only be one single thing - you might roll some dice, or assign a variable, or print out some text to the chat window. However, you couldn't roll some dice, assign a variable, assign ''another'' variable, do some math, and ''then'' print out something all in that statement. That's too many operations.&lt;/div&gt;

MapToolでは、分岐や繰り返しの技法を使うと、''一つのこと''しかできないのが普通だ。この一つのこととは、つまりコマンド１個ということだ。だから「もしある条件が満たされたなら、なにかイケてることをしろ」では、この「なにかイケてること」の部分には一つのことしか入れられない。ダイスを振るとか、変数を宣言するとか、チャット・ウィンドウになにかのテキストを表示するとか、だ。しかし、ダイスを振って、変数を宣言して、さらに''もう一つ''変数を宣言して、計算を行い、''それから''そのなにかを出力する、といった処理はできない。処理の数が多すぎるからだ。

&lt;div style=&quot;color:gray&quot;&gt;If you could only do one thing when you branch or loop, macros would be very limited - so the macro language supports a special roll option called {{roll|code}}, which indicates to MapTool that you want to do several things at once, but have them all happen as a single &quot;branch&quot; or &quot;loop.&quot; You would group these several commands inside a pair of curly braces ( { } ). &lt;/div&gt;

分岐や繰り返しを使うと一つのことしかできないというのでは、マクロの可能性は限られたものになってしまう。そこで、マクロ言語は特殊なロールのオプションを用意している。これが{{roll|code}}だ。これは、複数の処理を行いたいが、それが「分岐」や「繰り返し」の一つとして行われるべきだということをMapToolに伝えるためのものだ。複数のコマンドを一組の中カッコ（{}）の中に書く。

&lt;div style=&quot;color:gray&quot;&gt;The examples below will use the {{roll|code}} option, so you can see how it works. &lt;/div&gt;

以下の例では{{roll|code}}のオプションを使っている。その仕組みが分かってもらえるだろう。

==新しい概念: 比較演算子と論理演算子==

&lt;div style=&quot;color:gray&quot;&gt;In macro writing, you're going to want to compare values together a lot - is my dice roll greater than 20? Are my hit points less than 0? Does that weapon name equal &quot;Warhammer?&quot; All of these are handled via comparison operators and logical operators.&lt;/div&gt;

マクロを作成する場合、二つの数値を比べたいと考えることがよくある。ダイスの出目は20より大きいか？ ヒットポイントは 0　より小さいか？ その武器の名前は &quot;Warhammer&quot; と等しいか？

&lt;div style=&quot;color:gray&quot;&gt;''Comparison Operator'' is programming jargon for the symbols we use to have MapTool compare two values to each other in certain ways (an ''operator'' is a symbol that performs an operation - for instance, the + symbol is an operator that adds things together). &lt;/div&gt;

''比較演算子''とはプログラミングで用いる用語で、MapToolで二つの値を特定の基準で比べあうときに使う記号のことだ（''演算子''とは、ある演算を行うための記号だ）。例えば＋記号は加算を表す。

&lt;div style=&quot;color:gray&quot;&gt;A ''Logical Operator'' is a symbol you use to instruct MapTool in what order to consider comparisons, and how to group comparisons together. The comparison and logical operators are described below:&lt;/div&gt;

''論理演算子''は、MapToolに対してどういう順番で比較を解釈したらよいか、それをどうまとめるかを教えるための記号だ。比較演算子と論理演算子については以下で説明する：

&lt;div style=&quot;color:gray&quot;&gt;In the examples below, the {{func|if}} function is used to illustrate the examples. It's described in more detail later, but the basic &quot;format&quot; of the {{func|if}} function is this:&lt;/div&gt;

以下の例では、{{func|if}} を使って説明している。これについては後でもう少し詳しく解説するが、基本的な{{func|if}}の「文法」は以下の通りだ：

&lt;div style=&quot;color:gray&quot;&gt;{{code|if(comparison, value_if_true, value_if_false)}}&lt;/div&gt;

{{code|if(比較, 真のときの値, 偽のときの値)}}

&lt;div style=&quot;color:gray&quot;&gt;
* '''Comparison''' is where you do your actual comparison (greater than, less than, etc.)
* '''Value_if_true''' is where you put the output or value if the comparison is true
* '''Value_if_false''' is, obviously, where you put the output or value if the comparison is false
&lt;/div&gt;

* '''比較'''は、実際に比較を行う部分（～より大きい、～より小さい、など）
* '''真のときの値'''は、比較結果が正しいときに出す出力や取る値を書く部分
* '''偽のときの値'''は、当然、比較結果が正しくないときに出す出力や取る値を書く部分　

===比較演算子===

&lt;div style=&quot;color:gray&quot;&gt;The symbols below are the comparison operators. Remember that you must always think of these comparisons from the reference point of the value on the ''left'' side. So, in the comparison {{code|value1 &gt; value2}}, you read it based on the left side: &quot;is {{code|value1}} greater than {{code|value2}}. This is the rule for comparisons in MapTool - the left side of the operator is the &quot;point of view.&quot; &lt;/div&gt;

比較演算子を以下に挙げる。こうした比較は常に''左辺値''を起点として考えねばならない点に注意すること。だから、{{code|value1 &gt; value2}}という比較では、左辺値を基本として「{{code|value1}}は{{code|value2}}よりも大きい」と読むことになる。これはMapToolで比較を行う場合の規則だ。演算子の左辺値がかならず比較の「視点」となる。

&lt;div style=&quot;color:gray&quot;&gt;
* '''==''': &quot;is equal to;&quot; this is the operator you use to see if one value is equal to another. Be careful - it has ''two'' equals signs in a row (remember, one equal sign is already reserved for assigning values to variable). An example of this comparison would look like {{code|[if(hit &amp;#61;&amp;#61; &quot;yes&quot;, &quot;you hit!&quot;, &quot;you missed!&quot;)]}}
* '''&gt;''': &quot;is greater than; use this to see if the value on the left side is greater than the value on the right. For example: {{code|[if(roll &gt; 17, &quot;Hit!&quot;, &quot;Miss&quot;)]}}. You can put a number on the left side, like {{code|[if(17 &gt; roll, &quot;Miss&quot;, &quot;Hit!&quot;)]}} (note that it basically reverses the first example, so you need to switch the true and false outputs).
* '''&gt;=''': &quot;is greater than or equal to&quot;; use this to see if the value on the left side is greater than ''or equal to'' the value on the right. For example: {{code|[if(roll &gt;&amp;#61; 17, &quot;Hit!&quot;, &quot;Miss&quot;)]}}
* '''&lt;''': &quot;is less than&quot;; use this to see if the value on the left side is ''less than'' the value on the right. For example, {{code|[if(roll &lt; 19, &quot;Miss&quot;, &quot;Hit!&quot;)]}}}
* '''&lt;=''': &quot;is less than or equal to&quot;; use this to see if the value on the left side is ''less than or equal to'' the value on the right. For example: {{code|[if(roll &lt;&amp;#61; 18, &quot;normal hit&quot;, &quot;critical hit&quot;)]}}
* !=: &quot;is not equal to&quot;; use this to compare whether the value on the left side is ''not equal to'' the value on the right. Note that this operator doesn't care what the values actually ''are'', only that they are ''not equal''. For example, {{code|[if(roll !&amp;#61; 1, &quot;Not a fumble&quot;, &quot;You fumbled!&quot;)]}}
&lt;/div&gt;

* '''==''': 「～と等しい」 これは両方の値が等しいことを確認するための演算子だ。間違いやすいので注意して欲しいが、等号は''二つ''並んでいる（等号一つは、左辺値が変数であることを表すときに使われることを思い出して欲しい）。比較の例はこのようになる。{{code|[if(hit &amp;#61;&amp;#61; &quot;yes&quot;, &quot;命中！&quot;, &quot;外した！&quot;)]}}
* '''&gt;''': 「～より大きい」 これは左辺値が右辺値よりも大きいことを確認するために用いる。例えば、{{code|[if(roll &gt; 17, &quot;Hit!&quot;, &quot;Miss&quot;)]}}という具合だ。左辺値は数値にすることもでき、その場合はこのようになる。{{code|[if(17 &gt; roll, &quot;外れ！&quot;, &quot;命中！&quot;)]}} （これは単に最初の例を逆にしただけだ。なので、結果が真のときと偽の時の処理を逆にする必要がある）。
* '''&gt;=''': 「～以上」 左辺値が右辺値''以上''になることを確認するためのもの。例えば、{{code|[if(roll &gt;&amp;#61; 17, &quot;命中!&quot;, &quot;外れ&quot;)]}}という具合に。
* '''&lt;''': 「～未満」 左辺値が右辺値''未満''であることを確認するときに使われる。例えば、{{code|[if(roll &lt; 19, &quot;外れ&quot;, &quot;命中！&quot;)]}}} のように。
* '''&lt;=''': 「～以下」 左辺値が右辺値''以下''であることを確認するときに使われる。例えば、{{code|[if(roll &lt;&amp;#61; 18, &quot;通常命中&quot;, &quot;クリティカルヒット&quot;)]}} のように。
* '''!=''': 「～と等しくない」 左辺値と右辺値が''等しくない''ことを調べるために使うことができる。なお、この演算子はそれぞれの値が実際に''どういう値かは考慮しない''点に注意。単に''等しくない''ことだけを調べている。例えば、{{code|[if(roll !&amp;#61; 1, &quot;ファンブルでない&quot;, &quot;ファンブルした！&quot;)]}} のように。

===論理演算子===

&lt;div style=&quot;color:gray&quot;&gt;The symbols below are the ''logical operators''. You use this to group comparisons together (you only need these if you need to make multiple comparisons at the same time). These go ''between'' individual comparisons (these don't replace the comparison operators above!).&lt;/div&gt;

以下に挙げる記号が''論理演算子''だ。これらの演算子は組み合わせて使うことができる（が、それが必要なのは一度に複数の比較を行いたい場合だけだろう）。こうした演算子は比較演算子の''間''で使われる（前述の比較演算子を置き換えるものではない）。

&lt;div style=&quot;color:gray&quot;&gt;
* '''&amp;&amp;''': &quot;and&quot;; use this if you want to make sure that two or more comparisons are ''all'' true. For example: {{code|[if(roll &gt; 1 &amp;&amp; roll &lt; 20, &quot;Hit&quot;, &quot;Miss&quot;)]}} requires ''both'' comparisons to be true, for the whole comparison group to be true. In other words, the roll must be ''greater than 1'' '''and''' ''less than 20'' in order for it to be a hit. If both of those aren't true, the output is {{code|Miss}}.
** '''Remember: if you use &amp;&amp;, every part of the comparison statement must be true for the whole comparison to be true!'''
* '''||''': &quot;or&quot;; use this if you want or need only one out of multiple comparisons to be true, in order for the whole thing to be true. For example, {{code|if(enemyHealth == &quot;dead&quot; || enemyHealth = &quot;dying&quot;, &quot;Don't kick a guy while he's down&quot;, &quot;He's fair game!&quot;)}}. In the example, if ''either'' condition is true (that is, if {{code|enemyHealth}} is &quot;dead&quot; ''or'' &quot;dying&quot;) the entire comparison group is true. Only if ''neither'' comparison is true does the whole thing become false.
** '''Remember: use || if you only need one out of several comparisons to be true'''
&lt;/div&gt;

* '''&amp;&amp;''': 「かつ」 これは複数の比較が全て真になるかどうかを確かめるときに用いる。例えば、{{code|[if(roll &gt; 1 &amp;&amp; roll &lt; 20, &quot;命中&quot;, &quot;外れ&quot;)]}}とした場合、二つの比較の''両方とも''真となり、比較群全体としても真となることが求められている。 言い換えると、命中するためには、ダイスの出目は''１より大きく''て、''かつ''、''２０未満''でなければならないことになる。この両方が真にならない場合、出力結果は{{code|外れ}}になる。
** '''注意： 全ての比較条件を &amp;&amp; で結んだ場合、その全てが真にならないと、全体の結果も真にならない。'''
* '''||''': 「または」 は、複数の比較のうちどれかが真であれば、全体が真となる場合に使用する。例えば、{{code|if(enemyHealth == &quot;死亡&quot; || enemyHealth = &quot;瀕死&quot;, &quot;死んだ相手に蹴りなんか入れるな&quot;, &quot;格好の標的だぜ！&quot;)}}というように。この例では、''どちらかの''条件が真なら（つまり、{{code|enemyHealth}}が&quot;死亡&quot;または&quot;瀕死&quot;なら）、比較群全体が真になる。''両方とも偽''である場合にのみ、全体が偽となる。
** '''注意： 複数の条件のうち一つでも真になればよいときだけ、|| を使うこと。'''

==IF: 値を比較する==

&lt;div style=&quot;color:gray&quot;&gt;One of the most elementary ways to branch any code is the use of the idea of ''if - then''. That is, ''if'' some comparison is true, ''then'' do something else. You would use the ''if'' concept to say &quot;If my attack hits, then show the damage result!&quot; &lt;/div&gt;

あらゆるコードで使われる中でも最も基本的な分岐の方法は''if - then''だ。つまり、''if(もし)''何らかの比較結果が真になる、''then(なら)''何か特別なことをする。この''if''は、「もし、私の攻撃が命中したら、ダメージ値を表示する！」というように使うことになるだろう。

&lt;div style=&quot;color:gray&quot;&gt;MapTool's macro language has two kinds of if - a function (a function is a pre-defined set of instructions that you can &quot;call&quot; by referring to it by name), and a roll option (a roll option is a &quot;switch&quot; or &quot;toggle&quot; that tells MapTool how to handle a command. &lt;/div&gt;

MapToolのマクロ言語には二種類の if がある。―関数とロール・オプションだ。関数とは、あらかじめ定義されている一連の命令のことで、名前をつかってそれを「呼び出す」ことができる。ロール・オプションとは、MapToolに対してある命令の扱い方を教えるための「スイッチ」とか「トグル」のことだ。

===if() 関数===

&lt;div style=&quot;color:gray&quot;&gt;The {{func|if}} function is called simply by writing {{code|if()}} and putting the thing you want compared, what to do if the comparison is true, and what to do if the comparison is false, all inside the parentheses. The general format is:&lt;/div&gt;

{{func|if}} 関数は単に{{code|if()}}と書いて、比較すべきものと、その結果が真になったときにすることと、偽になったときにすることを、全てカッコの中に入れるだけで使える。基本的な文法はこうなる：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
{{code|if(comparison, value_if_true, value_if_false)}}
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
{{code|if(比較, 真のときの値, 偽の時の値)}}
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;An actual example would look like:&lt;/div&gt;

そして実際の例はこんな風になる：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[if(attackHits == &quot;yes&quot;, &quot;You hit!&quot;, &quot;You missed&quot;)]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[if(attackHits == &quot;yes&quot;, &quot;命中！&quot;, &quot;外れ&quot;)]
&lt;/source&gt;
&lt;/blockquote&gt;


&lt;div style=&quot;color:gray&quot;&gt;In that single line, we've said:&lt;/div&gt;

この一行でやらせていることは以下のとおり：

&lt;div style=&quot;color:gray&quot;&gt;
* Check the variable {{code|attackHits}} to see if it has the value &quot;yes&quot;
* If it has the value &quot;yes&quot;, then print {{code|You hit!}} to chat, or
* If it does ''not'' have the value &quot;yes&quot;, then prin {{code|You missed}} to chat
&lt;/div&gt;

* 変数{{code|attackHits}} の値が&quot;yes&quot;かどうかを確認
* 値が&quot;yes&quot;なら{{code|命中！}} 、
* 値が&quot;yes&quot;''でない''なら{{code|外れ}} と、チャットに表示する。

&lt;div style=&quot;color:gray&quot;&gt;The ''value_if_true'' and ''value_if_false'' parts of the {{func|if}} statement can be text, dice roll commands (like 1d6 or 1d20), or variables. What they ''cannot'' be is variable assignments - that is, you can't write an {{func|if}} statement like this:&lt;/div&gt;

{{func|if}}関数の中の、''真の時の値''と''偽の時の値''の二つの部分はテキストでも、ダイスロール・コマンド（1d6とか1d20とか）でも、変数でも構わない。そこに''入れてはいけない''のは、変数の代入だ。つまり、{{func|if}}をこういう風には書けないことになる：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;&lt;source lang=&quot;mtmacro&quot;&gt;
[if(attackHits==&quot;yes&quot;, output = &quot;You Hit!&quot;, output = &quot;You missed&quot;)]
&lt;/source&gt;&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;&lt;source lang=&quot;mtmacro&quot;&gt;
[if(attackHits==&quot;yes&quot;, output = &quot;命中！&quot;, output = &quot;外れ&quot;)]
&lt;/source&gt;&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;It may seem like a good idea, but it won't work - MapTool will give what's known as a ''null pointer exception'', and the macro will fail. However, there is a trick to get around that: since {{func|if}} is a function, and all functions - when they run - produce a ''value'', you can assign the ''result'' of it to a variable! You would do it like this:&lt;/div&gt;

一見よさそうに見えるが、これはうまくいかない。これをやると、MapToolは俗に「ヌルポインター例外」と呼ばれるものを出し、マクロはエラーを起こしてしまう。しかし、これをうまく回避するワザもある。{{func|if}}は関数であり、すべての関数は実行すると''値を返す''のだから、その''戻り値''を変数に代入することができるんだ。こんな風に：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[output = if(attackHits==&quot;yes&quot;, &quot;You Hit!&quot;, &quot;You missed&quot;)]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[output = if(attackHits==&quot;yes&quot;, &quot;命中！&quot;, &quot;はずれ&quot;)]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;When you do it that way, MapTool will:&lt;/div&gt;

このように書いておくと、MapToolはこんな風に動く：

&lt;div style=&quot;color:gray&quot;&gt;
* First, decide what the result of the {{func|if}} is, and
* Second, assign that ''result'' to the variable {{code|output}}, which you can then use like any variable
&lt;/div&gt;

* まず、{{func|if}}の値を求め、それから
* 次に、その''戻り値''を変数{{code|output}}に代入し、それを他の変数と同じようにいろいろ使う

==={{roll|if}} ロール・オプション===

&lt;div style=&quot;color:gray&quot;&gt;In addition to {{func|if}}, there is another way to employ the concept of &quot;if-then&quot; in macro code. The {{roll|if}} ''roll option''. Roll options are, as mentioned above, effectively &quot;switches&quot; or &quot;toggles&quot; that you set for a macro command that affect how MapTool will handle it. A couple simple roll options are mentioned in the [[Introduction to Macro Writing]] - things like {{roll|h}} and {{roll|e}} for hidden or expanded output, for example. &lt;/div&gt;

{{func|if}}の他にも、「もし～ならば～」の概念をマクロ・コードで使う方法がもう一つある。それが{{roll|if}}の''ロール・オプション''だ。ロール・オプションとは、前述したとおり、あらかじめ与えておいたマクロ・コマンドの扱い方をMapToolに「切り替え」あるいは「トグル」させるためのものだ。[[Introduction to Macro Writing]]にはそのいくつかが載っている。{{roll|h}}や{{roll|e}}などがそれだ。

&lt;div style=&quot;color:gray&quot;&gt;Roll options must follow these rules:&lt;/div&gt;

ロール・オプションは以下の規則に従わねばならない：

&lt;div style=&quot;color:gray&quot;&gt;
# Appear at the beginning of a macro command
# If only '''one''' roll option is on the line, it ends with a colon. For example: {{code|[h:]}}
# If ''multiple'' roll option are on the same command, they are separated by commas, and the ''last'' one is followed by a colon. For example, {{code|[h,if(HP &gt; 0): command]}}
# If a roll option takes an ''argument'' - that is, it has parentheses and wants you to put something in them, like a comparison - the colon (or comma, if there are multiple roll options) goes ''after'' the parentheses. Look at the examples below to see how it's used.
&lt;/div&gt;

# マクロ・コマンドの先頭につける
# その行内に現れるロール・オプションが'''一つだけ''なら、オプションはコロンで終わる。例：{{code|[h:]}}
# 同じに現れるロール・オプションが''複数ある''なら、コンマで区切り、最後にコロンをつける。例：{{code|[h,if(HP &gt; 0): command]}}
# ロール・オプションが''引数''を持つ場合、つまり、比較をするときのように、そのオプションには小カッコがついていて、その中に何かを入れたい場合、コロン（複数のロール・オプションがある場合はコンマも）はその小カッコの''後ろ''に来る。どうなるかは以下の例を見て欲しい。

&lt;div style=&quot;color:gray&quot;&gt;To use the {{roll|if}} option as a comparison, you must follow the format:&lt;/div&gt;

{{roll|if}}オプションを比較に使う場合、以下の文法を使わなければならない：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[if(comparison): command_if_true; command_if_false]
&lt;/source&gt;&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[if(比較): 真のときのコマンド; 偽の時のコマンド]
&lt;/source&gt;&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;
* '''Comparison''': this is a comparison statement, as used in the {{func|if}} above.
* '''Command_if_true''': this is the command to execute if true; in this form of IF, you ''can'' do variable assignments or commands that you cannot do in the {{func|if}} method. However, it doesn't ''have'' to be a whole command - it can still be a bit of text.
* '''Command_if_false''': this is the command to execute if false. This is an optional statement - if you want it to do nothing if the comparison is false, then leave off the semicolon and the {{code|command_if_false}} part entirely.
&lt;/div&gt;

* '''比較'''： これは比較文を表している。前述した{{func|if}}で使われたのと同じだ。
* '''真のときのコマンド'''： これは真の時に実行されるコマンドを表す。この形式のIFでは、コマンドだけでなく、{{func|if}}では不可能だった変数への代入ができる。なお、この部分はコマンドでなくても構わない。テキストでもいいのだ。
* '''偽のときのコマンド'''： これは偽の時に実行されるコマンドを表す。この部分はオプショナルであり、比較結果が偽のときにしたいことがなければ、セミコロンも、その後ろの{{code|偽のときのコマンド}}も書かなくていい。

&lt;div style=&quot;color:gray&quot;&gt;An example of the use of the {{roll|if}} roll option might be:&lt;/div&gt;

{{roll|if}}ロール・オプションの例は以下の通りだ：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(attackHits == &quot;yes&quot;): output=&quot;You hit!&quot;; output=&quot;You missed&quot;]
Result of your attack: [r:output]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(attackHits == &quot;yes&quot;): output=&quot;命中！&quot;; output=&quot;外れ&quot;]
攻撃結果: [r:output]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;In the above example, the following things are happening:&lt;/div&gt;

上の例では、以下のように処理されている：

&lt;div style=&quot;color:gray&quot;&gt;
* MapTool compares the value of {{code|attackHits}} to the value {{code|&quot;yes&quot;}}
** If the comparison is ''true'' - that is, the value of {{code|attackHits}} is ''indeed'' equal to {{code|&quot;yes&quot;}} - it assigns the value {{code|&quot;You hit!&quot;}} to the variable {{code|output}}.
** If the comparison is ''false'' - the value of {{code|attackHits}} is ''not equal to'' {{code|&quot;yes&quot;}} - it assigns the value {{code|&quot;You missed&quot;}} to the variable {{code|output}}.
* It then prints a short line of text and the value of {{code|output}} to chat.
&lt;/div&gt;

* MapToolは{{code|attackHits}}の値と{{code|&quot;yes&quot;}}の値とを比較する
** 比較結果が''真''になったら、つまり、{{code|attackHits}}が''本当に''{{code|&quot;yes&quot;}}と等しいなら、変数{{code|output}}に{{code|&quot;命中！&quot;}}の値を代入する。
** 比較結果が''偽''になったら、つまり、{code|attackHits}}が{{code|&quot;yes&quot;}}と''等しくない''なら、変数{{code|output}}に{{code|&quot;外れ&quot;}}の値を代入する。
* そして、短いテキストと{{code|output}}の値をチャットに表示する。

&lt;div style=&quot;color:gray&quot;&gt;You'll note that the first line - the line that uses if - has '''''two''''' roll options on the same line: {{roll|h}} and {{roll|if}}. You'll also see that they are separated by a comma, and the colon goes ''after'' the last roll option, and ''before'' the commands in the {{code|command_if_true}} and {{code|command_if_false}} sections.&lt;/div&gt;

１行目で気づいた人もいるだろう。ここでは一つの行で、{{roll|h}} と {{roll|if}}の''二つ''のロール・オプションを使っている。この二つのオプションはコンマで区切られていて、コロンは最後のロール・オプションの後ろ、{{code|真のときのコマンド}}と{{code|偽の時のコマンド}}のセクションの前にある。

===IF と CODE===

&lt;div style=&quot;color:gray&quot;&gt;So what if you want to do more than one thing based on a comparison? Say, set a bunch of variables to a certain value? For that, you use the {{roll|code}} roll option. &lt;/div&gt;

比較の結果としてやりたいことが複数あったらどうしたらいいだろうか？ 例えば、複数の変数にそれぞれ値を代入するとか？ それには{{roll|code}}ロール・オプションが使える。

&lt;div style=&quot;color:gray&quot;&gt;Like all roll options, {{roll|code}} is put at the beginning of the line, separated from other roll options by a comma. Macro programming convention (that is, the way most macro writers seem to do it) is to put {{roll|code}} as the last roll option in the list. So, the general format you will see in a macro is likely to be:&lt;/div&gt;

他のロール・オプションと同じように、{{roll|code}}は行の先頭に置き、他のロール・オプションとはコンマで区切る。マクロプログラミング規約（要は、ほとんどのマクロがそうなってるって意味だ）では、{{roll|code}} をロール・オプションの一番最後につけることになっている。だから、マクロの中では一般にはこんな風になる：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[roll_option1, roll_option2, code: macro_commands]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[roll_option1, roll_option2, code: macro_commands]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;The second component of the {{roll|code}} option is the curly bracket ({ }). You use these to enclose multiple commands as a single group. Remember the format of the {{roll|if}} roll option?&lt;/div&gt;

{{roll|code}}オプションの二番目の要素は中カッコ（{}）だ。これを使って複数のコマンドを一つの群にまとめる。{{roll|if}}ロール・オプションの文法を覚えているかな？

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[if(comparison): command_if_true; command_if_false]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[if(comparison): 真のときのコマンド; 偽のときのコマンド]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;Well, the {{roll|code}} option lets you replace {{code|command_if_true}} and {{code|command_if_false}} with ''multiple'' macro commands. Let's look at an example: &lt;/div&gt;

さて、{{roll|code}}オプションでは {{code|真のときのコマンド}} と {{code|偽のときのコマンド}} に''複数の''マクロ・コマンドを置くことができる。例を見てみよう：

&lt;div style=&quot;color:gray&quot;&gt;Suppose we write a macro to look at a variable called {{code|attackRoll}}. We want to compare it to a number (the target number), which is held by the variable {{code|targetNumber}}. Here's what we want the macro to do:&lt;/div&gt;

これから{{code|attackRoll}}という変数の値を調べるマクロを書くとしよう。そしてこれをある値（目標値）と比較しようと考えている。この値は{{code|targetNumber}}という変数に格納されている。マクロにやらせたいのはこういうことだ：

&lt;div style=&quot;color:gray&quot;&gt;If {{code|attackRoll}} is greater than or equal to {{code|targetNumber}}, the macro should:

* Set {{code|attackUsed}} to &quot;yes&quot;
* Set {{code|attackResult}} to &quot;hits&quot;
* Set {{code|attackRecharge}} to 3
* Set {{code|damageRoll}} to the result of the dice roll 1d8+4.
* Output a string telling the user the results.
&lt;/div&gt;

もし {{code|attackRoll}} が {{code|targetNumber}} 以上なら：

* {{code|attackUsed}} に &quot;yes&quot; をセット
* {{code|attackResult}} に &quot;命中&quot; をセット
* {{code|attackRecharge}} に 3 をセット
* {{code|damageRoll}} には 1d8+4　の結果をセット
* ユーザーにその結果を知らせる文字列を表示する

&lt;div style=&quot;color:gray&quot;&gt;If {{code|attackRoll}} is ''not'' greater than or equal to {{code|targetNumber}}, the macro should:

* Set {{code|attackUsed}} to &quot;Yes&quot;
* Set {{code|attackResult}} to &quot;misses&quot;
* Set {{code|attackRecharge}} to 3
* Set {{code|damageRoll}} to &quot;no&quot;
* Output a string to chat telling the user the results.
&lt;/div&gt;

もし {{code|attackRoll}} が {{code|targetNumber}}''未満''なら：

* {{code|attackUsed}} に &quot;yes&quot; をセット
* {{code|attackResult}} に &quot;外れ&quot; をセット
* {{code|attackRecharge}} に 3 をセット
* {{code|damageRoll}} には &quot;no&quot; をセット
* ユーザーにその結果を知らせる文字列を表示する

&lt;div style=&quot;color:gray&quot;&gt;Here's how to do it:&lt;/div&gt;

では、以下にそのマクロを載せる：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:attackRoll = 1d20]
[h:targetNumber = 15]

[h,if(attackRoll &gt;= targetNumber), code:
{
  [attackUsed = &quot;yes&quot;]
  [attackResult = &quot;hits&quot;]
  [attackRecharge = 3]
  [damageRoll = 1d8+4]
};
{
  [attackUsed = &quot;yes&quot;]
  [attackResult = &quot;misses&quot;]
  [attackRecharge = 3]
  [damageRoll = &quot;no&quot;]
}]

Your attack [attackResult], and you do [damageRoll] damage. Your attack will recharge in [attackRecharge] rounds.
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:attackRoll = 1d20]
[h:targetNumber = 15]

[h,if(attackRoll &gt;= targetNumber), code:
{
  [attackUsed = &quot;yes&quot;]
  [attackResult = &quot;命中&quot;]
  [attackRecharge = 3]
  [damageRoll = 1d8+4]
};
{
  [attackUsed = &quot;yes&quot;]
  [attackResult = &quot;外れ&quot;]
  [attackRecharge = 3]
  [damageRoll = 0]
}]

あなたの攻撃は [attackResult] で、与えたダメージは [damageRoll] 点。 次の攻撃ができるまで [attackRecharge] ラウンドかかる。
&lt;/source&gt;
&lt;/blockquote&gt;


&lt;div style=&quot;color:gray&quot;&gt;There's a lot going on here, but the important thing to look for is the CODE option in the very first line, and the curly braces. The curly braces enclose multiple separate commands, but say to MapTool, &quot;treat these as one thing&quot;. So in the example above:&lt;/div&gt;

ここではいろいろなことをしているが、注目して欲しいのは一番最初の行にある CODE オプションと、中カッコだ。中カッコの中には複数のコマンドが入っているが、MapToolに対してこれを「一つのものとして扱う」よう指示していることになる。従って、上の例はこのように動作する：

&lt;div style=&quot;color:gray&quot;&gt;
* We declare two variables, {{code|attackRoll}} and {{code|targetNumber}}, and give them initial values (in this case, {{code|attackRoll}} will be the result of a 1d20 roll, and {{code|targetNumber}} is set to 15).
* We set up the comparison (putting an h, in front - remember, that will hide the results from chat, so you don't see all the calculations in the if statement).
* We put {{roll|code}} in there to warn MapTool that each part of the {{roll|if}} roll option -  {{code|command_if_true}} and {{code|command_if_false}} - will actually consist of multiple separate commands.
* We put a colon after the word {{code|code}}, to mark off the end of all the roll options. There is only ONE colon in the line!
* We use a { to mark the start of the {{code|command_if_true}} portion of the IF statement. We then put in our commands, each one separately and enclosed in square brackets. Once finished, we ''close'' that section of the IF statement with a }, and put a semicolon on the end (remember, the IF roll option needs a semicolon to separate {{code|command_if_true}} from {{code|command_if_false}}.
* We do the same process for the {{code|command_if_false}} section - a { followed by a series of commands, and then closed with a }.
* We make sure to close off the '''''whole''''' if statement with another square bracket ( ] ). Remember, an IF roll option is still just a macro command, and all macro commands must be enclosed in '''[ ]'''.
* Finally, we write some text, with the several variables we have inserted at appropriate points, to be sent to chat when the macro runs.
&lt;/div&gt;

* 二つの変数 {{code|attackRoll}} と {{code|targetNumber}} を宣言し、初期値を与える（この場合、{{code|attackRoll}} は 1d20 の結果、{{code|targetNumber}} は15になるはずだ）。
* 比較条件を設定する（まず最初に h を置く。このオプションをつけるとその結果をチャットに表示しなくなる。従って、この if 文の計算結果は見えなくなる）。
* {{roll|if}}ロール・オプションの中の、{{code|真のときのコマンド}} と {{code|偽のときのコマンド}}のそれぞれの部分に{{roll|code}}を置いて、この部分の中には複数のコマンドが入るのだということをMapToolにあらかじめ報せておく。
* {{code|code}}文の後ろにコロンを置き、ロール・オプションの終端であることを知らせる。この行にあるコロンはこれ一つだけ！
* IF文の中の、{{code|真のときのコマンド}} の最初に { を置く。それからそれぞれ大カッコでくくったコマンドを並べていく。全部終わったら、このセクションを } で閉じ、最後にセミコロンをつける（ IF ロール・オプションでは、{{code|真のときのコマンド}} と {{code|偽のときのコマンド}} を区切るのにセミコロンが必要だということを思い出して欲しい）
* 上と同じ作業を {{code|偽のときのコマンド}} のセクションについても行う。 { の後に一連のコマンドを並べ、最後に } で閉じる。
* ここでこの if 文'''''全体を'''''大カッコ（ ] ）でくくっておくこと。 IF ロール・オプションもマクロ・コマンドの一つであり、全てのマクロ・コマンドは'''[ ]'''でくくられていなければならない。
* 最後に、それぞれの変数を適当な場所に埋め込んだテキストを書き、マクロが実行されたときにチャットに送り込まれるようにしておく

&lt;div style=&quot;color:gray&quot;&gt;'''NOTE''': The CODE roll option only works with ''other roll options''. You would not use this with the {{func|if}} ''function''. That is a bit confusing, but just remember: CODE only goes with other roll options.&lt;/div&gt;

'''注意'''： CODE ロール・オプションは''他のロール・オプション''と組み合わせたときにだけ動作する。''関数''である{{func|if}} とは組み合わせられない。ちょっとややこしいかも知れないが、「 CODE は ロール・オプションと組み合わせてしか使えない」とだけ、覚えておいて欲しい。

==SWITCH: 複数の選択肢の中から選ぶ==

&lt;div style=&quot;color:gray&quot;&gt;The {{func|if}} function and the {{roll|if}} roll option both let you pick from two options - either do something when the comparison is ''true'', or do something different when the comparison is ''false''. But life - and RPG's - are not always so black and white. When you want to do different things based on one of ''many'' options, you use the {{roll|switch}} roll option. &lt;/div&gt;

{{func|if}}関数と{{roll|if}}ロール・オプションは両方とも二つある処理のどちらか一つを選ぶものだ。比較結果が''真''ならこちら、''偽''ならこちらという具合に。しかし人生というものは、そしてRPGもだが、常に白黒はっきりしたものではない。''複数の''選択肢の中から異なった動作を一つ選ぶ場合には、{{roll|switch}}ロール・オプションを使いたまえ。

&lt;div style=&quot;color:gray&quot;&gt;The general format is:&lt;/div&gt;

一般的な文法は以下の通り：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[switch(val):
case case_value1: command_1;
case case_value2: command_2;
case case_value3: command_3;
default: command_Default]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[switch(val):
case 第1の値: 第1のコマンド;
case 第2の値: 第2のコマンド;
case 第3の値: 第3のコマンド;
default: デフォルトのコマンド]
&lt;/source&gt;
&lt;/blockquote&gt;


&lt;div style=&quot;color:gray&quot;&gt;What's happening here is this:&lt;/div&gt;

MapToolはこういう風に動作する：

&lt;div style=&quot;color:gray&quot;&gt;
* MapTool is looking at the value of the variable {{code|val}}
* MapTool then looks at each of the {{code|case}} statements in the switch, and compares {{code|val}} to {{code|case_value1}}, {{code|case_value2}}, and {{code|case_value3}}
* When MapTool finds a match - that is, {{code|val}} is equal to one of those cases, the appropriate command (either {{code|command_1}}, {{code|command_2}}, or {{code|command_3}}) is executed, and then MapTool exits the switch statement (which just means, once it's found a match, it does what that case says, and then stops checking for matches).
&lt;/div&gt;

* 変数 {{code|val}} の値を調べる
* それから switch の中の {{code|case}} 文を一つ一つ見ていって、{{code|val}} を {{code|第1の値}}、{{code|第2の値}}、{{code|第3の値}} と比較する
* 一致する値が見つかったら、つまり {{code|val}} が case 文のどれかと等しくなったら、それに該当するコマンドを（{{code|第1のコマンド}}、{{code|第2のコマンド}}、{{code|第3のコマンド}}のいずれかを）実行する。それが終わったら、switch 文を抜ける（要は、一致するものを探して、そこに書いてある通りのことをして、そこで探すのをやめる、ということだ）。

&lt;div style=&quot;color:gray&quot;&gt;Suppose, for example, that the we wanted a macro that would automatically assign the right {{code|Armor}} value to a token, based on the token's {{code|Class}}. If you've been following along, you might recognize the '''Armor''' value as one of the attributes in the [[Sample Ruleset]]. If you visit the [[Sample Ruleset]] page, you'll see that a character can have one of several armor values, based on the character's class:&lt;/div&gt;

例えば、あるトークンに対して、その{{code|Class}}に応じた正しい{{code|Armor}}値を自動的に代入するマクロが欲しいと仮定してみる。ここまで読んできてくれたのなら、ここでいう'''Armor'''値は[[Sample Ruleset]]にある属性値の一つだということが分かってもらえるだろう。[[Sample Ruleset]]のページを読めば、キャラクターが自分のクラスに応じていくつかの装甲値(armor value)のなかから一つを選べることが分かるはずだ：

&lt;div style=&quot;color:gray&quot;&gt;
* A '''Warrior''' has an armor value of 6
* A '''Rogue''' has an armor value of 2
* A '''Wizard''' has an armor value of 1
* A '''Priest''' has an armor value of 4
&lt;/div&gt;

* A '''Warrior''' の装甲値は 6
* A '''Rogue''' の装甲値は 2
* A '''Wizard''' の装甲値は 1
* A '''Priest''' の装甲値は 4

&lt;div style=&quot;color:gray&quot;&gt;So, let's say we want a macro to ask us for the value of the variable {{code|class}}, and then use that variable to assign the right {{code|Armor}} value. Here's how we'd do it:&lt;/div&gt;

そこで、マクロがそのトークンの{{code|class}}を質問してくるようにして、その後で正しい{{code|Armor}}値を代入するようしよう。こういう風になる：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:class = &quot;Rogue&quot;]

[h,switch(class):
case &quot;Warrior&quot;: Armor = 6;
case &quot;Rogue&quot;: Armor = 2;
case &quot;Wizard&quot;: Armor = 1;
case &quot;Priest&quot;: Armor = 4;
default: Armor = 0]

Your Armor Value is [Armor].
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:class = &quot;Rogue&quot;]

[h,switch(class):
case &quot;Warrior&quot;: Armor = 6;
case &quot;Rogue&quot;: Armor = 2;
case &quot;Wizard&quot;: Armor = 1;
case &quot;Priest&quot;: Armor = 4;
default: Armor = 0]

あなたの装甲値は [Armor]　です。
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;What the above example does is:&lt;/div&gt;

この例で何をやっているかというと、こういうことだ：

&lt;div style=&quot;color:gray&quot;&gt;
* Look at the value for {{code|class}} - if you try this out, it will always show the value for &quot;Rogue.&quot; If you alter the {{code|[h:class&amp;#61;&quot;Rogue&quot;]}} line, you can see how changing that value affects the switch statement).
* Compare what you put in there with the four different cases - checking to see if {{code|class}} is equal to {{code|&quot;Warrior&quot;}}, {{code|&quot;Rogue&quot;}}, {{code|&quot;Wizard&quot;}}, or {{code|&quot;Priest&quot;}}.
* If {{code|class}} equals any of those (and we mean EXACTLY equals - case sensitive, no spaces, an ''exact'' match), run the command to set the variable {{code|Armor}} to the appropriate value.
* If no match is found, do whatever follows the {{code|default}} option (in other words, set {{code|Armor}} to 0.
* Stop looking for matches, and move on.
&lt;/div&gt;

* {{code|class}} 変数の値を調べる。このマクロを試しに動かしてみると、常に &quot;Rogue&quot; の値を表示してくるだろう。{{code|[h:class&amp;#61;&quot;Rogue&quot;]}} の行を変更すれば、それが switch 文にどういう影響を与えるか、分かるはずだ。
* ここで代入したものを、他の４つの case と比較する。{{code|class}}の値が{{code|&quot;Warrior&quot;}}、{{code|&quot;Rogue&quot;}}、{{code|&quot;Wizard&quot;}}、{{code|&quot;Priest&quot;}}、のどれと等しいか調べる。
* {{code|class}} が上のどれかと同じ値であれば（ここでいう同じとは、「全く同じ」ということだ。大文字小文字やスペースの有無にいたるまで、全く同じでなければならない）、対応するコマンドを実行して、{{code|Armor}} に正しい値を与える。
* どれとも一致しなかった場合、{{code|default}} の後ろにあるとおりに実行する（ここでは、{{code|Armor}} に 0 をセットする）。
* そこで探すのを止めて、次の処理へと移動する。

===SWITCH と CODE を組み合わせる===

&lt;div style=&quot;color:gray&quot;&gt;The {{roll|code}} option can be used with a {{roll|switch}} option, in a similar manner as {{roll|if}}. There are a couple tricky bits, but if you follow the pattern given in the examples, it should work for you. &lt;/div&gt;

以前に {{roll|if}} でもできたように、{{roll|code}} は {{roll|switch}} とも組み合わせることができる。多少ややこしいが、例に挙がっているパターンにさえ従っていれば、うまく動いてくれる。

&lt;div style=&quot;color:gray&quot;&gt;To do a {{roll|switch}} option with {{roll|code}}, the general format is:&lt;/div&gt;

{{roll|code}} と {{roll|switch }} とを組み合わせる場合、基本的な文法は以下の通りだ：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[switch(val),code:
case case_1: { commands_for_case_1};
case case_2: { commands_for_case_2};
case case_3: { commands_for_case_3};
default: { commands_for_default}]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[switch(val),code:
case 第1のケース: { 第1のケースのコマンド };
case 第2のケース: { 第３のケースのコマンド　};
case 第3のケース: { 第３のケースのコマンド　};
default: { デフォルトのコマンド}]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;An actual example can be drawn from the [[Sample Ruleset]] as well. Not only does a character's class indicate his or her armor value, but also the list of &quot;Beginning Powers&quot; from which the character can draw. Suppose we wanted to set not only the armor value, but also a variable called {{code|beginningPowers}}. To do that, you'd write a SWITCH that looks like:&lt;/div&gt;

これは [[Sample Ruleset]] からそのまま引いてきたもう一つの実例だ。キャラクターのクラスが決めるのは装甲値だけでなく、そのキャラクターが選択できる「作成時パワー」のリストもそれで決まる。装甲値以外にも {{code|beginningPowers}} 変数も代入したいと仮定する。これを行うには、SWITCH 文を以下のように書けばいい：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h,switch(class),code:
case &quot;Warrior&quot;:
{
  [Armor = 6]
  [beginningPowers = &quot;Sword, Shield Bash, Bow, Shield, Torch&quot;]
};
case &quot;Rogue&quot;:
{
  [Armor = 2]
  [beginningPowers = &quot;Dagger, Hide, Backstab, Pick Lock, Torch&quot;]
};
case &quot;Wizard&quot;:
{
  [Armor = 1]
  [beginningPowers = &quot;Dagger, Staff, Light, Lightning Bolt, Fire Ball&quot;]
};
case &quot;Priest&quot;:
{
  [Armor = 4]
  [beginningPowers = &quot;Mace, Heal, Protect, Banish Undead, Torch&quot;]
};
default:
{
  [Armor = 0]
  [beginningPowers = &quot;Fists, Feet&quot;]
}]

Your Armor Value is [Armor] and your beginning powers are [beginningPowers].
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h,switch(class),code:
case &quot;Warrior&quot;:
{
  [Armor = 6]
  [beginningPowers = &quot;Sword, Shield Bash, Bow, Shield, Torch&quot;]
};
case &quot;Rogue&quot;:
{
  [Armor = 2]
  [beginningPowers = &quot;Dagger, Hide, Backstab, Pick Lock, Torch&quot;]
};
case &quot;Wizard&quot;:
{
  [Armor = 1]
  [beginningPowers = &quot;Dagger, Staff, Light, Lightning Bolt, Fire Ball&quot;]
};
case &quot;Priest&quot;:
{
  [Armor = 4]
  [beginningPowers = &quot;Mace, Heal, Protect, Banish Undead, Torch&quot;]
};
default:
{
  [Armor = 0]
  [beginningPowers = &quot;Fists, Feet&quot;]
}]

あなたの装甲値は [Armor] で、開始時パワーのリストは [beginningPowers] です。
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;As you can see, each different case is treated as a single block of operations - so you need to put curly braces for each separate case, and separate them all with the semicolon. At the very end, we put a closing square bracket (''']'''), to finish the whole command. Again, what has happened is that the CODE option and the curly braces have allowed you to replace a single command, like {{code|command_for_case_1}}, with a ''group'' of commands.&lt;/div&gt;

お分かりのように、それぞれのケースが一つの処理として扱われている。だからそれぞれのケースは中カッコで囲み、セミコロンで区切っておかなければならない。そして一番最後を大カッコ（''']'''）で閉じ、コマンド全体を区切る。ここでも、CODE オプションを使うことで、{{code|第1のケースのコマンド}} のコマンドを、コマンドの「グループ」で置き換えることができる。

&lt;div style=&quot;color:gray&quot;&gt;Also, you'll see that I've added in some line breaks so that each separate group of operations is easier to read - MapTool is cool with that, because extra line breaks ''inside'' a command (remember, commands are enclosed within '''[ ]''') are ignored. This is nice, because it makes the macros ''much'' easier to read.&lt;/div&gt;

なお、読みやすくするために、それぞれの処理グループごとに改行を入れているのが分かると思う。ここはMapToolのいいところで、一つのコマンドの''中''での改行を無視してくれる（一つのコマンドは、'''[''' と ''']''' で囲まれているという点に注意）。これはマクロを''大幅に''読みやすくできて、都合がいい。

==高度な分岐オプション==

&lt;div style=&quot;color:gray&quot;&gt;The two options illustrated above are the most common branching options used in macro writing. However, they are not the ''only'' options for branching macros - there are two others, which involve either leaving one macro entirely to call on another, or changing the focus (that is, what token is the [[Current Token]]) of a macro temporarily. Since these are fairly complex operations all on their own, you'll find them in the [[More Branching Options]] guide.&lt;/div&gt;

ここで説明した二つのオプションは、マクロを書くときに最もよく使われる分岐方法だ。しかし、マクロで分岐を行う手段は''これだけではない''。他にも二つのオプションがあるが、その中には、あるマクロの中から完全に抜け出して別のマクロを呼び出したり、マクロのフォーカスを切り替える（つまり、マクロの[[Current Token]]が表すトークンを一時的に変える）ものが含まれている。こうした処理はそれ単体でもやや複雑なものなので、この先の[[More Branching Options]]ガイドで読むことにする。

{{Languages|Introduction to Macro Branching}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>More Branching Options/ja</title>
    <ns>0</ns>
    <id>1019</id>
    <revision>
      <id>4844</id>
      <parentid>4589</parentid>
      <timestamp>2010-11-12T02:44:01Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <comment>/* どうやって使うの？ */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32781">{{Languages|More Branching Options}}{{#customtitle:続・分岐オプション|続・分岐オプション}}{{Intermediate}}{{Translation}}

==はじめに==

&lt;div style=&quot;color:gray&quot;&gt;This is a guide to the &quot;advanced&quot; macro branching option, {{roll|macro}}.&lt;/div&gt;

これはマクロの分岐オプションの中でも「高度」な {{roll|macro}}　についてのガイドだ。

==MACRO: 他のマクロを実行する==

&lt;div style=&quot;color:gray&quot;&gt;One of the best practices when you write macros - especially when they become complex - is to keep them streamlined and lean, and only have them do what they need to do - for instance, if you have a macro that adds a skill to a token, it doesn't need to be the same macro that checks to see if an attack hits, or records damage taken. It just adds skills.&lt;/div&gt;

マクロを書くとき、特に複雑なものを書くときに一番いいのは、すっきりと簡潔なものにして、必要以外の処理だけに絞ることだ。例えば、トークンに技能を与えるマクロを既に持っているとしたら、、攻撃の命中判定やダメージ・トークンを記録するといった機能をそのマクロに追加するべきではない。技能だけにするのだ。

&lt;div style=&quot;color:gray&quot;&gt;Writing macros this way - each macro doing something relatively small - is a good way to keep yourself organized and keep your macros clear (it also makes them easier to fix if something goes wrong!). What's more, it helps keep your memory use lower, so you don't get run into [[Stack Size|stack overflow errors]] or, more commonly, slow macros. &lt;/div&gt;

こういう、つまり比較的小さな機能のみを持つようにするやり方は、中身を理解しやすいし、見通しもよくなる（し、何かおかしなことが起こったときに修理もしやすい）。さらに、メモリの使用量も減らせるから、[[Stack Size|stack overflow errors]]や、よくある実行速度の低下を起こさないで済む。

&lt;div style=&quot;color:gray&quot;&gt;But if you do this, how can you make one macro run based on another one - surely, you don't want to have to hit each button every time something happens, right? Enter the {{roll|macro}} roll option. &lt;/div&gt;

だが、これを実践するためには複数のマクロを連携させる必要があるが、それはどうやったらできるだろうか？ 当然だが何か起こるたびに自分でいちいちボタンを押すなんてごめんだよね？ そこで {{roll|macro}} ロール・オプションの出番だ。

===どんなことをするのか？===

&lt;div style=&quot;color:gray&quot;&gt;The {{roll|macro}} roll option is they way you can have one macro - the ''calling'' macro - trigger another macro, which we call the ''called'' macro. The ''calling'' macro can send some information to the ''called'' macro, where that information will be handled and processed and probably changed, and then, if you like, the ''called'' macro can send some information back to the caller.&lt;/div&gt;

{{roll|macro}} ロール・オプションは、あるマクロ（''呼び出し側''）が別のマクロ（''呼び出され側''）のマクロを起動できるようにする。''呼び出し側''マクロは''呼び出され側''マクロに情報を送り、その''呼び出され側''マクロでこの情報を処理し、だいたいは編集して、それからもし必要なら''呼び出され側''から''呼び出し側''に別の情報を送り返す。

===どうしてそんなものを使わなきゃならないの？===

&lt;div style=&quot;color:gray&quot;&gt;Where this comes in handy is in three circumstances: first, when you have some operation that you're always doing, but you have several different ways that it might come up. Second, if you have a macro that ''everyone'' uses. The second, and more powerful use, is when you want to manipulate another token besides your own - then you frequenly need to use ''called'' macros, because there are some things only a ''called'' macro can do!&lt;/div&gt;

このオプションが便利なのは以下の三つの場合だ： 第一に、通常行っている処理とは別の処理を時々やらなければならない場合。第二に、''みんなで使う''マクロが欲しいとき。第三に、この中でも一番強力な使い道だが、自分自身以外の複数のトークンを操作したいとき、だ。この場合、''呼び出され側''のマクロを頻繁に使うことになる。なぜなら、''呼び出され側''のマクロにしかできないことがあるからだ。

===複数箇所から共通の処理を呼び出す===

&lt;div style=&quot;color:gray&quot;&gt;Let's look at the first benefit: take, for example, a macro that applies damage to a token in accordance with the [[Sample Ruleset]] (in other words, it looks at a token's properties, and then deducts damage from the token's {{code|HitPoints}} property). How many ways can you think a token might get damaged?&lt;/div&gt;

第一の利点について見てみよう。例として、[[Sample Ruleset]] に合わせてトークンにダメージを与えるマクロを考えてみる（つまり、トークンの属性値を参照し、そのトークンの{{code|HitPoints}}属性値からダメージ分を減らすマクロだ）。そのトークンがダメージがどれほど沢山のパターンでダメージを受ける可能性があるか分かるかな？

&lt;div style=&quot;color:gray&quot;&gt;
# It could get damaged by an attack from an enemy
# It could get damaged by an attack from a friend (accidental or otherwise)
# It could get damaged by falling
# It could be damaged by a trap
&lt;/div&gt;

# 敵の攻撃
# 味方の攻撃（事故だったり、そうでなかったり）
# 落下
# 罠

&lt;div style=&quot;color:gray&quot;&gt;All kinds of ways. Now, suppose you have three macro to handle damage. These macros are called '''Enemy Attack''', '''Friendly Fire''', and '''Environmental Damage'''. Each of these causes a token's {{code|HitPoints}} to be reduced, but each also has some special processing to determine ''just how much'' HP reduction takes place (it's not important what the special processing is at the moment). &lt;/div&gt;

ありとあらゆるパターンがありうる。さて、ダメージを扱うマクロを三つ持っているとしよう。このマクロはそれぞれ'''Enemy Attack'''、'''Friendly Fire'''、'''Environmental Damage'''と呼ばれている。それぞれのマクロはどれも対象となるトークンの {{code|HitPoints}} を減らすが、''どれだけ減らすか''はマクロごとに別の特別の処理を持っている（この特別な処理の中身は、今は重要ではない）。

&lt;div style=&quot;color:gray&quot;&gt;So you have three macros, but each has a common element: they all in the end reduce the token's {{code|HitPoints}}. Consider a couple alternatives - you can:&lt;/div&gt;

三つのマクロがあるが、共通の要素を持っている。そのどれもが最後にはトークンの {{code|HitPoints}} を減らすということだ。いくつか選択肢を考えてみよう。こういうことが考えうる：

&lt;div style=&quot;color:gray&quot;&gt;
# Write each macro separately, including the calculations to reduce {{code|HitPoints}}; or
# Write a fourth macro, containing just the calculations to reduce {{code|HitPoints}}, and have the three damage handler macros ''call'' that fourth to handle the final calculations.
&lt;/div&gt;

# それぞれ {{code|HitPoints}} を減らす部分を含むマクロを別々に書く
# 単に {{code|HitPoints}} を減らすだけの第四のマクロを書き、ダメージを扱うその他三つのマクロからこの第四のマクロを ''呼び出し''　て、最終的な計算を行う

&lt;div style=&quot;color:gray&quot;&gt;The advantages of the first option are that you only need to write three macros, and you're done. On the other hand, what if you realize you made a mistake in your damage macro? You then have to edit it in three places. In the second option, you only edit one copy of the damage macro. &lt;/div&gt;

最初の選択肢の利点は、マクロの数が三つで済むことだ。だが、逆に考えると、もしそのマクロに何かの間違いがあることに気づいたらどうなるだろうか？ 書き直すべき箇所が三ヶ所あることになる。二番目の選択肢では、ダメージを与えるマクロだけを修正すればいい。

===みんながやる作業===

&lt;div style=&quot;color:gray&quot;&gt;Building on the example above, if you have a whole bunch of macros that everyone uses (perhaps everyone needs to have a way to attack, to defend, and to take and heal damage), you can create a single set of macros that everyone simply ''calls'', rather than duplicating every macro on every token, every time you need a new token on the map. &lt;/div&gt;

上の例に基づいてマクロを作っていくと、みんなで使うようなマクロ（攻撃、防御、ダメージを受ける、ダメージから回復するなどは誰もが使うだろう）が沢山あった場合、みんなが''呼び出し''て使うマクロが一そろいあればよくて、新しいトークンがマップ上に生まれるたびにそこに全てのマクロをコピーしなくて済む。

&lt;div style=&quot;color:gray&quot;&gt;So, for example, you may want to build a &quot;library&quot; of macros to handle your game (whatever game it happens to be), and then create a single set of macros on your tokens that do nothing but ''call'' macros in the library. &lt;/div&gt;

そんなわけで、あなたは自分のゲーム用の「ライブラリ」を作ろうと思うかも知れない（どんなゲームかはさておき）。そしてそれから、自分のトークンを作って、ライブラリ上のマクロを''呼び出す''マクロだけを載せておくのだ。

&lt;div style=&quot;color:gray&quot;&gt;You'll note that it doesn't mean you have fewer macros overall - every token still needs a set of macros to call on the library; however, it ''does'' mean that your actual complex macros (the ones that took you a long time to write) are all in one place, and you only need to alter '''one''' copy in order to fix an error. If you'd copied the entire macro set to every token, you'd have to fix ''every single token'' one at a time to fix any mistakes you made.&lt;/div&gt;

必ずしもマクロの総数が減らせるとは限らないということに気づいた人もいるだろう。それぞれのトークンにはライブラリを呼び出すためのマクロが必要だ。だが、あなたが（手間隙かけて）作る本当に複雑な部分のマクロは''一ヶ所にまとめておく''ことができるのだ。そしてエラーがあったなら、その'''一ヶ所'''を修正するだけで済む。もし全てのトークンにありとあらゆるマクロをコピーしておくのだとしたら、エラーを修正するには''一つ残らず全てのトークン''を修正しなければならないのだ。

===他のトークンに対する操作と、信頼されたマクロ===

&lt;div style=&quot;color:gray&quot;&gt;Generally, when a token runs a macro, or calls a macro, the macro assumes that all properties and variables it needs to use apply to the token ''running'' the macro. So if Bork the Brave calls a macro in a macro library, that library macro is going to assume that it needs to do its thing on Bork the Brave.&lt;/div&gt;

一般に、トークンがマクロを実行したり呼び出したりするときには、実行に必要な属性値や変数はそのマクロを実行しているトークン上にあるものと想定している。従って、勇者ボークがマクロ・ライブラリの中のあるマクロを呼び出した場合、そのマクロは勇者ボーク上のものに対して処理を行うものと考える。

&lt;div style=&quot;color:gray&quot;&gt;However, sometimes Bork the Brave does ''not'' want this - maybe Bork the Brave just whacked a troll with his sword, and wants the damage to be applied to the troll (and, by extension, most definitely does ''not'' want the damage applied to himself!). He's going to want a macro that will affect the ''troll's'' token, not his own. &lt;/div&gt;

しかし、勇者ボークにとってそれでは''都合が悪い''場合もある。おそらく、勇者ボークは一匹のトロールを剣でぶん殴って、そのダメージをトロールに適用して欲しいのかも知れない（だから、そのダメージが自分に対して適用されるなんてことは''絶対あって欲しくない''はずだ！）。彼に必要なのは、自分のではなく、''トロールの''トークンに対して効果を及ぼすようなマクロのはずだ。

&lt;div style=&quot;color:gray&quot;&gt;As it turns out, however, there are some things, as mentioned, that a regular old macro on a player token simply can't do. For instance, a macro on a player token can't go and determine what an NPC token's properties are. It's simply not permitted to access another token. I think you'll agree this is a good way to go - you may not want players being able to see property values on an NPC. Furthermore, a player token macro can't ''change'' values on another token. Nobody wants the players to be able to, for instance, reduce an enemy's armor value to zero just before making an attack.&lt;/div&gt;

さて、ここで問題になるのは、これまでも言ってきたとおり、プレイヤー・トークンに載っている昔ながらのマクロでは、これができないのだ。例えば、プレイヤー・トークン上のマクロは NPC トークンの属性値を操作できない。他のトークンへのアクセスは許されていないのだ。この事自体には納得してもらえると思う。プレイヤーたちに NPC の属性値を見られては困るからだ。さらに言えば、プレイヤー・トークンのマクロは他のトークンの値を''変更する''ことはできない。NPC に攻撃をかける前にそいつの装甲値をゼロに下げられるようでは困るからだ。

&lt;div style=&quot;color:gray&quot;&gt;But still, we want to be able to do ''some'' things to other tokens, right? In response to that, the concept of '''trusted macros''' was developed. Trusted macros are simply macros that can perform certain functions unavailable to other macros, such as the functions that manipulate token properties ''other than'' the ones on the token who called the macro.&lt;/div&gt;

だが、そうは言っても、他のトークンに対して''多少''何かをしたいよね？ その対応として'''信頼されたマクロ'''の概念が考案された。信頼されたマクロとは、そのマクロを呼び出したトークン''以外の''トークンの属性値を操作するなどの、他のマクロにはできないことが可能なマクロのことだ。

===どうやって使うの？===

&lt;div style=&quot;color:gray&quot;&gt;{{roll|macro}} is a roll option, so, like other roll options you've seen, it is put at the beginning of a line and ends with a colon. The essential format of the {{roll|macro}} roll option is:&lt;/div&gt;

{{roll|macro}} はロール・オプションなので、これまで見てきた他のロール・オプションと同じように、行の先頭に置き、最後はコロンで終わる。{{roll|macro}}の基本書式は以下の通り：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[MACRO(&quot;macroName@Lib:token&quot;): macro_arguments]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[MACRO(&quot;マクロ名@Lib:token&quot;): マクロの引数]
&lt;/source&gt;
&lt;/blockquote&gt;


&lt;div style=&quot;color:gray&quot;&gt;In the above example, there are several parts:&lt;/div&gt;

上の例の中にあるパーツは以下の通りだ：

&lt;div style=&quot;color:gray&quot;&gt;
* The opening and closing square brackets ('''[ ]'''), which surround ''all'' macro commands in MapTool
* The word &quot;MACRO&quot; (it does not have to be capitalized; that's done to keep it noticeable!), which is just the name of this particular roll option
* ''macroName'': this is the name of the macro you wish to call
* @: this is used in the same sense as in an email address - it means &quot;at&quot;
* '''Lib:token''': this is the [[Library Token]] that contains the macro you wish to call. Library tokens are a complex subject, but you can think of them as a single token that holds a &quot;library&quot; of macros, that can be called by other tokens or call each other.
* '''macro_arguments''': an ''argument'' is a programming term for information that you send to a function (or in this case, a macro) that you want the function to ''do'' something to. If you had a function that added two numbers together, the numbers you send to it would be the &quot;arguments&quot; to that function.
&lt;/div&gt;

* MapToolが持つ''あらゆる''コマンドを囲む、一組の大カッコ（'''[ ]'''）
* &quot;MACRO&quot; というワード（大文字でなくても構わない。目立つようにこうしてあるだけだ）。これはこのロール・オプションの名前だ。
* ''マクロ名''： これはあなたがこのマクロにつけた名前だ。
* @：　これはメールアドレスと同じ使い方だ。意味は「at（＝～の場所の）」だ。
* '''Lib:token'''： これは呼び出したいマクロを持つ[[Library Token]]だ。ライブラリ・トークンは複雑だが、複数のマクロの「ライブラリ」を持つ一つのトークンと見なすことができる。このトークンは他のトークンを呼び出したり、逆に他のトークンから呼び出されたりできる。
* '''マクロの引数'''： ''引数''はプログラミングの用語で、何か仕事をさせたい関数（ここではマクロ）にあなたが与える情報のことだ。例えば二つの数を足し合わせる関数があるとしたら、あなたがその関数に与える二つの数が、その関数の「引数」ということになる。

&lt;div style=&quot;color:gray&quot;&gt;So in the command above, you've said &quot;run the macro called ''macroName'' at the library token ''Lib:token'', and send it ''macro_arguments'' to work on.&quot; The programming jargon for what you've just done is &quot;calling a macro,&quot; or &quot;creating a macro call.&quot;&lt;/div&gt;

そんなわけで、上に挙げたコマンドの例では、「ライブラリ・トークン''Lib:token''の中にある''マクロ名''というマクロを実行しろ。そのマクロには''マクロの引数''を与えろ」と指示したことになる。プログラミング用語ではこれを、「マクロの呼び出し」とか、「マクロ呼び出しの生成」と呼ぶ。

&lt;div style=&quot;color:gray&quot;&gt;The next section will have some actual examples to help you get a grasp of using {{code|[MACRO():]}}.&lt;/div&gt;

次では {{code|[MACRO():]}} の使い方を理解するためにいくつか実例を挙げてみる。

===引数と戻り値を扱う===

&lt;div style=&quot;color:gray&quot;&gt;In programming terms, a function is a set of commands that ''receives'' arguments (described briefly above), does some processing on those arguments, and then ''returns'' a value to the place from where it was called. The macro roll option is not technically a function, but when it is used, the process is mostly similar: it calls on another macro, sends it arguments, and that other macro ''may'' - if you write the macro so that it does - return a value to the calling macro. &lt;/div&gt;

プログラミング用語で言う関数とは、上で簡単に述べたようにいくつかの引数を''受け取り''、その引数について何らかの処理をして、それから呼ばれた場所に値を''返す''もののことだ。マクロのロール・オプションは厳密には関数ではないが、使い方はほぼ同じだ。他のマクロを呼び出し、引数を与える。その呼び出されたマクロは（あなたがそのように書いておけば）呼び出したマクロに値を返す''ことがある''。

&lt;div style=&quot;color:gray&quot;&gt;When you call a macro, you can send it any variable, string, or number as an argument (in other words, you can replace ''macro_arguments'' with a variable, a string, or a number, which is sent to the called macro). For example, let us assume the following:&lt;/div&gt;

マクロを呼び出す場合には、好きな変数、文字列、数値を引数にすることができる（つまり、''マクロの引数''と書いてある部分は、変数、文字列、数値に好きに置き換えることができ、それが呼び出すマクロに渡される）。例えば、こういう例を考えてみよう：

&lt;div style=&quot;color:gray&quot;&gt;
* There is a [[Library Token]] called &quot;'Lib:MT''' which has a macro called '''Use Power'''.
* You have a token for Bork the Brave, which has a macro called '''Shield Bash'''. This is one of Bork's powers.
* You want to send the name of the power to '''Use Power''', which will run the standard procedures to resolve the use of a power.
&lt;/div&gt;

* '''Lib:MT'''という名前の[[Library Token]]があり、その中には'''Use Power'''というマクロがあるとする。
* 勇者ボークのトークンがあって、そのトークンは'''Shield Bash'''というマクロを持っている。これはボークのパワーの一つだ。
* '''Use Power'''マクロに対してパワーの名前を渡したい。このマクロはパワーの使うときの標準処理を行ってくれる。

&lt;div style=&quot;color:gray&quot;&gt;To have Bork's macro trigger the '''Use Power''' macro on '''Lib:MT''', you would create a macro called &quot;Shield Bash&quot;, which contained the following command:&lt;/div&gt;

ボークのマクロが '''Lib:MT'''の'''Use Power'''マクロを呼び出すには、以下のコマンドを持つ'''Shield Bash'''マクロを作成しなければならない。

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[macro(&quot;Use Power@Lib:MT&quot;): &quot;Shield Bash&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[macro(&quot;Use Power@Lib:MT&quot;): &quot;Shield Bash&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;So, that's great. You've sent this information off to the macro '''Use Power'''. But...how does '''Use Power''' recognize what you sent it? &lt;/div&gt;

よろしい。これでマクロ'''Use Power'''に情報を渡すことができた。ところで…'''Use Power'''マクロの方はこの情報をどういうふうに認識するのだろうか？

====特殊変数 ''macro.args''====

&lt;div style=&quot;color:gray&quot;&gt;Whenever you create a macro call and execute it, a special variable called {{code|[[macro.args]]}} is created. This variable is visible (that is, can be accessed, changed, or read) only by the macro being called, and it contains whatever you substituted in for ''macro_arguments''. So, in our example above, {{code|[[macro.args]]}} is equal to &quot;Shield Bash&quot;.  So, for example, in the macro '''Use Power''', you might have a line that says:&lt;/div&gt;

マクロを呼び出すと、{{code|[[macro.args]]}}という特殊変数が生成される。これは呼び出された側のマクロだけから見える（つまり、アクセス、変更、読み出しが可能な）変数で、''マクロの引数''の部分に入れたものがすべて格納されている。だから上の例で言うなら、{{code|[[macro.args]]}} は&quot;Shield Bash&quot;と等しいことになる。なので、例えば、'''Use Power'''マクロの中にはこういう部分があるはずだ：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:powerName = macro.args]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:powerName = macro.args]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;What that line says is, &quot;in this macro, take the value of {{code|macro.args}}, and assign it to the variable {{code|powerName}}.&quot; From then on out, the variable {{code|powerName}} will have the value &quot;Shield Bash&quot; (if we continue our example from above). Note that you don't ''have'' to do this - you can also just refer to {{code|macro.args}} wherever you need to.&lt;/div&gt;

ここでは、「このマクロでは、{{code|macro.args}}の値を読み出し、これを変数{{code|powerName}}に代入しろ」と言っていることになる。これ以降、変数{{code|powerName}}は&quot;Shield Bash&quot;という値を取る（上の例のままになっていれば、だが）。なお、必ずしも''この通りにしなくても良い''という点には注意。必要ならどこででも {{code|macro.args}} を参照していい。

&lt;div style=&quot;color:gray&quot;&gt;The macro being called can then use this special variable {{code|[[macro.args]]}} like any other variable - it can read it, it can change it, it can add it to something - anything you would do with a variable. You could even ignore it!&lt;/div&gt;

ここで、呼び出されたマクロは他の変数と全く同じように {{code|[[macro.args]]}} を使うことができる。読み出しても、変更しても、他の何かと連結させてもいい。他の変数に出来ることなら何でもしていい。何なら全く使わなくても構わないんだ。

&lt;div style=&quot;color:gray&quot;&gt;Of course, if you've sent information in one direction - from the caller to the callee, so to speak - what if you need to send information the other way (in other words, ''return'' a value)?&lt;/div&gt;

もちろんこの情報は、呼び出し側から呼び出される側への一方通行になる。では、その反対方向に情報を渡したい（つまり、値を''返したい''）ときにはどうしようか？

====特殊変数 ''macro.return''====

&lt;div style=&quot;color:gray&quot;&gt;In the macro that is being called, you can do a lot of processing on the variable {{code|[[macro.args]]}}. You can output text to chat and update token properties, even. But you migh also want the results of all that processing to be sent ''back'' to the calling macro - maybe you use it to create ''part of'' a string, and you need to send that piece back to be assembled into the final output you want to send to chat. &lt;/div&gt;

呼び出され側のマクロの中では、 {{code|[[macro.args]]}}にさまざまな処理を加えることができる。テキストをチャットに出力し、トークンの属性値を更新したりも。だが、関数の中で行われた処理の結果を呼び出し側のマクロに送り''返し''たりもしたいんじゃないだろうか。おそらく、それを文字列の''一部''として組み込み、最後にチャットに出力するようにするのに使えるだろう。

&lt;div style=&quot;color:gray&quot;&gt;In that case, you can assign whatever value you want to send back to the variable {{code|[[macro.return]]}}, which will be sent back to the calling macro. Assume, then, that the macro '''Use Power''' creates a variable called {{code|powerResultText}} that needs to be sent ''back'' to Bork's macro '''Shield Bash''' before it finishes. To do this, somewhere at the end of '''Use Power''', you'd add this line:&lt;/div&gt;

この場合、返したい値を{{code|[[macro.return]]}}に代入すればうまくいく。この変数は呼び出し側のマクロに返されるのだ。では、'''Use Power'''マクロが{{code|powerResultText}}という変数を生成したとして、それを戦士ボークの'''Shield Bash'''マクロへ、それが実行を終える前に返さなければならないのだと考えよう。これを行うには、'''Use Power'''マクロのどこかにこういう部分を追加する必要があるだろう：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:macro.return = powerResultText]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:macro.return = powerResultText]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;You've said in that line that the special variable {{code|[[macro.return]]}} will be equal to whatever {{code|powerResultText}} is set to, and '''Shield Bash''' can then use the variable {{code|macro.return}} for further processing.&lt;/div&gt;

ここで、特殊変数{{code|[[macro.return]]}}の値は{{code|powerResultText}} と同じになる。そして'''Shield Bash'''マクロはこの{{code|macro.return}}を使って処理を続けることができるのだ。

===二つのマクロを並べて見てみる===

&lt;div style=&quot;color:gray&quot;&gt;The examples below are the two macros discussed above, side by side, to illustrate the use of macro calls and the {{code|[[macro.args]]}} and {{code|[[macro.return]]}} variables. Make sure to check out the [[Sample Ruleset]] if you're not familiar with some of the various game terms. Also, note that these are not ''complete'' macros that include all of the possible classes and powers in the game, but a sampling to illustrate the use of {{code|[MACRO():]}}. &lt;/div&gt;

以下の例はこれまでに述べてきた二つのマクロだ。マクロの呼び出しや、二つの変数{{code|[[macro.args]]}} と {{code|[[macro.return]]}} を説明するために二つ並べておいた。
もしまだゲームの用語に不慣れなら、[[Sample Ruleset]]で確認してほしい。また、ここにあるのは、ゲーム内に登場するすべてのクラスやパワーを網羅したマクロの''完成品''ではなく、{{code|[MACRO():]}}の説明のためのサンプルだという点に留意してほしい。

&lt;div style=&quot;color:gray&quot;&gt;
{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
|-
!Shield Bash Macro
!Use Power Macro
|-
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Call the Use Power macro --&gt;

[MACRO(&quot;Use Power@Lib:MT&quot;): &quot;Shield Bash&quot;]

&lt;!-- Receive the variable macro.return after Use Power has finished processing.--&gt;

[h:hitValue = macro.return]

&lt;!-- Use IF to check the value of hitValue, and choose an option --&gt;

[h,if(hitValue == 1),CODE:
{
  [damageRoll = floor((1d6+Strength)/2)]
  [special = &quot;Roll 1d6. On a 4 or better, the foe is stunned for three rounds.&quot;]
};
{
  [damageRoll = &quot;None&quot;]
  [special = &quot;No special effect.&quot;]
}]

&lt;!-- Display the Damage result and special effect --&gt;

&lt;b&gt;Damage: &lt;/b&gt; [r:damageRoll]&lt;br&gt;
&lt;b&gt;Special: &lt;/b&gt; [r:special]

&lt;/source&gt;
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Receive macro arguments --&gt;
[h:powerName = macro.args]

&lt;!-- Do a switch to find the power's Attack Bonus --&gt;
[h,switch(powerName):
case &quot;Sword&quot;: attackBonus = 2;
case &quot;Bow&quot;:  attackBonus = 0;
case &quot;Shield Bash&quot;: attackBonus = -1;]

&lt;!--Make the Attack Roll--&gt;

[h:attackRoll = 1d20 + Strength + attackBonus]

&lt;!-- Check to see if the attack succeeds (a roll of 15 or higher is a hit) --&gt;

[h,if(attackRoll &gt;= 15),CODE:
{
  [successText = &quot;a success!&quot;]
  [hit = 1]
};
{
  [successText = &quot;a failure.&quot;]
  [hit = 0]
}]

&lt;!--Display the attack result and the success, and then send
 back the success info for final processing--&gt;

The [r:powerName] attack is [r:successText].&lt;br&gt;
[h:macro.return=hit]
&lt;/source&gt;
|}
&lt;/div&gt;


{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
|-
!Shield Bash マクロ
!Use Power マクロ
|-
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Use Power マクロを呼び出す --&gt;

[MACRO(&quot;Use Power@Lib:MT&quot;): &quot;Shield Bash&quot;]

&lt;!-- Use Powerの実行が終わるまえに、変数 macro.return を受け取る --&gt;

[h:hitValue = macro.return]

&lt;!-- IF を使って変数 hitValue の値をチェックし、オプションを選ぶ --&gt;

[h,if(hitValue == 1),CODE:
{
  [damageRoll = floor((1d6+Strength)/2)]
  [special = &quot;1d6を振り、4以上が出たら敵一体が3ラウンドの間気絶する&quot;]
};
{
  [damageRoll = &quot;None&quot;]
  [special = &quot;特殊効果なし&quot;]
}]

&lt;!-- ダメージの結果と特殊効果を表示する --&gt;

&lt;b&gt;ダメージ: &lt;/b&gt; [r:damageRoll]&lt;br&gt;
&lt;b&gt;特殊効果: &lt;/b&gt; [r:special]

&lt;/source&gt;
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- マクロ引数を受け取る --&gt;
[h:powerName = macro.args]

&lt;!-- パワーの Attack Bonus を決めるために switch を使う --&gt;
[h,switch(powerName):
case &quot;Sword&quot;: attackBonus = 2;
case &quot;Bow&quot;:  attackBonus = 0;
case &quot;Shield Bash&quot;: attackBonus = -1;]

&lt;!-- 攻撃ロールを行う --&gt;

[h:attackRoll = 1d20 + Strength + attackBonus]

&lt;!-- 攻撃が成功したかどうか判定する（出目が15以上なら命中） --&gt;

[h,if(attackRoll &gt;= 15),CODE:
{
  [successText = &quot;命中！&quot;]
  [hit = 1]
};
{
  [successText = &quot;はずれ！&quot;]
  [hit = 0]
}]

&lt;!--　攻撃の結果と成否を表示し、最後の処理を行うために成否の情報を返す --&gt;

The [r:powerName] の攻撃は [r:successText].&lt;br&gt;
[h:macro.return=hit]
&lt;/source&gt;
|}

[[Category:MapTool]]
[[Category:Tutorial]]
{{Languages|More Branching Options}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Roll:output</title>
    <ns>0</ns>
    <id>1020</id>
    <revision>
      <id>3948</id>
      <timestamp>2009-09-23T06:30:06Z</timestamp>
      <contributor>
        <username>Mr. Pokeylope</username>
        <id>105</id>
      </contributor>
      <comment>New page: ==Roll Visibility Options== ===Output Visibility=== These roll options control who is able to see the result of a given roll.  * '''[s: ]''', '''[self: ]''' makes the roll visible only to ...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1547">==Roll Visibility Options==
===Output Visibility===
These roll options control who is able to see the result of a given roll.

* '''[s: ]''', '''[self: ]''' makes the roll visible only to the player who made the roll.
* '''[g: ]''', '''[gm: ]''' makes the roll visible only to GMs.
* '''[w(&quot;name&quot;): ]''', '''[whisper(&quot;name&quot;): ]''' makes the roll visible to the selected player.

These roll options can be combined to make a roll visible to multiple people. If none of these options are used, output is visible to everyone.

'''[w(): ]''' can also take more than one player name as an argument:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[w(&quot;Fred&quot;, &quot;Joe&quot;): d20]
&lt;/source&gt;

It can also take a JSON list containing player names:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = json.fromList(&quot;Fred, Joe&quot;)]
[w(names): d20]
&lt;/source&gt;

If a chat message would appear empty because everything in it is hidden from the player, the message is not displayed.

===Tooltip Visibility===
These options control who can see the tooltip showing detailed roll output. If the roll doesn't have a tooltip, these have no effect.

* '''[st: ]''', '''[selftt: ]''' makes the tooltip visible only to the player who made the roll.
* '''[gt: ]''', '''[gmtt: ]''' makes the tooltip visible only to GMs.

These options can be combined with each other and with the other output options. If neither of these options are used, the tooltip is visible to everyone.

==Related Pages==

* [[Macros:Roll:types|Roll Types and Options]]
* [[Macros:Branching_and_Looping|Branching and Looping Roll Options]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Macro Loops/ja</title>
    <ns>0</ns>
    <id>1021</id>
    <revision>
      <id>5648</id>
      <parentid>5647</parentid>
      <timestamp>2011-08-09T04:39:21Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <comment>/* 最後に */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="59473">[[Category:MapTool]][[Category:Tutorial]]{{#customtitle:はじめての繰り返し|はじめての繰り返し}}{{Intermediate}}
==はじめに==

&lt;div style=&quot;color:gray&quot;&gt;We've looked at [[Introduction to Macro Branching|branching]] in macros, using {{roll|if}}, {{roll|switch}}, and the more advanced roll options {{roll|macro}} and {{roll|token}}. Branching is one of the most important tools for macro writing, since it lets you automate decisions based on certain factors or conditions that arise during play.&lt;/div&gt;

マクロについては[[Introduction to Macro Branching|branching]]で{{roll|if}}と{{roll|switch}}と、さらに高度なオプションである{{roll|macro}} と {{roll|token}}を使った例を見てきた。マクロ作成においては分岐は非常に重要な道具の一つだが、これはプレイの最中に発生するさまざまな要素や条件に基づいた判断を自動化することができるからだ。

&lt;div style=&quot;color:gray&quot;&gt;Another common task in MapTool macros is to repeat a process multiple times - for example, you may want to repeat an attack roll several times, against multiple targets (for instance, if you threw a grenade, you might need to roll to see which targets are hit by the blast), or you may want to go through a list of skills, and print out the skill rating for each one. In both cases, you're repeating the same operation several times in a row, generating different results each time. In macro writing, we call this process ''looping'' (you may see it described in places as &quot;looping through a list&quot; or &quot;iterating over an array&quot; - regardless, the processes to do it are ''loops''). &lt;/div&gt;

MapToolのマクロで共通しているもう一つの重要な道具は、同じプロセスの反復だ。例えば、複数の標的に対して複数回の攻撃ロールを繰り返したいような場合（手榴弾を投げ込んだらどの標的が爆発に巻き込まれたかをそれぞれ判定しなければならないだろう）や、技能の一覧をざっと見てそのレーティングと一緒にプリントアウトしたい場合などがこれにあたる。どちらの場合でも、同じ処理を何度か続けて行って、一回ごとに違った結果を得ている。マクロ作成においては、これを''反復''と呼ぶ（「リスト内をループする」とか「配列の中身を羅列する」とかの表現を見たことがあるだろう。表現はともかく、こうした処理を''反復''と呼ぶのだ）。

&lt;div style=&quot;color:gray&quot;&gt;There are four loop structures in MapTool macros: {{roll|count}}, {{roll|while}}, {{roll|for}}, and {{roll|foreach}}. Each of the three is a ''roll option'', which means - as we've seen before:&lt;/div&gt;

MapTool のマクロには、{{roll|count}}、 {{roll|while}}、 {{roll|for}}、{{roll|foreach}}、の4つの反復構造が存在している。これらはいずれも''ロール・オプション''であり、すでに見てきたように：

&lt;div style=&quot;color:gray&quot;&gt;
# It is placed at the beginning of a macro command
# It is followed by a colon
## If more than one roll option is used, they are separated by commas, and the ''last'' one is followed by a colon
# After the colon, you place the operation you want to do every time the loop runs
&lt;/div&gt;

# マクロコマンドの先頭に置かねばならない
# 次にコロンがついていなければならない
## 複数のロール・オプションを使うなら、それぞれコンマで区切らなければならず、''最後の''オプションはコロンで終わらなければならない
# コロンの後ろに、ループ1回ごとに処理して欲しい内容を書いておく

&lt;div style=&quot;color:gray&quot;&gt;Before we continue, we'll need to introduce a couple concepts that will be used heavily in the examples below, especially for  {{roll|for}} and {{roll|foreach}} loops.&lt;/div&gt;

この先に進む前に、以下の例で、中でも{{roll|for}} と {{roll|foreach}}で繰り返し使うことになる概念をいくつか説明しておく必要がある。

==新しい概念：文字列リストと文字列プロパティ==
&lt;!--New Concept: String Lists and String Properties--&gt;

&lt;div style=&quot;color:gray&quot;&gt;RPGs have a lot of information that goes into playing them - there are stats, and skills, and dice rolls, and weapons, and equipment, and powers and magic and...well, you name it, and there's an RPG out there that covers it. &lt;/div&gt;

RPGはプレイを進める上で多くの情報を扱う。能力値、技能、ダイスロール、武器、装備、特殊能力、魔法…などなど、RPGが対応する名前のある全ての情報が溢れている。

&lt;div style=&quot;color:gray&quot;&gt;For basic things, it might make sense to create a token property for each piece of information. In fact, you can do this for every possible bit of information you want to record about a character - but already, I bet you're thinking &quot;that's a ''lot'' of properties&quot;). And it is!&lt;/div&gt;

基本的には、個々の情報をトークンのプロパティとして作成すれば良い。実際に、記録したいキャラクターの情報を登録することは可能だ。だが、君はきっと「''たくさんの''プロパティがある」と思うに違いない。その通りだ!

&lt;div style=&quot;color:gray&quot;&gt;Fortunately, there are other ways to store information in MapTool properties (and macro variables) that let you group information together. The two new information storing methods we'll use - which are properly referred to as ''data types'' - are [[String_List|string lists]] and [[String_Property_List|string properties]]. &lt;/div&gt;

幸いにも、MapToolの情報（またはマクロ変数）をまとめて分類し保存する方法は他にもある。下記の延べる収容方法（正確にはデータタイプと呼ぶ）に関する二つの情報は[[String_List|文字列リスト]]と[[String_Property_List|文字列プロパティ・リスト]]だ。

===文字列リスト===

&lt;div style=&quot;color:gray&quot;&gt;A string list is, first, a ''string'' - that is, a collection of alphanumeric text that is treated as just text (that is, it's not a number, so you can't add it to another number; it's not a dice roll, so MapTool won't automatically roll it; it's just a string of characters).&lt;/div&gt;

まず、文字列リストは''文字列''である。この文字列は、テキストとして扱う英数字から成り立つ（純粋な文字列。数値ではないので、後から数値を追加することは出来ない。ダイスロールではないので MapTool が自動的にロールすることはない。）。

&lt;div style=&quot;color:gray&quot;&gt;Second, it is a ''list'' - a collection of single items, separated by some sort of separating character - the (you guessed it) ''separator'' (also called a ''delimiter''). The separator marks the beginning and end of an individual item in a list. This is a long way of saying &quot;a string list is a single value that is a list of things, like colors: blue, green, red, orange, mauve.&quot;&lt;/div&gt;

第2に、文字列リストは''リスト''である。区切り文字（''セパレーター''とも呼ばれる）と見なされる文字に区切られた項目の集まり。区切り文字はリスト内の個々の項目の始まりと終わりを示す。簡潔に言えば「文字列リストは、一覧（例えば色の一覧：blue, green, red, orange, mauve）を表す単体の値である」。

&lt;div style=&quot;color:gray&quot;&gt;Formally - in macro code - a string list looks like:&lt;/div&gt;

文字列リストのマクロ・コードにおける正確な書式は次の通り：

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:listOfColors = &quot;blue, green, red, orange, mauve&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;In the example, you'll see that we've made a variable assignment, and given the variable {{code|listOfColors}} the values {{code|blue, green, red, orange, mauve}}. The whole thing is enclosed in double quotes, which tells MapTool that it's a string, and from its very format, MapTool knows that it's a ''string list''.&lt;/div&gt;

上記例では、変数定義が書かれていて、変数 {{code|listOfColors}} に {{code|blue, green, red, orange, mauve}} が与えられている。MapTool は文字列を表す二重引用符に挟まれ、規則正しく書式化された箇所を''文字列リスト''であると解釈する。

&lt;div style=&quot;color:gray&quot;&gt;A string list can contain anything - it could be a list of names, of numbers, of dice rolls - anything you might want to keep a list of. &lt;/div&gt;

文字列リストは一覧として保持しておきたいあらゆる物（名前の一覧、数値の一覧、ダイス・ロールの一覧など）を含ませることが出来る。

&lt;div style=&quot;color:gray&quot;&gt;'''However!''' It is important to remember that no matter what each item in a string list ''is'', it is always treated as a ''string''. So if MapTool reads a string list that looks like {{code|&quot;1d6, 2d8, 1d20&quot;}}, it will not see the first item and see a command to roll 1 six-sided die; instead it will see the character &quot;1&quot;, the character &quot;d&quot;, and the character &quot;6&quot;, all put together. They may look the same to us, but they don't look the same to MapTool - to turn that &quot;1d6&quot; into {{code|1d6}} so that MapTool will roll it, we need to use the {{func|eval}} function to tell MapTool &quot;evaluate that string ''as if'' it were a dice roll.&quot; You'll see some examples of {{func|eval}} later on.&lt;/div&gt;

'''ただし!''' 重要なことだが、文字列リスト内の各項目は''常に文字列''として扱われることを忘れないように。そのため、{{code|&quot;1d6, 2d8, 1d20&quot;}} のような文字列リストを読んだ MapTool は、最初の項目を1つの6面ダイスをロールするコマンドとは見なさず、「1」の文字、「d」の文字、「6」の文字を組み合わせたものとして解釈される。見た目は同じように感じるが、MapTool にとっては異なるものである。「1d6」を MapTool がロールする {{code|1d6}} にするには、{{func|eval}} 関数を使い、MapTool に「文字列を''ダイスロールとして''評価しなさい」と伝える必要がある。後述の {{func|eval}} の例を見ると良いだろう。

===文字列プロパティ===

&lt;div style=&quot;color:gray&quot;&gt;String properties are very similar to string lists - they are strings with special formatting, and they contain a collection of items. However, string properties have additional features that make them very useful for storing information in a different way.&lt;/div&gt;

文字列プロパティは、特殊な書式の文字列であることと項目の集まりでできている点で文字列リストによく似ている。それに加えて、文字列プロパティは情報を格納するのにとても有用な機能を備えている。

&lt;div style=&quot;color:gray&quot;&gt;The essence of a string property is the the ''key - value'' pairing. Basically, for each item in the string property, there is a ''key'' that is paired with a ''value''. For instance, if you have a weapon with the following details:&lt;/div&gt;

''キー⇔値''がつがいになっていることが文字列プロパティの特徴である。基本的に、文字列プロパティの各項目は''キー''と対になる''値''を持っている。例えば、次のようなデータを持つ武器があるとして：

* Weapon Name: Broadsword
* Weapon Damage Dice: 1d8
* Weapon Damage Type: Slashing
* Weapon Category: Versatile

&lt;div style=&quot;color:gray&quot;&gt;You have a series of ''key - value'' pairs: the key &quot;Weapon Name&quot; is paired with the value &quot;Broadsword,&quot; the key &quot;Weapon Damage Dice&quot; is paired with the value &quot;1d8,&quot; and so on. A string property is simply a &quot;formal&quot; way to set up this kind of pairing in a single variable. The string property for the above weapon might read:&lt;/div&gt;

この例では：キー「Weapon Name」は値「Broadsword」とペア、キー「Weapon Damage Dice」は値「1d8」とペア、と行った具合に''キー＝値''のペアが連なっている。文字列プロパティは一つの変数に上記のようなペアを示す「規則的な」書式でなりたつ。上記の武器の文字列プロパティは次のようになる：

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:weapon1 = &quot;name=Broadsword; damageDice=1d8; damageType=Slashing; category=Versatile;&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;In that string property, the word to the left of the equal sign is the ''key'', and the word to the right is the ''value''. The semicolon is the ''separator'' or ''delimiter''. MapTool has special functions to retrieve and change the values within a string property, which you'll see in use later.&lt;/div&gt;

この文字列プロパティでは、「=」の左側の単語が''キー''であり、右側が''値''である。「;」は''セパレーター''または''区切り文字''だ。後ほど説明するが、MapToolは文字列プロパティの値を読み取り、変更する特殊な関数がある。

&lt;div style=&quot;color:gray&quot;&gt;Now, let's get to the loops!&lt;/div&gt;

では、繰り返しについて学んで行こう！

==COUNT：繰り返して、繰り返して、繰り返して…==
&lt;!-- COUNT: Over and Over and Over and... --&gt;

&lt;div style=&quot;color:gray&quot;&gt;The first looping structure we'll cover is the {{roll|count}} option. This option is the simplest loop - it repeats the operation following the colon a number of times equal to its ''argument'' (remember, arguments are the values or variables you put inside the parentheses). The format of a {{roll|count}} (which can also be abbreviated {{roll|c}} statement is:&lt;/div&gt;

まず最初に取り上げる繰り返しの仕組みは{{roll|count}}オプションだ。このオプションは、''引数''に等しい回数ぶん、コロンに続く処理を繰り返す、最も単純な繰り返しである（引数は括弧に挟まれた値または変数であることに注意）。{{roll|count}}（{{roll|c}}に省略可能）の書式は：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[count(repetitions): command]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[count(繰り返し回数): コマンド]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;or&lt;/div&gt;

または、

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[c(repetitions): command]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[c(繰り返し回数): コマンド]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;The example should be pretty self-explanatory. It contains:&lt;/div&gt;

この例は一目瞭然で説明するまでもないだろう。各要素は：

&lt;div style=&quot;color:gray&quot;&gt;
* The {{roll|count}} option itself - without the option, we wouldn't need this tutorial, right?
* {{code|repetitions}}: this is the value that tells {{roll|count}} how many times to repeat {{code|command}}
* {{code|command}}: this is the actual macro command you want count to do over and over again.
&lt;/div&gt;

* {{roll|count}}オプションそのもの。もう説明しなくても良いね？
* {{code|繰り返し回数}}：{{code|コマンド}}を何回繰り返すか{{roll|count}}に指示する値。
* {{code|コマンド}}：実際に繰り返し実行させたいマクロ・コマンド。

&lt;div style=&quot;color:gray&quot;&gt;Let's look at an example. Suppose you have a character who can cast a spell, which creates a cloud of poisonous gas that can hit up to nine targets at the same time. Suppose we also have a cluster of 6 hapless orcs standing in the room, that you are about to poison with this toxic cloud. The rules of your game indicate that you must roll a separate attack for each possible target, meaning that you'd have to roll your attack 6 different times. You can either do that by hand, each time, or you could write a macro that uses {{roll|count}} to roll the attack over and over, and all you need to give it is the number of times!&lt;/div&gt;

実例を考えてみよう。仮に、君は呪文を使えるキャラクターを持っていて、そのキャラクターが一度に9体の敵に効果のある毒ガス雲を作り出したとしよう。更に、部屋の中には6体の憐れなオークンがいて、君はオーク達に有害な雲を放ち毒殺しようとしている。このゲームのルールでは効果を及ぼしうる対象に対しそれぞれロールを行わなければならないので、6回攻撃それぞれにロールすることになる。すべての攻撃を手動でロールすることもできるが、あらかじめ{{roll|count}}を使って繰り返し攻撃のロールを行うマクロを書いておき、ロールする回数を与えるだけでも構わない！

&lt;div style=&quot;color:gray&quot;&gt;Here's how you'd write that macro:&lt;/div&gt;

その時に書くマクロは次のようになるはずだ：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:attackBonus = 7]

Toxic Cloud: [count(numAttacks): 1d20+attackBonus]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:attackBonus = 7]

毒性雲:[count(numAttacks): 1d20+attackBonus]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;What we did here was:&lt;/div&gt;

ここで書いたものは：

&lt;div style=&quot;color:gray&quot;&gt;
* Line 1 sets a value for {{code|attackBonus}}, to be used later. 
* Line 3 sends the text &quot;Toxic Cloud: &quot; to chat, and then, begins the Count Loop. Since {{code|numAttacks}} is ''undeclared'', MapTool will prompt you for a value before it can start the loop. Once you enter that value, the count loop will process the calculation of {{code|1d20+attackBonus}} that many times, sending the result to chat each time, and separating each result with a comma.
&lt;/div&gt;

* 1行目で、後で使うために、{{code|attackBonus}}に値を代入。
* 3行目で、チャット・ウィンドウに「毒性雲：」のテキストを送り、COUNTの繰り返しを開始する。{{code|numAttacks}}が''定義されていない''ので、繰り返しの処理を始める前にMapToolが値を催促してくる。値を入力すると、COUNTの繰り返し処理が{{code|1d20+atackBonus}}を何度も計算し、その計算結果をコンマで区切りながらチャット・ウィンドウに出力する。

&lt;div style=&quot;color:gray&quot;&gt;The output of this macro will look something like (assuming you entered 4 when prompted for {{code|numAttacks}}): &lt;/div&gt;

このマクロの出力は次のようになるはずだ（{{code|numAttacks}}の値を求められたときに「4」を入力した場合）：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
Toxic Cloud: 17, 19, 12, 8
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
毒性雲：17, 19, 12, 8
&lt;/blockquote&gt;

===特殊変数：''roll.count''===
&lt;!--Special Variable: ''roll.count''--&gt;

&lt;div style=&quot;color:gray&quot;&gt;Since it's often useful to know what &quot;round&quot; or &quot;turn&quot; we're on when a {{roll|count}} loop is running, MapTool creates a special variable every time you start a count loop. This variable is called [[roll.count|{{code|roll.count}}]], and it's value is equal to whatever loop you're currently on. So, if you're on the first loop, {{code|roll.count}} is equal to 1; on the second time through, it's equal to 2, and so on. That way, you can use that value in various ways ''inside'' your macro command. &lt;/div&gt;

{{roll|count}}の繰り返しを実行しているとき、今が「何ラウンド目」（何ターン目）であるかが解っていると多くの場面で役に立つので、countの繰り返しを始めた時からMapToolが毎回特殊な変数を用意している。この変数は[[roll.count|{{code|roll.count}}]]と呼び、値に現在繰り返しの何回目にいるかを保持している。つまり、1回目の繰り返しを処理しているときは、{{code|roll.count}}の値は1、2回目の繰り返しでは2。以後同じように増えて行くので、この値を''マクロ・コマンドの中''で色々な用途に使うことができる。

&lt;div style=&quot;color:gray&quot;&gt;A more advanced example of the Toxic Cloud macro might look like this:&lt;/div&gt;

毒性雲マクロのより高度な実例を見てみよう：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:attackBonus = 7]

Toxic Cloud vs:&lt;br&gt;

[c(numAttacks, &quot;&lt;br&gt;&quot;),CODE:
{
   [attack = 1d20+attackBonus]
   [damage = 1d6 + 2]
   Target [r:roll.count]: Attack [r:attack]; [damage] damage.
}]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:attackBonus = 7]

毒性雲：&lt;br&gt;

[c(numAttacks, &quot;&lt;br&gt;&quot;),CODE:
{
   [attack = 1d20+attackBonus]
   [damage = 1d6 + 2]
   対象 [r:roll.count]：攻撃 [r:attack]、ダメージ [damage]。
}]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;A bit more is going on here. &lt;/div&gt;

いくつかの要素が追加されている。

&lt;div style=&quot;color:gray&quot;&gt;
* Line 1 still just sets {{code|attackBonus}} to 7, so we can use it later.
* Line 3 outputs &quot;Toxic Cloud vs:&lt;br&gt;&quot; to chat (the &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt; part sends a line break to chat, meaning that the next output will start on the line ''below'' the words &quot;Toxic Cloud vs:&quot;)
* Line 4 starts a more complex Count Loop. First off, we used the abbreviation for &quot;count&quot;, which is just {{code|c}}. We left {{code|numAttacks}} as is, but added a second ''argument'' - in this case, a different &quot;separator.&quot; All loops in MapTool macros have a default separator, which is the comma. However, you don't always want to separate your results with a comma, right? In this situation, we want to separate them with a line break, so each result is on its own line in chat. So, we put the new separator in - an HTML line break character, or &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;. 
* Line 4 also uses the CODE roll option, which is discussed in [[Introduction to Macro Branching]], and lets us do multiple operations as a single group.
* Line 6 sets the variable {{code|attack}} to the sum of {{code|attackBonus}} and 1d20.
* Line 7 sets the variable {{code|damage}} to the sum of {{code|1d6+2}}.
* Line 8 is a combination of text and variables, which are output to chat. Note that the variable {{code|roll.count}} is in there, which will be replaced with whatever iteration the loop happens to be on. 
* Line 9 closes the CODE block, and the whole command. 
&lt;/div&gt;

* 1行目で、前回と同じように、後ほど使用するために{{code|attackBonus}}に7を代入。
* 3行目では、チャットに「有毒雲：&lt;br&gt;」と出力。（&lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;の部分は、チャット・ウィンドウに改行を出力する。次の出力を「有毒雲：」の下の行から出力させるためのものだ）
* 4行目では、より複雑な COUNT の繰り返しを開始する。まず、「count」の短縮形である{{code|c}}を使っている。{{code|numAttacks}}はそのままだが、2つめの''引数''（標準ではない「区切り文字」）を追加している。MapToolのすべての繰り返し処理はコンマを標準の区切り文字として備えているが、結果を表示するときにいつもコンマを区切り文字として使いたいわけではないだろう？ ここでは、チャットにそれぞれの結果を一行づつ表示したいので改行で区切りたいところだ。そこで、HTMLの改行文字（&lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;）を区切り文字に指定した。
* 4行目では、さらにロールオプションの CODE （[[Introduction to Macro Branching/ja|はじめてのマクロ分岐]]で 取り上げた）を使い、複数の処理をひとつのグループにまとめている。
* 6行目では、変数{{code|attack}}に{{code|attackBonus}}と1d20を合計したものを代入。
* 7行目では、変数{{code|damage}}に{{code|1d6+2}}の合計を代入。
* 8行目では、テキストと変数をつなぎ合わせて、チャットに出力している。ここで変数{{code|roll.count}}は現在の繰り返し回数と置き換わっているわけだ。&lt;!--後半、雰囲気でチョー訳。 Note that the variable {{code|roll.count}} is in there, which will be replaced with whatever iteration the loop happens to be on. --&gt;
* 9行目で CODE ブロックを閉じ、すべてのコマンドを終了する。

&lt;div style=&quot;color:gray&quot;&gt;The output from this would look something like:&lt;/div&gt;

この出力は次のようになるはずだ：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
Toxic Cloud vs:&lt;br&gt;
Target 1: Attack 17; 6 damage.&lt;br&gt;
Target 2: Attack 12; 5 damage.&lt;br&gt;
Target 3: Attack 19; 7 damage.&lt;br&gt;
Target 4: Attack 10; 3 damage.&lt;br&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
有毒雲：&lt;br&gt;
対象 1：攻撃 17、ダメージ 6。&lt;br&gt;
対象 2：攻撃 12、ダメージ 5。&lt;br&gt;
対象 3：攻撃 19、ダメージ 7。&lt;br&gt;
対象 4：攻撃 10、ダメージ 3。&lt;br&gt;
&lt;/blockquote&gt;

==WHILE：くどくどといつまでも==
&lt;!-- WHILE: Keep On Keepin' On --&gt;

&lt;div style=&quot;color:gray&quot;&gt;Let's move on to a new looping structure: {{roll|while}}. This structure is the first one we'll discuss that uses a ''condition'' to determine how many times to loop (previously, count used a value - but not a comparison of any kind). The general format of a {{roll|while}} loop is:&lt;/div&gt;

では次の繰り返し構造：{{roll|while}}を学んでいこう。この構造は、繰り返し回数を決めるために''条件文''を用いる際、まず初めに考慮に入れるものである（前述の count も値を使用するが、いかなる比較もしていない）。一般的な{{roll|while}}の書式は：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[while(condition): command]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[while(条件式): コマンド]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;You're probably getting used to reading these by now.&lt;/div&gt;

そろそろ、こういったものを読むことに慣れてきたころだろう。

&lt;div style=&quot;color:gray&quot;&gt;
* {{roll|while}}: of course, we need to add the roll option itself
* '''condition''': this is the comparison that we make, to see if the loop needs to stop - it can be any of the logical comparisons we've discussed already (such as, {{code|loops &lt; 10}} or {{code|numDice &gt; 5}} or anything you can think of). 
* '''command''': the macro command (or commands, if you use the CODE option) to run each time the loop goes 'round.
&lt;/div&gt;

* {{roll|while}}：言うまでもなく、ロールオプションを加えなければならない。
* '''条件式'''：繰り返しを止めるべきかどうか判断するために必要な比較を行うものだ（例えば、{{code|loops &lt; 10}}や{{code|numDice &gt; 5}}など思いつくものなら何でも）。
* '''command'''：繰り返しの処理が巡ってくるたびに実行するマクロコマンド（CODEオプションを使う場合は一連のコマンド）。

&lt;div style=&quot;color:gray&quot;&gt;So, if you read this, the while loop really just says, &quot;while some condition is true, keep doing this.&quot; Let's look at some examples.&lt;/div&gt;

つまり、while を用いた繰り返しは「条件式が真であるあいだ、これをやり続けなさい」ということだ。いくつかの例を見てみよう。

===例1：簡単な秒読み===
&lt;!--Example 1: Basic Countdown--&gt;

&lt;div style=&quot;color:gray&quot;&gt;This is a very basic example, just to illustrate the basic parts of the {{roll|while}} loop. Suppose you wanted to count down from 10 to 1. There are many ways to do this, of course, but we'll do it with a {{roll|while}} loop. The macro would look like this:&lt;/div&gt;

これは{{roll|while}}の繰り返しの基礎部分を説明するための、非常に簡単な例である。仮に、10から1まで、秒読みを行う必要があるとする。もちろん、さまざまなやり方があるが、ここでは{{roll|while}}を使うことにする。このマクロは次のようになる：

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:num = 10]
[while(num &gt; 0): num = num - 1]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;The above macro simply says that &quot;while the variable {{code|num}} is greater than 0, subtract 1 from {{code|num}}, and repeat.&quot; Each time through the loop, the value of {{code|num}} will be checked by MapTool. If it is greater than 0, it will let the command {{code|num {{=}} num-1}} happen, and display the result in chat; if {{code|num}} is ''not'' greater than 0, then the loop will be halted. The output of this macro looks like:&lt;/div&gt;

上記のマクロは、「変数{{code|num}}が 0 より大きい値でいる間、{{code|num}}から1を引き、さらに繰り返しを続けなさい」ということが書いてある。繰り返し中、毎回MapToolが{{code|num}}の値を確認している。値が0より大きければ、{{code|num {{=}} num-1}}のコマンドを実行し、結果をチャットに表示する。もし、{{code|num}}の値が''0より大きくなければ''、繰り返しを中止する。このマクロの出力は次のようになる：

&lt;blockquote&gt;
9,8,7,6,5,4,3,2,1
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;You'll note that &quot;10&quot; was never shown. That's because while the loop may have started with {{code|num}} having the value of 10, the first time we ''see'' any output is when the operation {{code|num -1}} takes place - so the first thing we see is {{code|num - 1}}, which is 9. &lt;/div&gt;

「10」が表示されないことに気づくだろう。繰り返し WHILE は {{code|num}}は10の値とともに開始して、なんらか出力を最初に見るときは、{{code|num -1}}の処理が行われる場合なので、最初に目にする値は {{code|num -1}}の結果、9になるわけだ。

===例2：マシンガン===
&lt;!-- Example 2: The Machine-Gun --&gt;

&lt;div style=&quot;color:gray&quot;&gt;Let's look at a more complicated (and perhaps more interesting) example. In this example, we won't be using the [[Sample Ruleset]], mostly because I couldn't think of a useful example from that game. So, let's assume we have the following game situation:&lt;/div&gt;

では、もっと複雑な（そしてより楽しい）例を考えてみよう。この例では、相応しい実例を思いつけなかったので[[Sample Ruleset|サンプルルールセット]]は使わない。そこで、次のような状況を想定することにする：

&lt;div style=&quot;color:gray&quot;&gt;
* A character has a machine gun with 30 rounds of ammunition
* They may fire one to six rounds for every action
* If their attack roll of 1d20 is greater than 15, they may make another attack; otherwise, they must end their turn. They always get at least 1 attack, though.
&lt;/div&gt;

* キャラクターは30発の弾薬を持つマシンガンを装備している
* このキャラクターはアクションごとに1〜6発、発砲することができる
* 1d20の攻撃ロールが16以上の場合、さらにもう一回攻撃することができる。15以下であれば、ターンを終える。とはいえ常に最低1回の攻撃機会を得る。

&lt;div style=&quot;color:gray&quot;&gt;
So what we need to do is repeat the operation until ''either'' the weapon runs out of ammo, or they roll less than a 15 on their attack. Here's how that macro would look:
&lt;/div&gt;

武器の弾薬を使い果たすか、ロールの結果が15以下であるまで処理を繰り返すにはどうすれば良いのだろうか。下記のマクロがどのようにしているのか見てみよう：

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:ammo = 30]
[h:hit = 1]

[while(ammo &gt; 0 &amp;&amp; hit == 1, &quot;&lt;br&gt;&quot;),CODE:
{
  [h:attackRoll = 1d20]
  [h:ammoSpent = 1d6]
  [h,if(attackRoll &gt; 15): hit = 1; hit = 0]
  [h:ammo = ammo - ammoSpent]
  Your first attack expends [r:ammoSpent] rounds, and [if(hit==1, &quot;hits.&quot;, &quot;misses.&quot;)] You have [r:ammo] rounds remaining.
}]

[if(hit==0): &quot;Your turn ends because you missed a target.&quot;]
[if(ammo==0): &quot;Your turn ends because you are out of ammo.&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:ammo = 30]
[h:hit = 1]

[while(ammo &gt; 0 &amp;&amp; hit == 1, &quot;&lt;br&gt;&quot;),CODE:
{
  [h:attackRoll = 1d20]
  [h:ammoSpent = 1d6]
  [h,if(attackRoll &gt; 15): hit = 1; hit = 0]
  [h:ammo = ammo - ammoSpent]
  君の攻撃は、[r:ammoSpent]発消費し、[if(hit==1, &quot;命中した。&quot;, &quot;失敗した。&quot;)] 弾薬は [r:ammo]発残っている。
}]

[if(hit==0): &quot;攻撃に失敗したので、ターン終了。&quot;]
[if(ammo==0): &quot;弾薬が無くなったので、ターン終了。&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;Here's the breakdown of this macro:&lt;/div&gt;

ではこのマクロを分析してみよう：

&lt;div style=&quot;color:gray&quot;&gt;
* Line 1 and 2 set two important variables: {{code|ammo}} and {{code|hit}}. We set {{code|ammo}} to 30, per the assumptions above, and we set {{code|hit}} to 1, so that the character always gets at least ''one'' attack roll (if we didn't set {{code|hit}} to 1, the loop might stop before it started!). 
* Line 4 is the start of the While Loop: we establish the loop, and give it a combined condition. We say that ''while'' {{code|ammo}} has a value greater than 30, ''and'' (remember, two ampersands is the logical operator &quot;and&quot;) {{code|hit}} ''is equal to'' 1, the loop should go 'round. If ''either or both'' of those is ''not'' true, then the loop should stop. Also, we set the separator to &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;, so that a new line will be printed each time the loop runs.
* Lines 5 - 9 handle the actual loop processing. Note that in that loop, we make sure to set a new value for {{code|hit}} and {{code|ammo}} - this is '''''critical'''''. If you never change the variables that your conditions are based on, then your loop will '''''never stop'''''. 
&lt;/div&gt;

* 1行目と2行目では、二つの重要な変数：{{code|ammo}}と{{code|hit}}を設定している。上記の前提の通り{{code|ammo}}には30を設定し、キャラクターは常に''1回の攻撃ロール''を行えるので{{code|hit}}には1を設定している（もし{{code|hit}}に1を設定しなければ、この繰り返しは処理を開始する前に終わってしまう！）。
* 4行目で、WHILEの繰り返しが始まる。繰り返しを作り、組み合わせた条件式を与えている。{{code|ammo}}の値が30より大きく、''そして''（二つのアンパサンド（&amp;&amp;）は論理演算子「AND（≒及び）」のことだ）{{code|hit}}が''1と等しい''状態である間、この繰り返しは処理を繰り返しつづける。この条件の''片方または両方''が真ではなくなったとき、繰り返しは処理を止める。さらに、繰り返しが実行されるごとに、セパレーターの&lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;が新しい行を出力する。
* 5〜9行では、繰り返しの実際の処理がおこなわれる。この繰り返しでは、{{code|hit}}と{{code|ammo}}に新しい値を代入していることによくよく注意を払うように。これは'''''危険を伴う'''''。条件式はこの変数に基づいており、値が変更されなければ、この繰り返しは'''''止まることなく永遠に'''''処理をし続ける。

&lt;div style=&quot;color:gray&quot;&gt;It's worth repeating: in a while loop, you '''''must change the variable that your condition is checking, or you can end up with a loop that never stops'''''.&lt;/div&gt;

重ねて述べるが、WHILEの繰り返しでは、'''''条件式を判定する変数を必ず変更しなければならない。さもなくば永遠に止まることなく処理をし続けてしまう'''''。

&lt;div style=&quot;color:gray&quot;&gt;So, the output of this macro will look something like:&lt;/div&gt;

このマクロの出力は次のようになる：

&lt;div style=&quot;color:gray&quot;&gt;&lt;blockquote&gt;
Your attack expends 6 rounds, and hits. You have 24 rounds remaining.&lt;br&gt;
Your attack expends 2 rounds, and hits. You have 22 rounds remaining.&lt;br&gt;
Your attack expends 3 rounds, and misses. You have 19 rounds remaining. Your turn ends because you missed a target.
&lt;/blockquote&gt;&lt;/div&gt;

&lt;blockquote&gt;
君の攻撃は、6発消費し、命中した。弾薬は24発残っている。&lt;br&gt;
君の攻撃は、2発消費し、命中した。弾薬は22発残っている。&lt;br&gt;
君の攻撃は、3発消費し、失敗した。弾薬は19発残っている。攻撃に失敗したので、ターン終了。
&lt;/blockquote&gt;

==FOR：どう例えれば良いものやら==
&lt;!-- FOR: I Couldn't Think of Anything Catchy --&gt;

&lt;div style=&quot;color:gray&quot;&gt;The next loop structure to address is the {{roll|for}} roll option. This option is somewhat similar to {{roll|while}}, because it repeats a sequence of code a number of times based on a particular condition; it is also like {{roll|count}} because that particular condition is &quot;has our counter reached a particular number yet?&quot;&lt;/div&gt;

次に取り組む繰り返しの構造は、{{roll|for}} ロール・オプションだ。このオプションは、一連のコードを特定の条件に基づいた回数繰り返すので {{roll|while}} に少し似ている。また、特定の条件は「カウンターはまだ指定の値に届いているのか？」というものなので {{roll|count}} に似ているともいえる。

&lt;div style=&quot;color:gray&quot;&gt;The general format for a {{roll|for}} loop is:&lt;/div&gt;

{{roll|for}} の繰り返しの一般的な書式は次の通り：

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[for(counter, start, end, stepsize, separator): command]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[for(カウンター, 開始値, 終了値, 増分, 区切り文字): コマンド]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;Here's how that breaks down:&lt;/div&gt;

ではやり方を分析していこう：

&lt;div style=&quot;color:gray&quot;&gt;
* '''{{roll|for}}''': as always, we need to actually put the roll option in there
* '''counter''': this is the variable that will be used to count the iterations through the loop; typically people us a simple 1-letter variable in here, like {{code|x}} or {{code|i}}. For examples below, we'll use {{code|i}}. 
* '''start''': this is what the {{code|counter}} variable starts at (it can be zero, another variable, or any other numeric value)
* '''end''': this is the value that ''ends'' the loop 
** In a loop where the {{code|counter}} variable is ''increasing'' - in other words, a loop with a positive {{code|stepsize}} - the loop runs as long as {{code|counter}} is ''less than'' {{code|end}}
**  In a loop where the {{code|counter}} variable is ''decreasing''- in other words, a loop with a negative {{code|stepsize}} - the loop runs as long as {{code|counter}} is ''greater than'' {{code|end}}
* '''stepsize''': this is how big the increment is for each iteration of the loop (for example, if you set {{code|stepsize}} to 2, then {{code|counter}} will increase by 2 ever iteration). The default stepsize is +1 (that is, by default, the {{code|counter}} variable increments by 1 each time the loop is processed). 
* '''separator''': like with {{roll|count}} and {{roll|while}}, this is an optional separator to show between each output line from the loop; the default is a comma.
&lt;/div&gt;

* '''{{roll|for}}'''：いつも通り、ここにロール・オプションをおく必要がある
* '''カウンター'''：繰り返しの処理中に反復回数を記録するための変数。一般的に、{{code|x}} や {{code|i}} などの単純な1文字の変数を指定することが多い。後述の例では、{{code|i}} を使用している。
* '''開始値'''：{{code|カウンター}}変数が最初に指定する値（この値は、ゼロや他の変数、あらゆる数値を指定可能）
* '''終了値'''：繰り返しが''終了''する値 
** {{code|カウンター}}変数が''増加''していく（{{code|増分}}が正の値の）場合は、{{code|カウンター}}変数が{{code|終了値}}より少ない限り処理を繰り返す。
** {{code|カウンター}}変数が''減少''していく（{{code|増分}}が負の値の）場合は、{{code|カウンター}}変数が{{code|終了値}}より多い限り処理を繰り返す。
* '''増分'''：繰り返しの処理が巡るごとに増加する値（たとえば、{{code|増分}}を2としたら、繰り返しが続く限り、{{code|カウンター}}が2づつ増加する）。標準の増分は＋1である（つまり、標準では{{code|カウンター}}変数は繰り返しの処理ごとに1づつ増加していく）。
* '''区切り文字'''：{{roll|count}}や{{roll|while}}と同じように、繰り返しごとに出力する任意の区切り文字。標準はコンマである。

===例1：簡単なカウントダウン===
&lt;!-- Example 1: Basic Countdown --&gt;

&lt;div style=&quot;color:gray&quot;&gt;This example illustrates how the {{roll|for}} option's various components work. As with the previous looping structure, this is a basic countdown:&lt;/div&gt;

この例は、{{roll|for}}オプションの個々の要素の働きを説明するものだ。前述の繰り返し構造と同じく、ここでも簡単なカウントダウンを用いる：

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[FOR(i,10,0,-2): &quot;i is now &quot; + i]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[FOR(i,10,0,-2): &quot;i は &quot; + i]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;In this example, we have specified all components of the loop:&lt;/div&gt;

この例では、繰り返しの全要素を指定している。

&lt;div style=&quot;color:gray&quot;&gt;
* The counter variable is {{code|i}}.
* The start value is {{code|10}}
* The end value is {{code|0}}
* The stepsize is {{code|-2}} (the counter ''decrements'' by 2 every time the loop processes)
&lt;/div&gt;

* カウンター変数 {{code|i}}。
* 開始値 {{code|10}}
* 終了値 {{code|0}}
* 増分 {{code|-2}} （繰り返しの処理を行うごとにカウンターを2づつ''減少させる''）

&lt;div style=&quot;color:gray&quot;&gt;The output of this will look like:&lt;/div&gt;

この出力は次のようになる：

&lt;blockquote&gt;
i は 10, i は 8, i は 6, i は 4, i は 2
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;You will note that there is no ''i is now 0'' step - this is because when the counter counts down to 0, {{code|i}} is no longer greater than 0. &lt;/div&gt;

この例では ''i は 0'' の段階には進まないことに注意するように。カウンターが 0 になれば、{{code|i}} はもはや 0 より大きい値ではなくなるからだ。

===例2：複数行の表を作る===
&lt;!--Example 2: Creating a Table With Multiple Rows--&gt;

&lt;div style=&quot;color:gray&quot;&gt;This example illustrates a practical use of the {{roll|for}} option to create a table that will be sent to chat, with a number of rows based on how many properties are in a String List. &lt;/div&gt;

この例は、文字列リストの項目数と同じ行数の表を作り、チャットに表示する{{roll|for}}を使って作る実用的な例だ。

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:theList = &quot;Strength, Endurance, Dexterity, Intelligence&quot;]

[h:numberOfRows = listCount(theList)]

&lt;table border=&quot;1&quot;&gt;
[for(i, 0, numberOfRows, 1, &quot;&quot;):  &quot;&lt;tr&gt;&lt;td&gt;&quot;+listGet(theList, i)+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;]
&lt;/table&gt;
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;The example above uses a few cool commands to generate the output. &lt;/div&gt;

上記の例では、出力を作成する便利なコマンドをいくつか使用している。

&lt;div style=&quot;color:gray&quot;&gt;
* {{code|theList}} is simply a string list variable containing four elements
* {{func|listCount}} is a function that, when you put the name of a string list variable in it, will return the number of elements in the string list
* We create the beginning of an HTML table by using the &lt;nowiki&gt;&lt;table&gt;&lt;/nowiki&gt; tag
* The {{roll|for}} loop here uses the counter variable {{code|i}}, which starts at 0, and counts up until it reaches {{code|numberOfRows}}. It increases by 1 each loop, and the default separator has been changed to {{code|&quot;&quot;}} so that no extraneous commas are printed to chat.
* Inside the loop, we [[Introduction_to_Macro_Writing#String_Concatenation|concatenate]] the HTML tags for table rows and table cells around the function {{func|listGet}}. This function will retrieve, from a string list variable, the value of the element that is at the position specified in the second argument. In this case, we say, &quot;get from the variable {{code|theList}} the value of the element that's in the same position as {{code|i}}&quot; - so that it starts with element 0 (all lists start at item 0 in MapTool) and each time we loop through, it gets the next element. 
* At the end, we close the table with the appropriate HTML tag. 
&lt;/div&gt;

* {{code|theList}}は4つの要素を持つ簡単な文字列リストの変数だ
* {{func|listCount}}は、文字列リストの変数名を与えると、リストの要素数を返す関数だ。
* まず、&lt;nowiki&gt;&lt;table&gt;&lt;/nowiki&gt;を使ってHTMLテーブルの開始を作成する。
* {{roll|for}}の繰り返しのところでカウンター変数の{{code|i}}を使用している。この変数は 0 より始まり、{{code|numberOfRows}}に達するまで繰り返しごとに1づつ増えていく。区切り文字は、不必要なコンマをチャットに出力しないように、標準のものから{{code|&quot;&quot;}}に変更している。 
* 繰り返しの中では、テーブルの行とセルのHTMLタグを{{func|listGet}}の周りで[[Introduction_to_Macro_Writing/ja#String_Concatenation|結合]]している。この関数は、文字列リストの変数より、2つ目の引数として与えられた位置にある要素の値を取り出すものだ。今回の例では、「変数{{code|theList}}の{{code|i}}番目にある要素の値を取り出すように」と伝えている。要素はゼロ番目から始まり（MapToolのリストはすべてゼロ番目から始まる）、繰り返しの終わりまで毎回取得するので、次の要素を取得する。
* 最後に、適切なHTMLタグによってテーブルを閉じている。

&lt;div style=&quot;color:gray&quot;&gt;The output looks like this. If you add in several more elements to the variable {{code|theList}}, the table will grow in size to accommodate the new elements.&lt;/div&gt;

この出力は次のようになる。君が{{code|theList}}にいくつかの要素を追加すれば、表は追加した数だけ行が増えるであろう。

&lt;blockquote&gt;
{| border=&quot;1&quot;
|-
|Strength
|-
|Endurance
|-
|Dexterity
|-
|Intelligence
|}
&lt;/blockquote&gt;

==FOREACH：特定用途の FOR==
&lt;!--FOREACH: A Very Special FOR--&gt;

&lt;div style=&quot;color:gray&quot;&gt;
The {{roll|for}} loop structure lets you repeat a set of commands a specified number of times, with flexible beginning, ending, and steps. That looping method is applicable to many things, and can be looked at as a very &quot;general&quot; way to loop - it gives you lots of flexibility with where you start and end, and can be used for many operations.
&lt;/div&gt;

{{roll|for}}の繰り返しの構造は、一連のコマンドを柔軟な開始値、終了値、増分により指定した回数実行する。この繰り返しの手法は開始値と終了値を決め、多くの式を使うことで、多彩な柔軟性に富んでいる。そのため、多くの場面に応用でき、繰り返しにおける非常に『一般的』な手法と言える。

&lt;div style=&quot;color:gray&quot;&gt;
However, frequently loops are used to go through a list of items that is already established, and it is kind of a pain to have to make sure to count each list, then assign the variables in a {{roll|for}} loop, and make sure you can figure out how the {{code|counter}} variable corresponds to the position of an item in a list. So, a different kind of for loop - one that handles most of that without bothering ''you'' about it - also exists. This one is called {{roll|foreach}}. 
&lt;/div&gt;

しなしながら、頻繁に使われる繰り返しでは既に作られているリスト内の項目を順番に見ていくものであり、リストの数を調べて{{roll|for}}の繰り返しの変数を定義し、リスト内の項目の位置を示す{{code|カウンター}}変数がいくらであるか求めるなければならないのは、ある種の苦痛である。そしため、煩わしい多くの設定を省いたFORの繰り返しの亜種を用意している。これを{{roll|foreach}}と呼ぶ。

&lt;div style=&quot;color:gray&quot;&gt;
In a {{roll|foreach}} loop, the looping structure is given two arguments: the name of a string list, and a variable. The variable takes on the value of each element in the list, in turn, as the looping structure iterates. That's a bit confusing, so first, let's look at the general structure of a {{roll|foreach}} loop:
&lt;/div&gt;

{{roll|foreach}}の繰り返し構造には、2つの引数を用いる：文字列リストの名前と一つの変数だ。この変数は繰り返し構造が反復する度に、リストの各要素の値を保持する。少しばかり混乱しやすいので、まずは{{roll|foreach}}の繰り返しの一般的な構造を見ていこう：

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[foreach(item, list): command]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;
* '''{{roll|foreach}}''': once again, the roll option itself.
* '''item''': this is the variable that takes on the value of each successive element in the list or property
* '''list''': this is the string list you want the {{code|foreach()}} to work on
* '''command''': the operation you want performed on each successive {{code|item}} in {{code|list}}
&lt;/div&gt;

* '''{{roll|foreach}}'''：おなじみのロールオプション自身である。
* '''item'''：リストやプロパティの一連の要素のそれぞれの値を保持する変数。
* '''list'''：{{code|foreach()}}で処理を行う文字列リスト
* '''command'''：{{code|リスト}}内の一連の{{code|項目}}に対して実行する処理。

&lt;div style=&quot;color:gray&quot;&gt;
To explain that in plain English: assume for a moment that there you have the names of several targets (NPC tokens) that your character wants to attack at the same time. You need to make an attack roll against each target, which is equal to 1d20 + 7, but you have to roll separately for ''each'' target. 
&lt;/div&gt;

説明のためわかりやすくしてみよう。君のキャラクターが同時に攻撃しようとしている複数の名前のある対象（NPCトークン）があるとしよう。君は各対象に攻撃ロール（1d20＋7）を行う必要があるが、''個々の対象''に別々にロールしなければならない。

&lt;div style=&quot;color:gray&quot;&gt;
You could write out the attacks each time like this:
&lt;/div&gt;

この行為は次のように書き出すことができる。

&lt;div style=&quot;color:gray&quot;&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
I attack target 1: [1d20+7]&lt;br&gt;
I attack target 2: [1d20+7]&lt;br&gt;
I attack target 3: [1d20+7]&lt;br&gt;
I attack target 4: [1d20+7]&lt;br&gt;
&lt;/source&gt;
&lt;/div&gt;

&lt;source lang=&quot;mtmacro&quot;&gt;
対象 1 への攻撃： [1d20+7]&lt;br&gt;
対象 2 への攻撃： [1d20+7]&lt;br&gt;
対象 3 への攻撃： [1d20+7]&lt;br&gt;
対象 4 への攻撃： [1d20+7]&lt;br&gt;
&lt;/source&gt;

&lt;div style=&quot;color:gray&quot;&gt;
And so forth and so on. Not so bad if you have 3 targets. But what if you have 6? Or 12? 
&lt;/div&gt;

その他、色々な書き方があるだろ。相手が3体なら悪くないが、6体ならどうか？12体なら？

&lt;div style=&quot;color:gray&quot;&gt;
So instead, what if you created a single variable that was a list of the names of each target? Then, you can use the {{roll|foreach}} loop to go through the list one by one and let you make the roll with a very efficient little bit of code. {{roll|foreach}} may be a little hard to explain, but once you understand what it can do, you will see how useful it can be!
&lt;/div&gt;

その代わりとして、各対象の名称のリストの変数を作るとしたらどうだろうか？ リストの一つ一つを取り出しながら一か所のコードで効率的にロールを行うために、{{roll|foreach}}の繰り返しを使うことができる。{{roll|foreach}}は少しばかり説明が難しいが、何ができるかを理解すれば、いかに便利か解るだろう!

&lt;div style=&quot;color:gray&quot;&gt;
Now, let's jump to some examples.
&lt;/div&gt;

では、例を見てみよう。

===例1：文字列リストの内容を並べる===
&lt;!--Example 1: Listing the Contents of a String List--&gt;

&lt;div style=&quot;color:gray&quot;&gt;
This simple example will go through a string list, and list the value of each element in the list, from beginning to end.
&lt;/div&gt;

この単純な例では文字列リストを通して、リストの初めから終わりまでのそれぞれの要素の値を取り出して一覧していく。

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:theList = &quot;18, Bob, 29, Foo, 1009, Snorkel&quot;]

[foreach(item, theList, &quot;&lt;br&gt;&quot;): item]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;
In the above macro, we've created a {{roll|foreach}} loop that takes the list variable {{code|theList}}, and goes to each element in that list, and assigns the value of that element to the variable {{code|item}}. We've set the separator to the HTML code for a line break, and then -- after the colon -- instructed the macro to print the value of the variable {{code|item}} to the chat window. 
&lt;/div&gt;

上記のマクロでは、リストの変数 {{code|theList}} を扱う {{roll|foreach}} を作り、リスト内の各要素を取り出し、その要素の値を変数 {{code|item}} に割り当てている。改行を表す HTML コードをセパレーターとして設定し、コロンに続けて変数 {{code|item}} の値をチャットウィンドウに出力するマクロ指定している。

&lt;div style=&quot;color:gray&quot;&gt;
The output of that macro looks like:
&lt;/div&gt;

このマクロを出力は次のようになる。

&lt;blockquote&gt;
18&lt;br&gt;
Bob&lt;br&gt;
29&lt;br&gt;
Foo&lt;br&gt;
1009&lt;br&gt;
Snorkel
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;
Do you see what happened there? The foreach() option went to each element in {{code|theList}}, said, &quot;the variable {{code|item}} is now equal to the element,&quot; and then printed the value of {{code|item}} to chat.
&lt;/div&gt;

なにが起きているの解っただろうか？ この foreach() オプションは {{code|theList}} の各要素を取り出して「変数 {{code|item}} はこの要素と同じである」と宣言し、{{code|item}} の値をチャットウィンドウに出力している。

===例2：群がるゴロツキどもを打ちのめす===
&lt;!--Example 2: Attacking a Bunch of Bad Guys--&gt;

&lt;div style=&quot;color:gray&quot;&gt;
Now, let's look at the example described in the beginning. Remember how we had those target names to attack? Here's how we'd do that: 
&lt;/div&gt;

では最初にこの例を見てみよう。攻撃する対象の名前を持つ方法をどうするか覚えいるだろうか？次の通りだ。

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:targetList = &quot;Orc 1, Goblin 2, Orc 4, Zombie 17, Big Boss&quot;]

[foreach(target, targetList, &quot;&lt;br&gt;&quot;),CODE:
{
   [h:attackRoll = 1d20+7]
   I attack [r:target] with an attack roll of [r:attackRoll]
}]
&lt;/source&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:targetList = &quot;オーク 1, ゴブリン 2, オーク 4, ゾンビ 17, 親玉&quot;]

[foreach(target, targetList, &quot;&lt;br&gt;&quot;),CODE:
{
   [h:attackRoll = 1d20+7]
   [r:target] に攻撃し、攻撃ロールは [r:attackRoll] 。
}]
&lt;/source&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;
* The first line simply sets up the variable {{code|targetList}}, as discussed.
* The foreach loop goes through each element in {{code|targetList}}, assigning its value to the variable {{code|target}}. So, the first time through, {{code|target}} has the value of the first item in {{code|targetList}} - in other words, {{code|target}} is equal to {{code|Orc 1}}. The second time through, {{code|target}} equals the ''second'' item in the list, and so on.
* The {{roll|code}} roll option is used so we can execute multiple commands (and because it sometimes makes formatting the output a little easier)
* Inside the CODE brackets, we calculate a variable called {{code|attackRoll}}. This is recalculated on every loop, so it's different for each {{code|target}}.
* Finally, we generate some chat output, inserting the variable {{code|target}} and the variable {{code|attackRoll}} in the appropriate places.
&lt;/div&gt;

* 前述の通り、最初の行は変数 {{code|targetList}} を定義している。
* foreach の繰り返しを使い {{code|targetList}} の各要素を取り出し、その値を変数 {{code|target}} に割り当てている。最初の繰り返しでは {{code|target}} は {{code|targetList}} の最初の値（つまり {{code|target}} は {{code|オーク 1}}となる）を持っている。繰り返しの''2回目''では {{code|target}} はリストの2番目の値となり、以降順々に繰り返されていく。
* 複数のコマンドを実行するためにロールオプション {{roll|code}} を使用している（出力の書式を簡単にするために使うこともある）。
* CODE の確固の中で、{{code|attackRoll}}と名付けた変数を計算している。この変数は繰り返しごとに再々計算されるので、それぞれの {{code|target}} ごとに異なる結果となる。
* 最後に、変数 {{code|target}} と {{code|attacRoll}} の値を埋め込みチャットへの出力を生成している。

&lt;div style=&quot;color:gray&quot;&gt;
The output of that macro, when sent to chat, looks like:
&lt;/div&gt;

このマクロの出力がチャットウィンドウに送るものは次の通り。

&lt;div style=&quot;color:gray&quot;&gt;
&lt;blockquote&gt;
I attack Orc 1 with an attack roll of 12&lt;br/&gt;
I attack Goblin 2 with an attack roll of 11&lt;br/&gt;
I attack Orc 4 with an attack roll of 21&lt;br/&gt;
I attack Zombie 17 with an attack roll of 17&lt;br/&gt;
I attack Big Boss with an attack roll of 9
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;blockquote&gt;
オーク 1 に攻撃し、攻撃ロールは 12 &lt;br/&gt;
ゴブリン 2 に攻撃し、攻撃ロールは 11 &lt;br/&gt;
オーク 4 に攻撃し、攻撃ロールは 21 &lt;br/&gt;
ゾンビ 17 に攻撃し、攻撃ロールは 17 &lt;br/&gt;
親玉 に攻撃し、攻撃ロールは 9 &lt;br/&gt;
&lt;/blockquote&gt;

==最後に==
&lt;!--Conclusion--&gt;

&lt;div style=&quot;color:gray&quot;&gt;
That about covers the looping basics for MapTool macros. The examples shown above are very simple, of course - just enough to show you how these work. But looping is ''incredibly'' useful for many applications in a MapTool macro, from generating multiple die rolls to building tables to editing token properties, so make sure to experiment with it.
&lt;/div&gt;

ここでは、MapTool マクロにおける基本的な繰り返し処理を学んできた。上記の例は非常に単純なものである（もちろん例示する作業には純分なものだ）。しかし、繰り返し処理は MapTool マクロを、複数のダイスロールの生成から、テーブルの構築、トークンのプロパティの編集などに応用するうえで''非常に''に有用なものでありので、ぜひこの機能を試してもらいたい。

[[Category:MapTool]]
[[Category:Tutorial]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Hit Check Function</title>
    <ns>0</ns>
    <id>1022</id>
    <revision>
      <id>3962</id>
      <parentid>3961</parentid>
      <timestamp>2009-10-07T02:13:43Z</timestamp>
      <contributor>
        <username>Hawke</username>
        <id>55</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="507">Checks the value of an attack result against a target's defense. If the attack is greater than or equal to the defense, it outputs &quot;Hit!&quot; or &quot;Miss.&quot; 

function HitCheck(attackResult,targetName,TargetDefense)
&lt;source lang=&quot;mtmacro&quot;&gt;
Code:
[h: attackResult = arg(0)]
[h: targetName = arg(1)]
[h: targetDefense = arg(2)]

[h: defenseValue = getProperty(targetDefense,targetName)]

[r,if(attackResult &gt;= defenseValue): &quot;Hit!&quot;; &quot;Miss.&quot;]
&lt;/source&gt;

Thanks to Rumble for help with this macro.
[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>s (roll option)</title>
    <ns>0</ns>
    <id>1023</id>
    <revision>
      <id>3985</id>
      <parentid>3972</parentid>
      <timestamp>2009-10-10T06:26:55Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Added alias</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="710">===[ ] Display to Self Roll Option===
&lt;div&gt;• '''Introduced in version 1.3.b58'''&lt;/div&gt;
'''[s: ]''', '''[self: ]''' evaluates the text after the ':' but only displays the results to yourself.  This is similar to the /self chat command, but differs in that in can be used to display part of a message only to yourself, such as:

{{code|Everyone can see this [s: &quot;but only I can see this&quot;]}}

This roll option may be combined with the {{roll|g}}, {{roll|w}}, {{roll|gt}}, and {{roll|st}} options.  Blank messages will not be shown to a certain user if an entire message is invisible to that user due to these roll options or the {{roll|h}} roll option.

[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>g (roll option)</title>
    <ns>0</ns>
    <id>1024</id>
    <revision>
      <id>3983</id>
      <parentid>3974</parentid>
      <timestamp>2009-10-10T06:25:04Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Added alias</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="578">===[ ] Display to GM Option===
&lt;div&gt;• '''Introduced in version 1.3.b58'''&lt;/div&gt;
'''[g: ]''', '''[gm: ]''' evaluates the text after the ':' but only displays the results to the gm, such as:

{{code|Everyone can see this [g: &quot;but only the GM can see this&quot;]}}

This roll option may be combined with the {{roll|s}}, {{roll|w}}, {{roll|gt}}, and {{roll|st}} options.  Blank messages will not be shown to a certain user if an entire message is invisible to that user due to these roll options or the {{roll|h}} roll option.

[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>w (roll option)</title>
    <ns>0</ns>
    <id>1025</id>
    <revision>
      <id>3987</id>
      <parentid>3980</parentid>
      <timestamp>2009-10-10T06:28:55Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Added alias</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="944">===[ ] Display to Specific Player Option===
&lt;div&gt;• '''Introduced in version 1.3.b58'''&lt;/div&gt;
'''[w(&quot;name&quot;): ]''', '''[whisper(&quot;name&quot;): ]''' evaluates the text after the ':' but only displays the results to the specific named user, such as:

&lt;source lang=&quot;mtmacro&quot; line&gt;
Everyone can see this [w(&quot;bob&quot;): &quot;but only Bob can see this&quot;]
&lt;/source&gt;

{{roll|w}} can also take more than one player name as an argument:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[w(&quot;Fred&quot;, &quot;Joe&quot;): d20]
&lt;/source&gt;

It can also take a JSON list containing player names:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = json.fromList(&quot;Fred, Joe&quot;)]
[w(names): d20]
&lt;/source&gt;

This roll option may be combined with the {{roll|s}}, {{roll|g}}, {{roll|gt}}, and {{roll|st}} options.  Blank messages will not be shown to a certain user if an entire message is invisible to that user due to these roll options or the {{roll|h}} roll option.

[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>st (roll option)</title>
    <ns>0</ns>
    <id>1026</id>
    <revision>
      <id>3986</id>
      <parentid>3975</parentid>
      <timestamp>2009-10-10T06:27:51Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Added alias</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="857">===[ ] Display Tooltip to Self Option===
&lt;div&gt;• '''Introduced in version 1.3.b58'''&lt;/div&gt;
'''[st: ]''', '''[selftt: ]''' evaluates the text after the ':' and will display the result to everyone, but only displays the tooltip to yourself.  For example, {{code|[st: 2+2]}} will, depending on your preferences, show &amp;#171;&lt;font color=&quot;blue&quot;&gt;&amp;#160;2+2 = 2 + 2 = 4&amp;#160;&lt;/font&gt;&amp;#187; to you in the chat window, or when you hover your mouse over the output, but would only show the result of the calculation, in this case 4, to everyone else.

This roll option may be combined with the {{roll|s}}, {{roll|w}}, {{roll|g}}, and {{roll|gt}} options.  Blank messages will not be shown to a certain user if an entire message is invisible to that user due to these roll options or the {{roll|h}} roll option.

[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>gt (roll option)</title>
    <ns>0</ns>
    <id>1027</id>
    <revision>
      <id>3984</id>
      <parentid>3971</parentid>
      <timestamp>2009-10-10T06:25:58Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Added alias</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="877">===[ ] Display Tooltip to GM Option===
&lt;div&gt;• '''Introduced in version 1.3.b58'''&lt;/div&gt;
'''[gt: ]''', '''[gmtt: ]''' evaluates the text after the ':' and will display the result to everyone, but only displays the tooltip to the GM.  For example, {{code|[gt: 2+2]}} will, depending on the GM's preferences, show &amp;#171;&lt;font color=&quot;blue&quot;&gt;&amp;#160;2+2 = 2 + 2 = 4&amp;#160;&lt;/font&gt;&amp;#187; to the GM in his chat window, or when he hovers his mouse over the output, but would only show the result of the calculation, in this case 4, to everyone else, including yourself.

This roll option may be combined with the {{roll|s}}, {{roll|w}}, {{roll|g}}, and {{roll|st}} options.  Blank messages will not be shown to a certain user if an entire message is invisible to that user due to these roll options or the {{roll|h}} roll option.

[[Category:Roll Option]]
[[Category:Display Roll Option]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>self (roll option)</title>
    <ns>0</ns>
    <id>1028</id>
    <redirect title="s (roll option)" />
    <revision>
      <id>3977</id>
      <timestamp>2009-10-10T06:15:55Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Redirecting to [[s (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="93">#REDIRECT [[s (roll option)]]
[[Category:Roll Option]]
[[Category:Display Roll Option]]&lt;html&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>gm (roll option)</title>
    <ns>0</ns>
    <id>1029</id>
    <redirect title="g (roll option)" />
    <revision>
      <id>3978</id>
      <timestamp>2009-10-10T06:17:06Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Redirecting to [[g (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="93">#REDIRECT [[g (roll option)]]
[[Category:Roll Option]]
[[Category:Display Roll Option]]&lt;html&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>whisper (roll option)</title>
    <ns>0</ns>
    <id>1030</id>
    <redirect title="w (roll option)" />
    <revision>
      <id>3979</id>
      <timestamp>2009-10-10T06:17:55Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Redirecting to [[w (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="93">#REDIRECT [[w (roll option)]]
[[Category:Roll Option]]
[[Category:Display Roll Option]]&lt;html&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>selftt (roll option)</title>
    <ns>0</ns>
    <id>1031</id>
    <redirect title="st (roll option)" />
    <revision>
      <id>3981</id>
      <timestamp>2009-10-10T06:22:35Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Redirecting to [[st (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="94">#REDIRECT [[st (roll option)]]
[[Category:Roll Option]]
[[Category:Display Roll Option]]&lt;html&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>gmtt (roll option)</title>
    <ns>0</ns>
    <id>1032</id>
    <redirect title="gt (roll option)" />
    <revision>
      <id>3982</id>
      <timestamp>2009-10-10T06:23:20Z</timestamp>
      <contributor>
        <username>Kbielefe</username>
        <id>64</id>
      </contributor>
      <comment>Redirecting to [[gt (roll option)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="94">#REDIRECT [[gt (roll option)]]
[[Category:Roll Option]]
[[Category:Display Roll Option]]&lt;html&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setCurrentMap</title>
    <ns>0</ns>
    <id>1033</id>
    <revision>
      <id>6694</id>
      <parentid>5171</parentid>
      <timestamp>2016-05-03T11:43:45Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1523">{{MacroFunction
|name=setCurrentMap
|version=1.3b60
|description=
Designates the given map as the current one, allowing initiative to be moved from map to map. 

'''WARNING:'''  This function changes an internal variable used by MapTool to keep track of which map is current and this change takes place immediately.  However, changes to tokens are queued up and only occur when the macro finishes execution (well, sort of).  The end result is that if a token is being modified on map &quot;A&quot; and your macro calls {{func|setCurrentMap}} to switch to map &quot;B&quot;, when the macro finishes and the token changes are executed they will be processing a token on map B!  If there was no such token on map B a new one will be created, thus mysteriously duplicating tokens!

Therefore, do NOT modify any token properties, states, names, notes, or any other token-specific values after calling {{func|setCurrentMap}}.  Or make sure that the first thing your macro does is call {{func|setCurrentMap}} so that all tokens accessed later will be on the map that is current when the macro finishes.

Search http://forums.rptools.net/ for {{code|setCurrentMap}} to find some discussion threads on this topic.

|usage=
&lt;source lang=&quot;mtmacro&quot;&gt;
setCurrentMap(mapName)
&lt;/source&gt;
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: status = input(&quot;NewMap|&quot; + getAllMapNames() + &quot;|Map to switch to|LIST|VALUE=STRING&quot;)]
[h:abort(status)]
[h:setCurrentMap(NewMap)]
&lt;/source&gt;
|also=
{{func|getAllMapNames}} {{func|getVisibleMapNames}}

}}
[[Category:Map Function]]</text>
      <sha1>54ne44ygefnu1drfn7meaw8arx783q9</sha1>
    </revision>
  </page>
  <page>
    <title>Editor:Translation/it</title>
    <ns>0</ns>
    <id>1035</id>
    <revision>
      <id>4030</id>
      <parentid>4023</parentid>
      <timestamp>2009-11-06T00:04:59Z</timestamp>
      <contributor>
        <username>Gringoire</username>
        <id>119</id>
      </contributor>
      <comment>/* Passaggi per traddurre un Articolo */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3785">{{Languages|Editor:Translation}}{{Translation}}
__TOC__
==Passaggi per traddurre un Articolo==
Questa dovrebbe essere la prima pagina che tu tradurrai, in quanto i seguenti passaggi usano questa pagina come esempio. Ogni occorrenza di  {{code|Editor:Translation}} dovrebbe essere rimpiazzata dal nome della pagina che stai traducendo. Dopo aver tradotto questa pagina, dovresti essere in grado di tradurre ogni pagina di questo wiki.
# Modifica la pagina esistente, e aggiungi {{code|&lt;nowiki&gt;{{Languages|Editor:Translation}}&lt;/nowiki&gt;}} all'inizio e alla fine dell'articolo, se ancora non è presente questa riga. Ricorda che {{code|Editor:Translation}} va cambiato col nome della pagina che stai traducendo.
# Copia il contenuto della traduzione inglese sulla tua clipboard, per usarla come punto di partenza per la tua traduzione.
# Salva i tuoi cambiamenti alla versione inglese, se ne hai fatti. Se non hai fatto cambiamenti, semplicemente torna indietro.
# Per iniziare la traduzione, devi inserire l'URL della versione inglese della pagina nella barra di indirizzi del tuo browser, e poi aggiungere {{code|/it}} alla fine. Nel nostro esempio, l'url finale dovrebbe essere {{code|&lt;nowiki&gt;http://lmwcs.com/rptools/wiki/Editor:Translation/it&lt;/nowiki&gt;}} . {{code|/it}} in questo caso è il codice per la lingua italiana, puoi trovare il codice per il tuo linguaggio, nella tabella alla fine dell'articolo.
# La tua pagina tradotta dovrebbe ragionevolmente mantenere lo stesso formato di quella originale, dove possibile. Ci sono tuttavia delle eccezioni. Il codice dell'articolo tradotto dovrebbe avere una struttura simile:
&lt;pre&gt;
{{Languages|Nome Pagina}}{{Translation}}
__TOC__
YOUR TRANSLATED PAGE HERE
{{Languages|Nome Pagina}}
&lt;/pre&gt;

==Traduzione dei messaggi di sistema==
L'uso di {{code|@}} serve ad indicare dove un elemento variabile è usato. Mantenere la numerazione intatta, o esiste una forte probabilità di ottenere messaggi in aree errate.
# Il seguente articolo è una traduzione dall'articolo inglese.
# Il seguente articolo è una vecchia traduzione dell'articolo inglese.
# Navigazione
# Uso Base
# Tutorials
# Comandi Chat
# Dice Expressions
# Glossario
# Referenze Macro
# Lista di Functions
# Roll Options
# Variabili Speciali
# Macro Cookbook
# Editors
# Discussioni Editor
# Cambiamenti recenti
# Principiante
# Questo è un articolo per principianti
# Intermedio
# Questo è un articolo di livello intermedio
# Avanzato
# Questo è un articolo di livello avanzato
# Note: This function has been deprecated. Refer to @ for current functionality.
# @ Function
# Introduced in version @
# Last checked for compatibility with version @
# Usage
# Example
# Examples
# See Also
# Version Changes
# Note: This article refers to a proposed change that has not been implemented in the main code base yet.
# @ Roll Option
# Note: This function can only be used in a Trusted Macro
# Note: This parameter can only be used in a Trusted Macro
# This article us a stub, you can help the RPTools Wiki project by contributing content to expand this article.
# This article needs:

==Codici Lingua==
Se sei interessato nella traduzione degli articoli su questo wiki, in un linguaggio non mostrato in lista, faccelo sapere!
{| border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
! Page Name || Linguaggio 
|-
|  || English
|-
| '''/ar''' || {{#language:ar}}
|-
| '''/de''' || {{#language:de}}
|-
| '''/el''' || {{#language:el}}
|-
| '''/es''' || {{#language:es}}
|-
| '''/fr''' || {{#language:fr}}
|-
| '''/it''' || {{#language:it}}
|-
| '''/ja''' || {{#language:ja}}
|-
| '''/ko''' || {{#language:ko}}
|-
| '''/pt''' || {{#language:pt}}
|-
| '''/ru''' || {{#language:ru}}
|-
| '''/zh''' || {{#language:zh}}
|}
{{DISPLAYTITLE:Translation Instructions}}
{{Languages|Editor:Translation}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>MapTool FAQ/it</title>
    <ns>0</ns>
    <id>1036</id>
    <revision>
      <id>4024</id>
      <timestamp>2009-11-05T00:36:06Z</timestamp>
      <contributor>
        <username>Gringoire</username>
        <id>119</id>
      </contributor>
      <comment>New page: {{Languages|MapTool FAQ}}{{Translation}} ===Dove sono localizzate le risorse di default?=== Le risorse fornite di base con MapTool sono localizzate nella directory {{code|.maptool}} che è...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="808">{{Languages|MapTool FAQ}}{{Translation}}
===Dove sono localizzate le risorse di default?===
Le risorse fornite di base con MapTool sono localizzate nella directory {{code|.maptool}} che è possibile trovare nella tua directory user.
* Windows Vista o Windows 7: {{code|C:\Users\&lt;username&gt;\.maptool\resource\Default\}}
* Windows XP: {{code|C:\Documents &amp; Settings\&lt;username&gt;\.maptool\resource\Default\}}
* Macintosh OS X: {{code|~/.maptool/resource/Default/}} or {{code|/home/&lt;username&gt;/.maptool/resource/Default/}}
* Linux e altri Unix: {{code|~/.maptool/resource/Default/}} or {{code|/home/&lt;username&gt;/.maptool/resource/Default/}}
'''Nota:''' NON dovresti inserire le tue risorse personalizzate in questa cartella, in quanto esse potrebbero essere cancellate.


[[Category:MapTool]]
{{Languages|MapTool FAQ}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Mapping/it</title>
    <ns>0</ns>
    <id>1037</id>
    <revision>
      <id>6386</id>
      <parentid>6384</parentid>
      <timestamp>2015-10-16T09:05:41Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <comment>Aggiornato all'ultima versione inglese 16 ott 2015 alle 11:04</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21612">{{Languages|Introduction to Mapping}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}__TOC__

===Prima le prime cose: Cos'è MapTool?===

Bene o male avete gia un'idea di cosa sia MapTool e di cosa faccia, voglio solo spendere poche parole riguardo all'obbiettivo primario di MapTool: 

&lt;p align=&quot;center&quot;&gt;'''MapTool è un programma che vi aiuta a condividere un &quot;tavolo virtuale&quot; con i vostri amici, così da poterci giocare sopra.''' &lt;/p&gt;

Questo è ciò che MapTool fa, e le sue features hanno puntato a offrirvi una sequela di opzioni, dalla più semplice alla più complessa, per raggiungere questo obbiettivo.

In tutti i discorsi di macro e proprietà e tabelle e scripting che seguiranno in questa e in altre guide, non perdete mai di vista la ragione per la quale state investendo tempo in MapTool: E' un modo per giocare con gli amici (ndr: O conoscerne nuovi!). 

===Riguardo a questa guida===

Lo scopo di questa guida non è quello di indirizzarvi verso le rivoltanti viscere del sistema di scripting delle macro di MapTool, luci, proprietà o altra roba complicata. Anzi, questa guida vuole iniziarvi all'uso di MapTool come programma per ''mapping'' per giochi di ruolo. Altre guide indirizzano ad argomenti come [[Introduction_to_Game_Hosting/it|Ospitare una partita online]], [[Introduction_to_Tokens/it|lavorare con i tokens]], [[Introduction to Lights and Sights/it|predisporre visione e luci]], e [[Introduction_to_Macro_Writing/it|scrivere macro]]. 

Le istruzioni seguenti dovrebbero renderti in grado di poter cominciare ad usare MapTool come un tool di  battle mapping/general mapping. Si danno per scontate alcune cose:

# Tu sai come creare o ottenere immagini di mappe. Esistono terabytes (exabytes! yottabytes!) di immagini di mappe nel web. Controlla [http://gallery.rptools.net RPTools Gallery] oppure [http://www.rpgmapshare.com RPGMapShare] per tonnellate di materiale riguardo a mappe. 
# Puoi avviare MapTool sul tuo computer. MapTool necessita Java 1.5 installato sulla tua macchina; Sta a te trovare ed ottenere questa roba.

Quindi proseguiamo. Per iniziare:

# Scaricate MapTool da http://rptools.net. L'ultima &quot;build&quot; di MapTool è sempre posta in cima a [http://www.rptools.net/index.php?page=downloads#MapTool questa lista]. Attualmente, l'ultima build è la 1.3.b88 (b88 tuttavia non funziona bene, andrebbe usata la b87). '''NOTA''': Puoi anche avviare [http://www.rptools.net/index.php?page=launch Java WebStart] Per avviare MapTool senza scaricare e decomprimere il file.
# Se scarichi e decomprimi il file zip di MapTool, decomprimilo da qualche parte sul tuo computer, poi assicurati che funzioni. Il file .bat incluso imposta dei parametri quando avvii il programma, come la memoria allocata ecc... Il programma si avvia cliccando sul file .jar, ma così facendo otterrete un warnings. Se usi windows, puoi usare il windows launcher, che ti consente di alterare le impostazioni in modo molto semplice.

Ora, cominciamo a scoprire le funzioni.

==Inserire immagini nella tua Resource Library==

La '''Resource Library''' di MapTool è una collezione di &quot;puntatori&quot; o &quot;links&quot; a cartelle sul tuo computer, contenenti le immagini che tu vorrai usare in MapTool. MapTool ha integrato una selezione base di immagini, ma puoi aggiungere quante e quali immagini desideri - tu hai il controllo pieno delle immagini inseribili in MapTool. 
&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mt-f-addtoreslib.jpg‎|thumb|Il menù file mostra '''Add to Resource Library''']]

[[Image:Add-asset-dialog.jpg|thumb|La finestra di dialogo '''Aggiungi alla Resource Library''' dialog]]

1. Ottieni immagini (mappe, per esempio) da qualche parte: possono essere scaricate dal web, o create da te. Inseriscile in una directory qualsiasi - questa directory è importante per il passo 3.

2. Apri MapTool.

3. Seleziona '''File -&gt; Aggiungi alla Resource Library'''. Questo aprirà una finestra di dialogo (clicca sulla miniatura per vedere le immagini a grandezza naturale, nota che le miniature sono di una vecchia versione di MapTool; il menù corrente potrebbe essere un po' differente ma le opzioni generali rimangono invariate).

4. Questa finestra mostra tre schede, quella di default è '''Local Directory'''. Per agginugere immagini dalla directory locale, cliccate sul pulsante affianco al campo path e selezionate la directory contenente le immagini che desiderate aggiungere. Nella seconda scheda potete indicare un URL da cui scaricare le risorse e nella terza scheda vi è permesso installare alcuni pacchetti di immagini che sono stati resi disponibili da alcuni artisti proprio per MapTool.

5. Nel momento che avete fatto la vostra scelta, cliccate su Install&gt;&gt; in modo che MapTool aggiunga le immagini alla vostra resource library.

'''NOTA''': Il nome della cartella nella Resource Library di MapTool sarà lo stesso della directory che hai richiamato nel passo 3.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mtreslib.jpg|thumb|Le cartelle nella Resource Library di MapTool. Questi sono puntatori alle directory sul vostro hard drive.]]

5. Se selezioni una cartella nella tua Resource Library, vedrai la miniatura delle immagini all'interno di quella cartella. NOTA: Se la tua cartella ha sottocartelle, clicca il '''+''' per espandere la struttura ad albero della cartella.

'''NOTA''': Siccome le cartelle che appaioni nella Resource Library sono solo puntatori a directory sul tuo hard drive, non devi pensare che MapTool stia duplicando ogni file -- La Resource Library è solo un modo per MapTool di sapere da dove prendere le immagini richieste.

&lt;br style=&quot;clear:both;&quot;/&gt;

==Creazione di una Map==

[[Image:Map-newmap.jpg|thumb|La voce di menù '''New Map''']]

[[Image:Map-new-dialog.jpg|thumb|La finestra di dialogo '''Map Properties''']]

1. Seleziona '''Map -&gt; New Map'''. Si aprirà la finestra di dialogo ''Map Properties''.

2. Nella parte sinistra della finestra di dialogo di ''Map Properties'' vedrete diverse opzioni e campi di testo.

* '''Name''': questo è il titolo della map. Notate che selezionando una map image il titolo acquisirà il nome di questa. Scegliere il titolo alla fine risulta l'idea migliore, così da poter chiamare la map come si preferisce invece di un generico &quot;mappa001.jpg&quot; o come era originariamente chiamata l'immagine.
* '''Cell Type''': map esagonale, squadrata oppure completamente priva di griglia.
* '''Distance Per Cell''': questo è il valore arbitrario di una cella(''Es.'', Nella la 4a edizione di Dungeons &amp; Dragons è tutto calcolato in quadrati, quindi si può impostare semplicemente questo valore ad 1)
* '''Pixels per cell''': questo è quello che copre una cella in pixel – il valore predefinito è 50. E' molto importante per la scalatura delle map images che scaricate.
* '''Vision Distance''': MapTool comprende visione, nebbia-di-guerra ed altre funzioni, sicché questo valore indica la distanza predefinita fin dove un personaggio può vedere

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Background-dialog.jpg|thumb|La finestra di dialogo '''Choose Background''']]

3. Cliccate sul bottone '''Background'''. Verrà visualizzato un pop-up di dialogo contenente diverse opzioni. La texture di background e/o il colore scelto saranno ripetuti infinitamente in ogni direzione.

* '''Swatch''': consente di utilizzare un colore uniforme come sfondo della map. 
**&lt;font color=&quot;red&quot;&gt;'''Attenzione:''' Nella recente versione 1.3.b53, se selezionate il campione in alto a sinistra (quello bianco), Maptool restituirà un errore. L'errore non causerà crash o altro, ma non imposterà nemmeno il bianco come sfondo. Una valida alternativa è ottenere il medesimo risultato tramite la scheda Hue o RGB.&lt;/font&gt;
* '''Hue/RGB''': consente di specificare i colori invece di selezionare uno swatch.
* '''Texture''' (che io uso più di frequente): da accesso alla propria resource library, dove potete selezionare una texture che sarà utilizzata come background.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-mapbutton.jpg|thumb|Il bottone '''Map''' nella finestra di dialogo map properties]]

4. Se avete un'immagine di map in mente (come una scaricata, o creata con Gimp, o qualcosa del genere) cliccate sul bottone '''Map'''. Verrà visualizzata una finestra di dialogo con la tua Resource Library. Selezionate l'immagine che avete intenzione di usare. Questa immagine sarà sovrapposta al layer del background che avete già selezionato.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-create-done.jpg|thumb|La finestra di dialogo '''Map Properties''' dopo aver selezionato una map dalla Resource Library. Notate la miniatura nell'anteprima.]]

5. Nel momento in cui vi riterrete soddisfatti di background e map (potete osservarne un'anteprima a controprova, come nell'immagine di fianco) dategli un nome e cliccate su '''OK'''. La map verrà caricata nella finestra principale di MapTool.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Creare molteplici Maps in una Campaign===

MapTool consente di creare più mappe comprese in un unica campagna. Il procedimento è semplice: ripetere i passi elencati in [[Introduction_to_Mapping/it#Creazione_di_una_Map | Creazione di una Map]] per ogni map, selezionare una nuova immagine, la texture/colore di background ed il titolo per ognuna di esse.

Ogni nuova map creata lo sarà automaticamente all'interno della campaign a cui lavorate in quel momento (creare una nuova map non salva automaticamente la campaign, assicurarsi di [[Introduction_to_Mapping/it#Salvare i tuoi lavori | salvare i tuoi lavori]] ogniqualvolta ne completate una).

E' inoltre possibile aggiungere nuove maps ad una campaign precedentemente salvata - basta aprire il file di campaign (andando su ''File &gt; Open Campaign''') e seguire i passi per creare una nuova map.

==Finestra Principale di MapTool==

===Layers di MapTool===

[[Image:Layer-window.png|thumb|La finestra dei '''Layer''', presente in tutte le maps di MapTool]]

Quando una map è caricata potete vedere un piccolo box al suo interno chiamato ''Layer''. Le maps di MapTool possiedono quattro layers:

* '''Background''': questo è il layer per le immagini, maps di sfondo e qualsiasi cosa non possa muoversi.
* '''Hidden''': per le partite online, questo è un layer che solo il GM può vedere.
* '''Object''': questo è il layer per gli oggetti simili ai tokens, cose che potrebbero muoversi o essere spostate dai giocatori (lampade, tavoli, ecc.).
* '''Token''': questo è il layer dove vanno i tokens (i tokens sono piccole immagini che rappresentano i personaggi giocanti e non). Siate sicuri di aver selezionato il layer token quando aggiungete personaggi e nemici sulla map.

Pensate ai layers di MapTool come quattro differenti fogli di acetato oppure carta da lucido uno sopra l'altro. Il più basso - il '''Background''' - è dove disegnate le parti base della map: muri, scale, alberi, ecc. Sul foglio superiore, quello chiamato '''Objects''' disegnate le ''cose'' che i personaggi possono usare, scompigliare o rompere: porte, casse, tavoli, sedie e così via. In quello ancora seguente - il layer '''Hidden''' - potete mettere le cose che solo il GM può vedere (che ad esempio possono essere oggetti ''o'' personaggi nascosti!). Infine, nel layer in cima - il layer '''Token''', mettete le miniature - mostri, personaggi e PNG del mondo di gioco. 

I tokens possono essere posati su uno qualsiasi dei 4 layers in MapTool. Per farlo basta premere il tasto destro del mouse sopra l'immagine del token e selezionare '''Change To &gt;'''. Nel menù selezionate il layer dove volete che sia spostato il token e questo lì vi si posizionerà.

===Selezionare Maps===

[[Image:Blueglobe.jpg|thumb|Il pulsante del Globo, dove potete selezionare tra le vostre maps]]

[[Image:Maplist.jpg|thumb|Una lista di maps, che appare dopo aver fatto clic sul pulsante Globe.]]

Se create una sola map nella vostra campaign, questa verrà caricata e sarà l'unica map che vedrete.

Se voi [[Introduction_to_Mapping/it#Creare_molteplici_Maps_ in_una_Campaign|create più maps]] o avete una campaign che ne possiede potete scegliere fra di loro cliccando sull'icona del globo in alto a destra della finestra di MapTool - questa presenta un elenco di possibili maps. Notate che se c'è una sola map, cliccando sul globo blu sarà mostrato il nome della map.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Scalare e Spostare===

Per scalare la map potete usare la rotellina del mouse oppure il segno di uguaglianza per ingrandire ed il trattino per rimpicciolire. 

Premere il segno di addizione renderà la scalatura 1:1 . 

Per muovere la map premete cliccate il tasto destro su di essa e spostate il mouse. Questo trascinera la map in qualsiasi direzione.

==Basi dei Token==

[[Token/it:token|I MapTool Tokens]] (o semplicemente &quot;Tokens&quot;)sono semplici immagini che agiscono come rappresentazione visuale di molte cose in una map di MapTool. L'uso più comune che hanno è la rappresentazione dei personaggi giocanti e non giocanti; in altre parole, i tokens prendono il posto delle miniature sulla map virtuale. 

I Tokens, come tutto il resto, partiranno come file immagine memorizzati all'interno della tua [[Macros:Glossary/it#R|Resource Library]]. MapTool viene fornito con alcuni tokens inclusi (e abbiamo un bel programma separato chiamato [http://www.rptools.net/index.php?page=tokentool TokenTool] che ne consente la creazione), oppure potete supplire a propria scelta prendendone dovunque ne troviate.

Questa sezione della guida di Introduzione al Mapping si occupa solo di alcune delle più basilari, comuni cose si potrebbe voler fare con MapTool Tokens. Ci sono ''molte'' caratteristiche, trucchi e fantastiche funzioni disponibili lavorando con i tokens - talmente tante da meritarsi una guida tutta per loro. 

===Placing Tokens on the Map===

[[Image:Default-library.jpg|thumb|La cartella ''Default'' nella Resource Library]]

1. Per vedere i tokens predefiniti menzionati prima, andate nella cartella Default nella vostra ''Resource Library'' e cliccate sul'''+''' per espanderla.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Default-tokens.jpg|thumb|La sottocartella ''Tokens'']]

2. Selezionate la cartella Tokens.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-drag-to-map.jpg|thumb|Trascinare un token sulla map]]

[[Image:Token-on-map.jpg|thumb|Il token appare!]]

3. Nella finestra sottostante (dove appaiono le miniature), usate il mouse per trascinare un token sulla map. Il cursore si trasformerà in una mano, vi basterà trattenere il token e rilasciarlo su un punto qualsiasi della map.

Quando rilascerete il pulsante del mouse, il token apparirà sulla map come mostrato nella miniatura.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Muovere i Tokens===

Una volta che un token è sulla mappa è possibile spostarlo usando il mouse oppure muoverlo selezionando il token (cliccandoci sopra) e usando le frecce direzionali per muoverlo e premendo '''D''' per completare il movimento. 

Se cercate di creare un sentiero complesso potete premere la barra spaziatrice per creare un waypoint ad ogni tappa.

===Cambiare Token's Name, GM Name e Label===

[[Image:Token-default-name.jpg|thumb|Un token, mostra il nome predefinito assegnato quando è stato trascinato la prima volta sulla map.]]

[[Image:Edit-token.jpg|thumb|La finestra di dialogo '''Edit Token''']]

I tokens possiedono tre tipi di &quot;nome&quot; che potete assegnargli. Nel momento in cui un token viene trascinato la prima volta sulla map gli viene assegnato un nome predefinito (tipicamente lo stesso del ''filename'' privo di estensione che il token ha sul tuo computer). Per esempio, il token mostrato nell'immagine di fianco è stato trascinato dalla selezione predefinita di token di Maptool ed il suo nome ereditato è &quot;Hero&quot;.

I tre nomi che un token può avere sono:

*'''Token Name''': Il nome del token che appare a tutti gli utenti. Questo non è opzionale.
**&lt;font color=&quot;red&quot;&gt;'''NOTA''': Assicuratevi che ogni token abbia un nome unico! Altrimenti le macros di Maptool potrebbero assumere un comportamento imprevedibile.&lt;/font&gt;
*'''GM Name''': Questo nome appare solamente alle persone connesse a MapTool con il ruolo di &quot;GM&quot;. 
*'''Label''': Questo testo appare al di sotto del Token Name, ed è visibile a tutti.

Per cambiare il name, GM name e/o label dei token:

1. Doppio-clic sulla immagine del token sulla map. Questo aprirà la finestra di dialogo '''Edit Token''', come illustrato di seguito.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changednames.jpg|thumb|Editare il nome, GM name e label del token]]

[[Image:New-token-names.jpg|thumb|Il token mostra il nuovo name e label]]

2. Nel campo '''Name''' inserire il nome che preferite. In questo esempio ho inserito &quot;Bork the Brave&quot;.

3. Nel campo '''GM Name''' inserite un nome. Per questo esempio ho inserito &quot;Cork the Cowardly&quot;.

4. Nel campo '''Label''' inserite un'etichetta. Per questo esempio ho inserito &quot;Human Warrior&quot;. 

5. Cliccate su '''OK''' per salvare i cambiamenti.

Una volta che avrete confermato vedrete il token cambiato: 

Potete effettuare questo processo di cambio nome per ogni token depositato sulla map.

&lt;br style=&quot;clear:both;&quot; /&gt;

===Cambiare immagine ad un Token===

Saltuariamente, quando create un nuovo token, potreste voler cambiare l'immagine sulla sua facciata. Poniamo che, per esempio, troviate un ganzo disegno giusto a punto adatto per il vostro signore supremo del male, ma che abbiate già un token a lui associato - non volete cancellare tutto il token solo per cambiarne l'immagine vero?  E' un suicidio. Piuttosto, cambiate semplicemente l'immagine del token tramite i seguenti passi:

[[Image:Edit-token.jpg|thumb|La finestra di dialogo '''Edit Token''']]

1. Assicuratevi di avere la nuova immagine nel formato PNG o JPG già disponibile nella vostra Resource Library. Se gettate un occhio sopra, alla sezione [[Introduction_to_Mapping/it#Inserire_immagini_nella_tua_Resource_Library|Inserire immagini nella tua Resource Library]], questa parla di come aggiungere un immagine di map alla propria Resource Library: bene, le immagini dei token (o in effetti ''qualsiasi'' immagine) possono essere aggiunte esattamente nello stesso modo. 

2. Doppio-cliccate sopra il token per aprire la finestra di dialogo '''Edit Token'''. 

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changeimage.jpg|thumb|Il bottone per cambiare l'immagine del token]]

3. In alto a sinistra di questa finestra di dialogo cliccate sul piccolo segno di addizione in verde.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:New-image-picked.jpg|thumb|Una nuova immagine è selezionata dalla resource library]]

4. Nella finestra di dialogo '''Choose Image''', selezionate la cartella della Resource Library dove risiede la nuova immagine del token (un bordo rosso e bianco indica l'immagine che avete selezionato) e cliccate su '''OK'''.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-image-changed.jpg|thumb|L'immagine del token è cambiata]]

5. Quando avrete premuto '''OK''', tornerete nella finestra di dialogo Edit Token e vedrete l'immagine cambiata in quella che avete selezionato.

&lt;br style=&quot;clear:both;&quot; /&gt;

===Cambiare la grandezza dei Tokens===

[[Image:Token-rightclick.jpg|thumb|Variare la grandezza di un token usando il menù sul tasto destro]]

I Tokens assumono automaticamente la dimensione di un quadrato della griglia (notare che una griglia predefinita misura 50x50 pixel). Se premete il pulsante destro su uno di essi un menù esibirà un vasto numero di opzioni - una di queste è '''Size'''. E' quindi possibile configurare il suo valore e generare creature grandi, enormi o gigantesche e via dicendo. L'immagine di fianco mostra il menù che appare alla pressione del tasto destro su un token.

NOTA: questi valori di taglia (large, huge, gargantuan, ecc.) vengono applicati solo alle maps che hanno una griglia (ricordate, quando create una map avete l'opzione di crearla senza griglia). Se usate una mappa senza griglia i valori di size sono molto più finemente graduati.

&lt;br style=&quot;clear:both;&quot;/&gt;

==Salvare i tuoi lavori==

Il formato di &quot;salvataggio&quot; predefinito di MapTool si chiama ''Campaign File''. Questo Campaign File (con estensione ''.cmpgn'') contiene le maps e i tokens che avete sistemato. Se siete interessati a questo genere di cose, il file della campagna è in realtà un file XML zippato. 

Per salvare il lavoro appena svolto scegliere '''File -&gt; Save Campaign''', date un nome alla vostra e questo è quanto. 

Quando salvate una campagna Maptool salva la locazione dei tokens su tutte le maps così che possiate riprendere immediatamente da dove avevate lasciato!

==Esportare Map Images==

MapTool può esportare le tue map images su file immagine (Formato PNG). Per esportare un immagine su una locazione a tua scelta:

1. Andare su '''File-&gt;Export''' e selezionare '''Screenshot As'''.

2. Alla comparsa della finestra di dialogo selezionare &quot;View&quot; (la vista GM, dove potete vedere tutto, oppure la vista Player, dove le uniche cose visibili sono quello che i ''players'' possono vedere...I lo dicevo che Maptool ha diverse capacità di visualizzazione molto cool!)

3. Selezionare la destinazione del tuo file utilizzando il pulsante Browse (o, alternativamenete, spediscilo ad un server FTP)

4. Clicca su '''Export'''.

==Prossimi Passi==

Ora ciò che avete fra le mani è una map base con alcuni tokens al di sopra, il prossimo passo è connettervi con i vostri amici su internet (o faccia a faccia) e usare tutto questo per una sessione di gioco! Questo argomento viene trattato in This topic is covered in the [[Introduction to Game Hosting/it|Introduzione al Game Hosting]].
{{Languages|Introduction to Mapping}}</text>
      <sha1>tl12kxtgksnbo06kstgsumzjyfw65lw</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/it</title>
    <ns>0</ns>
    <id>1038</id>
    <revision>
      <id>6380</id>
      <parentid>4804</parentid>
      <timestamp>2015-10-16T08:03:42Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <comment>/* Uso base di MapTool */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2639">__NOTOC__
Benvenuto in RPTools Documentation Wiki, attualmente ci siamo pesantemente concentrati sulla documentazione per [http://www.rptools.net/index.php?page=maptool MapTool], ma la documentazione per altre applicazioni della serie [http://www.rptools.net RPTools] sono benvenute.

Questo wiki è un '''work in progress''' e attualmente comprende {{NUMBEROFARTICLES}} articoli (molti dei quali sono articoli riguardanti funzioni per macro), quindi trovare esattamente quel che cerchi potrebbe prenderti un pò di tempo. Se intendi contribuire alla manutenzione di questo wiki, sentiti libero di creare un account e dai uno sguardo al nostro [[Editor|editing guidelines]].
{| width=100% cellpadding=5px &lt;!--- Do not edit this line ---&gt;
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;'''Argomenti in cui potresti essere interessato:'''&lt;/big&gt;
==Uso base di MapTool==

* [[MapTool FAQ/it]]
* [[Introduction to Mapping/it|Introduzione al Mapping]]
* [[Introduction to Game Hosting/it|Introduzione al Game Hosting]]
* [[Introduction to Tokens/it|Introduzione ai Tokens]]
* [[Introduction to Properties/it|Introduzione alle Proprietà]]
* [[MapTool Preferences/it]]
* [[Introduction to Macro Writing/it|Introduzione alla Scrittura delle Macro]]
** [[Introduction to Macro Branching]]
** [[More Branching Options]]
** [[Introduction to Macro Loops]]
* [[Stack Size|About Java Stack Size]]
* [[Glossary|MapTool Glossary]]
* [[Introduction to Vision Blocking]]
* [[Introduction to Lights and Sights]]
* [[Introduction to Campaign Repositories]]
* [[Shortcut Keys]]

===Chat &amp; Dice Rolling===

* [[Chat Commands]]
* [[Dice Expressions]]
* [[Macros:Roll:types | [ ] Roll formatting options]]
* [[Macros:Roll:output|Roll visibility options]]

===Resources for Users===

* [[Dice Box|Dice Box]]
* [[Frameworks|Frameworks]]
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;&amp;nbsp;&lt;/big&gt; &lt;!--- To even out spacing with the first column ---&gt;

==Macro Technical Reference==

* [[:Category:Macro|Macro Reference]]
* [[:Category:Macro Function|List of Functions]]
* [[Macros:Branching and Looping | Branching and Looping Options]]
* [[Variable Types]]
* [[:Category:Special Variable|Special Variables]]
* [[:Category:Tutorial|Macro Tutorials]]
* [[:Category:How To|Macros How To]]
* [[:Category:Cookbook|Macro Code Cookbook]]
* [[Macro Tips and Tricks]]
* [[Macro FAQ]]

===Tokens===

* [[Token|MapTool Tokens]]
* [[Token Types]]

===Miscellaneous===

* [[Supported CSS Styles]]
* [[Sample Ruleset/it|Regolamento d'Esempio]]
* [[MapTool ChangeLog (by build version)]]
|} &lt;!--- Do not edit this line ---&gt;
{{Languages|Main Page}}</text>
      <sha1>eept6k5qpeduf5dt40ijqehpmok2w3u</sha1>
    </revision>
  </page>
  <page>
    <title>User:ZhuravlevaTanya55</title>
    <ns>2</ns>
    <id>1039</id>
    <revision>
      <id>5132</id>
      <parentid>4031</parentid>
      <timestamp>2011-01-14T00:12:55Z</timestamp>
      <contributor>
        <username>JElmore</username>
        <id>281</id>
      </contributor>
      <comment>Vandalism -- spam post</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Roll Initiative</title>
    <ns>0</ns>
    <id>1040</id>
    <revision>
      <id>5815</id>
      <parentid>5814</parentid>
      <timestamp>2011-11-23T13:44:44Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1768">==Roll Initiative==

This is a rather complex macro that will roll initiative for a group of tokens selected using a popular game system's rules.  Specifically, the rules are:

* each token rolls 1d20 and adds a bonus (stored in the Initiative Property).
* ties go to the token with the higher bonus.
* groups of monsters all use the same roll -- or as implemented, tokens with the same image share the same roll.

The code for this is below:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: initList = &quot;booga=-1&quot;];

[h, foreach(Selected, getSelected(&quot;json&quot;)), CODE:
{
	[switchToken(Selected)]
	[SelectedGMName = getTokenImage()]
	[arr = json.fromStrProp(initList)]
	[if(json.contains(arr, SelectedGMName) != 0), CODE:
	{
		[init = json.get(arr, SelectedGMName)]
	};
	{
		[result = 1d20]
		[init = result + getProperty(&quot;Initiative&quot;, Selected)]
		[tie = getProperty(&quot;Initiative&quot;, Selected) / 100]
		[init = init + tie]
		[initList = concat(initList, &quot;;&quot;, SelectedGMName, &quot;=&quot;, init)]
	}]

	[switchToken(Selected)]
	[addToInitiative()]
	[setInitiative(init)]
}]

[h: sortInitiative()]

[h,foreach(Selected, getSelected(&quot;json&quot;)), CODE:
{
	[switchToken(Selected)]
	[init = getInitiative()]
	[init = floor(init)]
	[setInitiative(init)]
}]
&lt;/source&gt;

The result is that if you have a party of 4 PCs all with different token images, and a group of 4 skeletons with the same token image, and 2 zombies with the same token image, which would be typical, and you select all the tokens and run this macro, your initiative list will be populated with all the tokens.  The 4 skeletons will all have the same initiative result.  The 2 zombies will both have the same initiative result.  If there are any ties, tokens with the higher initiative bonus will be presented first.


[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getInitiativeList</title>
    <ns>0</ns>
    <id>1042</id>
    <revision>
      <id>5126</id>
      <parentid>4988</parentid>
      <timestamp>2011-01-11T20:09:52Z</timestamp>
      <contributor>
        <username>Verisimilar</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Clarified which version introduced this function.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1623">{{stub|more examples.}}
{{MacroFunction
|name=getInitiativeList
|version=1.3b57
|description=
Retrieves a list of all tokens currently in the Initiative Panel.  The return value is a JSON object with various information about initiative, including global information (round number, which map is current, which token is current) and token-specific information (token id, initiative value, whether the token is holding or not).

When called from a [[Trusted Macro]] or by a client with GM authority, it will return all information.  Otherwise it only returns information visible to the current player.  In other words, it respects the Initiative Panel's {{code|Hide NPCs}} and the token's {{code|Visible To Owner Only}} flags, among others.  (This is new in '''1.3b78'''.  Prior versions didn't have the check for trusted context at all.)

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[ json = getInitiativeList() ]
&lt;/source&gt;
'''Parameters'''
None.

|example=
The following code will simply return a JSON object and print each property name one at a time on separate lines.  Refer to [[JSON Object]] for more information about JSON object themselves and [[json.get]] for information on retrieving properties and their values.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: json = getInitiativeList() ]
[ foreach(item, json, &quot;&lt;br&gt;&quot;): item ]
&lt;/source&gt;

This example prints a nicely formatted output showing what the contents of the JSON object look like.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: json = getInitiativeList() ]
&lt;pre&gt;[r: json.indent(json) ]&lt;/pre&gt;
&lt;/source&gt;


|changes=
{{change|1.3b57|Added macro function.}}
}}
[[Category:Initiative Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Editor:Translation/es</title>
    <ns>0</ns>
    <id>1043</id>
    <revision>
      <id>4052</id>
      <timestamp>2009-11-24T19:42:44Z</timestamp>
      <contributor>
        <username>Lachnaddar</username>
        <id>130</id>
      </contributor>
      <comment>New page: {{Languages|Editor:Translation}} __TOC__  ==Pasos para Traducir un Articulo== Debido a que esta debe ser la primera pagina que usted traduce, los siguientes pasos utilizaran esta pagina co...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3917">{{Languages|Editor:Translation}}
__TOC__

==Pasos para Traducir un Articulo==
Debido a que esta debe ser la primera pagina que usted traduce, los siguientes pasos utilizaran esta pagina como ejemplo.
Cada ocurrencia de {{code|Editor:Translation}} debe ser reemplazada con el nombre dela página que está traduciendo. Luego de que haya completado la traducción de esta página, debería estar preparado para traducir cualquier página en la wiki.

# Edite la pagina existente y agrege  {{code|&lt;nowiki&gt;{{Languages|Editor:Translation}}&lt;/nowiki&gt;}} al final de la misma, si ya esta colocado. Recuerde que {{code|Editor:Translation}} debe ser cambiado por el nombre de la página que está traduciendo.
# Copie el contenido de la traducción en Inglés a si portapapeles para usarla como punto de partida para su traducción.
# Guarde sus cambios a la copia en Inglés si realizó alguno. Si no hizo ningun cambio simplemente cancele la edición.
# Para comenzar su traducción , debe colocar la URL de la traducción en Inglés en la barra de direcciones del navegador y entonces agregar {code|/es}} al final. En nuestro ejemplo, la URL final sería: {{code|&lt;nowiki&gt;http://lmwcs.com/rptools/wiki/Editor:Translation/es&lt;/nowiki&gt;}} . {{code|/es}} en este caso es el codigo para el idioma español,encontrará el código apropiado para el idioma en la tabla al final del articulo.
# Su página traducida debe mantener de manera razonable el mismo formato y distribución del la traducción existente en Inglés, mientras sea posible. Sin embargo pueden haber excepciones. La fuente general de su articulo debe verse de la siguiente manera:

&lt;pre&gt;
{{Languages|Page Name}}{{Translation}}
__TOC__
YOUR TRANSLATED PAGE HERE
{{Languages|Page Name}}
&lt;/pre&gt;


==Mensajes del sistema a Traducir==
El uso de {{code|@}} es para mostrar donde un elemento variable es utilizado. Mantenga la numeración intacta o habra una alta probabilidad de que los mensajes se muestren en el area equivocada.
# El siguiente articulo es una traducción del articulo en Inglés.
# El siguiente articulo es una traducción desactualizada del articulo en Inglés.
# Navegación
# Uso Básico
# Tutoriales
# Comandos de Chat
# Expresiones de Dados
# Glosario
# Referencia de Macros
# Lista de funciones
# Opciones de Tiradas de dados
# Variables Especiales
# Recetario de Macros
# Editores
# Discusión de Editores
# Cambios Recientes
# Principiante
# Este es un articulo nivel Principiante
# Intermedio
# Este es un articulo nivel Intermedio
# Advanzado
# Este es un articulo nivel Avanzado
# Nota: Esta funcion ha sido desechada. Refierase a @ para ver la funcionalidad actual
# @ Función
# Introducido en la versión @
# Ultima verificación de compatibilidad con la versión @
# Uso
# Ejemplo
# Ejemplos
# Vea Tambien
# Cambios de Versión
# Nota: Este articulo se refiere a un cambio propuesto que aun no ha sido implementado en el código base principal.
# @ Opcion de Tirada de Dados
# Nota: Esta función sólo puede ser usada por un Macro Confiable
# Nota: Este parámetro sólo puede ser usado en un Macro Confiable
# Este articulo es un stub, puede ayudar al proyecto RPTools Wiki contribuyendo con contenido para expandirlo.
# Este articulo necesita:

==Códigos de Idioma==
Si esta interezado en traducir articulos en este wiki a un lenguaje que no este listado abajo, ¡dejenos saber!
{| border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
! Page Name || Language 
|-
|  || English
|-
| '''/ar''' || {{#language:ar}}
|-
| '''/de''' || {{#language:de}}
|-
| '''/el''' || {{#language:el}}
|-
| '''/es''' || {{#language:es}}
|-
| '''/fr''' || {{#language:fr}}
|-
| '''/it''' || {{#language:it}}
|-
| '''/ja''' || {{#language:ja}}
|-
| '''/ko''' || {{#language:ko}}
|-
| '''/pt''' || {{#language:pt}}
|-
| '''/ru''' || {{#language:ru}}
|-
| '''/zh''' || {{#language:zh}}
|}
{{DISPLAYTITLE:Instrucciones de Traducción}}
{{Languages|Editor:Translation}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Main Page/es</title>
    <ns>0</ns>
    <id>1044</id>
    <revision>
      <id>5747</id>
      <parentid>5745</parentid>
      <timestamp>2011-09-26T23:44:53Z</timestamp>
      <contributor>
        <username>Aspid</username>
        <id>274</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2855">__NOTOC__

Bienvenido al wiki de documentación de RPTools, actualmente estamos fuertemente enfocados en la documentación  de [http://www.rptools.net/index.php?page=maptool MapTool], pero la documentación para cualquier aplicacion de la suite  [http://www.rptools.net RPTools] es bienvenida.

Esta wiki es un '''trabajo en progreso''' y actualmete consta de {{NUMBEROFARTICLES}} artículos (de los cuales la mayoria son artículos sobre funciones de macro), asi que encontrar exactamente lo que necesitas puede tomarte un poco de tiempo y esfuerzo en algunas ocasiones. Si quieres ayudar y contribuir en el mantenimiento de esta wiki tomate la libertad de crear una cuenta y echar un vistazo a nuestras [[Editor|editing guidelines]].

{| width=100% cellpadding=5px &lt;!--- Do not edit this line ---&gt;
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;'''Topicos de interés:'''&lt;/big&gt;
==Uso Basico de MapTool==

* [[MapTool FAQ]]
* [[Introduction to Mapping/es|Introduccion a la creacion de mapas]]
* [[Introduction to Game Hosting/es|Introducción a Hospedaje de Juego]]
* [[Introduction to Tokens/es|Introducción a los Tokens]]
* [[Introduction to Properties/es|Introducción a las Propiedades]]
* [[MapTool Preferencias]]
* [[Introducción a la escritura de Macros]]
** [[Introducción a la  Bifurcación de Macros]]
** [[ Mas Opciones de Bifurcación]]
** [[Introducción a los Bucles de Macro]]
* [[Tamaño de la Pila de llamadas (Stak)|Acerca del Tamaño de la Pila de llamadas de Java]]
* [[Glossary|Glosario de MapTool]]
* [[Introduction to Vision Blocking/es|Introducción al Bloqueo de Vision]]
* [[Introduction to Lights and Sights/es|Introducción a las luces y vistas]]
* [[Introduction to Campaign Repositories/es|Introducción a los Repositorios de Campaña]]

===Chat y Lanzamiento de Dados===

* [[Comandos de Chat]]
* [[Expresiones de Dados]]
* [[Macros:Roll:types | [ ] Opciones de formato de lanzamiento]]
* [[Macros:Roll:output|opciones de visibilidad de lanzamiento]]

===Recursos para Usuarios===

* [[Dice Box|Dice Box]]
| width=50% valign=top | &lt;!--- Do not edit this line ---&gt;
&lt;big&gt;&amp;nbsp;&lt;/big&gt; &lt;!--- To even out spacing with the first column ---&gt;

==Referencia Técnica de Macros==

* [[:Category:Macro|Referencia de Macros]]
* [[:Category:Funciones Macro|Lista de Funciones]]
* [[Macros:Branching and Looping | Opciones de Bifurcación y Bucles]]
* [[Tipos de Variables]]
* [[:Category:Special Variable|Variables Especiales]]
* [[:Category:Tutorial|Tutoriales de Macros]]
* [[:Category:How To|Como Hacer..? Macros]]
* [[:Category:Cookbook|Recetario de Macros]]
* [[Tips y Trucos de Macros]]
* [[Macro FAQ]]

===Tokens===

* [[Token|MapTool Tokens]]
* [[Tipos de Token]]

===Misceláneos===

* [[Estilos CSS Soportados]]
* [[Conjunto de reglas de Ejemplo]]
|} &lt;!--- Do not edit this line ---&gt;
{{Languages|Main Page}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Lachnaddar</title>
    <ns>2</ns>
    <id>1045</id>
    <revision>
      <id>4062</id>
      <parentid>4061</parentid>
      <timestamp>2009-11-24T20:29:33Z</timestamp>
      <contributor>
        <username>Lachnaddar</username>
        <id>130</id>
      </contributor>
      <comment>/* Basics */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="188">== Basics ==

Another roleplayer looking for his place in the cosmos

== What i'm Doing ==

Actually i still learning to use MapTools and at the same time i'm translating pages to Spanish.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Mapping/es</title>
    <ns>0</ns>
    <id>1047</id>
    <revision>
      <id>5758</id>
      <parentid>5757</parentid>
      <timestamp>2011-09-26T23:53:27Z</timestamp>
      <contributor>
        <username>Aspid</username>
        <id>274</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19429">{{Languages|Introduction to Mapping}}]{{Beginner}}

==Introducion==

===Primero lo Primero: ¿Qué es MapTool?===

A pesar de que probablemente tengas una idea de que es y que hace MapTool, quiero tomarme un momento para reforzar el objetivo principal de MapTool: 

&lt;p align=&quot;center&quot;&gt;'''MapTool es un programa que te ayuda a compartir una &quot;Mesa Virtual&quot; con tus amigos, permitiendoles jugar sobre ella.''' &lt;/p&gt;

Esto es lo que MapTool hace, y sus caracteristicas estan orientadas a proveer gran cantidad de opciones, de lo simple a lo complejo, para alcanzar ese objetivo.

En la discusion sobre macros, propiedades, tablas y creacion de scripts que se desarrollara en esta y otras guias, no pierdas de vista la razon por la que revisas MapTool: es una manera de jugar y compartir con tus amigos.

===Acerca de esta guía===

El propósito de esta guía es no profundizar mucho en las entrañas del sistema de script de MapTool, iluminación, propiedades, o cualquier cosa compleja. El lugar de eso, esta guía debe iniciarte en el uso de MapTool como un ''Programa de Creación de Mapas'' para juegos de rol. Otras guías abordan temas como [[Introduction_to_Game_Hosting|hosting an online game]], [[Introduction_to_Tokens|working with tokens]], [[Introduction to Lights and Sights|setting up vision and light]], e [[Introduction_to_Macro_Writing|writing macros]]. 

Las siguientes instrucciones deben ponerte al día con el uso de MapTool como una herramienta para crear mapas de batalla y mapas generales. Esto asume algunas cosas:

# Usted sabe como crear u obtener algunas imágenes de mapas. Existen terabytes (exabytes! yottabytes!) de imágenes de mapas en la Web. Revise [http://gallery.rptools.net RPTools Gallery] o [http://www.rpgmapshare.com RPGMapShare] y encontrara montones de excelentes imágenes. 
# Usted puede ejecutar MapTool en su ordenador. MapTool requiere Java 1.5 para poder ser instalado en su pc; queda de su parte encargarse de ello.

Así que aquí vamos. Para comenzar lo menos complicado:

# Obtenga MapTool de http://rptools.net. La ultima versión compilada de MapTool puede obtenerse siempre al principio de [http://www.rptools.net/index.php?page=downloads#MapTool this list].Actualmente la última compilación es 1.3.b56. '''NOTA''': Usted también puede ejecutar el [http://www.rptools.net/index.php?page=launch Java WebStart] para ejecutar MapTool sin necesidad de descargar y descomprimir el archivo.
# Si usted descarga el archivo comprimido de MapTool, descomprímalo en algún lugar de su ordenador y asegúrese de que puede ser ejecutado. Los archivos .bat incluidos asignan algunos parámetros cuando los ejecuta, como  locación de memoria y cosas similares. El programa se ejecutara si hace dobleclick sobre el archivo .jar, pero le dará algunas advertencias. Si utiliza Windows™, puede utilizar el Lanzador de Windows™, el cual permite alterar las configuraciones de manera muy conveniente.

Ahora, creemos algún mapa útil.

==Colocar Imágenes en su Librería de Recursos de MapTool==

La '''Librería de Recursos''' de MapTool es una colección de &quot;punteros&quot; o &quot;enlaces&quot; a carpetas en su ordenador las cuales contienen las imágenes que usted desea utilizar con MapTool. MapTool viene con un conjunto de imágenes predeterminadas, pero usted puede agregar cualquier cantidad de imágenes que desee - Usted esta en control de la cantidad de imágenes disponibles para MapTool. 
&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mt-f-addtoreslib.jpg‎|thumb|Apareciendo el menu '''Add to Resource Library''']]

[[Image:File-dialog.jpg|thumb|La ventana '''Load Asset Tree''']]

1. Obtenga algunas imágenes (mapas, por ejemplo) de algun lugar: estas pueden ser descargadas de la web, o creadas por usted. Coloquelas en un directorio que recuerde con facilidad - este directorio es importante para el paso 3.

2. Abra MapTool.

3. Seleccione '''Archivo -&gt; agregar a la  Librería de Recursos''' (mostrado abajo, izquierda). Eso abrira un dialogo llamado '''Cargar Directorio de Recursos''' (click en las imágenes para verlas a tamaño completo a la derecha). 

4. En el dialogo, diríjase a la carpeta en la que almaceno las imágenes de mapa que desea agregar y haca click en '''Abrir'''. MapTool procesara las imágenes en el directorio, y agregara una nueva carpeta en el árbol de la Librería de Recursos. 

'''NOTA''': El nombre de el directorio en la Libreria de Recursos de MapTool sera el mismo del directorio que eligio en el paso 3. 

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Mtreslib.jpg|thumb|Carpetas en la librería de recursos de MapTool. Estos son punteros a carpetas en tu disco duro.]]

5. Luego de esto, si selecciona una de las carpetas en su libreria de recursos(como se ve en la imagen inferior), vera vistas previas de las imagenes dentro de esa carpeta. '''NOTA''': Si su carpeta tiene subcarpetas, presione '''+''' para expandir el contenido de la misma. Tampoco es necesario agregar nuevamente ese directorio, MapTools recordara sus selecciones previas.

'''NOTA''': Debido a que las carpetas que aparecen en la Librería de Recursos son en realidad punteros a las carpetas en su disco duro, no debe preocuparse de que MapTool vaya a duplicar cada archivo -- la Librería de Recursos es solo una manera para que MapTools sepa donde encontrar las imágenes .

&lt;br style=&quot;clear:both;&quot;/&gt;

==Creando un mapa==

[[Image:Map-newmap.jpg|thumb|Mapa -&gt; '''New Map''']]

[[Image:Map-new-dialog.jpg|thumb|La ventana '''Map Properties''']]

1. Ve a '''Mapa -&gt; Nuevo Mapa'''. Esto te abrirá la ventana de propiedades del mapa.

2. A la izquierda de esta ventana verás multiples opciones para configurar el mapa.

* '''Name''': Este es el nombre del mapa- Ten en cuenta que si seleccionas una imagen para el mapa, el nombre de este cambiará automaticamente al de la imagen.Lo mejor es dejar este apartado para el final así podrás ponerle el nombre que quieras en lugar de Map_001.jpg o como sea que se llamase.
* '''Cell Type''': Casillas hexagonales (dos sentidos), cuadradas o sin ninguna.
* '''Distance Per Cell''': Unidades de movimiento por casilla, como en D&amp;D4 el movimiento va por casillas, puedes dejarlo directamente en 1.
* '''Pixels per cell''': Este es el tamaño el pixels de cada casilla.
* '''Vision Distance''': Distancia por defecto a la que el PJ verá el mapa.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Background-dialog.jpg|thumb|La ventana '''Choose Background''']]

3. Haz click en el boton '''Background'''. Saldrá nua ventana con varias opciones. La textura y/o el color son infinitamente ampliables en todas direcciones.

* '''Swatch''': Te permite usar un color uniforme como fondo del mapa.
**&lt;font color=&quot;red&quot;&gt;'''Cuidado:''' En la versión 1.3.b53, si seleccionas la parte superior izquierda de Swatch (la parte blanca), MapTool genera un error. El error no hará que el Maptool se cierre ni nada parecido pero no seleccionará el color blanco. Con un poco mas de trabajo, puedes colocar el fondo blaco usando el camino del Hue o el RGB.&lt;/font&gt;
* '''Hue/RGB''': Te permite especificar colores y determinar el color Swatch.
* '''Texture''' (el más común): Te da acceso a la librería de donde puedes seleccionar una textura para el fondo.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-mapbutton.jpg|thumb|El botón '''Map''' de la ventana de mapa]]

4. Si tienes una imagen en mente (una descargada o que retocada con el Gimp o algún programa semejante), haz click en '''Map'''. Se abrirá una ventana con la librería. Selecciona la imagen que quieras usar. Est imagen se colocará sobre el fondo escogido.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Map-create-done.jpg|thumb|La ventana '''Map Properties''' una vez realizados los cambios, se puede ver la vista previa.]]

5. Cuando estés a gusto con el mapa y el fondo – podrás ver un recuadro con las vista previa, como en la imagen - pon un  título y haz click en '''OK'''. El mapa se cargarña en la ventana de MapTool.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Creando multiples mapas para una campaña===

MapTool te permite crear varios mapas, todos dentro de una misma campaña. El proseso es muy simple: solo repite los pasos de [[Introduction_to_Mapping/es#Creando_un_mapa | Creando un mapa]] para cada uno nuevo, seleccionando una nueva imagen, fondo (color/textura), y título.

Cada mapa nuevo que crees será automaticamente dentro de la campaña en la que estás trabajando (crear un mapa no guarda automaticamente los cambios, asegurate de [[Introduction_to_Mapping/es#Guardando_tu_trabajo | guardar tu trabajo]] al terminar).

Puedes también añadir nuevos mapas a una campaña que ya tuvieses creada - solo abre el archivo de la campaña (llendo a '''Archivo -&gt; Abrir campaña''') y sigue los pasos para crear un mapa.

==Ventana principal de MapTool==

===Capas de MapTool===

[[Image:Layer-window.png|thumb| La ventanita '''Layer''' (capas), que está presente en todos los mapas de MapTool]]

Teniendo un mapa cargado, verás una ventanita en el mapa titulada ''Layer''. MapTool tiene cuatro capas:

* '''Background''': Es una capa para imagenes, fondos para mapas, cosas que no se vallan mover.
* '''Hidden''': Para juegos online, esta es una capa solo la puede ver el Master.
* '''Object''': Esta es una capa objetos, cosas que se moverán, o que el jugador ha de ser capaz de mover (lamparas, mesas, etc.).
* '''Token''': En esta capa van los ''tokens''. Asegurate de tener la capa seleccionada al añadir personajes o enemigos al juego.

Piensa en las capas del MapTool como cuatro hojas de papel, una sobre la otra. La del fondo, - la capa '''Background''' - es donde se dibujan las partes básicas del mapa: Muros, suelo, árboles, etc. En la sigueinte, - la capa '''Objects''' - dibujas las ''cosas'' que el personaje puede usar, interactuar, romper: puertas, baúles, mesas, silals, etc. En la capa superior - la capa '''Hidden''' - pones las cosas que solo el Master puede ver (¡Qué serán objetos o personajes ocultos!). Finalmente, en la capa superior - la capa '''Token''' -, pones las miniaturas - los mounstruos, personajes, y NPCs de este mundo. 

Los tokens pueden ser puestos en cualquier capa de MapTool. Para hacerlo solo haz click-derecho en la imagen del token, y selecciona '''Change To &gt;'''. En el menú, selecciona la capa a la que lo quieras mover y será movido.

===Seleccionando mapas===

[[Image:Blueglobe.jpg|thumb|El botón del mundo, donde puedes seleccionar los mapas.]]

[[Image:Maplist.jpg|thumb|Una lista de mapas, que aparece tras hacer click en el botón de mundo.]]

Si creas solo un mapa en tu campaña, será cargado por defecto y será el único mapa que puedas ver.

Si [[Introduction_to_Mapping/es#Creando_multiples_mapas_para_una_campaña | creas varios mapas]] o tienes una campaña con varios mapass pueden escoger entre elos haciendo click en el icono del globo terráqueo arriba a la derecha de la ventana de MapTool – esto abrirá una ventana con los posibles mapas. Fijate que si solo tienes un mapa, al hacer click se mostrará el nombre del mapa.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Haciendo zoom y moviendose===

Para hacer zoom en el mapa, puedes usar la rueda del ratón (si tienes), o puedes usar el símbolo de igual para ampliar y el de la resta para alejar. 

Presionando la decla de suma vuelve a 1:1. 

Para mover el mapa, hacerclick derecho con el ratón y arrastrar. Esto deslizará el mapa en cualquier dirección.

==Lo básico de los Tokens==

[[Token:token|Tokens de MapTool]] (o solo &quot;Tokens&quot;) son pequeñas fichas usadas para representar diferentes cosas en el mapa de MapTool. Lo más común es a los personajes jugadores y no jugadores.

Los Tokens, com todo lo demás, empiezan como una imagen en tu [[Macros:Glossary#R|Libreria de recursos]]. MapTool trae algunos (y cuenta con un programa llamado [http://www.rptools.net/index.php?page=tokentool TokenTool] que te permite crear tokens), o puedes también buscarte tu ptopia manera de hacerlos.

Esta sección de la guía de creacción de mapas cuenta con solo algunas cosas básicas con las que tendrás que tratar al usar los tokens de MapTool. Hay ''algunas'' características o trucos al trabajar con los tokens que podrían necesitar una guía para ellos solos.

===Situando tokens en el mapa===

[[Image:Default-library.jpg|thumb|La carpeta ''Default'' en la biblioteca de recursos]]

1. Para ver los tokens básicos antes mencionados, ir a la carpeta Default en tu ''biblioteca de recursos'' hacer click sobre el '''+''' para ampliarla.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Default-tokens.jpg|thumb|La subcarpeta de ''Tokens'']]

2. Selecciona la carpeta de tokens.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-drag-to-map.jpg|thumb|Arrastrango un token al mapa]]

[[Image:Token-on-map.jpg|thumb|¡Aparece un token!]]

3. En la ventana inferior (donde aparece el recuadro), usa el ratón para arrastrar un token al mapa. El cursos cambiara a una mano, y solo necesitarás mantener el botón pulsado y soltarlo sobre cualquier lado del mapa.

Al soltar el botón, el token aparecerá en el mapa, com se ve en la imagen.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Moviendo tokens===

Una vez que el token está en el mapa, pude moverse usando el ratón, o seleccionandolo (haciendo click en él) y utilizando las flechas para desplazarlo y pulsando la letra '''D''' o click izquierdo al finalizar el movimiento.

Si quieres hacer un camino complejo, puedes apretar la barra espaciadora y creará un punto por el que deberá pasar en el movimiento.

===Cambiando del nombre del token, nombre del master (GM), y etiquta (label)===

[[Image:Token-default-name.jpg|thumb|Un token, mostrando el primer nombre asignado al arrastrasrsele al mapa.]]

[[Image:Edit-token.jpg|thumb|La ventana de '''Edit Token''' (edición de tokens)]]

Los tokens tienen tres posibles nombres que le puedes asigar, cuando es puesto en el mapa se le asigna un nombre base (normalmente, el mimso que el archivo del token). por ejemplo, el token de la imagen muestra el nombre de cuando fue arrastrado al mapa y este es &quot;Hero.&quot;

Los tres posibles nombres son:

*'''Token Name''': El nombre del token que aparece para todos los usuarios. Es obligatorio.
**&lt;font color=&quot;red&quot;&gt;'''NOTA''': !Asegurate de que cada token tiene un nombre único! De otro modo, MapTool actuará de un modo impredecible.&lt;/font&gt;
*'''GM Name''': Solo visible por el master. 
*'''Label''': Aparece bajo el nombre del token, y es visible para todas las personas conectadas.

To change a token's name, GM name, and/or label:

1. Hacer doble click sobre la imagen del token en el mapa. Esto abrirá la ventana '''Edit Token''' como se muestra.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changednames.jpg|thumb|Cambiando del nombre del token, nombre del master (GM), y etiquta (label)]]

[[Image:New-token-names.jpg|thumb|Token mostrando el nuevo nombre y la etiqueta]]

2. En el hueco '''Name''' pon el nombre que quieras. Por ejeplo, para este caso yo puse &quot;Bork the Brave&quot;

3. En el hueco '''GM Name''' pon un nombre. Por ejeplo, para este caso yo puse &quot;Cork the Cowardly&quot;

4. En el hueco '''Label''' pon una etiqueta. Por ejeplo, para este caso yo puse &quot;Human Warrior&quot;. 

5. Haz click en '''OK''' para guardar los cambios.

Tras hacerlo verás que el token ha cambiado: 

Y podrás realizar este proceso con cualquier token que esté en el mapa.

&lt;br style=&quot;clear:both;&quot; /&gt;

===Cambiando la imagen del token===

Algunas veces, cuando creas un token nuevo, puedes querer cambiar la imagen de la cara del token. Por ejemplos, si encuentras una imagen mejor para el token que la que ya estaba puesta ¿pero no querrás borrar todo el token solo para cambiar la imagen verdad? Seria cansino. En ese caso, soo cambia la imagen siguiendo los siguientes pasos:

[[Image:Edit-token.jpg|thumb|La ventana de '''Edit Token''']]

1. Aseurate de que tienes una nueva imagen en formato .jpg o .png usable en la librería de recursos de MaTool. Si mras la sección [[Introduction_to_Mapping/es#Colocar_Imágenes_en_su_Librería_de_Recursos_de_MapTool|Colocar Imágenes en su Librería de Recursos de MapTool]] habla sobre como colocar imagenes ahí: bueno, imagenes de tokens (en realidad, ''cualquier'' imagen) puede ser añadda a la biblioteca del mismo modo. 

2. Hacer doble click sobre la imagen del token. Esto abrirá la ventana '''Edit Token'''.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Edit-token-changeimage.jpg|thumb|El botón para cambiar la imagen del token]]

3. Arriba a la izquiera, hacer click en el signo verde de suma.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:New-image-picked.jpg|thumb|Una nueva imagen ha sido seleccionada de la librería]]

4. En la ventana '''Choose Image''' selecciona la carpeta ''Resource Library'' selecciona la imagen y haz click en '''OK'''.

&lt;br style=&quot;clear:both;&quot;/&gt;

[[Image:Token-image-changed.jpg|thumb|La imagen del token ha sido cambiada]]

5. Al hacer click en '''OK''', vuelves a la ventana '''Edit Token''', y verás que la imagen ha cambiado por la que has seleccionado.

&lt;br style=&quot;clear:both;&quot; /&gt;

===Cambiando el tamaño de los tokens===

[[Image:Token-rightclick.jpg|thumb|Cambiando el tamaño de los tokens usando el menu de click-derecho]]

Los tokens apareceran por de mase al tamaño de los recuadros (el tamaño base de los recuadros de MapTool es 50x50 pixels). Si hacel click-derecho sobre un token, verás un menú con muchas opcionesde las cuales una es '''Size''' (tamaño). COn eso puedes variar el tamaño de los tokens para tener así criaturas enormes o del tamaño que sea. En la imagen inferior se puede ver el menu que se despliega.

'''NOTA''': Los tamaños son (grande, enorme, gigantesco etc.) solo aplicables a mapas que tengan rejilla (recuerda que al crear un mapa puede hacerlo sin esta). Si usas un mapa sin rejilla, el tamaño irá por valores.

&lt;br style=&quot;clear:both;&quot;/&gt;
==Guardando tu trabajo==

MapTool's default &quot;save&quot; format is called a ''Campaign File''. El archivo de campaña (en el formato ''.cmpgn'') contiene los mapas y tokens que has colocado. Si estas interesado en esta clase de cosas, el archivo de campaña es un archivo comprimido en formato XML. 

Para guardar tu trabajo en otro lugar, selecciona '''Archivo -&gt; Guardar campaña''', give your campaign a name, and that’s all there is to it. 

Cuando guardes la campaña, MapTool guarda la posisión de los tokens en todos los mapas, así podrás continuar justo donde lo dejaste.

==Exportando imagenes de mapas==

MapTool puede exportar las imagenes de tus mapas a una imagen (en formato PNG). Para exportar una imagen a un lugar de tu elección sigue los siguientes pasos:

1. Ve a  '''Archivo -&gt; Exportar''' y selecciona '''Pantalla como'''.

2. En la ventana que aparece selecciona un tipo de vista (entre la visión del master, donde lo puedes ver todo, o la del jugador, donde solo se ve lo que el jugador puede ver...)

3. Selecciona un destino para alojar la imagen apretando el botón ''Brouse...'' (o envíalo a un servidor FTP)

4. Haz click en '''Exportar'''.

==Sigueintes pasos==

Ahora crea un nuevo mapa y pon algunos token en él, el siguiente paso es conectarte con algunos amigos por internet(o cara a cara) y usa lo aprendido para una sesión de jeugo. 

Este tema está incluido en [[Introduction to Game Hosting]].

[[Category:MapTool]]
[[Category:Tutorial]]

{{Languages|Introduction to Mapping}}{{#customtitle:Inroducción a la creacion de mapas|Inroducción a la creacion de mapas}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>State</title>
    <ns>0</ns>
    <id>1048</id>
    <redirect title="Token State" />
    <revision>
      <id>4080</id>
      <timestamp>2009-12-07T16:17:25Z</timestamp>
      <contributor>
        <username>Darloth</username>
        <id>135</id>
      </contributor>
      <comment>Added this as a redirect so that State is not a red link. Token state seems to have all the information on them.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[Token State]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Target a Visible NPC</title>
    <ns>0</ns>
    <id>1049</id>
    <revision>
      <id>4147</id>
      <parentid>4083</parentid>
      <timestamp>2010-02-21T10:33:57Z</timestamp>
      <contributor>
        <username>Akryas</username>
        <id>117</id>
      </contributor>
      <minor/>
      <comment>Corrected a bug in the macro</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1117">[[Category:Cookbook]]
{{TrustedFunction}}

This macro allows a player to pick-up a NPC among those he can currently see. Note that this is about the player's view and not the currently selected token's view. You may then store the target's name in the token's properties to ease further actions.

Basically, the macro gets the list of all NPCs available (with {{func|getNPCNames}}) and the list of all visible tokens (with {{func|getVisibleTokenNames}}). Then, the intersection will provide visible NPCs.

===Macro===
'''1.3b53+'''

&lt;hr&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
/self 
[h: lsVisibleNpc = json.intersection( getNPCNames(&quot;json&quot;), getVisibleTokenNames(&quot;json&quot;) )]

// Abort if no target found (intersection returned an empty list)
[h: assert(json.length(lsVisibleNpc), &quot;No visible NPC&quot;, 0)]

// UI: popup a list for selection
[h: input(&quot;index|&quot;+json.toList(lsVisibleNpc)+&quot;|My target is|LIST&quot;) ]

// Retrieve the first element, so we only get the name (and not [&quot;name&quot;])
[h: currentTgt = json.get(lsVisibleNpc, index) ]

// Display message to be sure of what has just been done
Current target : {currentTgt}
&lt;/source&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Target Visible NPCs</title>
    <ns>0</ns>
    <id>1050</id>
    <redirect title="Target a Visible NPC" />
    <revision>
      <id>4084</id>
      <timestamp>2009-12-07T19:29:57Z</timestamp>
      <contributor>
        <username>Akryas</username>
        <id>117</id>
      </contributor>
      <comment>[[Target Visible NPCs]] moved to [[Target a Visible NPC]]: Ambiguous title</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[Target a Visible NPC]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Lights and Sights/fr</title>
    <ns>0</ns>
    <id>1051</id>
    <revision>
      <id>4091</id>
      <parentid>4090</parentid>
      <timestamp>2009-12-13T13:22:06Z</timestamp>
      <contributor>
        <username>Akryas</username>
        <id>117</id>
      </contributor>
      <comment>Finished French translation.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21248">{{Languages|Introduction to Lights and Sights}}

&lt;p align=&quot;center&quot;&gt;'''Note de traduction''' : ''Le blocage de vision s'exprime en anglais Vision Blocking Layer, d'où l'acronyme VBL que vous pouvez croiser dans les légendes des figures.''&lt;/p&gt;

[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}
==Qu'est-ce que la vision et la lumière ?==

MapTool offre trois fonctionnalités qui donnent corps à l'idée que quand un personnage s'aventure dans un endroit, il n'est pas toujours omniscient. Ainsi, il ne peut pas voir à travers les murs, au-delà des angles ou dans les tréfonds d'obscurs donjons. S'il est difficile de le simuler quand on joue face à face, c'est plus aisé avec un ordinateur. En effet, il devient possible de restreindre la vision d'un personnage à ce qu'il peut éventuellement voir, ce qui rend le jeu plus palpitant et peut-être aussi plus immersif. Les trois fonctionnalités qu'offre MapTool sont la '''Vision''', la '''Lumière''' et le '''brouillard de guerre'''.

===La vision===

La vision est la capacité d'un [[Token:token|pion]] à «voir» les alentours. Dans le cas présent, ce qu'un pion d'un joueur peut voir devient visible pour le joueur sur son instance de MapTool. À noter que si le MJ peut toujours tout voir sur la carte, les joueurs peuvent, eux, être limités dans ce qu'il peuvent voir avec la [[Introduction to Vision Blocking|Barrière de vision]], la lumière et [[Introduction to Fog of War|le brouillard de guerre]]. Cela rend le jeu plus immersif car les joueurs vont se dire : «Qu'est-ce qu'il y a derrière cet angle ?», ou encore «Qu'il fait sombre dans ce donjon... j'espère que ma torche va tenir !»

===La lumière===

La lumière est ce qui permet aux pions et aux objets d'éclairer les environs. Cela implique que, dans un donjon obscur, les torches des murs peuvent illuminer quelques endroits de-ci de-là (découvrant ainsi l'éventuel brouillard de guerre qui couvrirait la zone) qui seront donc visibles par les joueurs. En d'autres termes, cela signifie que toute zone illuminée devient visible aux joueurs à condition que son pion dispose de la vue et qu'il n'y a pas de barrière de vision entre lui et la zone.

La lumière est critique quand une carte se trouve en mode «vision de nuit», puisqu'en l'absence de source de lumière, un pion est perdu dans la nuit noire ! (Il ne se verra pas lui-même)

===Brouillard de guerre===

Le brouillard de guerre est un système qui révèle ce qu'un pion a vu tout au long de ses mouvements ainsi que les parties de la carte qu'il peut voir directement depuis là où il se trouve. Il '''ne faut pas confondre''' le brouillard ne guerre avec l'obscurité. Vous pouvez activer le brouillard de guerre sans pour autant avoir de lumières ni même utiliser le mode de vision.

Quand un pion doté de vision «voit» dans une zone brumeuse, le brouillard est dissipé et la carte est révélée. Quand une zone qu'un pion a vue n'est plus directement visible, la brume se reforme de manière moins épaisse : une couche semi-transparente recouvre la zone. Cela permet au joueur de se rappeler qu'il est déjà passé par là, mais qu'il ne peut pas la voir ''en ce moment''. Tout pion présent dans une zone ainsi recouverte est masqué comme s'il se trouvait dans le brouillard le plus complet.

&lt;p align=&quot;center&quot;&gt;'''Souvenez-vous''' : ''Le brouillard de guerre indique seulement quelles parties de la carte ont déjà été vues par un pion.''&lt;/p&gt;

Le brouillard de guerre est un sujet à lui tout seul. Aussi, même s'il est intimement lié à la vision et à la lumière, il mérite son propre tutoriel. Allez voir [[Introduction to Fog of War|L'introduction au brouillard de guerre]] pour trouver des détails et des captures d'écran sur l'utilisation du brouillard dans vos parties.

==Le donjon pris en exemple==

[[Image:samp-dungeon.png|thumb|La carte du donjon utilisée dans ce tutoriel.]]

Un donjon est pris en exemple pour l'ensemble des captures d'écrans qui illustrent ce tutoriel (ainsi que dans l'[[Introduction to Vision Blocking|introduction à la barrière de vision]]). Une capture de ce donjon se trouve à droite. Vous pouvez aussi télécharger le fichier de campagne de ce donjon [[here]].

==Configuration des types de vision et de sources de lumière==

Les types de vision et les types de sources de lumières peuvent être configurés dans la fenêtre des Propriétés de la campagne. Pour l'ouvrir, aller dans ''Edition &gt; Propriétés de la campagne''.


===Types de vision===

[[Image:cprops-sighttab.png|thumb|L'onglet Vision dans la fenêtre de Propriétés de la campagne]]

L'onglet de type de vision (''Sight en anglais'') vous permet de définir plusieurs types de vues (comme la vision nocturne, la vision normale, la vision dans le noir ou infrarouge, etc.). MapTool fournit quelques types par défaut quand vous l'ouvrez pour la première fois. Si vous regardez le contenu de l'onglet Vision, vous verrez ceci :

 Conic Vision: cone arc=120 
 Normal Vision - Short Range: circle distance=10.0 
 Lowlight: circle x2 
 Darkvision: circle r60 
 Square Vision: square 
 Normal: circle 

Chacun de ces éléments définit un '''type de vision '''. Il est défini avec une syntaxe précise expliquée dans la fenêtre des Propriétés de la campagne. Le plus simple consiste en une forme :

 Normal: circle

Cela indique simplement que la vision «Normal» est circulaire. Il n'y a aucune limite de portée exceptée celle définie dans les ''propriétés de la carte'' (lors de la création et qui est, par défaut, de 1 000 unités).

Un second exemple un peu plus complexe est celui de la vision nocture («Lowlight» en anglais) :

 Lowlight: circle x2

Dans ce cas, le nom du type de vision est '''Lowlight''' et elle est de forme circulaire. Toutefois, une option supplémentaire a été ajoutée : ''x2''. Cette option interagit avec les ''sources de lumière'' et double (multiplie par 2, x2) leur rayon effectif pour tout pion qui a pour vision la « Lowlight vision ». Ainsi, si un pion avec la vision « Normal » peut voir 20 unités avec une torche, un pion avec la vision « Lowlight » en verra 40.

Compliquons encore un peu, regardons la vision dans le noir («Darkvision» en anglais) :

 Darkvision: circle r60

Cette entrée a quatre paramètres :

* '''Darkvision''': c'est, bien sûr, le ''nom'' du type de vue. Vous pourriez très bien l'appeler «Vision thermique» si vous le souhaitiez). Ce nom apparaît dans la fenêtre de configuration du pion quand vous activez sa vision.
* '''circle''': cela signifie que la forme de la zone de vision est un cercle.
* '''r''': c'est un code qui indique que le pion dispose d'une source de lumière intrinsèque que lui et ''lui seul'' peut voir. Même ses alliés ne profiteront pas de cette zone de vision.
* '''60''': c'est la portée de la zone de lumière intrinsèque, exprimée en unité de carte depuis le centre du pion (si votre carte a 5 unités par cellule, vous couvrirez un peu moins de 12 cellules; si votre carte est de 1 unité par cellule, vous couvrirez un peu moins de 60 cellules). Le ''un peu moins'' est dû au calcul de la zone qui s'effectue depuis le centre du pion. De nombreux utilisateurs ajouent une fractions afin que la vision s'achève proprement sur une frontière de cellule.

La configuration des types de vues est propre au jeu auquel vous jouez, c'est pourquoi les détails sont laissés aux mains du concepteur de la campagne. Cependant, vous pouvez simplement retenir que la vision est paramétrable et vous offre une grande souplesse.

====Limites des types de vues====

Malgré sa souplesse, ce système connaît quelques limites.

* '''Un seul type de vue à la fois''' : les pions ne peuvent avoir qu'un seul type de vue actif à un moment donné (un pion ne peut donc pas avoir à la fois la vision dans le noir et la vision normale d'activée en même temps).
* '''La vision est incolore''': les types de vision ne sont pas colorés. Toute les couleurs visibles par les joueurs dépendront de la couleur de la source de lumière et non du type de vision. Toutefois, il y a une exception : vous pouvez demander à ce que la couleur de la vision d'un pion soit celle de son [[token.halo|aura]] dans les [[MapTool Preferences|Préférences de MapTool]] (''Use halo color for vision'' dans l'onglet ''Application'').

===Sources de lumière===

[[Image:Cprops-lighttab.png|thumb|L'onglet Lumière dans les Propriétés de la campagne.]]

L'onglet Lumières («Light» en anglais) fournit une interface similaire à celle de l'onglet Vision : une boîte de saisie de texte avec une liste de types auxquels sont associés des paramètres. La campagne par défaut de MapTool fournit les sources de lumière suivantes :

 D20
 ----
 Candle - 5 : 5 10#000000 
 Lamp - 15 : 15 30#000000 
 Torch - 20 : 20 40#000000 
 Everburning - 20 : 20 40#000000 
 Lantern, Hooded - 30 : 30 60#000000 
 Sunrod - 30 : 30 60#000000 
 Generic
 ----
 5 : 5 
 15 : 15 
 20 : 20 
 30 : 30 
 40 : 40 
 60 : 60 

====Groupes====

Les types de sources de lumière fournis par défaut sont divisés en deux groupes : « D20 » et « Generic ». Un groupe est défini par son nom qui est placé sur la ligne précédent celle qui contient ''uniquement'' quatre tirets ({{code|----}}). Les groupes ainsi définis apparaissent dans le menu contextuel d'un pion. C'est un moyen pour permettre au MJ d'organiser les différentes sources de lumières pour votre partie.

====Syntaxe d'une source de lumière====

Au-dessous de chaque en-tête de groupe se trouvent une liste de sources de lumière. Leur syntaxe est semblable à celle des types de vision, à quelques exceptions près. Regardons le bâton luminescent («Sunrod» en anglais) :

 Sunrod - 30: 30 60#000000

Il y a trois éléments ici :

* '''Sunrod - 30''' : le nom de la source de lumière tel qu'il appraît dans le menu contextuel du pion avec un clic droit, rangé sous la bonne catégorie dans le sous-menu Source de lumière («Light Source»).
* '''30''': la portée de la ''première'' zone d'éclairement, en unités de carte.
* '''60#000000''' : la portée de la ''deuxième'' zone d'éclairement, avec son code couleur hexadécimal.
** '''Rayons des sources de lumière''' : une source de lumière peut avoir un ou plusieurs rayons d'éclairement. Chacun peut avoir une couleur différente. Dans le cas du bâton luminescent, le premier rayon n'a pas de couleur spécifiée, il prend donc celle par défaut : le blanc (qui indique que toute la zone est éclairée). Le deuxième rayon (60) est en noir (#000000), ce que MapTool traduira par une zone d'obscurité (gris d'opacité moyenne) de 30 à 60 unités de carte. L'effet global obtenu est donc une lumière franche sur 30 unités puis une zone à demi voilée sur 30 unités de plus (les éléments y brillent moins, mais sont tout de même visibles).

Un élément est non précisé dans cet exemple : il s'agit de la ''forme'' que prend la zone éclairée. Tout comme les types de visions, les sources de lumière peuvent avoir une forme qui est, par défaut, circulaire. Les autres possibilités sont :

* '''Cone''': crée un zone conique en fonction de là où regarde le pion. Le regard peut être défini par l'action «Set Facing» dans le menu contextuel du pion.
* '''Square''': crée une zone carrée autour du pion.
* '''Aura''': c'est un car particulier car ce n'est pas à proprement parler une source de lumière : elle n'éclaire pas, ne révèle pas les objets cachés et est bloquée par les barrières de vision. De plus, elle est colorée. C'est un moyen de représentée la portée de l'aura d'un personnage (par ex. une aura d'apaisement des émotions).

===Conférer la vue et la lumière aux objets et aux pions===

[[Image:Token-config-sight.png|thumb|Cocher la case «Has Sight» pour doter un pion de la vue.]]

[[Image:Token-config-light.png|thumb|Utilisez le menu contextuel pour sélectionner la source de lumière d'un pion.]]

Pour conférier la vue et une lumière à un pion, faites ce qui suit :

# Double-cliquez sur le pion et allez dans l'onglet «Config». Là, cochez la case «Has Sight» et sélectonnez le type de vision approprié. Souvenez-vous qu'un pion ne peut avoir qu'une vision d'active à la fois.
# Cliquez sur '''OK''' pour sauvegarder les paramètres.
# Cliquez droit sur le pion et aller dans le sous-menu «Light Source». Naviguez dans les différents sous-menus jusqu'à trouver la source de lumière désirée. Cliquez dessus; le pion a désormais une source de lumière.

==Modes de vision==

[[Image:Map-vision-mode.png|thumb|Définir le mode de vision d'une carte.]]

Les versions récentes de MapTool ont introduit le concept de ''mode de vision'' qui permet au MJ de définir comment la vision et la lumière doivent être traitées sur la carte. Il y a trois modes possibles : '''Off''', '''Day''', et '''Night''' (respectivement aucun, jour et nuit) et chacun provoque un comportement différent.

Dans la présentation qui suit des modes de vision, ce qui est visible par le joueur selon les mouvements de son pion est basé sur ce qui est visible par son pion. Ainsi, si les circonstances permettent au pion du joueur d'apercevoir un pion ennemi, le joueur verra le pion ennemi sur la carte. Dans le cas contraire, il n'apparaîtra pas sur la carte du joueur.

===Off===

Quand le mode de vision est «Off», les paramètres de gestion de la vision sont purement et simplement ignorés. Tout est tout le temps visible, sauf si le brouillard de guerre recouvre la zone.

===Day===

En mode «Day» (jour), les sources de lumière ne sont pas prises en compte dans la détermination de la vue des pions. De plus, aucune partie de la carte n'est masquée aux joueurs (ce qui signifie qu'ils voient la carte dans son entièreté, mais pas nécessairement les pions qui se trouvent sur la carte; ainsi ils voient toute la structure du donjon). En fait, le mode jour estime qu'un puissant soleil éclaire tous les points de la carte et que tout est visible sauf en cas de barrière de vision ou de brouillard de guerre.

===Night===

Ce mode prend en compte les sources de lumière dans la détermination de la vue des pions, estimant qu'il fait nuit noire et que, sans source de lumière, on n'y voit rien (cela inclut que les joueurs ne puissent pas voir leurs propres pions). Si le brouillard de guerre est utilisé en conjonction du mode de nuit, les sources de lumière le dissiperont localement, à condition qu'un pion puisse apercevoir la source de lumière et qu'il n'y a pas de barrière de vision.

===Modes de vision et brouillard de guerre===

Vous pouvez utiliser le brouillard de guerre en conjonction de tous les modes de vision.

* Quand la vision est désactivée («Off»), le brouillard de guerre est dissipé jusqu'à la limite de vision du pion (défini dans la fenêtre de Propriétés du pion). Le brouillard de guerre ne devient pas semi-transparent dans ce mode, puisque les joueurs ne «voient» rien. Le blocage de vision fonctionne quant à lui normalement.
* En mode de jour («Day»), le brouillard de guerre se dissipera jusqu'à la limite de la vision définie lors de la création de la carte (qui, par défaut, est de 1 000 unités). Le blocage de vision fonctionne normalement. Le brouillard de guerre peut être complet ou semi-transparent, vu que les pions «voient» par où ils passent.
* En mode de nuit («Night»), le brouillard de guerre est dissipé jusqu'à la portée maximale de la source de lumière (souvenez-vous que : 1. le pion doit disposer de la vue; 2. doit avoir une source de lumière ou être dans une zone éclairée -- sans cela, un pion ne voit rien du tout !). Le brouillard peut devenir semi-transparent tout comme en mode de jour.

==Utiliser la vision et la lumière en jeu==

La vision, la lumière et le brouillard intéragissent de nombreuses façons en jeu. Pour commencer, utilisons la vision sans lumière ni brouillard de guerre. Les exemples ci-dessous utilisent le donjon de démonstration illustré à droite. Notez que ce donjon utilise le [[Introduction to Vision Blocking|blocage de vision]], une fonctionnalité qui permet à MapTool de bloquer la ligne de vue d'un pion (ce qui permet d'indiquer l'emplacement des murs, des piliers ou d'autres objets qui obstruent le champ de vision).

===Portée de la vision===

[[Image:Nofog-sight-boundary.png|thumb|MapTool délimite la vision d'un pion par une ligne blanche.]]

[[Image:Nofog-sight-boundvbl.png|thumb|Quand un pion doté de la vue est sur une carte qui contient des [[Introduction to Vision Blocking|VBL]], la limite du champ de vision du pion suit les VBL.]]

Si vous avez conféré la vue à un pion, lorsque vous survolez celui-ci avec votre souris, MapTool dessinera les contours de son champ de vision avec une ligne blanche (un cercle si la vue est circulaire, un carré ou un cône sinon). La capture d'écran ci-contre montre un pion d'un joueur avec la vision «Normal - Short Range». Notez bien le cercle blanc qui indique les limites du champ de vision.

Sur la première capture, il n'y a pas de blocage de vision sur la carte, donc le pion peut tout voir. Pour une illustration plus réaliste de la limite du champ de vision, regardez la deuxième capture prise avec le même pion mais avec la présence de blocage de vision le long des murs du donjon. Si vous regardez bien, vous verrez que la limite du champ de vision est toujours dessinée en blanc, mais au lieu d'être circulaire, elle est bloquée par les zones de blocage de vision positionnées sur la carte, d'où sa forme irrégulière.

==Modes de vision et vue==

Comme expliqué tantôt, il y a trois modes de vision : '''Offf', '''Day''' et '''Night'''. Chaque mode modifie le comportement de MapTool.

===Mode de vision &quot;Off&quot;===

[[Image:Nofog-visionoff-gmview.png|thumb|La vue MJ d'une carte sans vision. À noter que s'il y avait des VBL, la limite du champ de vision du pion serait dessinée mais ne serait pas affectée, vu qu'il n'y a pas de vision.]]

[[Image:Nofog-visionoff-plyrview.png|thumb|La vue joueur de la même carte.]]

Quand la vision est désactivée, la vue d'un pion n'est pas prise en compte pour déterminer le champ de vision. Le joueur peut donc tout voir. Le blocage de vision bloquera toujours le champ de vision du pion, mais le joueur verra tout de même l'intégralité des choses. 

Les deux captures d'écran illustrent respectivement la vue du MJ et celle du joueur. Notez que les seuls objets qui ne sont pas visibles par le joueur sont ceux qui sont placés sur la couche cachée de la carte («Hidden layer») ou que le MJ a coché comme invisible pour les joueurs.

===Mode de vision &quot;Day&quot;===

[[Image:Nofog-visionday-gmview.png|thumb|Vue de MJ d'une carte avec le mode ''Day''.]]

[[Image:Nofog-visionday-plyrview.png|thumb|Vue du joueur de la même carte. Notez les pions qui n'apraissent pas puisqu'ils sont dissimulés par les VBL.]]

En mode de vision de jour, les paramètres de vue sont pris en compte pour savoir ce qu'un pion peut et ne peut pas voir. Les sources de lumières ''ne sont pas'' prises en considération. Si un objet ou un pion est hors du champ de vision d'un pion, il ne sera pas visible par le joueur. De la même manière, si un objet est masqué par un blocage de vision, il ne sera pas visible.

Les deux captures illustrent cela (MJ en haut, joueur en bas). Notez que le joueur (l'elfe) ne voit pas le dragon ni le héros car il y a un blocage de vision entre eux.

===Mode de vision &quot;Night&quot;===

[[Image:Nofog-visionnight-gmview.png|thumb|Vue MJ d'une carte en Night mode.]]

[[Image:Nofog-visionnight-plyrview.png|thumb|Vue joueur de la même carte. À noter que le pion elfe (celui du joueur) n'est pas visible car il n'a aucune source de lumière !]]

[[Image:Nofog-visionnight-plyrview-candle.png|thumb|L'elfe a finalement craqué une torche.]]

En mode de vision de nuit, la source de lumière d'un pion est conjuguée à sa capacité de vision pour définir son champ de vision. Si un pion n'a pas de source de lumière à portée, il sera caché, sauf s'il dispose d'une source de lumière personnelle (voir la vision dans le noir ci-haut). Le pion ne sera donc même pas visible par le joueur !

Les captures ci-contre illustrent cela. Vue MJ; vue joueur sans lumière; vue joueur avec la source de lumière «Candle - 5». Il y a quelques points d'attention :

# Le mode de vision de nuit ne crée pas d'effet visuel d'obscurité. Il signifie simplement qu'à défaut de source de lumière, personne ne verra rien.
# Dans la première vue joueur, le pion de l'elfe n'est pas visible dans le coin inférieur gauche du donjon car il n'a pas de source de lumière, donc ne voit rien, donc le joueur non plus ne voit rien, pas même son pion. Il voit uniquement l'arrière-plan de la carte.
# Dans la deuxième vue joueur, l'elfe est visible car il possède une source de lumière. Cette source permet au joueur de voir jusqu'à la limite du champ de vision de son pion.

{{Languages|Introduction to Lights and Sights}}
{{#customtitle:Introduction aux lumières et à la vision|Introduction aux lumières et à la vision}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:regular expression</title>
    <ns>0</ns>
    <id>1052</id>
    <revision>
      <id>4132</id>
      <parentid>4093</parentid>
      <timestamp>2010-02-01T00:37:54Z</timestamp>
      <contributor>
        <username>Jamesmanhattan</username>
        <id>136</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="669">Information on regular expressions can be found here: [http://www.regular-expressions.info/]
Note that because this is Java, the regular expression are slightly different from regular 'regular expressions'. Here is a link where you can test your expression and it will change it to a java-type expression for you: [http://www.cis.upenn.edu/~matuszek/General/RegexTester/regex-tester.html]

Here is the java page that explains what the java regular expressions are. [http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html]

Note: the newline or (line-break) character is \\\n   (three slashes). All the other characters like {space} require two slashes \\s</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:getPropertyNames</title>
    <ns>1</ns>
    <id>1053</id>
    <revision>
      <id>4100</id>
      <timestamp>2009-12-20T20:36:16Z</timestamp>
      <contributor>
        <username>Dunbaratu</username>
        <id>141</id>
      </contributor>
      <comment>New page: Note: The documentation for this function mentions that there's an id argument, but the examples don't show it.  Therefore I don't know what order the arguments come in.  (Is the id argume...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="208">Note: The documentation for this function mentions that there's an id argument, but the examples don't show it.  Therefore I don't know what order the arguments come in.  (Is the id argument first or second?)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Vision Blocking/fr</title>
    <ns>0</ns>
    <id>1054</id>
    <revision>
      <id>4112</id>
      <parentid>4110</parentid>
      <timestamp>2010-01-18T09:36:44Z</timestamp>
      <contributor>
        <username>Akryas</username>
        <id>117</id>
      </contributor>
      <comment>Ended translation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12461">{{Languages|Introduction to Vision Blocking}}{{Translation}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}

&lt;p align=&quot;center&quot;&gt;'''Note de traduction''' : ''Le blocage de vision, ou obstruction, s'exprime en anglais Vision Blocking Layer, d'où l'acronyme VBL qui est utilisé. Vous pourrez croiser la traduction «calque de blocage de vision» (CBL). Toutefois, comme les forums sont majoritairement en anglais, l'acroynme VBL est utilisé dans cet article.''&lt;/p&gt;

==Blocage de vision==

Dans MapTool, les [[Token:token|pions]] peuvent disposer de la [[Introduction to Lights and Sights|vue]], ce qui laisse le soin au logiciel de modéliser l'éclairement et la vision durant la partie. En d'autres mots, quand vous configurez la vision d'un pion, il peut «voir» les autres pions qui se trouvent sur la carte. De plus, MapTool gère l'[[Introduction to Lights and Sights|éclairage]], ce qui permet de restreindre la portée de la vue d'un pion, et le blocage de vision qui permet de définir des obstructions (afin de matérialiser les murs d'un donjon, par exemple).

Ce tutoriel expliquera l'essentiel du système de blocage de vision de MapTool et comment utiliser ses outils (quelques fois appelés ''outils de topologie'') dans le cadre d'un donjon type. Rappelez vous que l'obstruction de vision est intimement liée à la '''vue''', '''l'éclairage''' et au '''brouillard de guerre''', donc n'hésitez pas à vous référer à l'[[Introduction to Lights and Sights|introduction aux lumières et à la vision]] pour voir comment tout cela intéragit !


===Avant tout, munissez-vous d'une carte===

[[Image:samp-dungeon.png|thumb|Donjon type]]

Pour commencer, nous avons besoin de la carte d'un donjon, de préférence sombre et humide, plein de recoins et tout le reste.

Enfin, on ne va pas se prendre la tête avec un vrai dédale. Conçue à l'aide d'un [http://forums.rptools.net/viewtopic.php?f=34&amp;t=7418 remarquable ensemble de textures] créé par Jonathan Roberts (Torstan sur les [http://forums.rptools.net forums RPTools]), la carte située à droite sera utilisée pour nos exemples.

==Activer les outils de blocage de vision (VBL)==

[[Image:Vbl-toolbar-btn.png|thumb|Le bouton VBL]]

[[Image:Vbl-tools.png|thumb|Les outils de VBL, une fois que vous avez cliqué sur le bouton VBL]]

Pour accéder aux outils de blocage de vision (VBL), cliquez sur l'icone en forme «d'œil» dans la barre d'outils de MapTool (cf. capture d'écran de l'œil). C'est alors qu'un nouvel ensemble de boutons va apparaître : ce sont les outils de blocage de vision que vous pouvez utiliser. Si vous laissez votre pointeur de souris au-dessus, une légende apparaîtra. De gauche à droite, vous trouvez :

* '''Dessiner une VBL en rectangle plein''': cela crée une zone rectangulaire pleine qui bloque la vision. Les pions qui se trouvent à l'extérieur de la zone ne peuvent pas voir ce qui se trouve dedans, ni à travers; les pions qui se trouvent dedans ne voient rien du tout : c'est solide et opaque.
* '''Dessiner une VBL en rectangle creux''': cela crée un rectangle creux. Si un pion se trouve ''à l'intérieur'', ils verront tout ce qui se trouve à l'intérieur, mais ne pourront pas voir ''au-delà'' des bordures. Un pion qui se trouve à l'extérieur ne peut pas voir ce qui se trouve à l'intérieur du rectangle.
* '''Dessiner une VBL en ovale plein''': identique au rectangle, sauf que c'est un cercle (en réalité, c'est un polygone qui se rapproche d'une cercle, car un véritable cercle requiert trop de ressources).
* '''Dessiner une VBL en ovale creux''': identique au rectangle, sauf que c'est... un cercle creux.
* '''Dessiner une VBL en polygone fermé plein''': cela vous permet de dessiner un polygone face par face et le rempli quand vous avez fini; bien sûr en créant un VBL. Pour débuter le polygone, cliquez gauche sur la carte et tracer la première face. Pour y attacher une autre face, ''cliquez droit'' et bougez votre souris. Pour finaliser la forme, cliquez gauche.
* '''Dessiner une VBL en polygone fermé creux''': identique au polygone plein, sauf qu'il est creux.

===Bonnes pratiques===

Les processus de blocage de vision et de détermination de la vision requierent une utilisation intensive du processeur. Aussi, une surutilisation de ce système ou de formes particulièrement complexes peuvent causer de très mauvaises performances de MapTool (ralentissement, impossibilité de parcourir la carte, etc.). Quelques règles de base :

# '''Utilisez des rectangle autant que faire ce peut''' - et évitez les zone circulaires et polygonales.
# '''Utilisez les formes pleines autant que possible''' - cela évite les interstices entre les faces de polygones, qui peuvent être de véritables fléaux en terme de performance. Couvrez plutôt la carte avec un grand rectangle VBL et puis découpez à l'intérieur les zones que les pions peuvent observer.
# '''Utilisez-en le moins possible pour obtenir l'effet désiré''' - optimisez, soyez efficients !
# Il est aussi avisé de définir une frontière de vision sur les bords de la carte sur laquelle vous jouez, car les cartes dans MapTool sont potentiellement inifinies et il serait inutile que MapTool calcule les paramètres de vision en-dehors de l'espace où vous jouez.

Cela évitera d'écrouler les performances. Bien sûr, vous ''pouvez'' utiliser les autres types de VBL, mais soyez conscients de la complexité que vous introduisez.

==Ajouter les VBL sur la carte==

Nous pouvons maintenant ajouter le blocage de vision sur notre carte. Nous allons utiliser la technique recommandée, c'est-à-dire couvrir l'ensemble de la zone par un rectangle plein puis «percer» les zones visibles par les joueurs.

===Recouvrir l'ensemble du donjon avec les VBL===

[[Image:Vbl-map-zoomed-extents.png|thumb|Zoom arrière pour une vision globale du donjon]]

[[Image:Vbl-createsolidvbl.png|thumb|Création d'un rectangle plein sur le donjon]]

# Dézoomez pour voir l'ensemble de la carte.
# Cliquez sur «Dessiner une VBL en rectangle plein».
# Cliquez gauche pour positionner le coin supérieur gauche de la zone VBL. Ne maintenez pas le bouton enfoncé.
# Bougez la souris pour définir la taille de la zone VBL. Vous la verrez se dessiner en rouge translucide en même temps que vous bougez.
# Cliquez gauche à nouveau pour définir le coin inférieur droit de la zone VBL. La zone va devenir bleue. Si vous changez de barre d'outil de dessin, la zone bleue va disparaître : elle n'est visible qu'avec la barre d'outil VBL active.

[[Image:Vbl-complete-cover.png|thumb|Tout le donjon est couvert par un VBL]]

Vous venez de couvrir toute la carte en VBL. Si un pion est placé en-dehors de la zone, et dispose de la vue, il ne sera pas capable de voir l'intérieur de la zone que vous venez de tracer.

===Percer le donjon avec les zones visibles===

[[Image:Vbl-erasingvbl.png|thumb|Suppression d'une partie de VBL - maintenez Ctrl enfoncé pour coller à la grille.]]

Nous allons «percer» les salles. Ce procédé est un peu retors et pour conserver l'efficience des VBL, assurez-vous de tracer des lignes droites et ne laissez pas de jour ou de petits bouts de VBL trainer (une astuce est donnée plus loin). Tout d'abord, nous allons tout percer, à l'exception des murs extérieurs dont nous nous occuperons ensuite.

# Zommez jusqu'à être à l'aise.
# Cliquez sur «Dessiner une VBL en rectangle plein».
# Maintenez la touche Maj (Shift) enfoncée et cliquez gauche pour déterminer le coin supérieur gauche de la zone que vous voulez percer. Quand vous bougerez la souris, la zone sera dessinée en blanc translucide (si ce n'est pas le cas, maintenez Maj enfoncée).
# Allez jusqu'au coin inférieur droit et cliquez gauche. La zone bleue disparaît alors; vous avez ôté le VBL sur cette zone. Les pions qui s'y trouveraient verraient normalement (jusqu'à croiser du bleu à nouveau, bien sûr !).
# Répétez ce procédé pour les autres pièces, tunnels, etc.

[[Image:Vbl-erased.png|thumb|Le VBL a disparu dans les salles.]]

À la fin, vous devriez avoir le donjon en bleu, avec des trous pour chacune de ses salles.

'''Astuce''' : si vous maintenez la touche Ctrl enfoncée pendant votre tracé, vous allez vous coller à la grille. C'est très utile pour aligner les VBL. Cette technique a été utilisée sur la carte pour facilement aligner les zones.

===Cloisons===

[[Image:Vbl-polyline-wall.png|thumb|Tracer les murs avec Dessiner une VBL en polygone fermé plein.]]

Il ne reste plus qu'à tracer les cloisons intérieures du donjon. De cette manière, les murs ''intérieurs'' du donjon bloqueront la vue des pions.

# Zommez sur un mur.
# Sélectionnez l'outil Dessiner une VBL en polygone fermé plein.
# Maintenez la touche Ctrl enfoncée et cliquez gauche pour placer l'origine de la ligne. Vous devriez commencer la ligne dans un bloc de VBL pour éviter d'introduire des interstices.
# Bougez la souris pour tracer votre ligne. Sur la capture d'écran, la ligne est le fin trait rouge dans le cercle jaune; ce dernier a été ajouté à la capture d'écran pour vous aider à repérer facilement l'endroit à regarder, et n'apparaîtra pas sur votre écran).
# Cliquez gauche pour déterminer l'extrémité de la droite. La ligne rouge va devenir bleue, indiquant ainsi qu'il y a un VBL sur le mur.
# Recommencez l'opération pour tous les murs que vous voulez couvrir.

===Blocage de vision et objets===

Bon nombre d'objets peuvent obstruer la vision dans un donjon : les portes, les piliers, les gravats, les coffres, etc. Il est possible de placer des VBL n'importe où sur la carte. Toutefois, les VBL ne sont pas liés aux objets. Vous ne pouvez donc pas placer un VBL sur une porte et «l'ouvrir» quand vos joueurs ouvrent la porte. Vous pouvez simuler ce comportement en effaçant la VBL qui couvre la porte. De la même manière, il n'est pas possible de mouvoir un VBL en même temps qu'un objet.

Avec l'expérience, vous verrez ce qui vous satisfait le plus dans la gestion des objets avec les VBL, mais voici quelques astuces :

* '''Les portes''' : si elles sont fermées, tracez une ligne de VBL entre les deux murs qui l'encadre. Quand la porte est ouverte (si elle l'est jamais), vous pouvez tourner l'objet porte pour simuler son ouverture, et effacer la VBL à l'aide de l'outil Dessiner une VBL en rectangle plein (souvenez-vous : il faut maintenir la touche Maj (Shift) enfoncée pour effacer une VBL). N'utilisez pas les outils creux, car vous n'effaceriez que les contours de la forme tracée.

[[Image:Vbl-drawx.png|thumb|Un «X» dessiné en VBL, souvent utilisé pour les piliers, statues, et autres.]]

* '''Piliers, statues et autres objets verticaux''' : souvenez-vous que quand vous utilisez un VBL, les pions ne peuvent pas voir à travers du tout (subséquemment, les joueurs ne verront rien qui soit couvert par un VBL). Si vous voulez que les joueurs puissent observer une partie de l'objet, l'astuce consiste à tracer un «X» sur le pilier à l'aide de l'outil de polygone (plutôt que de couvrir tout le pilier avec une zone circulaire ou rectangulaire). Un «X» permet aux joueurs de voir des parties du pilier selon où leur pion se trouve. Cela rend beaucoup mieux ! Si vous regardez la capture d'écran, vous verrez qu'un «X» a été placé sur un des barils.

==Limites des VBL==

Le système d'obstruction de vision de MapTool permet de simuler ce qu'un personnage peut voir pendant une partie. Cependant, il a ses limites et ne simule pas une vision «complète». Nous avons souligné une limitation précédemment : l'impossibilité de lier un VBL à un objet. Voici d'autres limites (valables pour la version 1.3.b56 de MapTool) :

* '''L'obstruction est binaire''' : On peut tout voir ou ne rien voir du tout. Il n'y a pas de transparence partielle, ou dans un sens uniquement dans MapTool.
* '''L'obstruction est totale''' : Le VBL obstrue toutes les formes de vision, il n'y a aucun type de vision qui permet de passer au travers.
* '''L'obstruction n'a pas d'altitude''': On ne peut pas spécifier de hauteur à un VBL : on ne voit rien du plus profond des enfers jusqu'au plus haut des cieux ! Il n'y a donc aucun moyen de permettre à des personnages de voir par-delà parce qu'ils sont sufissament grands.


{{Languages|Introduction to Vision Blocking}}{{#customtitle:Introduction au blocage de vision|Introduction au blocage de vision}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Aura</title>
    <ns>0</ns>
    <id>1055</id>
    <revision>
      <id>4123</id>
      <parentid>4120</parentid>
      <timestamp>2010-01-21T16:29:46Z</timestamp>
      <contributor>
        <username>CyrusStonecypher</username>
        <id>152</id>
      </contributor>
      <minor/>
      <comment>[[aura]] moved to [[Aura]]: case sensitivity</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1010">Aura is a special light source because while it is blocked by VBL and can cast colored light, it does not actually illuminate anything. (An aura will not reveal hidden areas to a player, but it does act as a way to see how far from a token its aura extends). 

The aura group name is not included by default and must be added by the user.  

To add auras:

From within MapTool&lt;br&gt;
Edit -&gt; Campaign Properties -&gt; Click the &quot;Light&quot; tab

The following is an example of the Aura group as it might be entered.  
 
{{code|Aura}}&lt;br&gt; 
{{code|----}}&lt;br&gt;
{{code|Aura Med Red 5' threat : aura square 7.50#55333}}&lt;br&gt;
{{code|Aura Med malign 30' : aura square 32.50#330033}}&lt;br&gt;

In the first entry &quot;Aura Med Red 5' threat&quot; is a descriptor and has no effect upon the light.&lt;br&gt;  
The information after the colon defines the light.&lt;br&gt;&quot;Aura&quot; is the type of light.&lt;br&gt;&quot;Square&quot; defines the shape of the light.&lt;br&gt;&quot;7.50&quot; defines the range of the light.&lt;br&gt;The number preceded by &quot;#&quot; is an RGB value for the color of the light.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>aura</title>
    <ns>0</ns>
    <id>1056</id>
    <redirect title="Aura" />
    <revision>
      <id>4124</id>
      <timestamp>2010-01-21T16:29:46Z</timestamp>
      <contributor>
        <username>CyrusStonecypher</username>
        <id>152</id>
      </contributor>
      <comment>[[aura]] moved to [[Aura]]: case sensitivity</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">#REDIRECT [[Aura]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>States:Configuring states</title>
    <ns>0</ns>
    <id>1057</id>
    <revision>
      <id>4127</id>
      <timestamp>2010-01-21T19:21:38Z</timestamp>
      <contributor>
        <username>CyrusStonecypher</username>
        <id>152</id>
      </contributor>
      <comment>New page: == Description of the States tab in Campaign Properties ==  '''Name''':		The name of the state.&lt;br&gt; '''Group''':  	States in the same group will be included in a submenu of states. &lt;br&gt; ''...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2703">== Description of the States tab in Campaign Properties ==

'''Name''':		The name of the state.&lt;br&gt;
'''Group''':  	States in the same group will be included in a submenu of states. &lt;br&gt;
'''Type''':  	The type of visual representation associated with the state.  &lt;br&gt;
:''Image'': 		The state will be represented by an image that will cover the token.&lt;br&gt;
:''Corner Image'': 	The state will be represented by an image that will  appear in the a corner of the token.  When this is chosen the Corner drop down menu is enabled. &lt;br&gt;	
:''Grid Image'': 		The image will be sized to accomodate a grid specified by the Grid Size field.  This allows for multiple states to be displayed on a token.  For example, a 2x2 grid allows the display of 4 states while an 8x8 grid allows for 64 states.&lt;br&gt;  
:''Dot'':			The state will be represented by a dot that will appear in a corner of the token.  The Color is specified by the color that appears in the Color field.&lt;br&gt; 
:''Grid {name}'':		The state will be represented by an image of {name} within the Grid Size specified.&lt;br&gt; 
:''Circle'':		The state will be represented by a hollow circle of the color specified in the Color field.&lt;br&gt;
:''Shaded'':		The token will be covered by the color specified in the Color field with the Opacity specified in the Opacity field.&lt;br&gt;
:''X, Cross, Diamond, Yield, Triangle'':	An image of the this shape will appear on the token.  Color, Width, and Opacity are configurable.&lt;br&gt;

'''Color''':	Certain Types have a configurable color.  Click this to specify the color.&lt;br&gt; 
'''Width''':	Certain Types have a configurable Width.&lt;br&gt;  
'''Opacity''':	Defines the opacity of the state.&lt;br&gt;  
'''Corner''':  	Certain Types appear in a corner of the token.  The corner is specified here.&lt;br&gt;
'''Mouseover''':  If check the state only appears when the mouse cursor is over the token.&lt;br&gt;

'''Show To''':	Defines who is able to see the sate.&lt;br&gt;

== Configuring the States ==
==== Change the image for a state ====
Select the State from the list.  Its name will appear in the Name field.  Alternatively, the 
name can be manually typed into the field.&lt;br&gt;  
(Note that names are case sensitive.  &quot;Disabled&quot; and &quot;disabled&quot; are different states.)&lt;br&gt;
Select the appropriate Type.  If it is an Image, select Browse or type the file path in 
the field to the right of Image.  Click Update.&lt;br&gt;  

==== Change the name of a state ====
Select the state by click left clicking it.  Change the text appearing in the Name field.  
Click Update.&lt;br&gt;  

==== Create a new State ====
Click Browse and select the image.  Type the desired name of the State in the Name field.
Click Add.  The new state is now at the bottom of the list of states.&lt;br&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User talk:CyrusStonecypher</title>
    <ns>3</ns>
    <id>1059</id>
    <revision>
      <id>4131</id>
      <parentid>4130</parentid>
      <timestamp>2010-01-25T15:19:24Z</timestamp>
      <contributor>
        <username>CyrusStonecypher</username>
        <id>152</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">Hi, I'm new here.  
What's shakin'? 
 :)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Campaign Repositories</title>
    <ns>0</ns>
    <id>1060</id>
    <revision>
      <id>5634</id>
      <parentid>4176</parentid>
      <timestamp>2011-07-27T18:16:49Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Beginner category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2504">{{Languages|Introduction to Campaign Repositories}}{{Beginner}}

== What is a repository? ==
A campaign repository is a set of files (mostly images) that are used in a campaign.  By hosting a repository someplace other than the GM's computer you can help speed up the image download time of your players, making the game run smoother in general.  

You must have some externally hosted web space to properly use a repository.  Many ISPs give you some space you can use for this type of purpose.  If your ISP does not provide this you can usually find cheap (and even free, in some cases) web hosting if you search around.  

Unless you are running MapTool from a really beefy server-class machine on a T1 connection (or you picked a really bad web server) you're almost guaranteed that clients will be able to download files from any hosted web storage faster than they will from your machine.  This is one of the main benefits of a repository.

== Creating a repository ==
To create a repository file, open your campaign in MapTool and go to File -&gt; Export -&gt; Campaign Repository File.  This will create a zip file that contains the repository information.

Unzip the file. (This is very important!  MapTool cannot use the repository if it remains zipped!)  Inside should be a folder called &quot;assets&quot; and a file called index.gz.  Upload both the assets folder and the index.gz file to your web storage.  Make sure they are in the same directory.  (Do not put the index.gz file ''inside'' the assets folder.  It should be at the same level as the assets folder.)

Make a note of the URL for to your index.gz file.  You can test the URL by typing it or copying and pasting it into your browser's address bar.  If you have the address right you should see a page full of letters and numbers that won't mean much to you.

In MapTool, go to Edit -&gt; Campaign Properties then go to the Repositories tab.  Delete any links that are already there, then add the URL of your index.gz file.

Save your campaign.  Now when clients connect to your server they will get the campaign files from the repository online instead of your PC.

If you make changes to your campaign file you will need to re-export the campaign repository file and re-upload it to your web space.  You will not need to re-add the URL to the Repositories tab of the Campaign Properties unless you changed the location where your files are being kept.

[[Category:MapTool]]
[[Category:Tutorial]]
{{Languages|Introduction to Campaign Repositories}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>round</title>
    <ns>0</ns>
    <id>1061</id>
    <revision>
      <id>4150</id>
      <parentid>4149</parentid>
      <timestamp>2010-02-24T23:48:32Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="534">{{MacroFunction
|name=round
|description=Returns the rounded value of a number to    specified precision     (number of digits after the decimal point).    precision  can be zero (default).

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: result = round(value, precision)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: round(1.45)]
&lt;/source&gt;
Returns 1

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: round(1.45, 1)]
&lt;/source&gt;
Returns 1.5

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: round(1.44,1)]
&lt;/source&gt;
Returns 1.4
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Frameworks</title>
    <ns>0</ns>
    <id>1062</id>
    <revision>
      <id>5635</id>
      <parentid>5526</parentid>
      <timestamp>2011-07-27T18:36:28Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Moving reference to framework tutorial</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1353">== Call of Cthulhu ==
*Brad's: http://forums.rptools.net/viewtopic.php?f=33&amp;t=16109

== D&amp;D ==
=== 4.0 ===
*Rumble's 4E current: http://www.houseofgenius.com/files/mtfw/v500/rfw-v5.html
*Veggiesama's current: http://forums.rptools.net/viewtopic.php?f=58&amp;t=16429
*DeviantNull's Character Sheet current: http://74.54.95.210/~rptools/phpbb/viewtopic.php?f=58&amp;t=15969&amp;sid=fbc302084cfe63fd58592e07cd783180
**[[Setting up DeviantNull's Character Sheet framework|Setting up DeviantNull's Character Sheet framework]]

=== 3.5 ===
*lmarkus001 (current):  http://forums.rptools.net/viewtopic.php?f=53&amp;t=17706
*Neofax V4(current): http://home.comcast.net/~neofax99/PFS/PFS_B82Core01.cmpgn
*Neofax V3: http://home.comcast.net/~neofax99/PFS/PFS-FW_Core5-V3.cmpgn
*Neofax V2: http://home.comcast.net/~neofax99/PFS/PFS-FW_Core5-V2.cmpgn
*Neofax V1: http://home.comcast.net/~neofax99/PFS/PFS-LindsayCore05-B74.cmpgn

== Dark Heresy, Rogue Trader &amp; Deathwatch ==
*Framework V.3.12.1 http://forums.rptools.net/viewtopic.php?f=33&amp;t=12137

== Dragon Age ==
*http://forums.rptools.net/viewtopic.php?f=33&amp;t=12651

== Pathfinder ==
*Uses the Same frameworks as D&amp;D 3.5 above.

== Risus ==
*http://forums.rptools.net/viewtopic.php?f=33&amp;t=9561

== Shadowrun 4th ==
*http://forums.rptools.net/viewtopic.php?f=59&amp;t=9002

This is just meant to be a start...  There are many others.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Macro Writing/ko</title>
    <ns>0</ns>
    <id>1063</id>
    <revision>
      <id>5617</id>
      <parentid>4161</parentid>
      <timestamp>2011-07-24T09:32:35Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>/* Comments */ Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="48587">{{Languages|Introduction to Macro Writing}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}
==매크로란?==

마찬가지로 토큰 매크로 페이지에서 언급한, 간단히 매크로 MapTool에서 작업을 자동화하는 방법입니다. 기본적으로, 매크로 ''parser''에 의해, 이는 그들을 해석하고 그 오른쪽 부분을 올바른 방법으로 (예를 들어, 그 명령을 함께 숫자 두 개를 추가하는 매크로 명령으로 처리됩니다 확보에 대한 처리를 읽을 수 있도록하는 스크립트 , 그리고 단순히 텍스트 채팅 창을에) 넣어합니다. 

매크로에서 작은 MapTool에서 시작하지만이 시점에서, 매크로 스크립트 언어가되고있다 아주 완전한 명령과 당신이 상상할 수있는 거의 모든 작업을 수행할 수있는 기능 집합을 특징! 

==먼저 알아야 할 사항==

우리는 보다 강력한 - 그리고 더 복잡한 - 기능과 MapTool의 기능에 대해 탐구하기 시작한 결과가 매크로입니다. 이 가이드를 시도하는 동안에도 새로운 사용자에 따라 쉬울 것 같은데요, 거기에 당신과 읽기는 이미 어떻게해야할지 생각 몇 가지있습니다:

# 난 당신이 [[Introduction to Mapping|지도기능 안내]]를 읽었다고 가정합니다. 그래서 MapTool 인터페이스를 만드는 방법, 캠페인 파일 저장, 맵에 토큰을 넣기 등에 친숙하다고 생각합니다.
# 난 당신이 [[Introduction to Tokens|토큰 안내]]도 읽었다고 가정합니다. 그래서 토큰을 어떻게 조작하는지 기본적인 아이디어는 그들의 속성 등을 살펴보세요.
# 마지막으로 매크로는 일반적으로 토큰의 ''properties''과 밀접하게 연결되어있습니다. 나는 당신이 [[Introduction to Properties|등록정보 안내]]에 따라 차근차근 읽었고, 새 사용자 MapTool에 대해 배울 수 있도록 만든 새로운 캠페인 파일을 [[Sample Ruleset|Sample RPG ruleset]]에 기반해 만들었다고 가정합니다. 아직 가이드를 읽지 않았다면 읽으세요. 그게 아래 예제를 이해하는데 ''훨씬 더'' 도움이됩니다!

==이 안내서에 대한 규칙==

내가 사용하는 언어와 용어를 일관성 유지에 최선을 다할 것입니다. 본 가이드에서는 :

* '''Macro'''는 명령어를 함께 그룹화 작업을 자동화하는 컬렉션을 나타냅니다.
* '''Macro command'''는 ''individual'' 명령을 특정 또는 ''inside'' 매크로를 사용하여 함수를 참조한다.
* '''Macro language'''는 '개인'명령을 특정 또는 '' '' 내부 매크로를 사용하여 함수를 참조한다
* '''Macro language'''는 당신이 매크로를 쓸때마다 사용할 수 잇는 명령, 함수, 운영에 관한 모든 모음을 의미합니다. 당신의  [[:Category:Macro Function|List of Macro Functions]]에서 함수 모음을 볼 수있습니다.

Also, although it is possible for one macro to trigger another (called &quot;calling&quot; another macro), for this guide, the only macros we'll talk about are triggered by clicking a button on the appropriate Macro Panel, and only affect the tokens they run ''on''.

==Why Would I Use Them?==

There's nothing requiring you to use macros at all when you use MapTool. Remember, the core purpose of MapTool is to share a map with your friends, and play games (read the [[Introduction to Mapping]] and the [[Introduction to Game Hosting]] to learn how to make and share maps with your gaming groups), and MapTool gives you everything you need to do that: maps, tokens, and a chat system that lets you chat in- and out-of-character, roll dice, and take on the roles of whatever character you are playing. 

However, there's a lot more that can be done with MapTool, if you're interested in learning a little bit about the macro capabilities. For example, if you want to click a button that will automatically roll 1d20 and add a modifier to it, it's possible to create a macro for that. If you want to change your hit points after getting hurt, you can write a macro to do that. And this tutorial will show you how.

==Where are These So-Called &quot;Macros?&quot;==

Macros are associated with various parts of the MapTool interface and the objects in it. It turns out that there are three places a macro can &quot;reside,&quot; so to speak:

===Token Macros===

The first, and most common place, is for a macro to reside on a [[Introduction to Tokens|token]]. Token macros are associated with the token on which they are created, and will travel around with that token as long as you let them.

Token macros are only directly accessible to the people who own the token, so if you don't own the token, you won't be able to click (or even see!) the button for that macro. 

===Campaign Macros===

Campaign Macros are macros that aren't linked to a specific token in a campaign, but to the campaign as a whole. These macros work in almost every respect exactly like a token macro, except that:

# You don't have to select a token to see the macros
# Anyone can access them and run them

Campaign Macros are quite useful for the GM and for the Players to handle common functions - in fact, if you set up a common task as a campaign macro, then you only need to make one copy of it (instead of making copies on every token that needs it). 

===Global Macros===

Global Macros aren't linked to a token or a campaign - instead, they are macros that are linked with your copy of MapTool. These macros are ''not'' visible to anyone else who connects to your game.

This is a good place to put macros for tasks you ''don't'' want other people seeing - like information you want to show to players only when ''you'' decide; or tasks you want to perform on your NPCs but you don't want PCs to be able to do.

==The Macro Panels==

[[Image:Macro-panels.jpg|thumb|The four Macro Panels]] [[Image:Tabbed-panels.jpg|thumb| The four panels stacked together, selectable by the tabs at the bottom (many users stack them like this to save space)]]

With all this talk about macros and locations and especially the macro &quot;buttons,&quot; you are probably wondering - where are these buttons? You'll find macro buttons on one of the 4 '''macro panels''' that appear in MapTool. If you cannot see any of the macro panels, go to the '''Windows''' menu, and make sure that these four windows are checked:

* Selection
* Impersonated
* Campaign
* Global

You should see these windows pop up in MapTool if they were not already there. If you look at the screenshots to the right, you will see that the Global panel is covered with a bunch of buttons. Each of those buttons will execute a macro; the buttons appear when you create a new macro. 

'''Please note''', however, that the Global panel contains macros that are specific to ''your'' computer and ''your'' installation of MapTool. The buttons you see in the Global Panel screenshots are ''my'' Global macros; yours...well, you'll have to write some!

===Selection and Impersonated Panels===

There are two panels that deal directly with token macros: Selection, and Impersonated. 

The '''Selection''' panel will show buttons for all of the macros that are currently residing on the token you have selected (you select tokens by clicking on them with the mouse). Each of these buttons runs a particular group of macro commands.

The '''Impersonated''' panel shows buttons for the macros on the token you are ''impersonating''. Impersonating a token is a way to &quot;assume the token's persona&quot; - when you chat, text will appear as if the token was speaking, and so forth. It is possible to impersonate one token, and select another, so make sure you know what panel you're looking at!

===Campaign Panel===

This panel shows all of the macros currently set up for the Campaign. Remember, these are visible to everybody.

===Global Panel===

This panel contains the Global Macros you've set up. Remember, these are ''only visible to you.''

==Before You Go Any Further: The Basics==

Before we proceed, there are some ''essential'' elements of the macro syntax you need to understand, or unpredictable things will happen. Macros originated as ways to script short sections of text and very brief dice rolls, which were sent to the chat window. So, if you wanted a battle cry to be displayed, but didn't want to retype it every time, you could write a &quot;macro&quot; to send that battle cry to the chat window. Likewise, if you always rolled 2d6 to make an attack, you could write a macro to generate that output, rather than typing {{code|/roll 2d6}} every time you needed to roll.

From there, it grew - the macro commands became more complex until they were almost a programming language; but they're still just a bunch of text passed to a ''parser'', which handled all the commands in the macro, and generated results. 

So, one of the big things to remember is this:

'''IMPORTANT: Macros are a sequence of text containing both text you want to display in chat AND special commands that do things like make dice rolls'''.

===The Current Token===

Before you begin writing macros, please consult the page on the [[Current Token]] concept. When you write macros, you will usually - unless the macros are very minimal - be manipulating [[Token Property|Token Properties]]. In order to manipulate the ''correct'' set of properties with your macro, it is crucial to understand the concept of the [[Current Token]]. 

'''IMPORTANT: A macro''' '''''always''''' '''refers to the Current Token, unless you explicitly instruct the functions/operations of that macro to address a token other than the Current Token. '''

===Brackets and Braces===

Now, because they are plain text, there must be a way to distinguish the parts that are just text to send to chat, and the parts that are &quot;programming commands.&quot; MapTool handles that by enclosing the programming commands in brackets - either the square brackes, {{code|[ ]}}, or the curly brackets, {{code|{ } }}. 

'''IMPORTANT: Anything found in between square brackets or curly braces is handled not as regular text, but as a command to the parser to do something. Likewise, if it's''' '''''not''''' '''between curly or square braces, it is sent to the chat window as text.'''

So, something like:

&lt;source lang=&quot;mtmacro&quot;&gt;
[1d20]
&lt;/source&gt;

or

&lt;source lang=&quot;mtmacro&quot;&gt;
{1d20}
&lt;/source&gt;

is not telling MapTool to send the text &lt;nowiki&gt;[1d20]&lt;/nowiki&gt; or &lt;nowiki&gt;{1d20}&lt;/nowiki&gt; to chat; rather, it's saying &quot;generate a random number between 1 and 20 and send ''that'' to the chat window.&quot; The brackets and braces (although braces aren't recommended for use anymore, due to complications they cause with the branching and looping functions) indicate to MapTool that the information ''between'' them is a macro command or variable, and not just text. So, as you'll see later, you can mix text and macro commands:

&lt;source lang=&quot;mtmacro&quot;&gt;
I roll [1d20+4] for initiative.
&lt;/source&gt;

in a macro will replace the &lt;nowiki&gt;[1d20+4]&lt;/nowiki&gt; with the result of that dice expression, and then print the entire sentence to chat, so it looks something like:

&lt;source lang=&quot;mtmacro&quot;&gt;
I roll 16 for initiative.
&lt;/source&gt;

===Roll Options===

Roll Options are another special feature of the macro language. Their name is somewhat of a legacy - since most macros were dice rolls (e.g. the aforementioned &lt;nowiki&gt;[1d20+4]&lt;/nowiki&gt;, there was a request to have different ways to display them (or not display them at all). Since those options were used to change how a roll appeared, they were called Roll Options, and the name stuck. In fact, it's still applicable, even though the options no longer really just handle how something is displayed. 

Roll Options are a critical thing to understand in macro writing. There are a couple rules. First, the general format of any macro command in MapTool is this:

&lt;source lang=&quot;mtmacro&quot;&gt;
[(comma-list-of-options): operation(s)]
&lt;/source&gt;

Now, to explain: a roll option has the following rules:

# It always goes at the beginning of a macro statement (for our purposes, a statement is any macro line between square brackets). 
# It is always followed by a colon.
# It may be combined with other roll options; if so, you separate each option with a comma, and at the end of the comma-separated list, you put a single colon.
# It needs to appear only once in a given macro statement for it to apply to the operations contained within. This gets tricky when you start using the CODE roll option, since you can begin to nest entire, separate statements, but that is explained in the sections on branching and looping. 

A simple example of a roll option is this:

&lt;source lang=&quot;mtmacro&quot;&gt;
[r:1d20+4]
&lt;/source&gt;

That uses the &quot;regular output&quot; roll option to display the result of 1d20+4 as plain text (without highlighting or tooltips). A complex example might look like this:

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20): output = &quot;Critical Hit&quot;; output = &quot;Not a Critical Hit&quot;]
&lt;/source&gt;

This combines the [h: ] roll option (which means, &quot;hide this from the chat window&quot;), and the [if(): ] roll option, which performs an if-then operation. Note, though, the roll options all appear only at the beginning of the macro statement to which they apply. 

A ''very'' complex example might involve the use of the [CODE: ] roll option (learn more about that at [Introduction to Macro Branching] to allows you to nest entire macro statements within blocks to be executed as if they were a single statement. For instance:

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20),CODE:
{
    [damageAmount = 16]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
};
{
    [damageAmount = 1d10+6]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
}]
&lt;/source&gt;

This is a complex statement, but the roll options for the overall command (the outermost set of square brackets) are all at the beginning, separated by commas, and followed by a single colon. The inner statements are ''nested''.

===Quotes and Apostrophes===

Under most circumstances, macros containing single quotes (or apostrophes) will work fine - they're just text, and thus they will be sent to the chat window without issue. However, there are certain situations where a lone, or unmatched, single quote will cause MapTool to think you have created an ''unterminated string''. When that happens, the text of the macro (all the commands, etc.) is usually dumped to chat, resulting in a big block of ugly output.

To avoid this, remember this rule: if you have text that you wish to appear in chat contained between a set of curly braces, a lone quote character (single or double quotes) will cause an error. So, modifying the example above: 

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20),CODE:
{
    [damageAmount = 16]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
    The target's HP is now [r:TargetHP].
};
{
    [damageAmount = 1d10+6]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
}]
&lt;/source&gt;

The single quote character in the line {{code|The target's HP is now [r:TargetHP]}} will cause an error. There are two ways around this: 

# Don't use apostrophes. This can be a bit awkward.
# Replace the apostrophe with the HTML character code for the single quote: '''{{code|&amp;amp;#39;}}'''

===Comments===

'''THERE IS NO COMMENT MECHANISM IN THE MACRO CODE. ALL PROPERLY WRITTEN MACRO COMMANDS IN A MACRO''' '''''WILL BE EXECUTED.'''''

The macro language directs all of the content of a macro through the built-in parser, looking for text to send to chat and commands to execute. It is possible to hide output from the chat window in a couple of fashions, but it is not possible to prevent the execution of properly written macro commands. In other words, you '''cannot comment out code.'''

There are two ways to hide output: the {{roll|h}}, or &quot;hidden&quot;, roll option, and HTML comment format. The hidden roll option you've already seen, but if you're not familiar with HTML, comments in HTML look like this:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--This is an HTML comment--&gt;
&lt;/source&gt;

In an actual HTML page, anything between the &lt;nowiki&gt;&lt;!--&lt;/nowiki&gt; and &lt;nowiki&gt;--&gt;&lt;/nowiki&gt; is completely ignored. In contrast, in MapTool's macro language, anything between the comment tags is ''hidden'' from chat, but if you embed macro commands in there, they ''will'' be executed. In other words, in a macro, if you have this line:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--In this part of the macro I roll some dice--&gt;
&lt;/source&gt;

it will be hidden from chat and act like a comment. However, if the line said:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--In this part of the macro I roll some dice using the format [r:1d20+9]--&gt;
&lt;/source&gt;

the parser will hide all that from chat, but it ''will'' perform that macro command, whether you want it to or not.

The lesson to be learned here: '''You cannot comment out macro code.'''

==Writing Macros==

[[Image:Camp-panel-nomacros.png|thumb|The '''Campaign Panel'''. You can see there are no macros here yet.]]

[[Image:Camp-panel-rcaddnew.png|thumb|Right-clicking on the Campaign Panel lets you add a new macro.]]

Macro creation is a three-step procedure (though those three steps can contain multitudes!):

1. Right-click on the panel where you want the macro to appear (either one of the token panels, the Campaign panel, or the Global panel) and select '''Add New Macro'''. A gray button with the label '''(new)''' will appear.

2. Right-click on the button, and select '''Edit'''.

3. Enter your macro code, give it a name, and hit '''OK'''. There! You've created a macro!

But wait...what do you mean, &quot;macro code?&quot; 

As I said, those three steps can contain a ''huge'' amount of details, steps, tips, tricks, victories, failures, frustrations, and sometimes, hollering and gnashing of teeth. So, we'll take a step back and look at some very simple macros in a step-by-step fashion. If you want to see what some advanced macros can look like, there are plenty of tutorials and how-tos on this wiki to read through. For now, though, we'll do some simple, but useful, macro writing.

===Roll for Initiative===

[[Image:Camp-panel-newbutton.png|thumb|After selecting &quot;Add New Macro,&quot; a button labeled '''(new)''' appears on the Campaign Panel.]]

[[Image:Camp-panel-rceditbutton.png|thumb|Right-clicking on the button opens the macro editor.]]

[[Image:Macro-editor-examplestring.png|thumb|Entering a macro label and the macro command]]

[[Image:Camp-panel-exbutton.png|thumb|The '''Campaign Panel''' with your newly created macro on it]]

The simplest macros are no more than text, which is output to the chat window. In effect, a macro containing text (in fact, all macros) just send a string of commands to the chat window where it is read and interpreted. Most programming languages start off with the classic &quot;Hello World!&quot; program, so this guide is ''not'' going to do that. Instead, let's do something a bit more RPG: create the dreaded &quot;Roll for Initiative!&quot; message!

1. Select the Campaign Panel.

2. Right-click on it, and select '''Add New Macro'''.

3. Right-click on the new macro button, and click '''Edit'''.

4. In the '''Label''' field, enter &quot;Roll for Initiative!&quot;

5. Leave the '''Group''' and '''Sort Prefix''' fields blank.

6. In the '''Command''' field, type 

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;Roll for Initiative!&lt;/tt&gt;&lt;/blockquote&gt;

7. Click '''OK'''. 

8. When you're done, you'll see that the button has changed - it now says '''Roll for Initiative!''' on it, and when you click it, lo and behold, the text &quot;Roll for Initiative!&quot; appears in the chat window.

That is macro writing at its most basic: you enter some text in the macro, and that text is read by the parser and sent to the chat window when you press the button. 

===Something More Interesting===

&quot;Roll for Initiative,&quot; though scary when your GM utters it, is not all that ''interesting'' a macro. You probably thought, &quot;why wouldn't I just type that in chat?&quot; And in fact, the answer is, &quot;you probably would.&quot; So let's do something more interesting, and more in keeping with why we're using MapTool in the first place (after all, we're not here to write programs - we're here to play games): we're going to add some ''macro commands'' to the macro, in addition to just plain text. Macro commands are special instructions that, when read by the parser, tell it to do something more than just print text in the chat window, like roll some dice or calculate a value.

Macro commands must ''always'' be enclosed in square brackets (e.g, [''macro command'']) or curly braces (e.g., {''macro command''}). Enclosing them in this fashion is what clues the parser in that a command is coming - otherwise, it will treat the command just like any other text, and print it in chat. 

====Roll Some Dice====

[[Image:Macro-editor-rolldice.png|thumb|A macro with text and a basic dice roll of 1d20+7]]

This is a simple macro that's going to automatically roll some dice, and add a number to that roll, before displaying the whole thing in the chat window. 

1. Create a new macro (this can be created anywhere you like - on a token, in the campaign panel, or in the global panel), and open the edit dialog (remember, you do that by right-clicking on the button labeled '''(new)'''). 

2. In the '''Label''' field, call the macro something like &quot;Attack Roll&quot; or &quot;Dice Roll&quot;

3. In the '''Command''' area, enter:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll is [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

4. Click '''OK'''. You should see a button labeled with whatever you chose in Step 2, above. When you click it, you'll see something like the following appear in chat:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;Chris: My attack roll is &lt;font style=&quot;background-color:lightgray;&quot;&gt;8&lt;/font&gt;!&lt;/blockquote&gt;

What has happened is that MapTool read through the contents of the macro, and when it got to the section '''[1d20+7]''', it knew to:

# Roll a 20-sided die (or, in reality, choose a random number between 1 and 20), and
# Add 7 to that result, and
# Display the results in the chat window, inserted into the text in the right place

You'll see that the number 8 has a gray background. If you hover over that number, a &quot;tooltip&quot; will pop up showing how that number was reached. In this case, I managed to roll a 1 on the 1d20 (bummer! a critical fumble!)  If you don't see this tooltip, check your [[MapTool Preferences#Chat]] settings, specifically '''Use ToolTips for Inline Rolls'''.

Also, you probably won't see the name &quot;Chris&quot;, unless your name happens to be Chris. That part of the chat output is just indicates who &quot;said&quot; that particular bit of text; if it was a token, it would have the token's picture and name instead of boring old &quot;Chris.&quot;

====More than Just Numbers====

Macro commands can work with numbers and with text -- you can manipulate ''strings'' (that is, collections of alphanumeric characters) as well using the MapTool macro language. Say, for instance, you wanted to roll your attack, but wanted to enter the name of your target so that it showed up in chat.

[[Image:Macro-editor-basiccommands.png|thumb|A macro with a basic dice command and a variable called ''target'']]

[[Image:Prompt-undeclared-variable.png|thumb|A prompt for an &quot;undeclared variable&quot;]]

What you can do is edit your Attack Roll macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

When you run this macro, though, suddenly a window pops up in your face demanding a &quot;Value For target.&quot; What happened?

Well, when MapTool looked at that macro, it saw a macro command that just says '''[target]'''. MapTool assumes that any word ''inside'' a macro command that is ''not'' enclosed in quotes is actually the name of a ''variable'' (in other words, a value that might change). 

MapTool also noted that nowhere in that macro do we say ''what'' the variable ''target'' happens to equal. Programming languages call this sort of situation an ''undeclared variable'' (in other words, you never declared what it equaled). Since MapTool has no way of knowing what ''target'' should be, it asks! If you type a name, number, or pretty much anything in that popup window, MapTool will take that information, assign it to the variable ''target'', and finish the macro. 

Go ahead and type &quot;Nasty Orcses&quot; (you can leave off the quotes) in the box, and hit '''OK'''. You should see in the chat window something like:

&lt;blockquote style=&quot;border:1px solid gray;&quot; width:50%;&gt;Chris: My attack roll against &lt;font style=&quot;background-color:lightgray;&quot;&gt;Nasty Orcses&lt;/font&gt; is &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt;!&lt;/blockquote&gt;

Once again, the parser read through the text and macro commands you put inside the macro, and in the places where a macro command was indicated (by the square brackets, remember), MapTool substituted the appropriate information.

==Using Variables in a Macro==

We've seen in a couple of the examples some use of variables (like {{code|target}} in the example above) in a macro, but we haven't gone into the process too deeply yet. However, variables, and their use, is really the core of macro writing, so it would be remiss of me to leave it go.

===What's a Variable?===

If you're familiar with programming at all, you will know this already, but if you're just stepping into this stuff cold, the simple definition of a ''variable'' in terms of the macro language is:

:'''A variable is a value that might change (i.e., vary) based on a token property, a calculation, or another macro command'''

Since the value of a variable might change, we have to give it a name (which is called ''declaring'' the variable - you declare that &quot;this variable exists!&quot;) in order to talk about it. Then, whenever we need to use whatever value the variable has ''at that time'', we just put its name in the macro command, and MapTool will substitute the appropriate value at that time. 

Think of it this way: if the value of a dice roll could be anything between 1 and 20, for example, you can't just enter 19 wherever you need to use that dice roll - it could be 19, or 2, or 7, or whatever. So instead, you'd want to say &quot;whatever this dice roll is, put that number here.&quot;

:'''Note''': that doesn't mean that MapTool will substitute the ''correct'' value for ''your'' needs; it means it will substitute the value corresponding to that variable at that time. So if your program has a mistake in it, the value might end up being wrong - but MapTool doesn't understand &quot;wrong,&quot; it just understand &quot;this is what it says right now.&quot; 

===Variable Assignments===

When you want to give a variable a value, this is called &quot;assigning&quot; a value to the variable. The &quot;asignment operator&quot; in MapTool is the equals sign ( = ). That sounds fancy, but it just means that you use an equals sign to tell MapTool that a particular variable has a particular value. An example of a variable assignment is 

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:myHP = 30]
&lt;/source&gt;
&lt;/blockquote&gt;

As you have probably figured out, what that line does is first ''declare'' a variable called {{code|myHP}} exists, and then ''assign'' it the value {{code|30}}. That is variable assignment at its root - ''some variable'' equals ''some value''. The '''h''': with a colon tells maptools to &quot;hide&quot; the output. It's not necessary, but if you don't want all your variable numbers being sent to the chat window you should put an '''h''': in front of your assignments.

You'll remember from the example where you were prompted for the name of a target that you can use a variable name without assigning a value to it. If you do that, you have declared that the variable exists, but no value is assigned, so MapTool asks you (or whoever runs that macro) for a value. The lesson learned is that a variable needs to have a value assigned to it for the macro to finish, but you don't always have to enter it ahead of time - sometimes you want to get ''input'' from the user.

Variable assignments are the only way to set or change the value of a variable; no variables are modified in-place. If you're using a function to change the value of a variable the function returns the content of the modified variable which must be assigned to the existing variable or a new variable.

===When to Make an Assignment===

MapTool processes each macro command in a macro in order, starting at the top. Therefore, unless you want MapTool to pop up a window asking for input from the user, you have to assign a value to a variable ''before'' you use it! For example, in the macro command:

{{code|The hit does [damage] [damageType] damage, leaving you with [remainingHP] hit points!}}

Unless you want MapTool to prompt the user for the variables {{code|damage}}, {{code|damageType}}, and {{code|remainingHP}}, you'll want to make sure to give them a value ''before'' you get to that line. Maybe something like:

&lt;blockquote style=&quot;background-color:lightgray;&quot;&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:damage = 1d6+4]
[h:damageType = &quot;fire&quot;]
[h:remainingHP = 30 - damage]
The hit does [damage] [damageType] damage, leaving you with [remainingHP] hit points!
&lt;/source&gt;
&lt;/blockquote&gt;

As you can see, we've made three variable assignments ''before'' the variables are used in the line about the hit. We've assigned the value of a dice roll of 1d6+4 to the variable {{code|damage}}, the value {{code|&quot;fire&quot;}} to the variable {{code|damageType}}, and the value of the operation {{code|30 - damage}} to the variable {{code|remainingHP}}. 

If you look carefully, you'll see that we've even used one variable in assigning a value to another variable: the value of the variable {{code|damage}} is used when we assign a value to {{code|remainingHP}} - so variables can be used to set and manipulate other variables. 

===Variable Rules===

There are two rules to remember when making up variables:

# No spaces: variable names can't have spaces in them, so you can't use the variable {{code|Hit Points}} - it has to be {{code|HitPoints}}. 
# Special Variables: there are several &quot;special variables&quot; that MapTool has reserved - which means you can't use them for other purposes than what MapTool already reserves them for. You can usually tell a special variable because it has a period in it's name, like {{code|[[roll.count]]}} or {{code|[[macro.args]]}}. We'll get into those in another guide, but for now, just know that you can't create a variable with the same name as any of the variables on the [[:Category:Special Variable|Special Variables]] page.

==Stepping Up Our Game==

The examples above show very basic macro use: printing text to the chat window at the click of a button; making a simple dice roll inside a macro; and even getting some simple input from the user in order to complete a macro.

Now, let's step it up: we'll play with some formatting options, change token properties, and look at some basic looping (doing the same thing over and over again) and branching (doing different things based on some condition or situation). 

===Formatting Options===

Macro output (like any chat output) can be formatted using basic HTML tags, as well as some options built into MapTool. We'll first look at the HTML briefly, and then at a couple [[:Category:Display Roll Option|Display Roll Options]].

====Expanded Rolls====

In MapTool 1.3.b54, the default way to output the result of a dice roll or calculation is just to print out the total or final value. So if you rolled 1d20+7, what will appear in chat is just the final result, with the tooltip (remember when you hovered your mouse over the number) showing the mathematical breakdown. 

If you wish, you can instruct MapTool to print out the full math breakdown for a roll too, by using a Roll Formatting Option - specifically, the '''Expanded Roll'''.

Think of a formatting option as a switch telling MapTool how to treat the results of a roll. To get the expanded form, edit your attack roll macro to show:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [e:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

Then, when you run it, you'll get something like this in the chat:

&lt;blockquote style=&quot;border:1px solid gray;width:50%;&quot;&gt;My attack roll against &lt;font style=&quot;background-color:lightgray; &quot;&gt;Nasty Orcses&lt;/font&gt; is &lt;font style=&quot;background-color:lightgray; color:blue;&quot;&gt;« 1d20+7 = 1 + 7 = 8 »&lt;/font&gt;&lt;/blockquote&gt;

Now you can see the full breakdown of your roll. 

====Result-Only Rolls====

But what if you ''don't'' want anyone to be able to see the breakdown? So far, both options still let everyone see the actual roll. For this, you use the '''Result Roll''' option. Edit your macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

And your output will look like this:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;My attack roll against &lt;font style=&quot;background-color:lightgray&quot;&gt;Nasty Orcses&lt;/font&gt; is 11!&lt;/blockquote&gt;

Note that there's no gray background behind the number 11, and you can't get a tooltip if you hover over it. The Results Roll option strips out the special formatting, giving you just the plain text. If you wanted to get rid of the highlight behind the words &quot;Nasty Orcses,&quot; you can just change the macro to:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [r:target] is [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

And the name of the target will be shown without any special highlighting. 

====Hidden Rolls====

Sometimes, you don't want to see any output from the macro - maybe you just want it to show some text, and do the math in the background, without revealing everything. In those cases, you would replace the &quot;r:&quot; or &quot;e:&quot; in the above examples with an &quot;h:&quot;, like in the example below:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
[h:myHP = 30]&lt;br/&gt;
[h:Bloodied = myHP / 2]&lt;br/&gt;
My bloodied value is [Bloodied].&lt;/tt&gt;&lt;/blockquote&gt;

The example above is a very simple illustration of how the '''hidden roll''' is useful. In that macro, we're doing three things:

# Setting the value of the variable ''myHP'' to 30, but telling MapTool to hide this calculation
# Setting the value of the variable ''Bloodied'' to the value of ''myHP'' divided by 2, but telling MapTool to hide this calculation too
# Displaying some text, and inserting the value of ''Bloodied'' in at the end of the text output.

If you run this macro, the output will look like:
&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
My bloodied value is &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;
&lt;/blockquote&gt;

However, if you ''don't'' use the '''hidden roll''' option, the output would look like:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
&lt;font style=&quot;background-color:lightgray;&quot;&gt;30&lt;/font&gt; &lt;font style=&quot;background-color:lightgray&quot;&gt;15&lt;/font&gt; My bloodied value is &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;
&lt;/blockquote&gt;

The extra numbers come from the two calculations ''before'' the line of text. You don't need to see those, so, conveniently, you can hide them!

====HTML Formatting====

MapTool macros support formatting using some basic HTML tags. Let's say you wanted to put the name of your target as one line, the attack roll you're making as another, and as a third line, you wanted to add a dice roll for damage. You might edit your Attack Roll macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;I make an attack roll!&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Target&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attack&lt;/b&gt;: [1d20+7]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Damage&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;
&lt;/tt&gt;&lt;/blockquote&gt;

When you run that macro, your output in chat will look like:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br/&gt;
'''Target''': Nasty Orcses&lt;br/&gt;
'''Attack''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;&lt;br/&gt;
'''Damage''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;7&lt;/font&gt;&lt;br/&gt;
&lt;/blockquote&gt;

That's just simple formatting - you could put the output in a table, change the font and background colors, change its size...many options are available!

'''NOTE''': If you're handy with HTML, be aware that MapTool supports HTML 3.2 - so things like the &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt; tag should ''not'' be closed - it's &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;, not &lt;nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt;. Additionally, MapTool supports a subset of CSS 1 in the form of in-line styles, and also style sheets in certain instances. More information on the supported CSS tags can be found at [[Supported CSS Styles]].

===Using Token Properties===

So far, we've manipulated some variables that are entered ahead of time, or that MapTool will ask for when you run a macro. We've got a formatted attack macro that lists a target, an attack, and a damage roll. However, we're still either ''hardcoding'' the values into the macro, or having the user put them in themselves every time they're needed. Since RPG characters are not all the same, we'll have to figure out a way to automate some of the numbers, so we can:

# Make one macro that many people or characters can use
# Minimize how much typing we have to do!

As discussed in the [[Introduction to Tokens]], every token carries around with it a personal &quot;character sheet&quot; of sorts, in the form of the token's ''properties''. These properties can be ''referenced'' by a macro - so you can, for instance, write a macro that says &quot;Roll 1d20, and add my character's Dexterity to the roll.&quot; I'm sure you see how this might be useful.

====Setting Some Sample Properties====

Of course, for token properties to work, we've got to set them up. It's a good thing you read the [[Introduction to Properties]] and created a campaign file for the MapTool RPG [[Sample Ruleset]]!

The first step is to open up the '''MTRPG.cmpgn''' file (or whatever name you saved it as), and drag a token onto the map (if you don't already have one on there). If you've got no idea what that means, check out the [[Introduction to Mapping]] to learn about making maps and putting tokens on them. Now, follow these steps:

1. Double click on a token to open the '''Edit Token''' dialog.

2. Go to the tab marked '''Properties'''.

3. You'll see a spreadsheet-style list of all the properties in the token that you can edit directly (tokens have other properties that can be edited only with macros, but for now, let's not worry about them!). You should see (if you're using the MTRPG.cmpgn file we set up in [[Introduction to Properties]]):

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;
 *HitPoints(HP):{Endurance * 6}&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV):{Dexterity}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

4. Click in the cell next to Strength. A cursor will appear, showing that you can type in that cell. Enter a number in that cell as the token's Strength value. I'm going to use 6. 

5. Repeat step 4 for Dexterity, Intelligence, and Endurance, choosing whatever number you like (I'm going to use 3, 2, and 6, respectively). Remember that ''HitPoints'' and ''Movement'' will be automatically calculated!

6. Click '''OK'''. You have just manually updated the token's properties. If you double-click on the token, and look at those properties again, you'll see that the numbers you entered are remembered. 

You'll also see that now, when you hover your mouse over the token, a little popup appears in the lower right corner of the map, showing the values for the properties you've entered. This popup is called the '''Statsheet''', and is a quick way to look at the token's properties - it's basically a convenient quick-reference &quot;character sheet.&quot;

====Referencing a Token Property in a Macro====

Now that we've configured some token properties, let's use them in a macro. For our first macro, we're going to roll 1d20, and instead of adding 7, we're going to add the token's '''Strength'''. 

1. Open up your Attack Roll macro.

2. In the lower left corner, make sure the box '''Apply to Selected Tokens''' is checked (otherwise, the macro won't know which token's Strength to use!)

3. Edit your macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;I make an attack roll!&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Target&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attack&lt;/b&gt;: [1d20+Strength]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Damage&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

You'll note I replaced the 7 with the word &quot;Strength.&quot; Since ''Strength'' is not in quotes, MapTool will know that you mean it to be a variable, and it will look on the ''current token'' (that is, the token that is selected) for a property called ''Strength''. If it doesn't find it (or if the property has never been set), it will prompt you for it (just like you were prompted for the value of ''target''). If it ''does'' find it, MapTool will put the value of ''Strength'' into the macro when it runs. 

4. Select your token, and run the macro by clicking the button. The output will look something like:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br&gt;
Target: Nasty Orcses&lt;br&gt;
Attack: &lt;font style=&quot;background-color:lightgray;&quot;&gt;27&lt;/font&gt;&lt;br&gt;
Damage: &lt;font style=&quot;background-color:lightgray;&quot;&gt;6&lt;/font&gt;
&lt;/blockquote&gt;

The important thing to note is that if you hover over the attack roll result, the tooltip will now say something like ''&amp;laquo; 1d20 + Strength = 17 + 10 &amp;raquo;'' indicating that the value being plugged in to the dice roll is the property ''Strength''.

====Changing a Property with a Macro====

Token properties can also be changed using a macro. Suppose we want to reduce the token's hit points after an enemy hit the character. You can manually edit the token and change the value in the ''HP'' property, or, you can create a macro that subtracts the amount of damage from the value of ''HP''. Here's how:

1. Create a new macro on the '''Campaign''' panel.

2. In the '''Label''' field, enter &quot;Damage&quot;.

3. In the '''Command''' field, enter:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
Aarrgh! I'm hit! I have [HitPoints = HitPoints - damage] hit points left. &lt;/tt&gt;
&lt;/blockquote&gt;

4. Check the box '''Apply to Selected Tokens''' (in the lower left corner).

5. Click '''OK'''. When you run the macro, you will be prompted for a value to put in the variable ''damage''. I put in the number 7. The output will look something like this:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
Aarrgh! I'm hit! I have &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt; hit points left
&lt;/blockquote&gt;

And, if you double click on the token, you will see that the property ''HP'' is now 23. What this macro did was:

# Prompt the user for a value for ''damage'' (in this example, I entered 7)
# Retrieve the value of ''HitPoints'' from the token (in this example, the value is 30, because it is equal to Endurance * 6)
# Subtract the value of ''damage'' from the value of ''HitPoints'' (30 - 7, resulting in 23)
# Set the value of ''HitPoints'' (originally 30) to the newly calculated total (23)
# Output the text and the new value of ''HitPoints'' to chat

===String Concatenation===

An essential ability to master when writing macros is the ability to assemble ''strings'' - that is, collections of alphanumeric characters that are then manipulated or sent to chat. Frequently, you'll want to construct a string from some text that is always the same (&quot;hardcoded&quot; text) and text that can change (text that is the value of a variable, in other words). The construction of a string is often called &quot;concatenation,&quot; but it just means &quot;building a long string out of multiple short pieces.&quot;

There are two ways to do this in a macro - outside of a macro command, and inside of a macro command.

====Outside of a Command====

The basic way a macro works is this:

# The parser reads through the whole macro, and separates the macro commands from the plain text
# The parser diverts those macro commands to the appropriate places to be processed (so, numbers are added up, dice are rolled, etc.)
# The processed commands are sent ''back'' to the parser, which substitutes the ''results'' of those commands in the place where each command was.
# The whole mess - plain text, and the results of the commands (now sitting in place of the actual commands) is sent to the chat window.

So, when you want to display the result of a command along with some text (for instance, you want to print the word &quot;Attack:&quot; and then next to it print the result of a 1d20 roll) in a macro, the easiest way is to just insert a command in the right place in your text, like so:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
Attack: [1d20]
&lt;/source&gt;
&lt;/blockquote&gt;

The parser will read that whole thing, send off the command {{code|[1d20]}} to be processed, and when it gets that result back, plug it in in place of the command, and send it off to chat. The result will be something like &quot;Attack: 17.&quot; 

That's the most straightforward way to send text to chat - just put the variables you want displayed in the right place in the text, and they will be shown in the chat window.

====Inside of a Macro Command====

Sometimes, though, you need to use strings ''inside'' of the square brackets. In that case, putting them together is a little different. First of all, within square brackets, you need to use single or double quotes to surround something you want to be treated as a string. Otherwise, MapTool will think you want each word to be a variable! For example:

'''Correct String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = &quot;This is a string&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

'''Incorrect String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = This is a string]
&lt;/source&gt;
&lt;/blockquote&gt;

Remember - outside of square brackets, no need for quotes. Inside? QUOTES.

So what if we need to build up a string dynamically? That is, what if we need to make a string that is partly &quot;hardcoded,&quot; and partly based on user input? You can't guess what the user is going to say, so you can't write that part ahead of time. What you ''can'' do is ''concatenate'' the user input into your hardcoded string. The way to do that is to use the plus sign ('''+'''), which - when it's used with ''strings'' - will piece them together into a long string. 

Here's an example: suppose we want the user to enter the name of a skill, and we then want to put that skill name into an existing, hardcoded string, which will be stored in another variable. You would do that like this:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:existingString = &quot;The skill name you entered is &quot;]
[h:concatString = existingString+skill+&quot;.&quot;]
[r:concatString]
&lt;/source&gt;
&lt;/blockquote&gt;

What happens here is this:

* Line 1 sets the &quot;hardcoded&quot; portion of the output
* Line 2 sets the concatenated string - {{code|concatString}} to equal the value of {{code|existingString}} ''plus'' the value of {{code|skill}} (which MapTool will prompt for). However, in this case, since MapTool knows that {{code|existingString}} is a string, it will not try to add them mathematically, but just append the value of {{code|skill}} after the value of {{code|existingString}}. To be grammatically correct, we concatenate another little string on the end, this time, the period. Remember - strings inside square brackets need to be in quotes (but variable names, of course, do not!)
* Line 3 displays the final value of {{code|concatString}}, after {{code|skill}} has been appended to it. The output will look something like:

&lt;blockquote&gt;
The skill name you entered is Archery.
&lt;/blockquote&gt;

That's a very simple example, but it illustrates the essence of constructing strings - you &quot;add&quot; them together with a plus sign.

==Where do We Go From Here?==

This guide barely brushes the surface of the full potential of the macro language in MapTool. However, using just the basic techniques shown here, you can create a lot of very handy, convenient macros to make playing your game easier and more fun. In future guides, I'll cover more advanced macro commands and techniques.
{{Languages|Introduction to Macro Writing}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Macro Writing/Ko</title>
    <ns>0</ns>
    <id>1064</id>
    <revision>
      <id>4158</id>
      <timestamp>2010-03-28T18:09:34Z</timestamp>
      <contributor>
        <username>Nefos</username>
        <id>171</id>
      </contributor>
      <comment>New page: {{Languages|Introduction to Macro Writing}} [[Category:MapTool]][[Category:Tutorial]]{{Beginner}} ==매크로란?==  마찬가지로 토큰 매크로 페이지에서 언급한, 간단히 ...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="48380">{{Languages|Introduction to Macro Writing}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}
==매크로란?==

마찬가지로 토큰 매크로 페이지에서 언급한, 간단히 매크로 MapTool에서 작업을 자동화하는 방법입니다. 기본적으로, 매크로 ''parser''에 의해, 이는 그들을 해석하고 그 오른쪽 부분을 올바른 방법으로 (예를 들어, 그 명령을 함께 숫자 두 개를 추가하는 매크로 명령으로 처리됩니다 확보에 대한 처리를 읽을 수 있도록하는 스크립트 , 그리고 단순히 텍스트 채팅 창을에) 넣어합니다. 

매크로에서 작은 MapTool에서 시작하지만이 시점에서, 매크로 스크립트 언어가되고있다 아주 완전한 명령과 당신이 상상할 수있는 거의 모든 작업을 수행할 수있는 기능 집합을 특징! 

==먼저 알아야 할 사항==

우리는 보다 강력한 - 그리고 더 복잡한 - 기능과 MapTool의 기능에 대해 탐구하기 시작한 결과가 매크로입니다. 이 가이드를 시도하는 동안에도 새로운 사용자에 따라 쉬울 것 같은데요, 거기에 당신과 읽기는 이미 어떻게해야할지 생각 몇 가지있습니다:

# 난 당신이 [[Introduction to Mapping|지도기능 안내]]를 읽었다고 가정합니다. 그래서 MapTool 인터페이스를 만드는 방법, 캠페인 파일 저장, 맵에 토큰을 넣기 등에 친숙하다고 생각합니다.
# 난 당신이 [[Introduction to Tokens|토큰 안내]]도 읽었다고 가정합니다. 그래서 토큰을 어떻게 조작하는지 기본적인 아이디어는 그들의 속성 등을 살펴보세요.
# 마지막으로 매크로는 일반적으로 토큰의 ''properties''과 밀접하게 연결되어있습니다. 나는 당신이 [[Introduction to Properties|등록정보 안내]]에 따라 차근차근 읽었고, 새 사용자 MapTool에 대해 배울 수 있도록 만든 새로운 캠페인 파일을 [[Sample Ruleset|Sample RPG ruleset]]에 기반해 만들었다고 가정합니다. 아직 가이드를 읽지 않았다면 읽으세요. 그게 아래 예제를 이해하는데 ''훨씬 더'' 도움이됩니다!

==Conventions for this Guide==

I will do my best to keep my language and terminology consistent. In this guide:

* '''Macro''' refers to a collection of commands that are grouped together to automate a task
* '''Macro command''' will refer to any particular ''individual'' command or function you use ''inside'' a macro
* '''Macro language''' will mean the whole collection of commands, functions, and operations you can use whenever you write macros. You can see a huge array of functions at the [[:Category:Macro Function|List of Macro Functions]].

Also, although it is possible for one macro to trigger another (called &quot;calling&quot; another macro), for this guide, the only macros we'll talk about are triggered by clicking a button on the appropriate Macro Panel, and only affect the tokens they run ''on''.

==Why Would I Use Them?==

There's nothing requiring you to use macros at all when you use MapTool. Remember, the core purpose of MapTool is to share a map with your friends, and play games (read the [[Introduction to Mapping]] and the [[Introduction to Game Hosting]] to learn how to make and share maps with your gaming groups), and MapTool gives you everything you need to do that: maps, tokens, and a chat system that lets you chat in- and out-of-character, roll dice, and take on the roles of whatever character you are playing. 

However, there's a lot more that can be done with MapTool, if you're interested in learning a little bit about the macro capabilities. For example, if you want to click a button that will automatically roll 1d20 and add a modifier to it, it's possible to create a macro for that. If you want to change your hit points after getting hurt, you can write a macro to do that. And this tutorial will show you how.

==Where are These So-Called &quot;Macros?&quot;==

Macros are associated with various parts of the MapTool interface and the objects in it. It turns out that there are three places a macro can &quot;reside,&quot; so to speak:

===Token Macros===

The first, and most common place, is for a macro to reside on a [[Introduction to Tokens|token]]. Token macros are associated with the token on which they are created, and will travel around with that token as long as you let them.

Token macros are only directly accessible to the people who own the token, so if you don't own the token, you won't be able to click (or even see!) the button for that macro. 

===Campaign Macros===

Campaign Macros are macros that aren't linked to a specific token in a campaign, but to the campaign as a whole. These macros work in almost every respect exactly like a token macro, except that:

# You don't have to select a token to see the macros
# Anyone can access them and run them

Campaign Macros are quite useful for the GM and for the Players to handle common functions - in fact, if you set up a common task as a campaign macro, then you only need to make one copy of it (instead of making copies on every token that needs it). 

===Global Macros===

Global Macros aren't linked to a token or a campaign - instead, they are macros that are linked with your copy of MapTool. These macros are ''not'' visible to anyone else who connects to your game.

This is a good place to put macros for tasks you ''don't'' want other people seeing - like information you want to show to players only when ''you'' decide; or tasks you want to perform on your NPCs but you don't want PCs to be able to do.

==The Macro Panels==

[[Image:Macro-panels.jpg|thumb|The four Macro Panels]] [[Image:Tabbed-panels.jpg|thumb| The four panels stacked together, selectable by the tabs at the bottom (many users stack them like this to save space)]]

With all this talk about macros and locations and especially the macro &quot;buttons,&quot; you are probably wondering - where are these buttons? You'll find macro buttons on one of the 4 '''macro panels''' that appear in MapTool. If you cannot see any of the macro panels, go to the '''Windows''' menu, and make sure that these four windows are checked:

* Selection
* Impersonated
* Campaign
* Global

You should see these windows pop up in MapTool if they were not already there. If you look at the screenshots to the right, you will see that the Global panel is covered with a bunch of buttons. Each of those buttons will execute a macro; the buttons appear when you create a new macro. 

'''Please note''', however, that the Global panel contains macros that are specific to ''your'' computer and ''your'' installation of MapTool. The buttons you see in the Global Panel screenshots are ''my'' Global macros; yours...well, you'll have to write some!

===Selection and Impersonated Panels===

There are two panels that deal directly with token macros: Selection, and Impersonated. 

The '''Selection''' panel will show buttons for all of the macros that are currently residing on the token you have selected (you select tokens by clicking on them with the mouse). Each of these buttons runs a particular group of macro commands.

The '''Impersonated''' panel shows buttons for the macros on the token you are ''impersonating''. Impersonating a token is a way to &quot;assume the token's persona&quot; - when you chat, text will appear as if the token was speaking, and so forth. It is possible to impersonate one token, and select another, so make sure you know what panel you're looking at!

===Campaign Panel===

This panel shows all of the macros currently set up for the Campaign. Remember, these are visible to everybody.

===Global Panel===

This panel contains the Global Macros you've set up. Remember, these are ''only visible to you.''

==Before You Go Any Further: The Basics==

Before we proceed, there are some ''essential'' elements of the macro syntax you need to understand, or unpredictable things will happen. Macros originated as ways to script short sections of text and very brief dice rolls, which were sent to the chat window. So, if you wanted a battle cry to be displayed, but didn't want to retype it every time, you could write a &quot;macro&quot; to send that battle cry to the chat window. Likewise, if you always rolled 2d6 to make an attack, you could write a macro to generate that output, rather than typing {{code|/roll 2d6}} every time you needed to roll.

From there, it grew - the macro commands became more complex until they were almost a programming language; but they're still just a bunch of text passed to a ''parser'', which handled all the commands in the macro, and generated results. 

So, one of the big things to remember is this:

'''IMPORTANT: Macros are a sequence of text containing both text you want to display in chat AND special commands that do things like make dice rolls'''.

===The Current Token===

Before you begin writing macros, please consult the page on the [[Current Token]] concept. When you write macros, you will usually - unless the macros are very minimal - be manipulating [[Token Property|Token Properties]]. In order to manipulate the ''correct'' set of properties with your macro, it is crucial to understand the concept of the [[Current Token]]. 

'''IMPORTANT: A macro''' '''''always''''' '''refers to the Current Token, unless you explicitly instruct the functions/operations of that macro to address a token other than the Current Token. '''

===Brackets and Braces===

Now, because they are plain text, there must be a way to distinguish the parts that are just text to send to chat, and the parts that are &quot;programming commands.&quot; MapTool handles that by enclosing the programming commands in brackets - either the square brackes, {{code|[ ]}}, or the curly brackets, {{code|{ } }}. 

'''IMPORTANT: Anything found in between square brackets or curly braces is handled not as regular text, but as a command to the parser to do something. Likewise, if it's''' '''''not''''' '''between curly or square braces, it is sent to the chat window as text.'''

So, something like:

&lt;source lang=&quot;mtmacro&quot;&gt;
[1d20]
&lt;/source&gt;

or

&lt;source lang=&quot;mtmacro&quot;&gt;
{1d20}
&lt;/source&gt;

is not telling MapTool to send the text &lt;nowiki&gt;[1d20]&lt;/nowiki&gt; or &lt;nowiki&gt;{1d20}&lt;/nowiki&gt; to chat; rather, it's saying &quot;generate a random number between 1 and 20 and send ''that'' to the chat window.&quot; The brackets and braces (although braces aren't recommended for use anymore, due to complications they cause with the branching and looping functions) indicate to MapTool that the information ''between'' them is a macro command or variable, and not just text. So, as you'll see later, you can mix text and macro commands:

&lt;source lang=&quot;mtmacro&quot;&gt;
I roll [1d20+4] for initiative.
&lt;/source&gt;

in a macro will replace the &lt;nowiki&gt;[1d20+4]&lt;/nowiki&gt; with the result of that dice expression, and then print the entire sentence to chat, so it looks something like:

&lt;source lang=&quot;mtmacro&quot;&gt;
I roll 16 for initiative.
&lt;/source&gt;

===Roll Options===

Roll Options are another special feature of the macro language. Their name is somewhat of a legacy - since most macros were dice rolls (e.g. the aforementioned &lt;nowiki&gt;[1d20+4]&lt;/nowiki&gt;, there was a request to have different ways to display them (or not display them at all). Since those options were used to change how a roll appeared, they were called Roll Options, and the name stuck. In fact, it's still applicable, even though the options no longer really just handle how something is displayed. 

Roll Options are a critical thing to understand in macro writing. There are a couple rules. First, the general format of any macro command in MapTool is this:

&lt;source lang=&quot;mtmacro&quot;&gt;
[(comma-list-of-options): operation(s)]
&lt;/source&gt;

Now, to explain: a roll option has the following rules:

# It always goes at the beginning of a macro statement (for our purposes, a statement is any macro line between square brackets). 
# It is always followed by a colon.
# It may be combined with other roll options; if so, you separate each option with a comma, and at the end of the comma-separated list, you put a single colon.
# It needs to appear only once in a given macro statement for it to apply to the operations contained within. This gets tricky when you start using the CODE roll option, since you can begin to nest entire, separate statements, but that is explained in the sections on branching and looping. 

A simple example of a roll option is this:

&lt;source lang=&quot;mtmacro&quot;&gt;
[r:1d20+4]
&lt;/source&gt;

That uses the &quot;regular output&quot; roll option to display the result of 1d20+4 as plain text (without highlighting or tooltips). A complex example might look like this:

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20): output = &quot;Critical Hit&quot;; output = &quot;Not a Critical Hit&quot;]
&lt;/source&gt;

This combines the [h: ] roll option (which means, &quot;hide this from the chat window&quot;), and the [if(): ] roll option, which performs an if-then operation. Note, though, the roll options all appear only at the beginning of the macro statement to which they apply. 

A ''very'' complex example might involve the use of the [CODE: ] roll option (learn more about that at [Introduction to Macro Branching] to allows you to nest entire macro statements within blocks to be executed as if they were a single statement. For instance:

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20),CODE:
{
    [damageAmount = 16]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
};
{
    [damageAmount = 1d10+6]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
}]
&lt;/source&gt;

This is a complex statement, but the roll options for the overall command (the outermost set of square brackets) are all at the beginning, separated by commas, and followed by a single colon. The inner statements are ''nested''.

===Quotes and Apostrophes===

Under most circumstances, macros containing single quotes (or apostrophes) will work fine - they're just text, and thus they will be sent to the chat window without issue. However, there are certain situations where a lone, or unmatched, single quote will cause MapTool to think you have created an ''unterminated string''. When that happens, the text of the macro (all the commands, etc.) is usually dumped to chat, resulting in a big block of ugly output.

To avoid this, remember this rule: if you have text that you wish to appear in chat contained between a set of curly braces, a lone quote character (single or double quotes) will cause an error. So, modifying the example above: 

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20),CODE:
{
    [damageAmount = 16]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
    The target's HP is now [r:TargetHP].
};
{
    [damageAmount = 1d10+6]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
}]
&lt;/source&gt;

The single quote character in the line {{code|The target's HP is now [r:TargetHP]}} will cause an error. There are two ways around this: 

# Don't use apostrophes. This can be a bit awkward.
# Replace the apostrophe with the HTML character code for the single quote: '''{{code|&amp;amp;#39;}}'''

===Comments===

'''THERE IS NO COMMENT MECHANISM IN THE MACRO CODE. ALL PROPERLY WRITTEN MACRO COMMANDS IN A MACRO''' '''''WILL BE EXECUTED.'''''

The macro language directs all of the content of a macro through the built-in parser, looking for text to send to chat and commands to execute. It is possible to hide output from the chat window in a couple of fashions, but it is not possible to prevent the execution of properly written macro commands. In other words, you '''cannot comment out code.'''

There are two ways to hide output: the {{roll|H}}, or &quot;hidden&quot;, roll option, and HTML comment format. The hidden roll option you've already seen, but if you're not familiar with HTML, comments in HTML look like this:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--This is an HTML comment--&gt;
&lt;/source&gt;

In an actual HTML page, anything between the &lt;nowiki&gt;&lt;!--&lt;/nowiki&gt; and &lt;nowiki&gt;--&gt;&lt;/nowiki&gt; is completely ignored. In contrast, in MapTool's macro language, anything between the comment tags is ''hidden'' from chat, but if you embed macro commands in there, they ''will'' be executed. In other words, in a macro, if you have this line:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--In this part of the macro I roll some dice--&gt;
&lt;/source&gt;

it will be hidden from chat and act like a comment. However, if the line said:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--In this part of the macro I roll some dice using the format [r:1d20+9]--&gt;
&lt;/source&gt;

the parser will hide all that from chat, but it ''will'' perform that macro command, whether you want it to or not.

The lesson to be learned here: '''You cannot comment out macro code.'''

==Writing Macros==

[[Image:Camp-panel-nomacros.png|thumb|The '''Campaign Panel'''. You can see there are no macros here yet.]]

[[Image:Camp-panel-rcaddnew.png|thumb|Right-clicking on the Campaign Panel lets you add a new macro.]]

Macro creation is a three-step procedure (though those three steps can contain multitudes!):

1. Right-click on the panel where you want the macro to appear (either one of the token panels, the Campaign panel, or the Global panel) and select '''Add New Macro'''. A gray button with the label '''(new)''' will appear.

2. Right-click on the button, and select '''Edit'''.

3. Enter your macro code, give it a name, and hit '''OK'''. There! You've created a macro!

But wait...what do you mean, &quot;macro code?&quot; 

As I said, those three steps can contain a ''huge'' amount of details, steps, tips, tricks, victories, failures, frustrations, and sometimes, hollering and gnashing of teeth. So, we'll take a step back and look at some very simple macros in a step-by-step fashion. If you want to see what some advanced macros can look like, there are plenty of tutorials and how-tos on this wiki to read through. For now, though, we'll do some simple, but useful, macro writing.

===Roll for Initiative===

[[Image:Camp-panel-newbutton.png|thumb|After selecting &quot;Add New Macro,&quot; a button labeled '''(new)''' appears on the Campaign Panel.]]

[[Image:Camp-panel-rceditbutton.png|thumb|Right-clicking on the button opens the macro editor.]]

[[Image:Macro-editor-examplestring.png|thumb|Entering a macro label and the macro command]]

[[Image:Camp-panel-exbutton.png|thumb|The '''Campaign Panel''' with your newly created macro on it]]

The simplest macros are no more than text, which is output to the chat window. In effect, a macro containing text (in fact, all macros) just send a string of commands to the chat window where it is read and interpreted. Most programming languages start off with the classic &quot;Hello World!&quot; program, so this guide is ''not'' going to do that. Instead, let's do something a bit more RPG: create the dreaded &quot;Roll for Initiative!&quot; message!

1. Select the Campaign Panel.

2. Right-click on it, and select '''Add New Macro'''.

3. Right-click on the new macro button, and click '''Edit'''.

4. In the '''Label''' field, enter &quot;Roll for Initiative!&quot;

5. Leave the '''Group''' and '''Sort Prefix''' fields blank.

6. In the '''Command''' field, type 

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;Roll for Initiative!&lt;/tt&gt;&lt;/blockquote&gt;

7. Click '''OK'''. 

8. When you're done, you'll see that the button has changed - it now says '''Roll for Initiative!''' on it, and when you click it, lo and behold, the text &quot;Roll for Initiative!&quot; appears in the chat window.

That is macro writing at its most basic: you enter some text in the macro, and that text is read by the parser and sent to the chat window when you press the button. 

===Something More Interesting===

&quot;Roll for Initiative,&quot; though scary when your GM utters it, is not all that ''interesting'' a macro. You probably thought, &quot;why wouldn't I just type that in chat?&quot; And in fact, the answer is, &quot;you probably would.&quot; So let's do something more interesting, and more in keeping with why we're using MapTool in the first place (after all, we're not here to write programs - we're here to play games): we're going to add some ''macro commands'' to the macro, in addition to just plain text. Macro commands are special instructions that, when read by the parser, tell it to do something more than just print text in the chat window, like roll some dice or calculate a value.

Macro commands must ''always'' be enclosed in square brackets (e.g, [''macro command'']) or curly braces (e.g., {''macro command''}). Enclosing them in this fashion is what clues the parser in that a command is coming - otherwise, it will treat the command just like any other text, and print it in chat. 

====Roll Some Dice====

[[Image:Macro-editor-rolldice.png|thumb|A macro with text and a basic dice roll of 1d20+7]]

This is a simple macro that's going to automatically roll some dice, and add a number to that roll, before displaying the whole thing in the chat window. 

1. Create a new macro (this can be created anywhere you like - on a token, in the campaign panel, or in the global panel), and open the edit dialog (remember, you do that by right-clicking on the button labeled '''(new)'''). 

2. In the '''Label''' field, call the macro something like &quot;Attack Roll&quot; or &quot;Dice Roll&quot;

3. In the '''Command''' area, enter:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll is [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

4. Click '''OK'''. You should see a button labeled with whatever you chose in Step 2, above. When you click it, you'll see something like the following appear in chat:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;Chris: My attack roll is &lt;font style=&quot;background-color:lightgray;&quot;&gt;8&lt;/font&gt;!&lt;/blockquote&gt;

What has happened is that MapTool read through the contents of the macro, and when it got to the section '''[1d20+7]''', it knew to:

# Roll a 20-sided die (or, in reality, choose a random number between 1 and 20), and
# Add 7 to that result, and
# Display the results in the chat window, inserted into the text in the right place

You'll see that the number 8 has a gray background. If you hover over that number, a &quot;tooltip&quot; will pop up showing how that number was reached. In this case, I managed to roll a 1 on the 1d20 (bummer! a critical fumble!)  If you don't see this tooltip, check your [[MapTool Preferences#Chat]] settings, specifically '''Use ToolTips for Inline Rolls'''.

Also, you probably won't see the name &quot;Chris&quot;, unless your name happens to be Chris. That part of the chat output is just indicates who &quot;said&quot; that particular bit of text; if it was a token, it would have the token's picture and name instead of boring old &quot;Chris.&quot;

====More than Just Numbers====

Macro commands can work with numbers and with text -- you can manipulate ''strings'' (that is, collections of alphanumeric characters) as well using the MapTool macro language. Say, for instance, you wanted to roll your attack, but wanted to enter the name of your target so that it showed up in chat.

[[Image:Macro-editor-basiccommands.png|thumb|A macro with a basic dice command and a variable called ''target'']]

[[Image:Prompt-undeclared-variable.png|thumb|A prompt for an &quot;undeclared variable&quot;]]

What you can do is edit your Attack Roll macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

When you run this macro, though, suddenly a window pops up in your face demanding a &quot;Value For target.&quot; What happened?

Well, when MapTool looked at that macro, it saw a macro command that just says '''[target]'''. MapTool assumes that any word ''inside'' a macro command that is ''not'' enclosed in quotes is actually the name of a ''variable'' (in other words, a value that might change). 

MapTool also noted that nowhere in that macro do we say ''what'' the variable ''target'' happens to equal. Programming languages call this sort of situation an ''undeclared variable'' (in other words, you never declared what it equaled). Since MapTool has no way of knowing what ''target'' should be, it asks! If you type a name, number, or pretty much anything in that popup window, MapTool will take that information, assign it to the variable ''target'', and finish the macro. 

Go ahead and type &quot;Nasty Orcses&quot; (you can leave off the quotes) in the box, and hit '''OK'''. You should see in the chat window something like:

&lt;blockquote style=&quot;border:1px solid gray;&quot; width:50%;&gt;Chris: My attack roll against &lt;font style=&quot;background-color:lightgray;&quot;&gt;Nasty Orcses&lt;/font&gt; is &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt;!&lt;/blockquote&gt;

Once again, the parser read through the text and macro commands you put inside the macro, and in the places where a macro command was indicated (by the square brackets, remember), MapTool substituted the appropriate information.

==Using Variables in a Macro==

We've seen in a couple of the examples some use of variables (like {{code|target}} in the example above) in a macro, but we haven't gone into the process too deeply yet. However, variables, and their use, is really the core of macro writing, so it would be remiss of me to leave it go.

===What's a Variable?===

If you're familiar with programming at all, you will know this already, but if you're just stepping into this stuff cold, the simple definition of a ''variable'' in terms of the macro language is:

:'''A variable is a value that might change (i.e., vary) based on a token property, a calculation, or another macro command'''

Since the value of a variable might change, we have to give it a name (which is called ''declaring'' the variable - you declare that &quot;this variable exists!&quot;) in order to talk about it. Then, whenever we need to use whatever value the variable has ''at that time'', we just put its name in the macro command, and MapTool will substitute the appropriate value at that time. 

Think of it this way: if the value of a dice roll could be anything between 1 and 20, for example, you can't just enter 19 wherever you need to use that dice roll - it could be 19, or 2, or 7, or whatever. So instead, you'd want to say &quot;whatever this dice roll is, put that number here.&quot;

:'''Note''': that doesn't mean that MapTool will substitute the ''correct'' value for ''your'' needs; it means it will substitute the value corresponding to that variable at that time. So if your program has a mistake in it, the value might end up being wrong - but MapTool doesn't understand &quot;wrong,&quot; it just understand &quot;this is what it says right now.&quot; 

===Variable Assignments===

When you want to give a variable a value, this is called &quot;assigning&quot; a value to the variable. The &quot;asignment operator&quot; in MapTool is the equals sign ( = ). That sounds fancy, but it just means that you use an equals sign to tell MapTool that a particular variable has a particular value. An example of a variable assignment is 

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:myHP = 30]
&lt;/source&gt;
&lt;/blockquote&gt;

As you have probably figured out, what that line does is first ''declare'' a variable called {{code|myHP}} exists, and then ''assign'' it the value {{code|30}}. That is variable assignment at its root - ''some variable'' equals ''some value''. The '''h''': with a colon tells maptools to &quot;hide&quot; the output. It's not necessary, but if you don't want all your variable numbers being sent to the chat window you should put an '''h''': in front of your assignments.

You'll remember from the example where you were prompted for the name of a target that you can use a variable name without assigning a value to it. If you do that, you have declared that the variable exists, but no value is assigned, so MapTool asks you (or whoever runs that macro) for a value. The lesson learned is that a variable needs to have a value assigned to it for the macro to finish, but you don't always have to enter it ahead of time - sometimes you want to get ''input'' from the user.

Variable assignments are the only way to set or change the value of a variable; no variables are modified in-place. If you're using a function to change the value of a variable the function returns the content of the modified variable which must be assigned to the existing variable or a new variable.

===When to Make an Assignment===

MapTool processes each macro command in a macro in order, starting at the top. Therefore, unless you want MapTool to pop up a window asking for input from the user, you have to assign a value to a variable ''before'' you use it! For example, in the macro command:

{{code|The hit does [damage] [damageType] damage, leaving you with [remainingHP] hit points!}}

Unless you want MapTool to prompt the user for the variables {{code|damage}}, {{code|damageType}}, and {{code|remainingHP}}, you'll want to make sure to give them a value ''before'' you get to that line. Maybe something like:

&lt;blockquote style=&quot;background-color:lightgray;&quot;&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:damage = 1d6+4]
[h:damageType = &quot;fire&quot;]
[h:remainingHP = 30 - damage]
The hit does [damage] [damageType] damage, leaving you with [remainingHP] hit points!
&lt;/source&gt;
&lt;/blockquote&gt;

As you can see, we've made three variable assignments ''before'' the variables are used in the line about the hit. We've assigned the value of a dice roll of 1d6+4 to the variable {{code|damage}}, the value {{code|&quot;fire&quot;}} to the variable {{code|damageType}}, and the value of the operation {{code|30 - damage}} to the variable {{code|remainingHP}}. 

If you look carefully, you'll see that we've even used one variable in assigning a value to another variable: the value of the variable {{code|damage}} is used when we assign a value to {{code|remainingHP}} - so variables can be used to set and manipulate other variables. 

===Variable Rules===

There are two rules to remember when making up variables:

# No spaces: variable names can't have spaces in them, so you can't use the variable {{code|Hit Points}} - it has to be {{code|HitPoints}}. 
# Special Variables: there are several &quot;special variables&quot; that MapTool has reserved - which means you can't use them for other purposes than what MapTool already reserves them for. You can usually tell a special variable because it has a period in it's name, like {{code|[[roll.count]]}} or {{code|[[macro.args]]}}. We'll get into those in another guide, but for now, just know that you can't create a variable with the same name as any of the variables on the [[:Category:Special Variable|Special Variables]] page.

==Stepping Up Our Game==

The examples above show very basic macro use: printing text to the chat window at the click of a button; making a simple dice roll inside a macro; and even getting some simple input from the user in order to complete a macro.

Now, let's step it up: we'll play with some formatting options, change token properties, and look at some basic looping (doing the same thing over and over again) and branching (doing different things based on some condition or situation). 

===Formatting Options===

Macro output (like any chat output) can be formatted using basic HTML tags, as well as some options built into MapTool. We'll first look at the HTML briefly, and then at a couple [[:Category:Display Roll Option|Display Roll Options]].

====Expanded Rolls====

In MapTool 1.3.b54, the default way to output the result of a dice roll or calculation is just to print out the total or final value. So if you rolled 1d20+7, what will appear in chat is just the final result, with the tooltip (remember when you hovered your mouse over the number) showing the mathematical breakdown. 

If you wish, you can instruct MapTool to print out the full math breakdown for a roll too, by using a Roll Formatting Option - specifically, the '''Expanded Roll'''.

Think of a formatting option as a switch telling MapTool how to treat the results of a roll. To get the expanded form, edit your attack roll macro to show:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [e:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

Then, when you run it, you'll get something like this in the chat:

&lt;blockquote style=&quot;border:1px solid gray;width:50%;&quot;&gt;My attack roll against &lt;font style=&quot;background-color:lightgray; &quot;&gt;Nasty Orcses&lt;/font&gt; is &lt;font style=&quot;background-color:lightgray; color:blue;&quot;&gt;« 1d20+7 = 1 + 7 = 8 »&lt;/font&gt;&lt;/blockquote&gt;

Now you can see the full breakdown of your roll. 

====Result-Only Rolls====

But what if you ''don't'' want anyone to be able to see the breakdown? So far, both options still let everyone see the actual roll. For this, you use the '''Result Roll''' option. Edit your macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

And your output will look like this:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;My attack roll against &lt;font style=&quot;background-color:lightgray&quot;&gt;Nasty Orcses&lt;/font&gt; is 11!&lt;/blockquote&gt;

Note that there's no gray background behind the number 11, and you can't get a tooltip if you hover over it. The Results Roll option strips out the special formatting, giving you just the plain text. If you wanted to get rid of the highlight behind the words &quot;Nasty Orcses,&quot; you can just change the macro to:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [r:target] is [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

And the name of the target will be shown without any special highlighting. 

====Hidden Rolls====

Sometimes, you don't want to see any output from the macro - maybe you just want it to show some text, and do the math in the background, without revealing everything. In those cases, you would replace the &quot;r:&quot; or &quot;e:&quot; in the above examples with an &quot;h:&quot;, like in the example below:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
[h:myHP = 30]&lt;br/&gt;
[h:Bloodied = myHP / 2]&lt;br/&gt;
My bloodied value is [Bloodied].&lt;/tt&gt;&lt;/blockquote&gt;

The example above is a very simple illustration of how the '''hidden roll''' is useful. In that macro, we're doing three things:

# Setting the value of the variable ''myHP'' to 30, but telling MapTool to hide this calculation
# Setting the value of the variable ''Bloodied'' to the value of ''myHP'' divided by 2, but telling MapTool to hide this calculation too
# Displaying some text, and inserting the value of ''Bloodied'' in at the end of the text output.

If you run this macro, the output will look like:
&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
My bloodied value is &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;
&lt;/blockquote&gt;

However, if you ''don't'' use the '''hidden roll''' option, the output would look like:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
&lt;font style=&quot;background-color:lightgray;&quot;&gt;30&lt;/font&gt; &lt;font style=&quot;background-color:lightgray&quot;&gt;15&lt;/font&gt; My bloodied value is &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;
&lt;/blockquote&gt;

The extra numbers come from the two calculations ''before'' the line of text. You don't need to see those, so, conveniently, you can hide them!

====HTML Formatting====

MapTool macros support formatting using some basic HTML tags. Let's say you wanted to put the name of your target as one line, the attack roll you're making as another, and as a third line, you wanted to add a dice roll for damage. You might edit your Attack Roll macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;I make an attack roll!&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Target&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attack&lt;/b&gt;: [1d20+7]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Damage&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;
&lt;/tt&gt;&lt;/blockquote&gt;

When you run that macro, your output in chat will look like:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br/&gt;
'''Target''': Nasty Orcses&lt;br/&gt;
'''Attack''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;&lt;br/&gt;
'''Damage''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;7&lt;/font&gt;&lt;br/&gt;
&lt;/blockquote&gt;

That's just simple formatting - you could put the output in a table, change the font and background colors, change its size...many options are available!

'''NOTE''': If you're handy with HTML, be aware that MapTool supports HTML 3.2 - so things like the &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt; tag should ''not'' be closed - it's &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;, not &lt;nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt;. Additionally, MapTool supports a subset of CSS 1 in the form of in-line styles, and also style sheets in certain instances. More information on the supported CSS tags can be found at [[Supported CSS Styles]].

===Using Token Properties===

So far, we've manipulated some variables that are entered ahead of time, or that MapTool will ask for when you run a macro. We've got a formatted attack macro that lists a target, an attack, and a damage roll. However, we're still either ''hardcoding'' the values into the macro, or having the user put them in themselves every time they're needed. Since RPG characters are not all the same, we'll have to figure out a way to automate some of the numbers, so we can:

# Make one macro that many people or characters can use
# Minimize how much typing we have to do!

As discussed in the [[Introduction to Tokens]], every token carries around with it a personal &quot;character sheet&quot; of sorts, in the form of the token's ''properties''. These properties can be ''referenced'' by a macro - so you can, for instance, write a macro that says &quot;Roll 1d20, and add my character's Dexterity to the roll.&quot; I'm sure you see how this might be useful.

====Setting Some Sample Properties====

Of course, for token properties to work, we've got to set them up. It's a good thing you read the [[Introduction to Properties]] and created a campaign file for the MapTool RPG [[Sample Ruleset]]!

The first step is to open up the '''MTRPG.cmpgn''' file (or whatever name you saved it as), and drag a token onto the map (if you don't already have one on there). If you've got no idea what that means, check out the [[Introduction to Mapping]] to learn about making maps and putting tokens on them. Now, follow these steps:

1. Double click on a token to open the '''Edit Token''' dialog.

2. Go to the tab marked '''Properties'''.

3. You'll see a spreadsheet-style list of all the properties in the token that you can edit directly (tokens have other properties that can be edited only with macros, but for now, let's not worry about them!). You should see (if you're using the MTRPG.cmpgn file we set up in [[Introduction to Properties]]):

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;
 *HitPoints(HP):{Endurance * 6}&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV):{Dexterity}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

4. Click in the cell next to Strength. A cursor will appear, showing that you can type in that cell. Enter a number in that cell as the token's Strength value. I'm going to use 6. 

5. Repeat step 4 for Dexterity, Intelligence, and Endurance, choosing whatever number you like (I'm going to use 3, 2, and 6, respectively). Remember that ''HitPoints'' and ''Movement'' will be automatically calculated!

6. Click '''OK'''. You have just manually updated the token's properties. If you double-click on the token, and look at those properties again, you'll see that the numbers you entered are remembered. 

You'll also see that now, when you hover your mouse over the token, a little popup appears in the lower right corner of the map, showing the values for the properties you've entered. This popup is called the '''Statsheet''', and is a quick way to look at the token's properties - it's basically a convenient quick-reference &quot;character sheet.&quot;

====Referencing a Token Property in a Macro====

Now that we've configured some token properties, let's use them in a macro. For our first macro, we're going to roll 1d20, and instead of adding 7, we're going to add the token's '''Strength'''. 

1. Open up your Attack Roll macro.

2. In the lower left corner, make sure the box '''Apply to Selected Tokens''' is checked (otherwise, the macro won't know which token's Strength to use!)

3. Edit your macro to look like this:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;I make an attack roll!&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Target&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attack&lt;/b&gt;: [1d20+Strength]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Damage&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

You'll note I replaced the 7 with the word &quot;Strength.&quot; Since ''Strength'' is not in quotes, MapTool will know that you mean it to be a variable, and it will look on the ''current token'' (that is, the token that is selected) for a property called ''Strength''. If it doesn't find it (or if the property has never been set), it will prompt you for it (just like you were prompted for the value of ''target''). If it ''does'' find it, MapTool will put the value of ''Strength'' into the macro when it runs. 

4. Select your token, and run the macro by clicking the button. The output will look something like:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br&gt;
Target: Nasty Orcses&lt;br&gt;
Attack: &lt;font style=&quot;background-color:lightgray;&quot;&gt;27&lt;/font&gt;&lt;br&gt;
Damage: &lt;font style=&quot;background-color:lightgray;&quot;&gt;6&lt;/font&gt;
&lt;/blockquote&gt;

The important thing to note is that if you hover over the attack roll result, the tooltip will now say something like ''&amp;laquo; 1d20 + Strength = 17 + 10 &amp;raquo;'' indicating that the value being plugged in to the dice roll is the property ''Strength''.

====Changing a Property with a Macro====

Token properties can also be changed using a macro. Suppose we want to reduce the token's hit points after an enemy hit the character. You can manually edit the token and change the value in the ''HP'' property, or, you can create a macro that subtracts the amount of damage from the value of ''HP''. Here's how:

1. Create a new macro on the '''Campaign''' panel.

2. In the '''Label''' field, enter &quot;Damage&quot;.

3. In the '''Command''' field, enter:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
Aarrgh! I'm hit! I have [HitPoints = HitPoints - damage] hit points left. &lt;/tt&gt;
&lt;/blockquote&gt;

4. Check the box '''Apply to Selected Tokens''' (in the lower left corner).

5. Click '''OK'''. When you run the macro, you will be prompted for a value to put in the variable ''damage''. I put in the number 7. The output will look something like this:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
Aarrgh! I'm hit! I have &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt; hit points left
&lt;/blockquote&gt;

And, if you double click on the token, you will see that the property ''HP'' is now 23. What this macro did was:

# Prompt the user for a value for ''damage'' (in this example, I entered 7)
# Retrieve the value of ''HitPoints'' from the token (in this example, the value is 30, because it is equal to Endurance * 6)
# Subtract the value of ''damage'' from the value of ''HitPoints'' (30 - 7, resulting in 23)
# Set the value of ''HitPoints'' (originally 30) to the newly calculated total (23)
# Output the text and the new value of ''HitPoints'' to chat

===String Concatenation===

An essential ability to master when writing macros is the ability to assemble ''strings'' - that is, collections of alphanumeric characters that are then manipulated or sent to chat. Frequently, you'll want to construct a string from some text that is always the same (&quot;hardcoded&quot; text) and text that can change (text that is the value of a variable, in other words). The construction of a string is often called &quot;concatenation,&quot; but it just means &quot;building a long string out of multiple short pieces.&quot;

There are two ways to do this in a macro - outside of a macro command, and inside of a macro command.

====Outside of a Command====

The basic way a macro works is this:

# The parser reads through the whole macro, and separates the macro commands from the plain text
# The parser diverts those macro commands to the appropriate places to be processed (so, numbers are added up, dice are rolled, etc.)
# The processed commands are sent ''back'' to the parser, which substitutes the ''results'' of those commands in the place where each command was.
# The whole mess - plain text, and the results of the commands (now sitting in place of the actual commands) is sent to the chat window.

So, when you want to display the result of a command along with some text (for instance, you want to print the word &quot;Attack:&quot; and then next to it print the result of a 1d20 roll) in a macro, the easiest way is to just insert a command in the right place in your text, like so:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
Attack: [1d20]
&lt;/source&gt;
&lt;/blockquote&gt;

The parser will read that whole thing, send off the command {{code|[1d20]}} to be processed, and when it gets that result back, plug it in in place of the command, and send it off to chat. The result will be something like &quot;Attack: 17.&quot; 

That's the most straightforward way to send text to chat - just put the variables you want displayed in the right place in the text, and they will be shown in the chat window.

====Inside of a Macro Command====

Sometimes, though, you need to use strings ''inside'' of the square brackets. In that case, putting them together is a little different. First of all, within square brackets, you need to use single or double quotes to surround something you want to be treated as a string. Otherwise, MapTool will think you want each word to be a variable! For example:

'''Correct String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = &quot;This is a string&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

'''Incorrect String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = This is a string]
&lt;/source&gt;
&lt;/blockquote&gt;

Remember - outside of square brackets, no need for quotes. Inside? QUOTES.

So what if we need to build up a string dynamically? That is, what if we need to make a string that is partly &quot;hardcoded,&quot; and partly based on user input? You can't guess what the user is going to say, so you can't write that part ahead of time. What you ''can'' do is ''concatenate'' the user input into your hardcoded string. The way to do that is to use the plus sign ('''+'''), which - when it's used with ''strings'' - will piece them together into a long string. 

Here's an example: suppose we want the user to enter the name of a skill, and we then want to put that skill name into an existing, hardcoded string, which will be stored in another variable. You would do that like this:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:existingString = &quot;The skill name you entered is &quot;]
[h:concatString = existingString+skill+&quot;.&quot;]
[r:concatString]
&lt;/source&gt;
&lt;/blockquote&gt;

What happens here is this:

* Line 1 sets the &quot;hardcoded&quot; portion of the output
* Line 2 sets the concatenated string - {{code|concatString}} to equal the value of {{code|existingString}} ''plus'' the value of {{code|skill}} (which MapTool will prompt for). However, in this case, since MapTool knows that {{code|existingString}} is a string, it will not try to add them mathematically, but just append the value of {{code|skill}} after the value of {{code|existingString}}. To be grammatically correct, we concatenate another little string on the end, this time, the period. Remember - strings inside square brackets need to be in quotes (but variable names, of course, do not!)
* Line 3 displays the final value of {{code|concatString}}, after {{code|skill}} has been appended to it. The output will look something like:

&lt;blockquote&gt;
The skill name you entered is Archery.
&lt;/blockquote&gt;

That's a very simple example, but it illustrates the essence of constructing strings - you &quot;add&quot; them together with a plus sign.

==Where do We Go From Here?==

This guide barely brushes the surface of the full potential of the macro language in MapTool. However, using just the basic techniques shown here, you can create a lot of very handy, convenient macros to make playing your game easier and more fun. In future guides, I'll cover more advanced macro commands and techniques.
{{Languages|Introduction to Macro Writing}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Properties/ko</title>
    <ns>0</ns>
    <id>1065</id>
    <revision>
      <id>4165</id>
      <parentid>4164</parentid>
      <timestamp>2010-04-02T11:47:15Z</timestamp>
      <contributor>
        <username>Nefos</username>
        <id>171</id>
      </contributor>
      <comment>/* Moving On from Here */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18734">{{Languages|Introduction to Properties}}
==Campaign Properties==

One of the most useful features in MapTool is the capability of [[Introduction_to_Tokens|tokens]] to carry around a set of '''Properties''', attached to that token, that can be manipulated by macros and can be used to create quick displays of information. Basically, token properties are like built-in character sheets.

However, because they are so useful, the MapTool developers have created many different ways to use them and manipulate them. This guide will address creating Campaign Property Sets, setting them to have default values, and using them to manipulate the Statsheet.

==The Sample Ruleset, or MTRPG==

In order to have useful examples as we move through this tutorial, several MapTool users and contributors developed the [[Sample Ruleset]] -- a simple roleplaying game system developed specifically to illustrate parts of MapTool. For this guide, we're going to call these rules the MapTool RPG - or MTRPG for short, and what we're going to do is create a new Campaign File and set up some ''campaign properties'' that correspond to attributes of the MTRPG.

==The Campaign Properties Window==

[[Image:Edit-campaign-props.png|thumb|The Edit Menu, showing the Campaign Properties option]]

To get started with Campaign Properties, the first thing you'll need to do is go to '''Edit &gt; Campaign Properties''', and open the Campaign Properties window. In this window, you'll see several tabs and a whole lot of information.

When you open up the '''Campaign Properties''' window, you'll see it has six tabs. Briefly, they are:

* '''Token Properties''': this houses all the property sets that a token in the current campaign may have
* '''Repositories''': this is where you can designate an online &quot;[[Introduction to Campaign Repositories |repository]]&quot; to hold campaign files, especially images, to improve load times and speed when you host or play an online game
* '''Sight''': this tab is where you configure the settings for vision in the current campaign
* '''Light''': this tab is where you configure light sources and auras for the current campaign
* '''States''': this tab lets you configure [[Token:state|token states]] for the current campaign
* '''Bars''': this is where you configure [[bar.name|token bars]] for the current campaign

This guide will only address the first tab, '''Token Properties'''.

==The Properties Tab==

[[Image:Camp-props.png|thumb|The '''Properties Tab''' in Campaign Properties]]

The first visible tab is the properties tab. This appears relatively uncomplicated, but it's home to some really nifty potential. There are 3 text fields in this tab:

* Name: this is the name of the property set you're currently viewing. When you open the campaign properties window, this is blank.
* Type: this column on the left side is not editable, but it will list the names of all the available property sets in the current campaign. If you have no campaign loaded, the only entry will be '''Basic'''
* A large text area where you enter the properties for the current campaign. It will be blank when first loaded, but if you select a property set from the '''Token Type''' list on the left side, you will see the names and default values of the properties in that set.

===Type===

In this field, you'll see the names of the different &quot;Property Types&quot; (you can think of them as property ''sets'') that are configured in the current campaign. If you have no campaign loaded, the default property set will be called ''Basic''. The '''Type''' field is not directly editable by the user.

===Name===

This is a simple text field where you can enter the name you want to give the property set. This name will, when you update the set, appear in the '''Type''' list to the left, and it becomes the name for that particular set of properties. Names can be anything you like; many users create sets called &quot;NPC&quot; for games where NPC stats and traits differ from those of player characters, for example.

===Properties===

This is where it gets funky. In this text area, you can create any and every property you can think of, which can reflect every possible number or statistic an RPG character might have (and many properties that they don't have -- lots of users create properties that are useful for when they write macros, but wouldn't appear on any character sheet!).

==Creating Properties==

===Properties with No Default Value===

[[Image:Basic-default-props.png|thumb|The default set of properties in the Basic property set]]

If you look at [[Sample_Ruleset#Primary_Attribute|MTRPG's Primary Attributes]], you will see that there are four separate attributes that are the basic attributes of a character: ''Strength'', ''Dexterity'', ''Intelligence'', and ''Endurance''. We're going to get rid of the default properties, and put new ones in their place. 

1. Go to '''Edit &gt; Campaign Properties'''. You'll see in the left side, under ''Token Type'', that the only entry is &quot;Basic.&quot; We're going to create a new property set.

2. In the '''Token Type''' list on the left, select ''Basic''. When you do this, you'll see a whole bunch of properties with all kinds of symbols like @, #, and so forth. 

3. In the text area with all the properties, use your mouse to highlight them all, and hit Delete on your keyboard. Go ahead - don't be shy!

4. Leave the '''Name''' field alone - MapTools must always have a ''Basic'' property set, so you can't change that name.

[[Image:Default-props-replaced.png|thumb|The default properties have been deleted, and replaced by the four Primary Attributes of MTRPG]]

5. In the text area below the '''Name''' field, enter the name of each of the four Primary Attributes in MTRPG, like so:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Strength&lt;br/&gt;
Dexterity&lt;br/&gt;
Intelligence&lt;br/&gt;
Endurance&lt;/tt&gt;&lt;/blockquote&gt;

When done, your properties window should look like the screenshot on the right. 

6. Once you've finished entering the properties you want, click the button labeled '''Update'''. Don't panic! The properties will disappear, but if you select the ''Basic'' list from the left, your properties will reappear in the main text area.

7. Click '''OK''' to confirm all of your changes and close the '''Campaign Properties''' window. 

8. Go to '''File &gt; Save Campaign As''' and save your campaign as '''MTRPG.cmpgn'''. You've now created a new campaign file, with a new set of campaign properties. 

When you create properties like this -- just listing the values one after the other -- and then open a token, you will see that these properties have no value. That does not mean that they are equal to zero, or equal to a blank line - they literally have ''no value''. This doesn't mean much for most purposes, but it is an important distinction in macro writing terms (in programming, there's a big difference between a blank string, and an actually ''empty'' variable!). 

Once properties are updated, all of the tokens on the map will be updated with the new properties, and any new tokens you drop on the map will &quot;inherit&quot; the properties you set up.

'''NOTE''': Property names cannot have spaces in them - so if you have a property called &quot;Hit Points&quot;, you would need to enter it as ''HitPoints''.

===Creating Properties with Default Values===

[[Image:Newprops-defvalues.png|thumb|The MTRPG properties now have default values]]

Now, in MTRPG, the minimum value an attribute can have is 1. So, it makes sense to set the ''default value'' of these properties to 1 (that way, every new token will at least have the minimum value an attribute can have). To do this:

1. Open the Campaign Properties window.

2. Select the ''Basic'' property set.

3. In the Basic Properties set, edit your properties so they now read (see the image, as well):

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Strength:1&lt;br&gt;
Dexterity:1&lt;br&gt;
Intelligence:1&lt;br&gt;
Endurance:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

4. Click '''Update'''.

By placing a colon at the end of the name of each attribute, and putting the number 1 after the colon, you have instructed MapTool that the default value for those properties is 1 (in other words, whatever value you put after the colon becomes the ''default value'' for that property). You'll note that at the bottom of the Token Properties tab there is a key describing the various options you can set on a property.

Now, if you drag a new token onto the map and look at its properties (double-click on the token and go to the Properties Tab in the '''Edit Token''' dialog), you will see that the new token has the default values. 

By the way: don't worry about any tokens you may have already set the property values on - setting up or changing the default values will ''not'' override the properties you've already set. MapTool is smart enough to handle that.

===Displaying Properties in the Statsheet===

[[Image:Statsheet-props.png|thumb|The Statsheet showing the campaign properties you've set up. You'll see how to make these appear in this section]]

MapTool has a neat feature called the '''Statsheet''', which is briefly mentioned in the [[Introduction to Tokens]] - basically, it is an automatic popup that appears in the lower left corner of the map, when you hover over a token. 

You may be saying, &quot;Wait...when I hover over my token, there's no statsheet! Where is it?&quot; The reason you don't see it yet is that the Statsheet is governed by the Campaign Properties - it displays the token's properties (along with a larger version of the token's image) - but ''only'' when a couple requirements are met:

* The properties are set up to display on the statsheet; and
* The properties that are displayed actually have a value

====Setting Properties to Display====

[[Image:Newprops-visible.png|thumb|Note the asterisk in front of each property name, enabling that property to appear on the Statsheet]]

If you look at the bottom of the '''Token Properties''' tab in the '''Campaign Properties''' dialog, you'll see a key showing how to set up a property to display in the Statsheet. There are three display options, each of which is indicated by putting a symbol in front of the property name:

# '''&lt;nowiki&gt;*&lt;/nowiki&gt;''': an asterisk means &quot;show this property on the statsheet&quot;
# '''@''': means &quot;only show this property to the owner of the token (and the GM)&quot;
# '''&lt;nowiki&gt;#&lt;/nowiki&gt;''': means &quot;only show this property to the GM (not even the token owner can see it)&quot;

The asterisk is '''required''' for any stat to display at all - if you don't have an asterisk first, it won't show no matter what else you put on there. The @ and # symbols, on the other hand, are optional. 

So, for our new game, we're going to set all of the properties to be visible to everyone (by just using a star). To do this, open up your properties, and edit them to look like this:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

Now, when you hover over a token, you'll see the Statsheet pop up (see the screenshot, above) with the values in the Strength, Dexterity, Intelligence, and Endurance properties. Also, since even brand new tokens have a default value, the Statsheet will appear for all tokens.

====Short Names====

[[Image:Newprops-shortnames.png|thumb|The campaign properties now have Short Names established for each]]

Sometimes, property names can get pretty long (or look unfriendly - no spaces, and all that). MapTool lets you put a ''Short Name'' in for each property. To do that, you just enter the short name in parentheses after the property name, like so:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength(Str):1&lt;br&gt;
 *Dexterity(Dex):1&lt;br&gt;
 *Intelligence(Int):1&lt;br&gt;
 *Endurance(End):1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

These short names are displayed in the Statsheet instead of the full name of the property

'''Short Names are for display purposes only - when referencing properties in macros, you must use the full property name.'''

===Creating Derived Properties===

[[Image:Newprops-derived.png|thumb|The properties ''HitPoints'' and ''Movement'' now have macro code instructing MapTool to derive them from other, existing properties]]

[[Image:Statsheet-with-allnewprops.png|thumb|The Statsheet showing all of the properties, including the derived ones]]

Okay, now let's do something pretty cool. In a lot of roleplaying games, there are character attributes that are derived from other stats - for instance, in the ''Savage Worlds'' rules, your &quot;Parry&quot; stat is based on your ''Fighting'' ability; likewise, in Dungeons &amp; Dragons, your &quot;Hit Points&quot; are derived partly from your &quot;Constitution&quot; score. 

Now, you could create these other derived attributes as separate properties and manually enter the values in when you make a new token - but how about we allow MapTool to calculate these derived values? That's right - MapTool's campaign properties can not only be numbers and text, but also calculations and equations based on other properties that the token has. 

In MTRPG, there are three ''derived'' stats: Hit Points, Armor, and Movement. These stats have the short names &quot;HP&quot;, &quot;AR,&quot; and &quot;MV.&quot; For this example, we're going to set up ''Hit Points'' and ''Movement'' to be calculated from existing properties. We'll leave Armor until later (it takes a bit more complex a calculation to figure out the armor value, and we're taking it slow). 

First, we need to add properties for these three derived values:

1. Open up the Basic property set. 

2. Beneath ''Endurance'', enter the following:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *HitPoints(HP)&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV)&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

You'll notice at this point, we've set no default values. Don't hit '''Update''' just yet - let's enter some macro code to create a derived value.

We can see from the [[Sample Ruleset|MTRPG]] rules that ''Hit Points'' is equal to the value of ''Endurance'' multiplied by 6. Replicating this calculation in the campaign properties is very simple. Edit the ''Hit Points'' property to read:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *HitPoints(HP):{Endurance * 6}&lt;/tt&gt;
&lt;/blockquote&gt;

What we've done here is enter a default value for the property (remember, default values are whatever comes after the colon), and used some [[Introduction to Macro Writing|macro code]] to instruct MapTool to perform a calculation in order to find the value for the properties. Two thing are happening here:

# We've enclosed the calculations in { }, which warns MapTool that the text enclosed inside the brackets is to be handled like a macro, and not just plain text
# Inside the brackets, we've said, &quot;Find the value of the ''Endurance'' property, multiply it by 6, and make that result the value of the ''Hit Points'' property&quot;

Now, to handle the ''Movement'' attribute, our job is even simpler: we need to instruct MapTool to get the value of the ''Dexterity'' property, and assign that same value to the ''Movement'' property. To do so, edit the Movement property to read:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Movement(MV):{Dexterity}&lt;/tt&gt;
&lt;/blockquote&gt;

When you are finished, your full property set should look like:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;
 *HitPoints(HP):{Endurance * 6}&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV):{Dexterity}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

And when you hover your mouse over a token, the Statsheet should look like the screenshot to the right. Remember, even though we've said that ''Armor'' should be displayed on the statsheet, the statsheet only shows properties that have a value - ''Armor'' is still empty, so it won't show up until you give it a value.

==Some Technical Details==

A couple times in this guide and in other guides the token properties have been described as &quot;those properties that are ''visible''&quot; in this campaign, or the properties set up &quot;''for this campaign''.&quot; There's a reason for phrasing it like this. 

See, a token - if you cut one open and looked at its inner workings - is an XML file that contains a ''ton'' of information. It has information about its image, its size, its vision, light, and shape, and - of course - its properties. What's important to understand here is that the token will remember not only the properties from the MTRPG, but if it was ever saved as an '''.rptok''' file or brought in from another campaign file, it will remember the properties from that campaign too. They won't be visible, but they're stored in the token even so. 

So, in reality, a set of Campaign Properties really indicates those properties that:

* You can see if you open up a token by double-clicking on it, and
* You can directly edit by clicking in the cell next to them

This may sound like a recipe for disaster - what if you set up a property that was already set up but is hidden? Fortunately, MapTool will not, when running a macro, attempt to access any hidden properties unless you ''specifically'' instruct it to do so, using two special macro functions. So rest assured, you cannot accidentally access a property that's not set up in the Campaign Properties.

In summary, if a Property Type (such as the default ''Basic'' property type) has a property named '''HP''', it will be stored in the token under the XML name '''HP'''.  If another property type (such as a user-defined ''Pathfinder'' property type) also has a property named '''HP''', they will both be referencing the same data on the token.  Modifying the value of '''HP''' when the token is ''Basic'' and then changing the token ''Pathfinder'' will show the same value for '''HP'''.

==Moving On from Here==

MapTool supports very elaborate properties and derived properties, with a number of math functions and operations. A couple of the most common ones you might want to use are (the examples are not necessarily part of MTRPG; they're just examples):

* '''기본적인 산수 연산''': 더하기 (+), 빼기 (-), 곱하기(*), 나누기 (/)
** '''예제''': &lt;tt&gt;HitPoints: {Endurance * 6}&lt;/tt&gt;
* '''반올림''': 나누기를 한 뒤 소수점을 처리하는 ''명령''
** '''Floor''': the floor() 명령은 소수값을 ''버린다''. '''예제''': &lt;tt&gt;HitPoints:{floor(Constitution / 2)}&lt;/tt&gt; 이 명령은 Constitution를 2로 나눈뒤 소수값을 버린다.
** '''Ceiling''': the ceil() 명령은 floor()와 비슷하지만 소수값을 ''올린다''. '''예제''': &lt;tt&gt;HitPoints:{ceil(Constitution/2)}&lt;/tt&gt;
[[Category:MapTool]]
{{Languages|Introduction to Properties}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>absolutevalue/ko</title>
    <ns>0</ns>
    <id>1066</id>
    <revision>
      <id>4166</id>
      <timestamp>2010-04-02T11:55:21Z</timestamp>
      <contributor>
        <username>Nefos</username>
        <id>171</id>
      </contributor>
      <comment>New page: {{MacroFunction |name=absolutevalue |description=절대값을 반환한다. The absolute value of a number 는 부호(+,-)를 제외하곤 바뀌지 않는다.  |usage= &lt;source lang=&quot;mtmac...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="836">{{MacroFunction
|name=absolutevalue
|description=절대값을 반환한다. The absolute value of a number 는 부호(+,-)를 제외하곤 바뀌지 않는다.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = absolutevalue(num)]
&lt;/source&gt;
이 함수를 아래와 같이 줄여서 쓸 수 있다:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = abs(num)]
&lt;/source&gt;

|examples=
====음수(Negative Number)====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: absolutevalue(-3)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;3&lt;/source&gt;


====양수(Positive Number)====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: abs(4)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;4&lt;/source&gt;


====소수(Decimal Number)====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: abs(3.4)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;3.4&lt;/source&gt;

}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macro Tips and Tricks</title>
    <ns>0</ns>
    <id>1067</id>
    <revision>
      <id>4172</id>
      <parentid>4171</parentid>
      <timestamp>2010-04-03T17:51:58Z</timestamp>
      <contributor>
        <username>Nefos</username>
        <id>171</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="334">{{Languages|Marcro Tips and Tricks}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}
==몇가지 소스들==

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:existingString = &quot;The skill name you entered is &quot;]
[h:concatString = existingString+skill+&quot;.&quot;]
[r:concatString]
&lt;/source&gt;
&lt;/blockquote&gt;

{{Languages|Marcro Tips and Tricks}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macro Tips and Tricks/ko</title>
    <ns>0</ns>
    <id>1068</id>
    <revision>
      <id>4174</id>
      <parentid>4173</parentid>
      <timestamp>2010-04-03T18:03:55Z</timestamp>
      <contributor>
        <username>Nefos</username>
        <id>171</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1625">{{Languages|Marcro Tips and Tricks}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}
==이니셔티브를 추가 하는 소스==
* 미리 토큰 속성에 Initiative이 설정되어있고 Initiative 수정값이 들어있어야함.
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[InitTotal = 1d20 + Initiative + MiscMod]
[h: setInitiative(InitTotal)]
[h:abort(0)]
&lt;/source&gt;
&lt;/blockquote&gt;


==여럿의 적에게 공격을 하는 파워 소스==
count 함수를 사용, roll.count 값을 이용해 횟수 기록. 

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- 맨 처음 값을 입력받는 부분: 타겟 숫자, 명중굴림 수정치, 피해굴림 수정치 --&gt;
[h:status=input(
&quot;TargetCount|1|How much Target?&quot;,
&quot;hmod|0|Misc. BONUS to Attack roll&quot;,
&quot;dmod|0|Mics. BONUS to Damage roll&quot;)]
[h:abort(status)]

파워 명칭~설명들 입력&lt;!--반복문 앞에 기재할 사항 들--&gt;
	[count(TargetCount, &quot;&lt;br&gt;&quot;),CODE: { 
		&lt;b&gt;Target:&lt;/b&gt; [roll.count+1]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- 몇번째 대상인지 횟수 표시 --&gt;
		&lt;b&gt;Attack:&lt;/b&gt; [roll=1d20]→[roll+Hit+hbuff+Hmod] &lt;!-- 굴림값 표시, 굴림값과 각종 수정치 합산--&gt;
		&lt;span style=&quot;color:blue;&quot;&gt;&lt;b&gt;vs. AC&lt;/b&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- 어떤 DEF를 상대하는지 기록 --&gt;
		&lt;span style=&quot;color:Red&quot;&gt;&lt;b&gt;[if(roll==20):&quot;Crit&quot;;&quot;&quot;][if(roll==1):&quot;Miss&quot;;&quot;&quot;]&lt;/b&gt;&lt;/span&gt; &lt;!-- 크리티컬/오토미스 부분--&gt;
	}]
&lt;br&gt;
	&lt;b&gt;Hit:&lt;/b&gt; [w+dmg+dbuff+dmod]점 피해(Crit: [12+w+3d6+dmg+dbuff+dmod]점 피해)를 준다. &lt;!-- 명중시 피해는 반복문 밖에 일괄적으로 기재--&gt;
&lt;/source&gt;
&lt;/blockquote&gt;

{{Languages|Marcro Tips and Tricks}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Campaign Repositories/fr</title>
    <ns>0</ns>
    <id>1069</id>
    <revision>
      <id>4175</id>
      <timestamp>2010-04-04T15:10:04Z</timestamp>
      <contributor>
        <username>Akryas</username>
        <id>117</id>
      </contributor>
      <comment>French translation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2948">{{Languages|Introduction to Campaign Repositories}}

== Qu’est-ce qu’un dépôt ? ==
Un dépôt de campagne est un ensemble de fichiers (principalement des images) qui sont utilisés dans une campagne. En stockant ce dépôt ailleurs que sur la machine du MJ, vous pouvez rendre plus rapide le téléchargement des images par vos joueurs et rendre ainsi plus agréable le déroulement de la partie.

Vous devez disposer d’un espace Internet externe pour utiliser convenablement un dépôt. De nombeux fournisseurs d’accès Internet (FAI) vous propose un tel espace d’hébergement. Si ce n’est pas le cas, vous pouvez en trouver à pas cher, voire gratuits, si vous cherchez un peu (NdT: Free, iFrance sont deux exemples gratuits).

À moins que vous disposiez déjà d’une connexion très haut débit chez vous (surtout en débit montant, upload), l’utilisation d’un dépôt devrait améliorer les performances (sauf si vous êtes tombé sur un serveur en carton). En effet, vos joueurs pourront télécharger plus rapidement les fichiers de la campagne; et c’est là l’intérêt principal du dépôt.

== Créer un dépôt ==
Pour créer un fichier de dépôt, chargez votre campagne dans MapTool et allez dans Fichier -&gt; Exporter -&gt; Fichier de dépôt de campagne. Vous pourrez ainsi enregistrer un fichier ZIP qui contiendra les données du dépôt.

Décompressez le fichier (c’est très important ! MapTool ne peut pas utiliser un dépôt s’il reste compressé). Dedans, vous devriez trouver un répertoire nommé «assets» et un fichier «index.gz». Déposez ces deux éléments sur votre espace d’hébergement Internet. Assurez-vous qu’ils se trouvent dans le même répertoire (ne déposez pas le fichier index.gz ''à l’intéteur'' du dossier «assets»).

Notez l’URL (NdT: l’adresse internet qui permet de télécharger le fichier) de votre fichier index.gz. Vous pouvez tester celle-ci en la copie-collant dans votre navigateur. Si c’est bon, votre navigateur devrait vous afficher une page avec un contenu bizarre ou vous proposer de le télécharger (NdT: l’essentiel, c’est ne pas avoir d’erreur 404).

Dans MapTool, allez dans Édition -&gt; Propriétés de la campagne, puis allez sur l’onglet Dépôts (Repositories). Supprimez tout ce qui s’y trouve et ajouter votre URL.

Sauvegardez votre campagne. Désormais, quand les joueurs se connectent à votre serveur, ils récupéreront les fichiers depuis le dépôt plutôt que depuis votre ordinateur.

Si vous modifiez le contenu de votre fichier de campagne, vous devrez réexporter le dépôt et le redéposer en ligne. Toutefois, vous n’aurez pas à éditer à nouveau les paramètres de votre campagne, puisque l’URL n’aura pas changé.

[[Category:MapTool]]
[[Category:Tutorial]]
{Languages|Introduction to Campaign Repositories}}{{#customtitle:Introduction aux dépôts de campagne|Introduction aux dépôts de campagne}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Tokens/ja</title>
    <ns>0</ns>
    <id>1070</id>
    <revision>
      <id>5548</id>
      <parentid>4225</parentid>
      <timestamp>2011-06-29T23:10:17Z</timestamp>
      <contributor>
        <username>WikiSysop</username>
        <id>1</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24134">{{Languages|Introduction to Tokens}}{{#customtitle:はじめてのトークン|はじめてのトークン}}{{Translation}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}__TOC__
 

==はじめての MapTool トークン==

[[Introduction_to_Mapping|はじめての地図作成]]の案内で述べたように、[[Macros:Glossary#|Tトークン]]とは MapToolのマップ上に配置された視覚的なマーカーを表す、MapTool の用語だ。
最もわかりやすい使用例はゲーム内のキャラクターを表現したものだ。言い換えれば、トークンとは仮想ゲームテーブル上に配置されたミニチュアと言えるだろう。

===前提===

この案内は、[[Introduction_to_Mapping|はじめての地図作成]]を読み終え、次のことを理解していることを前提に書かれている。

* 君のリソース・ライブラリにフォルダーを追加し、リソース・ライブラリに表示する画像を追加、及び更新する。
* MapTool上に地図を作製する。
* マップ上にトークンを配置し、移動させる。
* トークンの名前（Name）、GM用名称（GM Name）、ラベル（Label）を変更する。
* トークンのサイズを変える。
* トークンの画像を変更する。
* トークンのレイヤーを別のレイヤーに移動させる。

以上のことが良くわからないであれば、このガイドの内容を理解することは難しいので、まず「初めての地図作成」を読んでほしい。

最後に、この案内では主にGM（トークンの設定とキャンペーン・プロパティを完全に制御できる人）視点で書かれている。
プレイヤー（ゲームに''Player''の役割で参加している人）は、キャンペーン内で変更を行うことの多くが制限される。

訳注：1.3b68現在、Name と GM Name は文字化けする。感で入力するか、化けないフィールド（Notes等）で編集し、コピー＆ペーストすれば他の場所では概ね正常に表示される。

===MapToolkのレイヤー===

多くのMapToolユーザーは「トークン」という用語をマップ上に配置されたキャラクターとクリーチャーを表現した画像のことだけを指して使用しているが、実際には、「トークン」という用語はMapToolのマップ上に配置した''あらゆる画像''のことを示している。
各トークンの扱われ方は、トークンの置かれたマップレイヤーに依存している。
それぞれのレイヤー上でトークンがどのように作用するのかは大事なことなので、各レイヤーについて説明しておく。

*'''Token'''レイヤーに置いたアイテムは、一般的にゲームに登場する人々やクリーチャー達である「トークン（キャラクター、モンスター、NPCを表現したもの）」と見なされる。
*'''Object'''レイヤーに配置するアイテムは、通常、家具や収納箱、ゲームの世界に存在する操作したり使うことができる''さまざまな物''を表現する画像だ。もちろん、これもトークンであるが（MapToolにとってはどれもみなトークンであることはゆるぎない）、「キャラクター」を表すトークンと混同することを避けるために、多くのユーザーがこのトークンを「オブジェクト」と呼んでいる。
*'''Background''' レイヤーに配置するアイテムは、主にマップを構成する壁、絶壁、地面、草地などである。配置されたアイテムはそれぞれ固有のものではあるが、ほとんどの場合はパターンや、同じ画像を複製したもののために、マップ上に何度も繰り返して「スタンプ」を押すように配置される（例えば、壁の画像を使用して完成した部屋を作るために）。そんな訳で、ユーザーの多くはこの画像を''スタンプ''と呼んでいる。

====Hidden レイヤー====

上記の段落で'''Hidden'''レイヤーについて触れなかったことにお気づきだろう。その理由は、Hiddenレイヤーはちょっと変わった目的で使われるからだ。

Token、Object、Backgroundレイヤーは、ゲームの世界を想像することに対して、適切で直感的な関係がある。「私は''人間かクリーチャー（person or creature）''であり、あそこにあるのは''モノ（object）''だ。そして私の周りには''背景（background）''がある」といったように。一方、Hiddenレイヤーは''見えない''のだ。MapToolにおいて、Hiddenレイヤーに配置されたものはGMが他のレイヤーに移動させない限り、GMにしか見えないのである。

概ね、このレイヤーにはキャラクターとオブジェクトを置きたくなるだろう。Hiddenレイヤーに背景のスタンプを置く理由は見当たらないので。君が二つのことを考えるのは確実だが。

言うまでもないが、MapToolの地図上にトークンを配置する際は、どのレイヤーにトークンを配置しようとしているのか意識しながら配置することをお勧めしておく。


==新しいトークンの作成==

トークンを作成するには単に[[Macros:Glossary#R|リソース・ライブラリ]]からマップ上のトークン・レイヤーにドラッグ＆ドロップで持ってくれば良い。しかし、最初の場所に画像を作るにはどうしたら良いだろうか？それにはいくつかの方法がある。

===画像をダウンロードする===

MapToolのユーザーが集まるコミュニティには利用可能な豊富なトークン画像が豊富にそろっている。[http://gallery.rptools.net RPTools Gallery] に訪れて、そこにある大量のトークン画像を見てもらいたい。

===TokenToolを使って作る===

MapToolの制作者たちが作った、簡単かつ迅速にトークン画像を生成するプログラムである [http://www.rptools.net/index.php?page=tokentool TokenTool] を使用する方法もある。TokenTool を使用してトークン画像を作るには、

1. TokenTool をダウンロードし、拡張子が'''.jar'''（Javaプログラムを実行する''JARファイル''）をダブルクリックする。

2. 君のお好みの画像を見つけてきて（著作権には気をつけるように！）TokenToolの左側のペイン（黒い背景上に緑色の輪っかがあるところ）にドラッグする。

3. 画像が表示されたら、緑色の輪の中にちょうど良く収まるようにドラッグして動かしてくれ。TokenToolのウィンドウの右上にはトークンがどのように見えるか確認できるプレビューが表示されているはずだ。

* '''ヒント'''：マウスホイールやズームボタンで画像のサイズを調整することができる。
* '''ヒント'''：ウィンドウの右側にあるドロップダウンメニューから選ぶことで、トークンの枠と出力サイズを変更することができる。

4. 上手に作成できたら、'''File → Save Token''' を選択し、新しく作ったトークン画像をリソース・ライブラリか、これからリソース・ライブラリに加えようと強いる場所に保存してくれ。保存するファイル形式はPNG形式である。（透過に対応していてトークン枠の外側を透明にできるので大変便利な形式だ）

5. MapToolに戻ってリソース・ライブラリを更新すると、いましがた作成した新しいトークンが表示されるはずだ！あとはドラッグしてマップに配置するだけだ。

===自分の手で描く===

画像編集ソフトを使って描いた作品をリソース・ライブラリかこれからリソース・ライブラリに加えようとしている場所にPNGかJPEG形式で保存することで、トークン画像を作ることができる。MapToolトークンに使用する画像形式はPNG形式を推奨する。透過に対応しており、通常なら画質が最も良いからだ。

もちろん、自分で作った画像をそつなく仕上げるためにTokenToolで仕上げることも可能だ。


==トークンを編集する==

トークンの編集とはトークンのさまざまな特性（画像、名前、設定など）に変更を加えることだ。名前、画像、サイズの変更については[[Introduction_to_Mapping|初めての地図作成]]で説明している。 

次のセクションでは、'''Edit Token'''ダイアログのさまざまなオプション、タブ、ドロップダウンボックスについて説明する。

===トークンのタイプ===

トークンはNPCとPCの2つのタイプがある。''プレイヤー・キャラクター''と''ノンプレイヤー・キャラクター''の略語であるこの言葉はロールプレイング・ゲーマーにお馴染みであり、実際のゲームでは、この''タイプ''設定の最も一般的な使い方は二つのグループを区別することである。

通常、君のプレイヤーが扱うトークンはタイプを''PC''に、''君が扱う''のであれば''NPC''に設定すれば良い。

[[Image:Edit-token.jpg|thumb|'''Edit Token''' ダイアログ]]

'''注'''：トークンの''タイプ''はトークンの操作権限やプロパティの閲覧権限の設定と関連づいていない。それらはトークンの''owner''設定によって行われる。GM の場合は、キャンペーンにおけるマップ上の全てのトークンの所有権を持っているものとして扱われる。下記の[[Introduction_to_Tokens#Ownership|所有権（Ownership）]]に詳細があるので参照のこと。

トークンのタイプを変更するには、

1. トークンをダブルクリックして '''Edit Token''' ダイアログを表示。

2. 右上の隅のドロップダウンリストを操作してPCかNPCを選択。

3. '''OK''' をクリックする。

===Notes（ノート）===

[[Image:Notes-tab.jpg|thumb|'''Edit Token''' ダイアログの Notes タブ]]

この Notes タブにはトークンについてのノートを書ける2つのエリアがある。それぞれの入力エリアは基本的なHTMLタグに対応しているので、装飾した文章を書くことが可能だ。

上側のテキスト入力エリアは、見ようとしただれからでも見ることが可能なノートを書くためにある。下側の（'''GM Notes''と見出しが付けられた）エリアはGMのみが見ることができるノートを書くためのものだ。

ノートにはちょっとした仕掛けがあり、MapTool は気のきいたポップアップとして表示することができるが、、そのためには上側のノートを書く必要がある。

# トークンのノートの入力エリアに情報を入力する。
# 右クリックをして'''Change To &gt;''' から'''Object Layer''' か '''Background Layer''' を選択。
# '''Token Layer''' に戻る。

マウスカーソルをトークンの上にかざしたときにカーソルの形が「手」の形になることに気づくだろう。ダブルクリックした場合、'''Edit Token''' ダイアログが表れる代わりに、ノートが記された小さなポップアップが画面の左下の隅に表示されるはずだ。

ここで重要なことは、トークンのノートを利用する方法はいくつもあるが、より一般的な使用方法は Object レイヤーか Background レイヤー上のトークンに注釈や備忘を付けることだ。

===Properties（プロパティ）===

[[Image:Properties-tab.jpg|thumb|'''Properties''' タブ]]

'''Properties''' は、独立した案内として説明するに値するテーマであり、トークンの作成とマクロの使用に'''深く関わる'''ものだ。この案内で厄介なプロパティの詳細に触れるつもりはないが、その代わりに、ごく基本的なことについて説明することにしよう。

マップ上に配置されたトークンは、もれなく自動的に一通りの '''properties''' （基本的にはステータス、特性、特徴などのキャラクターシート上で良く見られるものだ）が与えられる。実質的に、各トークンはトークン自信に組み込まれたキャラクターシートを持ち歩いているといえる。プログラミング用語において、プロパティはさまざまな値を設定することが可能な変数であり、マクロにより再利用することができる。

* '''注'''： 皆が頻繁に''トークン・プロパティ''を参照するが、Edit Token ダイアログに表示されるプロパティはキャンペーンにおいて設定されているプロパティだけである。

'''Edit Token''' ダイアログの '''Macros''' タブをクリックしたら、君が使用している'''キャンペーン'''で、現在設定されているプロパティの一覧を確認できるだろう。新しいキャンペーンを開いた後やマップツール開始直後てあれば下記のとおり''標準のプロパティ''が表示されるはずだ。

* Strength
* Dexterity
* Constitution
* Intelligence
* Wisdom
* Charisma
* HP
* AC
* Defense
* Movement
* Elevation
* Description

この案内の残りの部分では、実例を示す場合は上の一覧にあるプロパティを使用する。

プロパティの一覧は、左にプロパティ名、左側に空白がある表形式（エクセルみたいな形式）になっている。右側の空白には、君の望む値をプロパティの値として入力することが可能だ。君はテキストや数値を入力でき、もっと進んだ使い方としてはマクロ文をそのプロパティの値として記述することもできる。

プロパティを編集し、 '''OK''' をクリックすると、'''そのトークンのプロパティ'''は入力した値に設定される。その後マクロを記述するのであれば、なにかを算出したり、ダイスロールのためにプロパティの値を参照することが可能になる。

ここでは簡単に紹介したが、プロパティは重要なテーマであるので、詳しい情報を得るために[[Introduction to Properties|初めてのプロパティ]]の案内を良く読んでほしい。


===State（状態）===

[[Image:State-tab.jpg|thumb|'''State''' タブ]]

[[Image:State-example.jpg|thumb|ステータスが適用されたトークン。赤い小さな画像はトークン画像の上に重ねあわされた ''ステータス画像''。]]

'''States''' はゲーム進行の上で必要なことを忘れないように、トークンへ貼り付けることが可能な目印だ。例えば、あるNPCトークンに''死亡''の印をつけたいのであれば、トークンのステータスに''死亡''を設定することで、君が''死亡''を示すものとして選んだ画像をトークンの上に表すことが可能となる。

マップツール起動時の標準のステータスは次の通り。

* Dead
* Disabled
* Hidden
* Prone
* Incapacitated
* Other
* Other 2
* Other 3
* Other 4

&lt;br style=&quot;clear:both;&quot;/&gt;

====Health Bar（健康度メーター）====

[[Image:Bar-example.jpg|thumb|''バー''を有効にし、表示したトークン。バーはマクロを通して、目盛を変化させることが可能だ]]

Stateタブにはトークン上に表示される'''バー'''の設定情報も含んでいる。このバーはトークン上（上部、下部、両サイドのいずれか）に重ねて表示され、負傷状態や類似したもの（残弾数や魔法、その他失ったり消費されるもの）を確認するために使用可能だ。

&lt;br style=&quot;clear:both;&quot;/&gt;

===Macros===

MapTool バージョン 1.3.b54 以降、 Macros タブは無効になっている。このタブはもともとトークン・マクロを保持していたが、マクロの機能が拡張されるにつれ、次第に使いにくくなり、最終的に削除された。それでもこのタブを見てみたいのであれば、より古いバージョンでは表示されている。

===Speech（セリフ）===

[[Image:Speech-tab.jpg|thumb|'''Speech''' タブ]]

このタブにはトークンの'''speech'''の一覧が含まれている。このタブは、言い回しや格言、ときの声など、チャットでトークンに喋らせたいことを設定することが可能だ。各 speech item には2つのフィールドがある。

* '''ID'''：このフィールドは speech item にあてがう短い識別子だ。IDはチャットでセリフの全文を参照するために使用される。ここには英数字（数字、アルファベット、それぞれを混合したもの）が使用可能だ。当然、いかなる空白も使ってはならない!!* '''Speech Text'''：実際にチャットウィンドウに表示されるテキスト。

speech item を使用するには次の手順に従う。

# ''喋らせたい''トークンを選択。
# チャット・ウィンドウで、'''/tsay (ID)'''を入力。''(ID)''のところには存在する speech item の ID と置き換える。君が設定した「ときの声（''bcry''のIDをあてがっているものとする）」を上げようとするのであれば、自分のトークンを選択し、チャット・ウィンドウに'''/tsay cry'''と入力すればよい。

===Ownership（所有権）===

[[Image:Ownership-tab.jpg|thumb|'''Ownership''' タブ]]

トークンの'''所有権（ownership）'''はどのプレイヤーに選択や移動、そのトークンを詳細情報の閲覧する権利を与えるのかを決めるものだ。

君がトークンの所有者である場合、そのトークンを、「選択する」、「ダブルクリックしてダイアログを表示し編集を行う」、「マップ上を移動させる」、ことが可能となる。あるトークンの''所有者でない''のであれば、マップ上のトークンを見ることだけが可能で、選択、移動、プロパティや設定を見ることはできないであろう。

所有権を設定するには、個々人の名前の先頭にあるチェックボックスをチェックすればよい。ボックス内に表示されている名前は、ゲームに接続している各プレイヤー（GMを含む）の名前だ。（そのため、誰も接続していないときは Ownership タブには自分の名前だけが表示されているはずだ）プレイヤー全員に所有権を与えたいのであれば、'''All Players''' をチェックするだけだ。

（上記の振る舞いを機能させるには、サーバー起動時のオプションで'''Strict token ownership'''を有効にしていなければならないことに注意すること。サーバーのオプションの詳細は、[[Introduction to Game Hosting#Starting Up a MapTool Server|初めてのゲームホスティング：MapToolサーバーを開始する]]を参照。）

===Config（設定）===

[[Image:Config-tab.jpg|thumb|'''Config''' タブ]]

このタブには、トークンの外観や移動、MapTool と相互作用するいくつかの設定がある。

====Shape（形状）====

トークンは次に示す3つの形状（shape）を取ることが可能だ。

* '''Top Down'''：top-down のトークンは、通常、クリーチャーやオブジェクト、人間を頭上から見下ろした状態で描かれた、手書きやレンダリングで描画された画像である。トークンの形状を '''Top-down''' に設定することで、トークンを右クリックし'''Change Facing''' を選択した場合にトークン画像が回転するようになる。（これにより、君の top-down トークンは敵のいる方向に向きを変えることが可能になる！）
* '''Circle'''：円形のトークンは円の中にキャラクターやクリーチャーを表現してある、メンコやポーカーチップのようなものだ。これらはマーカーであり、リアルな''頭上から見た図''を意識していないので、Change Facing を選択した場合、画像が回転する代わりに小さな矢印が向いている方向に表れる。（回転したとしても見えは良くない）
* '''Square'''：矩形のトークンは円形のトークンと同じように機能する。違うところは…えーと、まぁ、なんだ…形が四角いってことだ。

====Size（サイズ）====

トークンには、トークンの大きさを大きくしたり、小さくしたりできるサイズを設定することができる。

使用可能なサイズは[[Introduction_to_Mapping|マップに設定された]]グリッドの使用・不使用に左右される。マップをグリッド付き（ヘックス、または四角形）として設定した場合、''Free Size'' オプションか、''Fine'' から ''Colossal'' までのサイズ（君がD&amp;Dをプレイしているなら、なんとのことか見当がつくだろう）を選択することができる。

マップ作成時にグリッドを設定していない場合、-11 から +20 までの数値を使って、サイズを拡大／縮小することが可能だ。

====Properties（プロパティ）====

このフィールドは、キャンペーンで利用可能なプロパティ・セットのうち、どのセットをトークンが使っているかを示している。キャンペーンの作成者は各トークンに異なるプロパティ・セットを適用することが可能だ。（あるプロパティ・セットをプレイヤー・キャラクターに適用し、別のセットをNPCに適用することができる。）このフィールドで、使用するプロパティ・セットを選択できる。

====Has Sight（視覚）====

このフィールドは、トークンが備えている[[Introduction to Lights and Sights|視覚]]の種類を示すものだ。'''視覚'''の設定により、ゲームマスターは暗闇、灯り、隠されたオブジェクト、忍び寄る敵を再現すことができる。

====Snap to Grid（グリッドに吸着）====

このチェックボックスは、トークンを移動させるときに近くのグリッドに吸着するかどうかをを示す。チェックが外れている場合、トークンはグリッドに影響されることなくマップ上を移動することになる。

====Visible to Players（プレイヤーに表示）====

このチェックボックスを使い、特定のトークンがプレイヤーから見ることができないように指定することができる。チェックを有効にした場合、ゲームに接続しているプレイヤーはいかなる手段を持ってもこのトークンを見ることも影響を与えることもできなくなる。

====Layout, Portrait, and Handout（配置、肖像、ハンドアウト）====

ここにある3つのフィールドはトークンの視覚的外観を扱うものだ：

* '''Layout'''：マップ上で表示されるトークン。
* '''Portrait'''：トークン上にカーソルをかざしたときに、マップ表示エリアの左下角に表示される、別の画像。
* '''Handout'''：トークンを右クリックし '''Show Handout''' を選択したときに表示される画像を指定することができる。

[[Category:MapTool]]
{{Languages|Introduction to Tokens}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>selectTokens</title>
    <ns>0</ns>
    <id>1072</id>
    <revision>
      <id>6199</id>
      <parentid>4787</parentid>
      <timestamp>2013-08-12T04:18:42Z</timestamp>
      <contributor>
        <username>True Hitoare</username>
        <id>579</id>
      </contributor>
      <minor/>
      <comment>Fixed variable name</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1866">{{MacroFunction
|name=selectTokens
|version=1.3b68
|description=
Selects one or more visible tokens on the map. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
selectTokens()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
selectTokens(id, add)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
selectTokens(tokens, add, delim)
&lt;/source&gt;

'''Parameter'''
* {{code|id}} - the id string or token name of a specific token to select (the examples below use token ''names'', but IDs are also permitted); if left blank ''all'' visible tokens are selected.
* {{code|add}} - if the value of add is {{code|true(1)}}, the selections will be added to the current set of selected tokens; if the value is {{code|false(0)}} currently selected tokens will be deselected before new tokens are selected. Defaults to false. 
* {{code|tokens}} - a [[String List]] of tokens to select.
* {{code|delim}} - Specifies the delimiter used in the string list that is supplied. If the delimiter is &quot;json&quot;, then the value for {{code|tokens}} may be a [[JSON Array]] instead. '''Note: if using a JSON Array or String List, both {{code|add}} and {{code|delim}} must be specified.'''

|example=
To select a single token with the name &quot;Adventurer&quot;:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:selectTokens(&quot;Adventurer&quot;)]
&lt;/source&gt;

To select a list of [[Token]]s using a [[String List]], replacing the current selection
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:selectTokens(&quot;Adventurer, Orc 2, Goblin 1&quot;, 0, &quot;,&quot;)]
&lt;/source&gt;

To select a list of [[Token]]s using a [[JSON Array]], adding the specified tokens to the current set of selected [[Token]]s:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:selectTokens(&quot;['Adventurer', 'Orc 2', 'Goblin 1']&quot;, 1, &quot;json&quot;)]
&lt;/source&gt;

|also=
[[deselectTokens|deselectTokens()]],
[[getSelected|getSelected()]],
[[getSelectedNames|getSelectedNames()]]

|changes=
* '''1.3b68''' - Function added.

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>deselectTokens</title>
    <ns>0</ns>
    <id>1073</id>
    <revision>
      <id>4788</id>
      <parentid>4213</parentid>
      <timestamp>2010-10-26T16:31:50Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1332">{{MacroFunction
|name=deselectTokens
|version=1.3b68
|description=
Deselects one or more visible tokens on the map. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
deselectTokens()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
deselectTokens(id)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
deselectTokens(tokens, delim)
&lt;/source&gt;

'''Parameter'''
* {{code|id}} - the id string or name of a specific token to deselect (the examples below use the token name, but token IDs are also valid); if left blank all currently selected tokens are deselected.
* {{code|tokens}} - a [[String List]] of tokens to deselect.
* {{code|delim}} - Specifies the delimiter used in the string list that is supplied. If the delimiter is &quot;json&quot;, then the value for {{code|list}} may be a [[JSON Array]] instead. '''Note: if using a JSON Array or String List, {{code|delim}} must be specified.'''

|example=
To deselect a single token with the name &quot;Adventurer&quot;:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:deselectTokens(&quot;Adventurer&quot;)]
&lt;/source&gt;

To deselect a list of [[Token]]s using a [[String List]]:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:deselectTokens(&quot;Adventurer, Orc 2, Goblin 1&quot;, 0, &quot;,&quot;)]
&lt;/source&gt;

|also=
[[selectTokens|selectTokens()]],
[[getSelected|getSelected()]],
[[getSelectedNames|getSelectedNames()]]

|changes=
* '''1.3b68''' - Function added.

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Properties/ja</title>
    <ns>0</ns>
    <id>1074</id>
    <revision>
      <id>4245</id>
      <parentid>4243</parentid>
      <timestamp>2010-06-13T19:00:18Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="42149">{{Languages|Introduction to Properties}}{{#customtitle:はじめてのプロパティ|はじめてのプロパティ}}
{{Translation}}
==キャンペーンプロパティ（Campaign Properties）==

&lt;div style=&quot;color:gray&quot;&gt;One of the most useful features in MapTool is the capability of [[Introduction_to_Tokens|tokens]] to carry around a set of '''Properties''', attached to that token, that can be manipulated by macros and can be used to create quick displays of information. Basically, token properties are like built-in character sheets.&lt;/div&gt;

MapTool の最も気の利いた機能の一つは、マクロで操作したり、情報のクイック表示を作成することが可能な'''プロパティ'''の集まりを[[Introduction_to_Tokens/ja|トークン]]自身に付属させ持ち歩かせることができることだ。基本的にトークンのプロパティは MapTool に組み込まれたキャラクター・シートのようなものだ。

&lt;div style=&quot;color:gray&quot;&gt;However, because they are so useful, the MapTool developers have created many different ways to use them and manipulate them. This guide will address creating Campaign Property Sets, setting them to have default values, and using them to manipulate the Statsheet.&lt;/div&gt;

ではあるが、便利な機能であるため MapTool の開発陣はプロパティを使用したり操作したりする多くの異なる方法を作成してきた。このガイドでは、キャンペーンプロパティセット（Campaign Property Sets）を作ること、初期値を持つプロパティを作ること、作成したセットを使ってデータシート（Statsheet）を操作することに取り組む。

==サンプルルールセット、または MTRPG==

&lt;div style=&quot;color:gray&quot;&gt;In order to have useful examples as we move through this tutorial, several MapTool users and contributors developed the [[Sample Ruleset]] -- a simple roleplaying game system developed specifically to illustrate parts of MapTool. For this guide, we're going to call these rules the MapTool RPG - or MTRPG for short, and what we're going to do is create a new Campaign File and set up some ''campaign properties'' that correspond to attributes of the MTRPG.&lt;/div&gt;

このチュートリアルを案内する上で分かりやすい例を示すため、一部の MapTool ユーザーと開発者は[[Sample Ruleset|サンプルルールセット]]（特にMapToolの重要な要素を説明するために開発された簡単なロールプレイング・ゲーム・システム）を作り上げた。このガイドでは、このルールを MapTool RPG（もしくは略してMTRPG）と呼び、新しいキャンペーンファイルを作成し、MTRPGの特性に合う''キャンペーン・プロパティ''を設定していく。

==キャンペーンプロパティウィンドウ==

[[Image:Edit-campaign-props.png|thumb|Edit メニューに表示された Campaign Properties の項目]]

&lt;div style=&quot;color:gray&quot;&gt;To get started with Campaign Properties, the first thing you'll need to do is go to '''Edit &gt; Campaign Properties''', and open the Campaign Properties window. In this window, you'll see several tabs and a whole lot of information.&lt;/div&gt;

まず、キャンペーンプロパティの作業を始めるために、'''Edit → Campaign Properties''' を選択し、キャンペーンプロパティウィンドウを開く。このウィンドウには、いくつかのタブと多くの情報がある。

&lt;div style=&quot;color:gray&quot;&gt;When you open up the '''Campaign Properties''' window, you'll see it has six tabs. Briefly, they are:&lt;/div&gt;

'''キャンペーンプロパティ'''のウインドウを開いときに6つのタブがあることに気付くだろう。それぞれのタブを簡単に説明しよう：

&lt;div style=&quot;color:gray&quot;&gt;
* '''Token Properties''': this houses all the property sets that a token in the current campaign may have
* '''Repositories''': this is where you can designate an online &quot;[[Introduction to Campaign Repositories |repository]]&quot; to hold campaign files, especially images, to improve load times and speed when you host or play an online game
* '''Sight''': this tab is where you configure the settings for vision in the current campaign
* '''Light''': this tab is where you configure light sources and auras for the current campaign
* '''States''': this tab lets you configure [[Token:state|token states]] for the current campaign
* '''Bars''': this is where you configure [[bar.name|token bars]] for the current campaign
&lt;/div&gt;

* '''Token Properties'''：キャンペーンで利用可能な全てのプロパティ・セットが収録されている。
* '''Repositories'''：キャンペーン・ファイル（特に、オンラインでのゲームを楽しむために読み込み時間を短縮するために）を取り入れるため、オンラインの「[[Introduction to Campaign Repositories|リポジトリー]]」を指定することができる。
* '''Sight'''：このタブで、現行のキャンペーンで使用する視覚の設定を編集する。
* '''Light'''：このタブで、現行のキャンペーンで使用する光源とオーラの設定を編集する。
* '''States'''：このタブで、現行のキャンペーンで使用する[[Token:state|トークン・ステータス]]を編集する。
* '''Bars'''：ここでは、現行のキャンペーンで使用する[[bar.name|トークン・バー]]を編集する。

&lt;div style=&quot;color:gray&quot;&gt;This guide will only address the first tab, '''Token Properties'''.&lt;/div&gt;

このガイドでは、最初のタブ'''Token Properties'''だけに取り組む予定だ。

==プロパティのタブ==

[[Image:Camp-props.png|thumb|Campaign Properties 内の '''Properties''' のタブ]]


&lt;div style=&quot;color:gray&quot;&gt;The first visible tab is the properties tab. This appears relatively uncomplicated, but it's home to some really nifty potential. There are 3 text fields in this tab:&lt;/div&gt;

最初に表示されるタブはプロパティのタブだ。ここに表示されているものは比較的単純なものであるが、出発点としてふさわしい要素を備えている。このタブには以下の3つのテキストフィールドが備わっている：

&lt;div style=&quot;color:gray&quot;&gt;
* Name: this is the name of the property set you're currently viewing. When you open the campaign properties window, this is blank.
* Type: this column on the left side is not editable, but it will list the names of all the available property sets in the current campaign. If you have no campaign loaded, the only entry will be '''Basic'''
* A large text area where you enter the properties for the current campaign. It will be blank when first loaded, but if you select a property set from the '''Token Type''' list on the left side, you will see the names and default values of the properties in that set.
&lt;/div&gt;

* Name：現在表示しているプロパティ・セットの名称。キャンペーン・プロパティを開いたときは空白になっているはずだ。
* Type：この左の列にあるものは編集することができないが、現行キャンペーンで使用可能な全てのプロパティ・セットの一覧が表示される。まだキャンペーンをロードしていなければ、ここには'''Basic'''だけが表示されている。
* 大きなテキストエリアは、現行キャンペーン用のプロパティを編集する場所だ。最初にロードしたとき、ここは空白であるが、左側の '''Token Type''' の一覧からプロパティ・セットを選択すると、そのセットの名前と初期値の一覧が表示されるであろう。


===Type（種類）===

&lt;div style=&quot;color:gray&quot;&gt;In this field, you'll see the names of the different &quot;Property Types&quot; (you can think of them as property ''sets'') that are configured in the current campaign. If you have no campaign loaded, the default property set will be called ''Basic''. The '''Type''' field is not directly editable by the user.&lt;/div&gt;

このフィールドには現行キャンペーン用に作成した異なるいくつかの''プロパティの種類''（プロパティ・''セット''とみなして構わない）が並ぶことになる。まだキャンペーンをロードしていないのであれば、標準のプロパティ・セットは''Basic''と呼ばれる。'''Type''' フィールドはユーザーが直接編集することはできない。

===Name（名称）===

&lt;div style=&quot;color:gray&quot;&gt;This is a simple text field where you can enter the name you want to give the property set. This name will, when you update the set, appear in the '''Type''' list to the left, and it becomes the name for that particular set of properties. Names can be anything you like; many users create sets called &quot;NPC&quot; for games where NPC stats and traits differ from those of player characters, for example.&lt;/div&gt;

これは単純なテキストフィールドであり、プロパティ・セットに付ける名称を入力することが可能だ。プロパティ・セットを更新する際、この名称が左側の'''Type'''の一覧に表示され、プロパティ・セットの固有名称となる。名称は自由に決めれば良い。例えば、多くのユーザーは、NPCの状態や特徴がプレイヤー・キャラクターと異なるゲーム用に、''NPC''という名称を付けてプロパティ・セットを作っている。

===Properties（プロパティ）===

&lt;div style=&quot;color:gray&quot;&gt;This is where it gets funky. In this text area, you can create any and every property you can think of, which can reflect every possible number or statistic an RPG character might have (and many properties that they don't have -- lots of users create properties that are useful for when they write macros, but wouldn't appear on any character sheet!).&lt;/div&gt;

こいつはなかなかイカしたものだ。このテキストエリアでは、君の思いつくあらゆるプロパティを作ることができ、RPGキャラクターで使用するような数値やデータを可能な限り再現することが可能だ。 (RPGキャラクターが持っていないプロパティを持つことも可能だ。ユーザーの多くは、マクロを記述するときに有用なプロパティを作るが、そういったプロパティはキャラクターシートには存在しないのが普通だ！）

==プロパティの作成==

===初期値を持たないプロパティ===

[[Image:Basic-default-props.png|thumb|Basic プロパティ・セットの初期のプロパティ・セット]]

&lt;div style=&quot;color:gray&quot;&gt;If you look at [[Sample_Ruleset#Primary_Attribute|MTRPG's Primary Attributes]], you will see that there are four separate attributes that are the basic attributes of a character: ''Strength'', ''Dexterity'', ''Intelligence'', and ''Endurance''. We're going to get rid of the default properties, and put new ones in their place.&lt;/div&gt;

[[Sample_Ruleset#Primary_Attribute|MTRPG's Primary Attributes（MTRPG の主要な特性値）]]では、キャラクターの基本的な特性である4つに分類された特性値、「 ''Strength''、''Dexterity''、''Intelligence''、''Endurance''」を見ることができる。では始めからあるプロパティを取り除き、新しいプロパティを作り上げていこう。

&lt;div style=&quot;color:gray&quot;&gt;1. Go to '''Edit &gt; Campaign Properties'''. You'll see in the left side, under ''Token Type'', that the only entry is &quot;Basic.&quot; We're going to create a new property set.&lt;/div&gt;

1. '''Edit → Campaign Properties''' を開く。左側にある ''Token Type'' の下に ''Basic'' の項目だけがあるが確認できるだろう。ここでは新しいプロパティ・セットを作っていく。

&lt;div style=&quot;color:gray&quot;&gt;2. In the '''Token Type''' list on the left, select ''Basic''. When you do this, you'll see a whole bunch of properties with all kinds of symbols like @, #, and so forth. &lt;/div&gt;

2. '''Token Type''' の一覧から ''Basic'' を選択する。すると、「@」や「#」などの記号を伴ったたくさんのプロパティが表示される。

&lt;div style=&quot;color:gray&quot;&gt;3. In the text area with all the properties, use your mouse to highlight them all, and hit Delete on your keyboard. Go ahead - don't be shy!&lt;/div&gt;

3. テキストエリアのすべてのプロパティをマウスを使って選択し、キーボードの「Delete（削除）」を押す。遠慮は無用。やっちまえ！

&lt;div style=&quot;color:gray&quot;&gt;4. Leave the '''Name''' field alone - MapTools must always have a ''Basic'' property set, so you can't change that name.&lt;/div&gt;

4. '''Name''' フィールドだけはそのまま残す。MapTool は ''Basic'' プロパティ・セットが必ず必要なので、この名称を変更することはできない。

[[Image:Default-props-replaced.png|thumb|初期のプロパティが削除され、MTRPGの4つの主要特性値に置き換えられた]]

&lt;div style=&quot;color:gray&quot;&gt;5. In the text area below the '''Name''' field, enter the name of each of the four Primary Attributes in MTRPG, like so:&lt;/div&gt;

5. '''Name''' フィールドの下にあるテキストエリアにMTRPGの4つの主要特性値を次のように入力する。

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Strength&lt;br/&gt;
Dexterity&lt;br/&gt;
Intelligence&lt;br/&gt;
Endurance&lt;/tt&gt;&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;When done, your properties window should look like the screenshot on the right. &lt;/div&gt;

入力を終えたら、君のプロパティ・ウィンドウは右のスクリーンショットのようになっているはずだ。

&lt;div style=&quot;color:gray&quot;&gt;6. Once you've finished entering the properties you want, click the button labeled '''Update'''. Don't panic! The properties will disappear, but if you select the ''Basic'' list from the left, your properties will reappear in the main text area.&lt;/div&gt;

6. 必要なプロパティを入力し終えたなら、'''Update''' ボタンをクリック。おっと驚かなくても大丈夫！プロパティは消え去るが、左の一覧から''Basic'' を選択すれば先程入力したプロパティが再びテキストエリアに表示される。

&lt;div style=&quot;color:gray&quot;&gt;7. Click '''OK''' to confirm all of your changes and close the '''Campaign Properties''' window. &lt;/div&gt;

7. 編集結果の確認と'''キャンペーン・プロパティ''ウィンドウを閉じるため'''OK'''をクリックする。

&lt;div style=&quot;color:gray&quot;&gt;8. Go to '''File &gt; Save Campaign As''' and save your campaign as '''MTRPG.cmpgn'''. You've now created a new campaign file, with a new set of campaign properties.&lt;/div&gt;

8. '''File → Save Campaign As'''を選択し、このキャンペーンを '''MTRPG.cmpgn''' として保存する。これで新しいキャンペーン・プロパティのセットを持つ、新しいキャンペーン・ファイルが出来上がった。

&lt;div style=&quot;color:gray&quot;&gt;When you create properties like this -- just listing the values one after the other -- and then open a token, you will see that these properties have no value. That does not mean that they are equal to zero, or equal to a blank line - they literally have ''no value''. This doesn't mean much for most purposes, but it is an important distinction in macro writing terms (in programming, there's a big difference between a blank string, and an actually ''empty'' variable!). &lt;/div&gt;

このようなプロパティ（順々に値が並んでいるような）を作りトークンを開くと、値がない同じプロパティを確認できる。値がないことはゼロや空白行ではなく、文字通り ''no value（値なし）'' という状態だ。これはほとんどの用途で意味を持たないが、マクロを記述するにあたり重要な違いとなる（プログラミングでは、空の文字列なのか、''空''の値なのかが大きな違いなんだ！）。

&lt;div style=&quot;color:gray&quot;&gt;Once properties are updated, all of the tokens on the map will be updated with the new properties, and any new tokens you drop on the map will &quot;inherit&quot; the properties you set up.&lt;/div&gt;

プロパティを更新すると、マップ上のすべてのトークンは新しいプロパティに更新され、マップ上に新規に作られるトークンは君の作ったプロパティが「受け継がれて」いる。

&lt;div style=&quot;color:gray&quot;&gt;'''NOTE''': Property names cannot have spaces in them - so if you have a property called &quot;Hit Points&quot;, you would need to enter it as ''HitPoints''.&lt;/div&gt;

'''注'''：プロパティ名に空白を入れてはいけない。''Hit Points'' というプロパティを作るのであれば、''HitPoints''と入力する必要がある。

'''訳注'''：日本語のプロパティ名も作れるようだが、マクロの利用などで問題がでる可能性がある。（未確認）

===初期値を持つプロパティを作る===

[[Image:Newprops-defvalues.png|thumb|初期値を持つようになった MTRPG のプロパティ]]

&lt;div style=&quot;color:gray&quot;&gt;Now, in MTRPG, the minimum value an attribute can have is 1. So, it makes sense to set the ''default value'' of these properties to 1 (that way, every new token will at least have the minimum value an attribute can have). To do this:&lt;/div&gt;

現在の MTRPT では、特性値の最小値は1となっている。ということで、プロパティの「初期値」に1を設定するとは理にかなっている。（つまり、新しいトークンは少なくとも最小の特性値を持つようになるということだ）やりかたは次の通り：

&lt;div style=&quot;color:gray&quot;&gt;1. Open the Campaign Properties window.&lt;/div&gt;

1. キャンペーンプロパティのウィンドウを開く

&lt;div style=&quot;color:gray&quot;&gt;2. Select the ''Basic'' property set.&lt;/div&gt;

2. ''Basic'' プロパティ・セットを選択。

&lt;div style=&quot;color:gray&quot;&gt;3. In the Basic Properties set, edit your properties so they now read (see the image, as well):&lt;/div&gt;

3. Basic プロパティ・セット内のプロパティを次のように編集する（画像を確認しても良い）：

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Strength:1&lt;br&gt;
Dexterity:1&lt;br&gt;
Intelligence:1&lt;br&gt;
Endurance:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;4. Click '''Update'''.&lt;/div&gt;

4. '''Update'''をクリック。

&lt;div style=&quot;color:gray&quot;&gt;By placing a colon at the end of the name of each attribute, and putting the number 1 after the colon, you have instructed MapTool that the default value for those properties is 1 (in other words, whatever value you put after the colon becomes the ''default value'' for that property). You'll note that at the bottom of the Token Properties tab there is a key describing the various options you can set on a property.&lt;/div&gt;

各特性名の末尾にコロンを置き、その直後に数字の1を記述することで、MapTool にそれぞれの初期値が1であることを指示することになる（つまり、コロンの後に置いたものはなんであってもそのプロパティの''初期値''となる）。トークン・プロパティのタブの下部にある、プロパティに取り付け可能なさまざまな「Key」の説明の中に上記の内容があることに気付くであろう。

&lt;div style=&quot;color:gray&quot;&gt;Now, if you drag a new token onto the map and look at its properties (double-click on the token and go to the Properties Tab in the '''Edit Token''' dialog), you will see that the new token has the default values. &lt;/div&gt;

その後、マップ上に新しいトークンをドラッグし、プロパティを確認する（トークンをダブルクリックして'''Edit Token''ダイアログのプロパティタブを開く）と、この新しいトークンが初期値を持っていることが確認できるだろう。

&lt;div style=&quot;color:gray&quot;&gt;By the way: don't worry about any tokens you may have already set the property values on - setting up or changing the default values will ''not'' override the properties you've already set. MapTool is smart enough to handle that.&lt;/div&gt;

ちなみに：君が既にプロパティに値を設定したトークンのことは心配しなくて良い。初期値を作ったり変更したりしても既に値を設定したプロパティが「上書き」されることはない。MapTool はこのあたりを賢く取り扱う。

===データシート（Statsheet）にプロパティを表示する===

[[Image:Statsheet-props.png|thumb|君が作成したキャンペーン・プロパティを表示しているデータシート。これの作り方はこのセクションに書かれている。]]

&lt;div style=&quot;color:gray&quot;&gt;MapTool has a neat feature called the '''Statsheet''', which is briefly mentioned in the [[Introduction to Tokens]] - basically, it is an automatic popup that appears in the lower left corner of the map, when you hover over a token. &lt;/div&gt;

MapTool は '''データシート（Statsheet）''' という素敵な機能を持っている。[[Introduction to Tokens/ja|はじめてのトークン]]で簡単に説明しているように、基本的には、トークン上にカーソルをかざしたときにマップの左下隅に表れるものだ。

&lt;div style=&quot;color:gray&quot;&gt;You may be saying, &quot;Wait...when I hover over my token, there's no statsheet! Where is it?&quot; The reason you don't see it yet is that the Statsheet is governed by the Campaign Properties - it displays the token's properties (along with a larger version of the token's image) - but ''only'' when a couple requirements are met:&lt;/div&gt;

君は「ちょっと待ってくれ。トークン上にカーソルを持っていってもデータシートは表示されないぞ！どこにあるんだ？」と言うに違いない。データシートが表示されないのは、データシートは「（より大きなトークン画像に沿って）トークンのプロパティを表示する」というものであるが、次の二つの条件を満たす必要があるからだ：

&lt;div style=&quot;color:gray&quot;&gt;
* The properties are set up to display on the statsheet; and
* The properties that are displayed actually have a value&lt;/div&gt;

* プロパティをデータシートに表示するように設定し、
* プロパティに実際の値を与える

====プロパティを表示するために必要なこと====

[[Image:Newprops-visible.png|thumb|データシートにプロパティを表示できるようにするために各プロパティ名の先頭にアスタリスクを追加する]]

&lt;div style=&quot;color:gray&quot;&gt;If you look at the bottom of the '''Token Properties''' tab in the '''Campaign Properties''' dialog, you'll see a key showing how to set up a property to display in the Statsheet. There are three display options, each of which is indicated by putting a symbol in front of the property name:&lt;/div&gt;

'''Campaign Properties''' ダイアログの ''''Token Properties''' のタブの下部を見れば、データシートにプロパティを表示する方法を記した記号一覧（Key）が確認できるはずだ。ここには3つの選択肢があり、それぞれ、シンボルをプロパティ名の先頭に置くよう示されている：

&lt;div style=&quot;color:gray&quot;&gt;
# '''&lt;nowiki&gt;*&lt;/nowiki&gt;''': an asterisk means &quot;show this property on the statsheet&quot;
# '''@''': means &quot;only show this property to the owner of the token (and the GM)&quot;
# '''&lt;nowiki&gt;#&lt;/nowiki&gt;''': means &quot;only show this property to the GM (not even the token owner can see it)&quot;&lt;/div&gt;

# '''&lt;nowiki&gt;*&lt;/nowiki&gt;'''：アスタリスクは「このプロパティをデータシートに表示する」という意味。
# '''@'''：「トークンの所有者（およびGM）にのみプロパティを表示する」という意味。
# '''&lt;nowiki&gt;#&lt;/nowiki&gt;'''：これは「GMにのみプロパティを表示する（トークンの所有者であっても表示されない）」という意味。

&lt;div style=&quot;color:gray&quot;&gt;The asterisk is '''required''' for any stat to display at all - if you don't have an asterisk first, it won't show no matter what else you put on there. The @ and # symbols, on the other hand, are optional.&lt;/div&gt;

アスタリスクはどのようにデータを表示するにしても'''必須'''であり、アスタリスクを付けなければ他の記号をおいても何も表示されない。アスタリスクと異なり、@ と # の記号は必須ではない。

&lt;div style=&quot;color:gray&quot;&gt;So, for our new game, we're going to set all of the properties to be visible to everyone (by just using a star). To do this, open up your properties, and edit them to look like this:&lt;/div&gt;

というわけけで、新しいゲームでは全てのプロパティをみんなが見えるようにするつもりだ（アスタリスクを使って）。そのために、プロパティを開いて、次の ように編集してくれ：

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;Now, when you hover over a token, you'll see the Statsheet pop up (see the screenshot, above) with the values in the Strength, Dexterity, Intelligence, and Endurance properties. Also, since even brand new tokens have a default value, the Statsheet will appear for all tokens.&lt;/div&gt;

これで、トークン上にカーソルをかざすと上のスクリーンショットのようにデータシートが表示されるだろう。データシートには特性値を伴った「Strength、Dexterity、Intelligence、Endurance」のプロパティが表示されているはずだ。これまでと同じように、新しく作られたトークンは初期値を持っているので、全てのトークンにデータシートが表示されるであろう。

====短縮名====

[[Image:Newprops-shortnames.png|thumb|それぞれのキャンペーン・プロパティに短縮名が設定された]]

&lt;div style=&quot;color:gray&quot;&gt;Sometimes, property names can get pretty long (or look unfriendly - no spaces, and all that). MapTool lets you put a ''Short Name'' in for each property. To do that, you just enter the short name in parentheses after the property name, like so:&lt;/div&gt;

ときどき、プロパティ名が長すぎるときがある（見づらく、スペースが足らなかったり他いろいろ）MapTool では各プロパティに「短縮名」を設定することができる。これをするためには、括弧でくくった短縮名をプロパティの後ろに置くだけで良い。次のように：

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength(Str):1&lt;br&gt;
 *Dexterity(Dex):1&lt;br&gt;
 *Intelligence(Int):1&lt;br&gt;
 *Endurance(End):1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;These short names are displayed in the Statsheet instead of the full name of the property&lt;/div&gt;

ここで設定した短縮名はプロパティの長い名称の代わりにステータスシート上に表示される。

&lt;div style=&quot;color:gray&quot;&gt;'''Short Names are for display purposes only - when referencing properties in macros, you must use the full property name.'''&lt;/div&gt;

'''短縮名は表示のためだけに使用される。マクロでプロパティを参照する場合は必ず本来の名称を使用すること。'''

===連動プロパティを作成する===

[[Image:Newprops-derived.png|thumb|''HitPoints'' と ''Movement'' のプロパティは存在する他のプロパティから導き出すよう MapTool に指示を出すマクロコードをもつようになった]]

[[Image:Statsheet-with-allnewprops.png|thumb|連動プロパティを含むすべてのプロパティを表示するデータシート]]

&lt;div style=&quot;color:gray&quot;&gt;Okay, now let's do something pretty cool. In a lot of roleplaying games, there are character attributes that are derived from other stats - for instance, in the ''Savage Worlds'' rules, your &quot;Parry&quot; stat is based on your ''Fighting'' ability; likewise, in Dungeons &amp; Dragons, your &quot;Hit Points&quot; are derived partly from your &quot;Constitution&quot; score. &lt;/div&gt;

よーし、次はとてもクールことをやってみよう。多くのRPGでは、キャラクターの特性値は他のデータと連動して導かれる。例えば、''Savage Worlds'' のルールでは、''Parry'' の値は ''Fighting'' の能力を基準にしている。同じようにダンジョンズ＆ドラゴンズでは、''ヒット・ポイント''は''【耐久力】''の値が部分的に関係している。

&lt;div style=&quot;color:gray&quot;&gt;Now, you could create these other derived attributes as separate properties and manually enter the values in when you make a new token - but how about we allow MapTool to calculate these derived values? That's right - MapTool's campaign properties can not only be numbers and text, but also calculations and equations based on other properties that the token has.&lt;/div&gt;

今のところ、君は連動プロパティ以外（個別のプロパティとトークン作成時に手動で値を入力するプロパティ）を作ることができるが、どのようにして値に連動する計算をすればよいのだろうか？MapTool のキャンペーン・プロパティの値は数値やテキストだけではなく、トークンの持つ他のプロパティに基づく計算式や方程式でも構わない。

&lt;div style=&quot;color:gray&quot;&gt;In MTRPG, there are three ''derived'' stats: Hit Points, Armor, and Movement. These stats have the short names &quot;HP&quot;, &quot;AR,&quot; and &quot;MV.&quot; For this example, we're going to set up ''Hit Points'' and ''Movement'' to be calculated from existing properties. We'll leave Armor until later (it takes a bit more complex a calculation to figure out the armor value, and we're taking it slow). &lt;/div&gt;

MTRPG では、3つの'''連動'''データがある： Hit Points、Armor、Movement。各項目は短縮名「HP」、「AR」、「MV」を持つ。今回の例では、「Hit Points」と「Movement」を他の値から算出するものを作ってみよう。Armor については今後の課題にしてこう。（Armor の値を導き出すのは少し複雑な計算になり、速度の低下を招くだろう。）

&lt;div style=&quot;color:gray&quot;&gt;First, we need to add properties for these three derived values:&lt;/div&gt;

まず、この3つの連動する値を持つプロパティを追加しなければならない：

&lt;div style=&quot;color:gray&quot;&gt;1. Open up the Basic property set. &lt;/div&gt;

1. Basic プロパティ・セットを開く。

&lt;div style=&quot;color:gray&quot;&gt;2. Beneath ''Endurance'', enter the following:&lt;/div&gt;

2. ''Endurance'' の下に次のように入力する：

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *HitPoints(HP)&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV)&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;You'll notice at this point, we've set no default values. Don't hit '''Update''' just yet - let's enter some macro code to create a derived value.&lt;/div&gt;

初期値を設定していないことに気付いただろうか。まだ '''Update''' をクリックしないように。続いて連動する値を作るためにマクロコードを入力していこう。

&lt;div style=&quot;color:gray&quot;&gt;We can see from the [[Sample Ruleset|MTRPG]] rules that ''Hit Points'' is equal to the value of ''Endurance'' multiplied by 6. Replicating this calculation in the campaign properties is very simple. Edit the ''Hit Points'' property to read:&lt;/div&gt;

[[Sample Ruleset|MTRPG]] のルールを見ると、''Hit Points'' は ''Enduarance'' を6倍したものだと書かれている。キャンペーン・プロパティでのこの計算手順は実に単純だ。''Hit Points'' のプロパティを次のように編集する：

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *HitPoints(HP):{Endurance * 6}&lt;/tt&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;What we've done here is enter a default value for the property (remember, default values are whatever comes after the colon), and used some [[Introduction to Macro Writing|macro code]] to instruct MapTool to perform a calculation in order to find the value for the properties. Two thing are happening here:&lt;/div&gt;

ここでは、プロパティの初期値を入力（初期値はコロンの後に置くことを憶えているかな）し、MapTool にプロパティの値を求めるために計算を実行することを命令する[[Introduction to Macro Writing|マクロコード]]を使用する、ということを行った。ここには2つの発見がある：

&lt;div style=&quot;color:gray&quot;&gt;
# We've enclosed the calculations in { }, which warns MapTool that the text enclosed inside the brackets is to be handled like a macro, and not just plain text
# Inside the brackets, we've said, &quot;Find the value of the ''Endurance'' property, multiply it by 6, and make that result the value of the ''Hit Points'' property&quot;
&lt;/div&gt;

# 計算式を { } で囲ってあり、これはMapTool に括弧の中のテキストは通常のテキストではなく、マクロのように扱うよう伝えるものだ。
# 括弧の中では次のように述べている。「''Endurance'' のプロパティの値を見つけ、6倍し、計算結果を ''Hit Points'' の値とするように」。

&lt;div style=&quot;color:gray&quot;&gt;Now, to handle the ''Movement'' attribute, our job is even simpler: we need to instruct MapTool to get the value of the ''Dexterity'' property, and assign that same value to the ''Movement'' property. To do so, edit the Movement property to read:&lt;/div&gt;

次は ''Movement'' を扱うが、この作業は実に単純だ：''Dexterity'' のプロパティの値を見つけ、同じ値を ''Movement'' プロパティの値としてテイ要する必要がある。ではやってみよう。Movement のプロパティを次のように編集する：

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Movement(MV):{Dexterity}&lt;/tt&gt;
&lt;/blockquote&gt;

作業を終えたなら、全体のプロパティセットは次のようになっていはずだ：

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;
 *HitPoints(HP):{Endurance * 6}&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV):{Dexterity}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;color:gray&quot;&gt;And when you hover your mouse over a token, the Statsheet should look like the screenshot to the right. Remember, even though we've said that ''Armor'' should be displayed on the statsheet, the statsheet only shows properties that have a value - ''Armor'' is still empty, so it won't show up until you give it a value.&lt;/div&gt;

これでマウスカーソルをトークン上にかざすと、データシートには右のスクリーンショットの用に表示されるはずだ。''Armor'' プロパティはデータシート上に表示されべきと言ったが、データシートに表示されるは値を持つプロパティだけであることを忘れないように。''Armor'' はまだ空なので値を与えるまでは表示されない。

==技術的な情報を少しばかり==

&lt;div style=&quot;color:gray&quot;&gt;A couple times in this guide and in other guides the token properties have been described as &quot;those properties that are ''visible''&quot; in this campaign, or the properties set up &quot;''for this campaign''.&quot; There's a reason for phrasing it like this. &lt;/div&gt;

トークンのプロパティに関するこのガイドと他のガイドでは次のように「このキャンペーンで表示されるプロパティ」や「このキャンペーンのために設定されたプロパティ」というように説明されている。このような言い回しをするには理由がある。

&lt;div style=&quot;color:gray&quot;&gt;See, a token - if you cut one open and looked at its inner workings - is an XML file that contains a ''ton'' of information. It has information about its image, its size, its vision, light, and shape, and - of course - its properties. What's important to understand here is that the token will remember not only the properties from the MTRPG, but if it was ever saved as an '''.rptok''' file or brought in from another campaign file, it will remember the properties from that campaign too. They won't be visible, but they're stored in the token even so. &lt;/div&gt;

トークンは大量の情報が詰まったXMLファイルだ。画像、トークンのサイズ、光源、形状、当然ながらトークンの持つプロパティといった情報を持っている。ここで理解するために重要なことは、トークンが記憶するのは MTRG に由来するモノだけではなく、'''.rptok''' ファイルとして保存されたものや他のキャンペーンファイルで作らたものであった場合、そのキャンペーンと同じものを記憶しているであろう、ということだ。それらは表示されはしないが、トークンの中に格納されている。

&lt;div style=&quot;color:gray&quot;&gt;So, in reality, a set of Campaign Properties really indicates those properties that:&lt;/div&gt;

実際には、キャンペーンプロパティのセットは現実に次にあげるプロパティのことを指す：

&lt;div style=&quot;color:gray&quot;&gt;
* You can see if you open up a token by double-clicking on it, and
* You can directly edit by clicking in the cell next to them
&lt;/div&gt;

* トークンをダブルクリックしてトークンを開いたときに表示されるもの、及び
* プロパティ名に続くセルをクリックして直接編集できるもの

&lt;div style=&quot;color:gray&quot;&gt;This may sound like a recipe for disaster - what if you set up a property that was already set up but is hidden? Fortunately, MapTool will not, when running a macro, attempt to access any hidden properties unless you ''specifically'' instruct it to do so, using two special macro functions. So rest assured, you cannot accidentally access a property that's not set up in the Campaign Properties.&lt;/div&gt;

これは大惨事の原因のように思えるかもしれないが、君が既に設定済みであり表示されていないプロパティを設定した場合はどうなるのだろうか？幸いにも、マクロを実行する際、MapToolは表示されないプロパティへのアクセスを試みることはない。君が2つの特殊なマクロ関数を使って''明確に''そうするように指示しない限りは。安全のため、キャンペーンプロパティで設定されていないプロパティにうっかりアクセスすることはできないようになっている。

&lt;div style=&quot;color:gray&quot;&gt;In summary, if a Property Type (such as the default ''Basic'' property type) has a property named '''HP''', it will be stored in the token under the XML name '''HP'''.  If another property type (such as a user-defined ''Pathfinder'' property type) also has a property named '''HP''', they will both be referencing the same data on the token.  Modifying the value of '''HP''' when the token is ''Basic'' and then changing the token ''Pathfinder'' will show the same value for '''HP'''.&lt;/div&gt;

手短に言えば、あるプロパティタイプ（標準の ''Basic'' プロパティタイプとする）が '''HP''' という名のプロパティを持つ場合、それは '''HP''' というXMLの名前でトークンの中に格納されている。他のプロパティタイプ（ユーザーが定義した''Pathfinder''プロパティタイプとする）が同じように '''HP''' という名のプロパティを持つ場合、どちらもトークン上の同じデータを参照する。トークンが ''Basic'' であるときに '''HP''' の値を修正し、トークンを ''Pathfinder'' に切り替えると '''HP''' の値は同じものが表示される。

==次のステップ==

&lt;div style=&quot;color:gray&quot;&gt;MapTool supports very elaborate properties and derived properties, with a number of math functions and operations. A couple of the most common ones you might want to use are (the examples are not necessarily part of MTRPG; they're just examples):&lt;/div&gt;

MaptTool はとても複雑なプロパティとたくさんの数学関数と演算能力を備えた連動プロパティをサポートしている。使ってみたくなるであろう機能の中でもっとも一般的なものを2、3紹介しよう（以下に上げる例はMTRPGのものとは限らず、ただの例である）：

&lt;div style=&quot;color:gray&quot;&gt;
* '''Basic math operators''': addition (+), subtraction (-), multiplication (*), and division (/)
** '''Example''': &lt;tt&gt;HitPoints: {Endurance * 6}&lt;/tt&gt;
* '''Rounding''': there are some ''functions'' to let you round numbers when you divide
** '''Floor''': the floor() function rounds ''down''. '''Example''': &lt;tt&gt;HitPoints:{floor(Constitution / 2)}&lt;/tt&gt; would divide Constitution by two, and round down
** '''Ceiling''': the ceil() function works like floor(), but rounds up. '''Example''': &lt;tt&gt;HitPoints:{ceil(Constitution/2)}&lt;/tt&gt;
&lt;/div&gt;

* '''基本的な数学の演算'''：足し算（+）、引き算（-）、掛け算（*）、割り算（/）
** '''例'''：&lt;tt&gt;HitPoints: {Endurance * 6}&lt;/tt&gt;
* '''数値を丸める'''：割り算の際、数値を丸めるためにいくつかの''関数''がある。
** '''切り捨てる'''：floor() 関数は端数を切り捨てる。'''例'''：&lt;tt&gt;HitPoints:{floor(Constitution / 2)}&lt;/tt&gt; Constitution を2で割り、端数を切り捨てる。
** '''切り上げる'''：ceil() 関数は floor() と同様に機能するが端数を切り上げる。'''例'''：&lt;tt&gt;HitPoints:{ceil(Constitution/2)}&lt;/tt&gt;
[[Category:MapTool]]
{{Languages|Introduction to Properties}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:sortInitiative</title>
    <ns>1</ns>
    <id>1075</id>
    <revision>
      <id>4219</id>
      <timestamp>2010-06-09T13:48:14Z</timestamp>
      <contributor>
        <username>Escounda</username>
        <id>101</id>
      </contributor>
      <comment>New page: Is there a way to sort the players with Initiative from the smallest to the biggest?  sortInitiative() could support this kind of argument!  Thx, --~~~~</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="199">Is there a way to sort the players with Initiative from the smallest to the biggest?

sortInitiative() could support this kind of argument!

Thx,
--[[User:Escounda|Escounda]] 13:48, 9 June 2010 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isVisible</title>
    <ns>0</ns>
    <id>1076</id>
    <revision>
      <id>7216</id>
      <parentid>4248</parentid>
      <timestamp>2019-03-06T22:09:14Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1532">{{MacroFunction
|name=isVisible
|version=1.3b69
|description=
Check whether a point on the map is visible from a token or not.
It returns 1 is the token is visible, 0 otherwise. This vision is based off of the impersonated token.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
isVisible(x,y)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
isVisible(x,y,id)
&lt;/source&gt;
'''Parameter'''
{{param|x|Then tokens x coordinate. Always in map units, not grid .}}
{{param|y|Then tokens x coordinate. Always in map units, not grid .}}
{{param|id|The check for visibility is performed from token {{code|id}}.  {{TrustedParameter}}
}}

|example=
A simple example for testing out {{code|isVisible()}}. Drop the default tokens &quot;Hero&quot; and &quot;Troll&quot; on a map. Make sure &quot;Hero&quot; has sight (make him PC or set sight manually). You can then execute the following code as a campaign macro to check if the Hero can see the Troll.
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- lets check if token1 can see token2 --&gt;
[h: token1 = &quot;Hero&quot;]
[h: id1 = findToken(token1)]

[h: token2 = &quot;Troll&quot;]
[h: id2 = findToken(token2)]

&lt;!-- get the map coordinates of token2 --&gt;
&lt;!-- i want to check if the center of the occupied cell can be seen --&gt;
&lt;!-- getTokenX/Y retrieves the top-left corner, so --&gt;
&lt;!-- in a 50 pixel grid the center is offset by 25 pixel --&gt;
[h: x = getTokenX(1, id2)+25]
[h: y = getTokenY(1, id2)+25]

&lt;!-- and final the check for visiblity --&gt;
[r:getName(id1)] &lt;b&gt;[r, if(isVisible(x,y, id1)): &quot;can&quot;; &quot;cannot&quot;]&lt;/b&gt; see [r:getName(id2)].
&lt;/source&gt;


}}
[[Category:Token Function]]</text>
      <sha1>9kdakhfhvvcnwmwrugit4f3k8205zc1</sha1>
    </revision>
  </page>
  <page>
    <title>getInfo</title>
    <ns>0</ns>
    <id>1077</id>
    <revision>
      <id>6190</id>
      <parentid>6184</parentid>
      <timestamp>2013-07-12T06:43:15Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>GM return value not yet added</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8418">{{MacroFunction
|name=getInfo
|version=1.3b69
|description=
Returns a [[JSON Object]] with lots of information about a specified topic.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getInfo(topic)
&lt;/source&gt;
'''Parameter'''
{{param|topic|A string specifying the topic of the retrieved information. Can be {{code|&quot;map&quot;}}, {{code|&quot;client&quot;}}, {{code|&quot;server&quot;}}, or {{code|&quot;campaign&quot;}}.}}

|examples=

===Retrieve {{code|map}} Information===

&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- print the JSON Object about the current map to the chat window --&gt;
&lt;pre&gt;
[r: json.indent(getInfo(&quot;map&quot;), 2)]
&lt;/pre&gt;
&lt;/source&gt;

Sample output:
&lt;pre&gt;map
{
  &quot;id&quot;: &quot;0A00010782897D2C3700000008000102&quot;,
  &quot;image y scale&quot;: 1,
  &quot;height&quot;: 0,
  &quot;largest Z order&quot;: 2,
  &quot;width&quot;: 0,
  &quot;name&quot;: &quot;Grasslands&quot;,
  &quot;creation time&quot;: 1276351711618,
  &quot;grid&quot;:     {
    &quot;cell offset height&quot;: 0,
    &quot;cell width&quot;: 50,
    &quot;color&quot;: &quot;ff000000&quot;,
    &quot;cell offset width&quot;: 0,
    &quot;units per cell&quot;: 5,
    &quot;cell height&quot;: 50,
   &quot;second dimension&quot;: 0,
    &quot;type&quot;: &quot;Square&quot;,
    &quot;x offset&quot;: 0,
    &quot;y offset&quot;: 0,
    &quot;size&quot;: 50
  },
  &quot;vision type&quot;: &quot;off&quot;,
  &quot;image x scale&quot;: 1,
  &quot;player visible&quot;: 1
}
&lt;/pre&gt;

===Retrieve {{code|client}} Information===

&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- print the JSON Object about client information to the chat window --&gt;
&lt;pre&gt;
[r: json.indent(getInfo(&quot;client&quot;), 2)]
&lt;/pre&gt;
&lt;/source&gt;

Sample output:
&lt;pre&gt;client
{
  &quot;movement metric&quot;: &quot;ONE_TWO_ONE&quot;,
  &quot;library tokens&quot;: {
    &quot;Lib:cifMacroIO&quot;: &quot;unknown&quot;
  },
  &quot;portrait size&quot;: 175,
  &quot;user defined functions&quot;: [
    &quot;getMacroGroups&quot;,
     &quot;redefined_1_getMacroGroups&quot;,
     &quot;l.decode&quot;,
     &quot;redefined_0_l.decode&quot;
  ],
  &quot;timeDate&quot;: &quot;2010-10-13 19:03:38&quot;,
  &quot;timeInMs&quot;: 1286989418105,
  &quot;show stat sheet&quot;: true,
  &quot;face vertex&quot;: 1,
  &quot;version&quot;: &quot;DEVELOPMENT&quot;,
  &quot;face edge&quot;: 1
}
&lt;/pre&gt;

'''Note:'''
The {{code|getInfo(&quot;client&quot;)}} function returns the names of all Lib: tokens. As a bonus if the Lib: token has a property called {{code|libversion}}, the value of this property will be reported as the value.

===Retrieve {{code|server}} Information===

&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- print the JSON Object about server information to the chat window --&gt;
&lt;pre&gt;
[r: json.indent(getInfo(&quot;server&quot;), 2)]
&lt;/pre&gt;
&lt;/source&gt;
{{ProposedChange|* '''1.3b90''' - Added value {{code|&quot;gm&quot;}} to {{code|server}} return value that holds an array of logged in game masters}}
Sample output:
&lt;pre&gt;server
{
  &quot;initiative owner permissions&quot;: 0,
  &quot;players can reveal&quot;: 0,
  &quot;movement locked&quot;: 0,
  &quot;tooltips for default roll format&quot;: 1,
  &quot;individual views&quot;: 0,
  &quot;players receive campaign macros&quot;: 0,
  &quot;strict token management&quot;: 0,
  &quot;restricted impersonation&quot;: 0
}
&lt;/pre&gt;

===Retrieve {{code|campaign}} Information===

&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- print the JSON Object about the campaign to the chat window --&gt;
&lt;pre&gt;
[r: json.indent(getInfo(&quot;campaign&quot;), 2)]
&lt;/pre&gt;
&lt;/source&gt;


Sample output:
&lt;pre&gt;campaign
{
    &quot;tables&quot;: [],
    &quot;initiative owner permissions&quot;: 1,
    &quot;id&quot;: &quot;C0A8001E7F7E199B0B0000008008001E&quot;,
    &quot;sight&quot;: {
	&quot;Darkvision&quot;: {
	    &quot;distance&quot;: 0,
	    &quot;arc&quot;: 0,
	    &quot;shape&quot;: &quot;CIRCLE&quot;,
	    &quot;type&quot;: 0,
	    &quot;multiplier&quot;: 1 },
	&quot;Normal Vision - Short Range&quot;: {
	    &quot;distance&quot;: 0,
	    &quot;arc&quot;: 0,
	    &quot;shape&quot;: &quot;CIRCLE&quot;,
	    &quot;type&quot;: 0,
	    &quot;multiplier&quot;: 1 },
	&quot;Normal&quot;: {
	    &quot;distance&quot;: 0,
	    &quot;arc&quot;: 0,
	    &quot;shape&quot;: &quot;CIRCLE&quot;,
	    &quot;type&quot;: 0,
	    &quot;multiplier&quot;: 1 },
	&quot;Square Vision&quot;: {
	    &quot;distance&quot;: 0,
	    &quot;arc&quot;: 0,
	    &quot;shape&quot;: &quot;SQUARE&quot;,
	    &quot;type&quot;: 0,
	    &quot;multiplier&quot;: 1 },
	&quot;Lowlight&quot;: {
	    &quot;distance&quot;: 0,
	    &quot;arc&quot;: 0,
	    &quot;shape&quot;: &quot;CIRCLE&quot;,
	    &quot;type&quot;: 0,
	    &quot;multiplier&quot;: 2 },
	&quot;Conic Vision&quot;: {
	    &quot;distance&quot;: 120,
	    &quot;arc&quot;: 120,
	    &quot;shape&quot;: &quot;CONE&quot;,
	    &quot;type&quot;: 0,
	    &quot;multiplier&quot;: 1 }
    },
    &quot;initiative movement locked&quot;: 1,
    &quot;light sources&quot;: {
	&quot;D20&quot;: [
	    {
		&quot;name&quot;: &quot;Lantern, Hooded - 30&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 30,
			&quot;shape&quot;: null },
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: {&quot;color&quot;:1677721600},
			&quot;radius&quot;: 60,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 60 },
	    {
		&quot;name&quot;: &quot;Candle - 5&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 5,
			&quot;shape&quot;: null },
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: {&quot;color&quot;:1677721600},
			&quot;radius&quot;: 10,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 10 },
	    {
		&quot;name&quot;: &quot;Lamp - 15&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 15,
			&quot;shape&quot;: null },
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: {&quot;color&quot;:1677721600},
			&quot;radius&quot;: 30,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 30 },
	    {
		&quot;name&quot;: &quot;Torch - 20&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 20,
			&quot;shape&quot;: null },
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: {&quot;color&quot;:1677721600},
			&quot;radius&quot;: 40,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 40 },
	    {
		&quot;name&quot;: &quot;Sunrod - 30&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 30,
			&quot;shape&quot;: null },
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: {&quot;color&quot;:1677721600},
			&quot;radius&quot;: 60,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 60 },
	    {
		&quot;name&quot;: &quot;Everburning - 20&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 20,
			&quot;shape&quot;: null },
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: {&quot;color&quot;:1677721600},
			&quot;radius&quot;: 40,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 40 } ],
	&quot;Generic&quot;: [
	    {
		&quot;name&quot;: &quot;5&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 5,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 5 },
	    {
		&quot;name&quot;: &quot;40&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 40,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 40 },
	    {
		&quot;name&quot;: &quot;20&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 20,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 20 },
	    {
		&quot;name&quot;: &quot;60&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 60,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 60 },
	    {
		&quot;name&quot;: &quot;15&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 15,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 15 },
	    {
		&quot;name&quot;: &quot;30&quot;,
		&quot;light segments&quot;: [
		    {
			&quot;GM&quot;: false,
			&quot;arcAngle&quot;: 360,
			&quot;facingOffset&quot;: 0,
			&quot;ownerOnly&quot;: false,
			&quot;paint&quot;: null,
			&quot;radius&quot;: 30,
			&quot;shape&quot;: null } ],
		&quot;type&quot;: &quot;NORMAL&quot;,
		&quot;max range&quot;: 30 } ] },
    &quot;bars&quot;: {
	&quot;no group&quot;: [
	    {
		&quot;increment&quot;: 0,
		&quot;side&quot;: &quot;TOP&quot;,
		&quot;name&quot;: &quot;Health&quot; } ] },
    &quot;states&quot;: {
	&quot;no group&quot;: [
	    &quot;Incapacitated&quot;,
	    &quot;Disabled&quot;,
	    &quot;Other2&quot;,
	    &quot;Other&quot;,
	    &quot;Other3&quot;,
	    &quot;Prone&quot;,
	    &quot;Hidden&quot;,
	    &quot;Dead&quot;,
	    &quot;Other4&quot; ] },
    &quot;remote repository&quot;: [],
    &quot;zones&quot;: {
	&quot;Grasslands&quot;: &quot;C0A8001E7E7F199B0C0000008008001E&quot; }
}
&lt;/pre&gt;

|changes=
* '''1.3b70''' - Added &quot;{{code|campaign&quot;}} option for {{code|topic}}
* '''1.3b76''' - Added values {{code|&quot;timeInMS&quot;}} and &quot;{{code|timeDate&quot;}} to both {{code|client}} and {{code|server}} return values
{{ProposedChange|* '''1.3b90''' - Added value {{code|&quot;gm&quot;}} to {{code|server}} return value that holds an array of logged in game masters}}
}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Vision Blocking/ja</title>
    <ns>0</ns>
    <id>1078</id>
    <revision>
      <id>4271</id>
      <parentid>4270</parentid>
      <timestamp>2010-06-16T17:27:30Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <comment>/* VBL Limitations */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26279">{{Languages|Introduction to Vision Blocking}}{{#customtitle:はじめての遮光域|はじめての遮光域}}{{Translation}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}__TOC__

==遮光域（Vision Blocking）==

&lt;div style=&quot;color:gray&quot;&gt;In MapTool, [[Token:token|tokens]] can be given [[Introduction to Lights and Sights|sight]], which lets the program model vision and lighting in-game. In other words, when you configure the token with vision, it can then &quot;see&quot; other tokens and areas of the map. In addition, MapTool provides for [[Introduction to Lights and Sights|lighting]] - so a token can &quot;see&quot; only to the extent of its light source (or nearby light sources) - and Vision Blocking, which lets you establish boundaries to the token's visual range (so you can indicate where the walls are in a dungeon, for instance). &lt;/div&gt;

MapTool では、[[Token:token|トークン]]にプログムラムがゲーム内での視覚と照明を再現した[[Introduction to Lights and Sights|視界]]を与えることができる。つまり、トークンが視覚を持つように設定することで、他のトークンやマップの範囲を「見る」ことが可能となる。さらに、MapTool は照明の機能（トークンは光源の及ぶ範囲や光源の近くでなければ「見る」ことはできない）と遮光域の機能（トークンの視程を遮る境界を設置できる。この機能によりダンジョンの壁を再現することが可能だ）を備えている。

&lt;div style=&quot;color:gray&quot;&gt;This introductory element will briefly review the Vision Blocking Layer tools in MapTool (sometimes also called ''topology'' tools), and how to use them to create a sample dungeon environment. Remember, Vision Blocking is intimately connected to the '''Sight''', '''Light''', and '''Fog of War''' features of MapTool, so once you've read this tutorial, go check out the [[Introduction to Lights and Sights]] and see how it all works together!&lt;/div&gt;

このガイドでは MapTool の遮光域レイヤー・ツール（''地形学''ツールとも言う）について簡単に紹介し、この機能を使いサンプルのダンジョンの環境を作る方法を紹介する。重要なことだが、遮光域機能は'''視界（Sight）'''、'''照明（Light）'''、'''不明領域（Fog of War）'''の各機能と密接に関係している。理解を深めるために [[Introduction to Lights and Sights]] を併せて読むことをお勧めしよう!

===手始めにマップを用意する===

[[Image:samp-dungeon.png|thumb|サンプル・ダンジョン]]

&lt;div style=&quot;color:gray&quot;&gt;To start off, we'll need a map of a dungeon. Somewhere suitably subterranean and dank, full of twisty little passages, all alike.&lt;/div&gt;

さて、はじめる前に我々にはマップが必要だ。じめじめとしていて、何か出そうで、くねくねとした小さな通路に満ちあふれた、何の変哲も無いソレが転がってないだろうか？

&lt;div style=&quot;color:gray&quot;&gt;Well, maybe we won't get too crazy with the mazes of twisty passages. Created using an [http://forums.rptools.net/viewtopic.php?f=34&amp;t=7418 awesome tileset] created by Jonathan Roberts (Torstan on the [http://forums.rptools.net RPTools Forums]), the map shown to the right will be used for the examples in this introductory tutorial.&lt;/div&gt;

まあ、別にアホほど曲がりくねった迷路を探す必要はない。右に見えるマップをこのチュートリアルの実例として使用していこう。このマップは Jonathan Roberts ([http://forums.rptools.net RPTools Forums] では Torstan として出会える）の作った[http://forums.rptools.net/viewtopic.php?f=34&amp;t=7418 見事なタイルセット]を使って作り上げたものである。

==遮光域ツールを有効にする==

[[Image:Vbl-toolbar-btn.png|thumb|遮光域ツールバー・ボタン]]

[[Image:Vbl-tools.png|thumb|遮光域ツール。遮光域ツールバー・ボタンをクリックすることで有効になる]]

&lt;div style=&quot;color:gray&quot;&gt;To activate the Vision Blocking Tools, click on the &quot;Eye&quot; icon in the MapTool toolbar. (eye icon screenshot). When you do so, a new set of buttons will appear - these are the various Vision Blocking drawing tools you can use. If you hover over them, a tooltip will pop up explaining what each one does. From left to right, they are:&lt;/div&gt;

遮光域ツールを有効にするには、MapTool のツールバーにある「目」のアイコンをクリックする（スクリーンショット参照）。そうすることで、新しいボタンの集まりが表示される。このボタンの集まりは遮光域を描画するためのさまざまなツールだ。ボタンの上にマウスカーソルをかざすことでそれぞれの機能を説明するツールチップが表示される。各ボタンは左からそれぞれ：

&lt;div style=&quot;color:gray&quot;&gt;
* '''Draw a Rectangular VBL''': this creates solid rectangular areas that block vision (these are generally called Vision Blocking Layers, or &quot;VBL&quot; for short). . Tokens outside the area cannot see into it or through it; tokens inside the area cannot see anything at all (it is solid and opaque).
* '''Draw a Hollow Rectangular VBL''': this, as it implies, creates hollow VBL - if a token is ''inside'' the area, they will see everything inside it, but will not be able to see ''beyond'' the boundary; for tokens outside the VBL area, they will see everything outside, but cannot see ''into'' the rectangular area.
* '''Draw a Circular VBL''': like the rectangular one, this creates a circular (in reality, a polygon approximating a circular area; actual circular curves are performance-intensive!) VBL
* '''Draw a Hollow Circular VBL''': behaves like the hollow rectangle
* '''Draw Closed Poly Line VBL''': this lets you draw an arbitrary polygonal shape using line segments, and when finished, closes it and makes a solid VBL out of it. To start the polyline shape, left-click on the map, and draw the first segment. To attach the next segment, ''right-click'' and move the mouse to create the next line segment. When finished with the full shape, left-click to close it.
* '''Draw Poly line VBL''': as above, but creates a hollow polygon
&lt;/div&gt;

* '''長方形遮光域を描画'''：視覚を遮る塗りつぶされた長方形（遮光域と呼ばれている物）を 描画する。この範囲の外側にいるトークンは範囲の内側や向こう側は見えない。範囲の内側にいるトークンは何も見えなくなる（この中は不透明で隙間なく塗りつぶされている）
* '''枠状の長方形遮光域を描画'''：遮光域の囲いを描画する。描画された範囲の''内側''にいるトークンは内側にあるものをどれでも見ることができるが、境界線を越えた向こう側は見ることができない。遮光域の外側にいるトークンは、外側にあるものを見ることができるが、長方形の内側を見ることはできない。
* '''円形遮光域を描画'''：長方形の物と同様であるが、こちらは円形の遮光域（正確には、円に近似する多角形である。正確な円は処理速度に影響してしまう!）を描画する。
* '''枠状の円形遮光域を描画'''：円形であることを除いて「塗りつぶされてない長方形の遮光域」と同じ物だ。
* '''多角遮光域を描画'''：直線を繋いで自由な多角形を描画し、描き終えると図形を閉じて塗りつぶされた遮光域を作る。多角形を描き始めるにはマップ上で左クリックをし、最初の線分を描画する。次の直線を繋げて描画するには''右クリック''して次の線分を描画するためにマウスを動かす。多角形が完成したら左クリックして図形を閉じる。
* '''折れ線遮光域を描画''': 上記と同じだが、枠線のみの遮光域を描画する。

===模範的な使い方===

&lt;div style=&quot;color:gray&quot;&gt;Vision blocking and vision processing is processor-intensive, and overuse of (or overly-complex) VBL can cause serious performance issues with MapTool - slowdowns, inability to navigate a map, and so forth. Some rules of thumb:&lt;/div&gt;

遮光域と視覚は処理速度に影響を与え、遮光域を過度に使用すること（又は過度な複雑に使うこと）は MapTool に処理速度の低下、マップの制御不能など、さまざまな不具合を引き起こすことになる。次のことを守っていればまず大丈夫だろう：

&lt;div style=&quot;color:gray&quot;&gt;
# '''Use square VBL wherever possible''' - and minimize the use of circular or highly irregular VBL
# '''Use solid VBL wherever possible''' - this prevents gaps between polylines, which can be performance hogs. Instead, cover the map with VBL, and cut out the areas that the tokens should be able to see.
# '''Use as little VBL as necessary to get the effect you seek''' - make it efficient!
# It is frequently a good idea to set up a vision boundary at the edges of the play area on your map - maps in MapTool are theoretically infinitely sized, but if your tokens are going to be only in the dungeon area, there's no reason for MapTool to have to be calculating what they see all the way out to the edge of the universe.
&lt;/div&gt;

# '''可能な限り長方形の遮光域を用いる''' - 円形や複雑な形状の遮光域の使用は最小限にとどめる。
# '''可能な限り塗りつぶされた遮光域を用いる''' - 線と線の間に生じる隙間は処理速度に大きな影響を与えるが、こうすることで防ぐことが可能だ。むしろマップを遮光域で覆いつくし、トークンが動き回る範囲だけ切り取るようにすべきだ。
# '''狙った効果を再現するのに必要な最低限の数だけ遮光域を使用する''' - 無駄なく効率的に!
# マップの中でゲームで使う範囲を遮光域で囲むことは、よく使われるよく有る冴えたやり方だ。理論上、MapTool のマップは無限の広さを持っているが、結局のところ君のトークンはダンジョンに潜ってしまうので、世界の果てまでの視覚計算をする必要はどこにもないのだ。

&lt;div style=&quot;color:gray&quot;&gt;These will help keep performance from bogging down. You ''can'' use the other kinds of VBL, but simply be aware of how complex your vision blocking setup is getting.&lt;/div&gt;

以上のことは煩わしい処理落ちを防ぐ助けとなるだろう。君はあらゆる種類の遮光域を''使用することができる''が、構築した遮光域の複雑さには気をつけるように。

==サンプルマップに遮光域レイヤーを配置する==

&lt;div style=&quot;color:gray&quot;&gt;Now, to add some vision blocking to the map. We will use a recommended technique, which is to cover the entire map with a solid block of VBL, and then &quot;cut out&quot; of that block the areas that the players will see. &lt;/div&gt;

ではマップに遮光域を追加してみよう。ここでは、マップ全体を塗りつぶされた遮光域で覆い、プレイヤーが探索する予定の範囲を「くり抜く」、という推奨された方法を使用する。

===ダンジョン全体を塗りつぶされた遮光域で覆う===

[[Image:Vbl-map-zoomed-extents.png|thumb|ダンジョン全体を見渡せるまで縮小]]

[[Image:Vbl-createsolidvbl.png|thumb|ダンジョン全体を覆うように塗りつぶされた遮光域を作成]]

&lt;div style=&quot;color:gray&quot;&gt;
# Zoom the map so you can see the whole thing.
# Select the Draw a Rectangular VBL button.
# Left-Click to place the upper-left corner of the solid VBL. Do not hold down the left-mouse button.
# Drag the mouse to define the size of the VBL. You'll see it traced out in a transparent red color as you drag.
# Click the left mouse button again to place the lower-right corner of the VBL. The VBL will turn blue (if you go to the toolbar and select one of the other tools on the left side - switching off the VBL tools - the blue VBL indicators will disappear. They are only visible when the VBL tools are active).
&lt;/div&gt;

# 全体が見渡せるまでマップの表示を縮小する
# 「長方形遮光域を描画（Draw a Rectangular VBL）」のボタンを選択
# 塗りつぶされた遮光域の左上角に当る地点を左クリック。マウスの左ボタンは押したままにせず離す。
# マウスを動かして遮光域のサイズを決定する。マウスの移動に従い半透明の赤い長方形が描かれていくはずだ。
# 遮光域の右下角に当る地点でマウスを左クリック。遮光域は青色に着色されるはずだ。（ここでツールバーの左側から他のツールを選ぶと、遮光域ツールが非表示になり、青い遮光域レイヤーが消えたように見える。遮光域の図形は遮光域ツールが有効な時のみ表示される）

[[Image:Vbl-complete-cover.png|thumb|塗りつぶされた遮光域で全体を覆われたダンジョン]]

&lt;div style=&quot;color:gray&quot;&gt;You've now covered the entire map with VBL. If a token was placed outside that area, and had a &quot;sight&quot; setting active, it would not be able to see into that area.&lt;/div&gt;

これでマップ全体を遮光域で覆いつくした。「視界」の設定を有効にしてトークンをこの遮光域の外側に配置した場合、この範囲の中を見ることはできなくなる。

===遮光域の塗りつぶしから表示する範囲をくり抜く===

[[Image:Vbl-erasingvbl.png|thumb|遮光域より選択範囲を消去。CTRLキーを同時に押すことでマップ・グリッドに吸着する。]]

&lt;div style=&quot;color:gray&quot;&gt;Now, we cut out the rooms. This process is a bit trickier - to keep the VBL efficient, make sure you get the edges lined up as best you can and you don't leave any narrow gaps or thin lines of VBL between rooms (a trick to doing this is in the instructions below). For this part, I will be clearing all VBL, out to the outer walls. We will work on the interior walls later.&lt;/div&gt;

次は部屋をくり抜いていこう。この行程は少しばかりコツが要る。遮光域の効率を保つため、可能な限り最良の稜線を引いているか、部屋と部屋の間に細い隙間や遮光域の細い線が残っていないか確認すること（上手くやるコツは後述）。この行程では、外周の壁に沿って内側の遮光域を取り除く予定だ。内部の壁に付いては後ほど案内しよう。

&lt;div style=&quot;color:gray&quot;&gt;
# Zoom the map until you are comfortable with the zoom level.
# Select the Draw a Rectangular VBL tool.
# Hold down the Shift key, and left-click to mark the upper-left corner of the area of VBL you want to erase. A white, transparent box will follow the mouse cursor (if it's not white, you forgot to hold shift!)
# Drag the mouse until you've reached where you want the lower-right corner of the cleared area to be, and left-click. The blue VBL will disappear. You have now erased the VBL for that area, and tokens in that area would be able to see (their vision would be blocked, of course, once it reached any VBL!).
# Repeat this process for the rest of the rooms, tunnels, and so forth.
&lt;/div&gt;

# 作業しやすい大きさになるようマップを拡大する。
# 「長方形遮光域を描画（Draw a Rectangular VBL）」ツールツールを選択。
# シフトキーを押しながら、消去したい遮光域の左上角に当る部分をクリックする。マウスの動きに伴い半透明の白い矩形が描画される。（シフトキーを押し忘れ ていると白くならない!）
# 消去したい範囲の右下角までマウスを動かし、左クリックすると、青い遮光域が消去される。この範囲の遮光域がなくなったので、ここに配置したトークンはこの場所を見ることができるようになる（もちろん、遮光域の向こう側を見ることはできない）。
# まだ残っている部屋やトンネルなどを、同じ作業を繰り返して作っていく。

[[Image:Vbl-erased.png|thumb|ダンジョンの全部屋の形状にくり抜かれた遮光域]]

&lt;div style=&quot;color:gray&quot;&gt;Afterwards, you'll have a large blue area, with the dungeon &quot;cut out&quot; inside it.&lt;/div&gt;

作業を終えると、ダンジョン型に「くり抜かれた」大きな青い図形が出来上がる。

&lt;div style=&quot;color:gray&quot;&gt;'''TIP''': if you hold down Ctrl while you trace your VBL, it will snap to the gridlines of the map. This is very useful for aligning VBL. I used this technique to erase the VBL on the sample map, because it makes the VBL align easily and squarely on the dungeon walls.&lt;/div&gt;

'''ヒント'''：遮光域を編集するときにCTRLキーをを押すことでマップのグリッドに吸着するようになる。この機能は遮光域をきれいに描くのにとても役に立つ。このテクニックは遮光域をダンジョンの壁に沿って簡単に四角くくり抜ことができるので、前述のサンプルマップで遮光域をくり抜くのに使用している。

===室内の遮光域===

[[Image:Vbl-polyline-wall.png|thumb|多角遮光域ツールを使用し、壁沿いに遮光域を描画]]

&lt;div style=&quot;color:gray&quot;&gt;Finally, we will put VBL on the interior walls. This will make it so that the walls ''inside'' the dungeon block vision too.&lt;/div&gt;

最後に、室内の壁に遮光域を作ろう。これでダンジョン内の壁が視覚を妨げるようになる。

&lt;div style=&quot;color:gray&quot;&gt;
# Zoom the map to focus on a particular wall.
# Select the &quot;Draw Polyline VBL&quot; tool.
# Hold down Ctrl, and left-click on the map to place the beginning of the line segment. I recommend starting the line somewhere in the solid VBL, so that there are no gaps at the edges of the walls.
# Drag the mouse to draw the line segment. (in the screenshot, the line segment is the thin red line inside the yellow circle; the yellow circle was drawn on the screenshot to show you where the polyline is - it's not part of the VBL process)
# Left-click to place the end of the line segment. The red line will turn blue, indicating that there is VBL now on that wall.
# Repeat the process for the other walls, until you are satisfied.
&lt;/div&gt;

# 作業対象の壁が中心になるようにマップを拡大する。
# 「折れ線遮光域の描画（Draw Polyline VBL）」ツールを選択。
# マップ上の線分を引き始める場所をCTRLキーを押しながら左クリック。壁の付け根に隙間が生じないように遮光域の塗りつぶされたところから線を引き始めると良いだろう。
# マウスを動かし線分を描く。（スクリーンショットでは、黄色い丸の中の赤い細線。黄色い丸は折れ線を示すためにスクリーンショット上に描かれた物で、遮光域を描く作業中に表示されるわけではない）
# 線分の終点にする場所を左クリック。赤かった線はお会い線に替わり、壁の遮光域を表している。
# あとは満足のいくまで壁を描く作業を繰り返す。

===遮光域とオブジェクト===

&lt;div style=&quot;color:gray&quot;&gt;There are lots of objects in a dungeon that can block vision - doors, pillars, piles of rubble, chests...you name it. It is possible to draw VBL anywhere on a map - however, at this time, VBL is not linked to particular objects. This means that you can't, for instance, put VBL on a door and have it &quot;open&quot; with the door when your players open it. You can simulate this by deleting the VBL that crossed the doorway, but you can't have the VBL automatically move with an object. &lt;/div&gt;

ダンジョンの中には、扉、柱、瓦礫の山、宝箱、など数え上げればきりがないほど視覚を遮るオブジェクトが山ほどある。マップ上に遮光域を描けば視覚を遮ることはできるが、現状では遮光域はオブジェクトに連動していない。つまり、扉の上に遮光域を置いてもプレイヤーが扉を開けると同時に遮光域を動かすことはできないということだ。扉の入口に重なる遮光域を消すことで再現することはできても、オブジェクトの移動に併せて遮光域を自動的動かすことはできないのだ。

&lt;div style=&quot;color:gray&quot;&gt;You'll have to experiment with the VBL for the objects in your dungeon, but here are some tips:&lt;/div&gt;

いずれダンジョンの中でオブジェクト用の遮光域を作らざるを得なくなるであろうが、いくつか参考となるコツを教えよう：

&lt;div style=&quot;color:gray&quot;&gt;
* '''Doors''': for doors, if they are closed, simply draw the VBL along the wall in which the door sits. When (if) the door is ever opened, you can rotate the door object, and use Solid Rectangular VBL to erase the vision blocking layer that covered the doorway (remember, hold down Shift to erase VBL). Make sure to use ''solid'' VBL - if you use a hollow rectangle, it will only erase where the hollow rectangle's boundary intersects the other VBL.
&lt;/div&gt;

* '''扉'''：扉の場合、閉じているのであれば単に壁に沿って扉がある部分に遮光域を描けば良い。扉が開けられたのであれば、扉のオブジェクトを回転させ、塗りつぶし長方形遮光域を使って扉の入口に当る部分にある遮光域を消去すれば良い（遮光域を消すにはシフトキーを押すことを忘れないように）。枠状の長方形遮光域のを使うと枠線が他の遮光域と重なる部分だけが消去されて使い物ならないので、''塗りつぶし''遮光域を使うよう気をつけてくれ。

[[Image:Vbl-drawx.png|thumb|柱、石像のようなオブジェクトによく使われる「×」印の遮光域]]

&lt;div style=&quot;color:gray&quot;&gt;
* '''Pillars, statues, and standing objects''': remember that, when you use VBL, the tokens cannot see into or through it at all (and, because of this, the ''players'' won't see anything covered by or hidden inside VBL on their screens). If you want the players to be able to see some of an object - like a large pillar - one of the recommended tricks is to draw an &quot;X&quot; on the pillar using poly line VBL (instead of covering the whole pillar with a circular or rectangular solid VBL. Using an X means that the players can see some of the pillar, depending on where their tokens are. It makes for a much nicer look. If you look at the screenshot, you'll see an &quot;X&quot; drawn using VBL on top of one of the barrels.
&lt;/div&gt;

* '''柱、石像など柱状のオブジェクト'''：遮光域を使用時、トークンは遮光域の中も向こう側も見ることができない（そのため''プレイヤー''の画面上でも遮光域で隠されたり妨げられているものを見ることはできない）ことを覚えているだろうか。プレイヤーにあるオブジェクトを見せようとしたとき（例えば大きな柱）、（柱を囲うように円形や長方形の塗りつぶし遮光域を使う替わりに）折れ線遮光域を使い柱の上に「×」印を描くことをおすすめする。「×」印を使うことで、トークンの場所により形は変わるがプレイヤーは柱の一部を見ることができる。これならいくらかマシな表示であろう。スクリーンショットをよく見たのなら、1つの樽の上に「×」印の遮光域が描かれていることに気付くだろう。

==遮光域の制限==

&lt;div style=&quot;color:gray&quot;&gt;The Vision Blocking Layer in MapTool is a tool for helping to simulate what a character can see during a game. However, it does have limitations, and doesn't &quot;completely simulate vision&quot; or anything like that. We touched on one limitation earlier, the fact that VBL cannot be attached to specific objects, and so if you open a door that is covered by VBL - the door object might move, but the VBL stays put. Here are a couple other limitations of the current (as of MapTool 1.3.b56) Vision Blocking Tools.&lt;/div&gt;

MapTool の遮光域レイヤーはゲームの中でキャラクターの視界を再現するツールだ。しかし、制限が有り、視覚を完全に再現するものではない。これまでに制限の1つに触れた。特定のオブジェクトに遮光域を付属させることはできない。そのため、遮光域に妨げられている扉を明けた場合、扉のオブジェクトは動かせても、遮光域はその場にとどまったままである。以下に遮光域ツールの現在の制限（MapTool 1.3.b56）を上げておく：

&lt;div style=&quot;color:gray&quot;&gt;
* '''Vision Blocking is Binary''': VBL in MapTool is on or off. There is no &quot;partially transparent&quot; or &quot;one way&quot; VBL in the current version of MapTool.
* '''Vision Blocking is Total''': Related to the above, VBL blocks all forms of vision. There are no vision types currently that can see through VBL.
* '''Vision Blocking has no Elevation''': VBL cannot at this point be given a particular height - it stretches to infinity, up and down, and so there's no way to set up VBL so a tall character can see &quot;over&quot; it
&lt;/div&gt;

* '''遮光域はオン／オフいずれか'''：MapToolの遮光域は「ある」か「ない」かだ。「半透明」や「一方通行」の遮光域は現状の MapTool には存在しない。
* '''遮光域は全て遮る'''：上記に関連するが、遮光域は全ての種類の視覚を遮る。いかなる種類の視覚も現状の MapTool では遮光域を見通すことはできない。
* '''遮光域は高度を持たない'''遮光域は特定の高さを持たない。つまり上にも下にも無限の長さを持っており、背の高いキャラクターが遮光域の向こう側を「見渡せる」ようにすることはできない。

{{Languages|Introduction to Vision Blocking}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Lights and Sights/ja</title>
    <ns>0</ns>
    <id>1079</id>
    <revision>
      <id>4294</id>
      <parentid>4293</parentid>
      <timestamp>2010-06-19T20:28:41Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <comment>/* 視覚モードと視界 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="42713">{{Languages|Introduction to Lights and Sights}}{{#customtitle:はじめての照明と視界|はじめての照明と視界}}{{Translation}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}

==照明とは、視界とは==

&lt;div style=&quot;color:gray&quot;&gt;MapTool offers three features that help to simulate the idea that when a character is adventuring in an environment, they are not always granted an &quot;ominiscient view&quot; of the entire area - they can't see through walls, around corners, or into the depths of dark dungeons. This is a difficult thing to simulate when playing face to face, but with a computer, it becomes possible to restrict a character's vision to what they might actually see - thus raising the tension and possibly the immersion of the game. The three features that MapTool offers are '''Sight''', '''Light''', and '''Fog of War'''. &lt;/div&gt;

MapTool はキャラクターが環境の中で冒険するとき、それを再現するのに役立つ3つの機能を提供する。キャラクターは必ずしも世界を見渡す「神の目」を持って要るとは限らない。彼らは壁を透視することはできず、曲がり角の先や暗闇の洞窟の深部を見通すこともできない。このことをテーブルの上で再現することは難しいが、コンピューターを使用すればキャラクターが実際に見ているであろう視覚を正確に再現することが可能になる。それゆえに、ゲームのより高い緊張感と集中力を得ることになるであろう。MapTool の提供する3つの機能とは、'''視界'''、'''照明'''、そして'''不明領域'''のことだ。

===視界（Sight）===

&lt;div style=&quot;color:gray&quot;&gt;Sight is the ability for a [[Token:token|token]] to &quot;see&quot; its surroundings - in this case, what a player's token can &quot;see&quot; becomes visible to the player on their instance of MapTool (the GM can always see everything on the map; players, on the other hand, can be limited in what they see by things like [[Introduction to Vision Blocking|Vision Blocking Layers]], light, and [[Introduction to Fog of War|Fog of War]]). This makes for a more immersive game, as players will wonder &quot;What's around that corner?&quot; and, &quot;I hope my torch doesn't burn out...it's dark in this dungeon!&quot;&lt;/div&gt;

視界とは[[Token:token|トークン]]が周囲を見渡す能力のことだ。この場合、「トークンの周囲を見る能力」というのは、そのトークンを扱うプレイヤーの MapTool 上に表示されるということである（GMは常にマップ上の全ての物を見ることができる。一方のプレイヤーは[[Introduction to Vision Blocking/ja|遮光域レイヤー]]、照明、[[Introduction to Fog of War|不明領域]]などにより限られた範囲しか見ることができない）。このことはゲームにより高い臨場感をもたらし、プレイヤー達も「曲がり角の先には何があるのだろう？」、「松明よ、燃え尽きないで…ダンジョンは真っ暗なんだ!」と驚きもひとしおだろう。

===照明（Light）===

&lt;div style=&quot;color:gray&quot;&gt;Light is a feature that allows tokens and objects to cast &quot;light&quot; over a certain area, illuminating it. This means that in a dark dungeon, torches on the walls can illuminate small areas of the dungeon (removing/erasing any Fog of War that might cover that area) and be seen by the players (in other words, the area illuminated by the light source becomes visible to the players, assuming that the player's token has sight, and there is no VBL in the way). &lt;/div&gt;

照明とは、トークンやオブジェクトに周囲を照らす「光」を与える機能のことだ。壁に掲げられた松明はダンジョンの一部を照らし（灯りの照らす範囲の不明領域を取り除く）、その場所はプレイヤーに見えるようになる（つまり、プレイヤーのトークンが視界を持っており、遮光域が光を阻まないのであれば、光源に照らされた範囲をプレイヤーが見ることが可能になる）。

&lt;div style=&quot;color:gray&quot;&gt;Light is critical when a map is using &quot;Night&quot; mode for vision, since without light, a token is stuck in the pitch black!&lt;/div&gt;

照明は、マップの視覚モードを「夜」にした場合、非常に重要な物となる。照明が無ければ真っ暗闇の中で途方に暮れるしかない。

===不明領域（Fog of War）===

&lt;div style=&quot;color:gray&quot;&gt;Fog of War is a system that represents what a token has seen as it is moved about the Map, and what part of the map or environment the token can directly see at that time. Fog of War should '''not''' be confused with shadows or darkness. You can have Fog of War on a Map that has no light or vision mode active at all. &lt;/div&gt;

不明領域とは、マップ上を探索する中でトークンが目にしてきたマップの一部や状況を再現するシステムだ。不明領域は影や暗部と違う物なので混同しないように。不明領域は照明や視覚モードを無効にしているマップに使用できる。

&lt;div style=&quot;color:gray&quot;&gt;When a token with sight &quot;sees&quot; into an area of Fog of War, the Fog is erased, letting the player see the map that was hidden beneath the opaque Fog of War. When an area that a token ''has'' seen is no longer ''directly'' visible to the token, the opaque Fog of War (the &quot;Hard Fog&quot;) is replaced by a semitransparent Fog (called &quot;Soft Fog&quot;). This is a visual reminder that the player ''has'' seen that area, but cannot see it ''right now.'' Any token in the Soft Fog is hidden from the character just as if it were in Hard Fog.&lt;/div&gt;

不明領域のある部分をトークンが「見た」とき、その部分を覆っていた不明領域が取り払われて、隠されていたマップの一部がプレイヤーに見えるようになる。一度不明領域が取り払われたが、その後トークンが去って今は直接見ていない部分は、完全な不明領域（Hard Fog）ではなく半透明の不明領域（Soft Fog）に置き換える。これはプレイヤーが''既に見た''部分を覚えておくためのもので、''今見ている''わけではない。半透明の不明領域内にいるトークンは、完全な不明領域にいるトークンと同じようにキャラクターからは見えなくなっている。

&lt;div style=&quot;color:gray&quot;&gt;&lt;p align=&quot;center&quot;&gt;'''Remember''': ''Fog of War simply indicates what area of the maps have been directly seen by a token.''&lt;/p&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;'''大事なこと'''：''不明領域とはトークンが直接目にしていないマップの範囲のことを指す。（訳注：未踏か探索済みかは関係ないということ）''&lt;/p&gt;

&lt;div style=&quot;color:gray&quot;&gt;Fog of War is a sufficiently complex discussion on its own that - even though it is intimately connected with light and sight - it deserves its own brief, but separate, tutorial. Check out [[Introduction to Fog of War]] to get details and screenshots on using Fog of War in your games.&lt;/div&gt;

不明領域とてもややこしく、「照明と視界」に深く関わっているが独立したチュートリアルがあるべきだろう。不明領域をゲームに取り入れるために詳しい内容を [[Introduction to Fog of War]] から学ぶと良いだろう。

==サンプル・ダンジョン==

[[Image:samp-dungeon.png|thumb|このチュートリアルで使用するサンプル・ダンジョン]]

&lt;div style=&quot;color:gray&quot;&gt;A sample dungeon is used for all of the screenshots and examples in this tutorial (and in the [[Introduction to Vision Blocking]]). A screenshot of the sample dungeon is shown at right; you can also download the Campaign File for this dungeon [[here]].&lt;/div&gt;

サンプル・ダンジョンは、このチュートリアルのスクリーンショットと実例で使うものだ（[[Introduction to Vision Blocking/ja|はじめての遮光域]]でも使っている）。サンプル・ダンジョンのスクリーンショットは右にある。また[[here|ここ]]からこのダンジョンのキャンペーンファイルをダウンロードすることもできる。

==視界の種類と光源を設定する==

&lt;div style=&quot;color:gray&quot;&gt;Both Sight Types and Light Sources are configured from the Campaign Properties window, under the Sight and Light tabs. To open the Campaign Properties dialog, go to '''Edit &gt; Campaign Properties.'''
&lt;/div&gt;
視界の種類と光源は、いずれもキャンペーンプロパティ・ウィンドウの Sight（視界）タブと Light（光源）タブのもとで設定する。キャンペーンプロパティのダイアログを表示するには '''Edit → Campaign Properties''' を選択する。

===視界の種類===

[[Image:cprops-sighttab.png|thumb|キャンペーンプロパティ・ダイアログの Sight タブ]]

&lt;div style=&quot;color:gray&quot;&gt;The Sight Types tab lets you set up different kinds of &quot;sight&quot; (such as low-light, or darkvision/infrared, or normal vision, and so forth). MapTool has some default sight types set up when you first open it. If you look at the sight tab, you'll see the following:&lt;/div&gt;

視界の種類のタブではさまざまな種類の「視界」を設定できる（夜目、暗視、赤外線視覚、通常の視覚などなど）。MapTool では始めからいくつかの視界を用意してある。Sight タブには下記と同じものが用意されている：

 Conic Vision: cone arc=120 
 Normal Vision - Short Range: circle distance=10.0 
 Lowlight: circle x2 
 Darkvision: circle r60 
 Square Vision: square 
 Normal: circle 

&lt;div style=&quot;color:gray&quot;&gt;Each of those items defines a '''Sight Type'''. The sight type is defined using a specific syntax, explained in the Campaign Properties window. The most basic one is simply a shape, as in:&lt;/div&gt;

各項目が '''Sight Type（視界タイプ）'''の定義だ。視界タイプはキャンペーンプロパティ・ウィンドウ下部で説明されている専用の書式で記述する。最も基本的な設定は、次のように形だけを記述する：

 Normal: circle

&lt;div style=&quot;color:gray&quot;&gt;This simply says that &quot;normal sight is circular.&quot; There is no limit to the range except the vision distance set on the ''Map itself'', which defaults to 1,000 units. &lt;/div&gt;

この記述は「通常の視界を円形に設定」ということだ。視界の届く距離は MapTool で設定されている距離制限までだ（初期値は 1,000 単位）。

&lt;div style=&quot;color:gray&quot;&gt;A more complex entry is the one for &quot;Lowlight&quot; sight:&lt;/div&gt;

「Lowlight」の項目はもう少し複雑だ：

 Lowlight: circle x2

&lt;div style=&quot;color:gray&quot;&gt;In this case, the vision name is '''Lowlight''', and the shape is circular. However, an additional option was added on the end - ''x2''. This is an option that interacts with ''light sources'', multiplying their effective radius by 2 for any token that has the Lowlight vision. So where a token with Normal vision might see 20 units when using a torch, a token with Lowlight vision can see ''40'' units.&lt;/div&gt;

この場合は、視覚の名前は '''Lowlight''' で、形は円形。しかし行末に 「''x2''」 が書き加えられている。これは ''light sources（光源）'' に関連するオプションであり、夜目を持つトークンに対する照明は2倍の輝きを持つようになる。通常の資格を持つトークンが松明（torch）を灯すと20単位の距離を見通せるが、夜目を持つトークンは40単位を見通す。

&lt;div style=&quot;color:gray&quot;&gt;Looking at an even more complex entry, consider the one for &quot;Darkvision&quot;:&lt;/div&gt;

「Darkvision」の項目はさらに複雑になる：

 Darkvision: circle r60

&lt;div style=&quot;color:gray&quot;&gt;In this entry, there are four components.&lt;/div&gt;

この記述は4つの部品で成り立っている。

&lt;div style=&quot;color:gray&quot;&gt;
* '''Darkvision''': this is, of course, the ''name'' of the Sight Type (you could call it &quot;Thermographic Vision&quot; if you like). This name appears in the token configuration dialog when you want to activate token sight.
* '''circle''': this signifies the shape of the visual area, in this case, indicating that the visual area is circular; we've seen this before.
* '''r''': this is a code that signifies that this sight type has a &quot;personal&quot; light source - in other words, it is effectively a light source only ''that token'' can see. This is what makes this &quot;darkvision,&quot; for instance - the token can see just fine in the dark, but that token's ''allies'' might be completely blind. 
* '''60''': this is the range of the sight type, starting from the center of the token's square, and counted in &quot;map units&quot; (so if your map is 5 units per cell, this will cover 12 map cells; if your map is 1 unit per square, this will cover 60 squares). Note that since range is measured from the ''center'' of the square or hex, many users add a fractional amount to the range so that the end of the range lines up nicely with a hex or square boundary. 
&lt;/div&gt;

* '''Darkvision'''：これまでと同じように、視界タイプの''名前''だ（サーモビジョンと名付けることもできる）。ここでつけた名称は、トークンの視覚を有効にしたときにトークンの設定ダイアログに表示される。
* '''circle'''：前述の通り、視覚が届く範囲の形状であり、この場合は円形の範囲であることを表している。
* '''r'''：この視界が「個人的な」光源を持つことを表す符号。つまり、''このトークン''だけが見ることのできる光源を持つということだ。「Darkvision」を持つと、仲間達が真っ暗闇の中で何も見えないときでも、このトークン自身は問題なく見通せるようになる。
* '''60'''：この視界タイプの有効距離。トークンの中心から「マップで使用している単位」で測る（マス目ごとに5単位を設定しているのであれば、12マスになる）。多くのユーザーは、マス目やヘックスの''中心''から距離を測るので、範囲を示す円がぴったりとマス目にくっつくように割り算した値を足している。

&lt;div style=&quot;color:gray&quot;&gt;
Configuring sight types is unique to the game being played, and so the specifics of it need to be left to the campaign designer. However, suffice it to say that Sight is a configurable option and offers a great deal of flexibility. 
&lt;/div&gt;

視界タイプの編集は使用するゲームのルールごとに異なるので、キャンペーンを構成するには視界の仕様が必要になるが、視界は柔軟に設定できる多くのオプションを備えているので問題なく構成できるだろう。

====視界タイプの制限====

&lt;div style=&quot;color:gray&quot;&gt;Flexible as it is, there are a few limitations on Token Sight.&lt;/div&gt;

トークンの視界は柔軟ではあるが、いくつかの制限もある。

&lt;div style=&quot;color:gray&quot;&gt;
* '''One sight type at a time''': tokens can only have one kind of sight active at a time (a token cannot have Darkvision and Normal sight active simultaneously)
* '''Sight has no color''': sight types do not have colors of their own. Any color visible to the players will be based on the color of the light source, not the sight type (there is one exception to this, however: in [[MapTool Preferences]], you can opt to have the vision color of the token match its [[token.halo|Halo]] color)
&lt;/div&gt;

* '''1度に1視界タイプ'''：トークンが同時に持てる視界は1種類だけ（トークンは暗視と通常の視覚を同時有効にできない）。
* '''視界は無色'''：視界は色を持たない。プレイヤーが見ている色は、光源の色であり、視界タイプの色ではない（[[MapTool Preferences|MapTool の設定]]でトークンの[[token.halo|Halo]]の色と同じ色を視覚の範囲に着色できるオプションがある。これを設定している場合は例外である）。

===光源===

[[Image:Cprops-lighttab.png|thumb|キャンペーンプロパティダイアログにある照明のタブ]]

&lt;div style=&quot;color:gray&quot;&gt;The Light tab provides an interface very similar to the Sight tab - a text window with a number of different items defined as a simple string of text. The default MapTool campaign properties show the following light sources:&lt;/div&gt;

照明のタブは、視界のタブと同じような、いくつかの項目がテキストで定義されているテキストエリアがある。MapTool のキャンペーンプロパティの初期設定では光源は次のようになっている：

 D20
 ----
 Candle - 5 : 5 10#000000 
 Lamp - 15 : 15 30#000000 
 Torch - 20 : 20 40#000000 
 Everburning - 20 : 20 40#000000 
 Lantern, Hooded - 30 : 30 60#000000 
 Sunrod - 30 : 30 60#000000 
 Generic
 ----
 5 : 5 
 15 : 15 
 20 : 20 
 30 : 30 
 40 : 40 
 60 : 60 

====グループ====

&lt;div style=&quot;color:gray&quot;&gt;In the above default lights, there are two groups: D20 and Generic. A group is defined by typing its name, and placing beneath it four hyphens in a row: {{code|----}}. Groups appear in the right-click menu on a token, and are basically a way for you, as GM, to organize the different light sources in your game.&lt;/div&gt;

上記の標準の照明設定では、D20 と Generic の二つのグループがある。グループを定義するには、まずグループの名称を書き、そのすぐ下の行に{{code|----}}のように4つのハイフンを書く。グループは基本的には異なる光源を分かりやすく分類するために使うもので、トークンの右クリックメニューに表示される。

[[Aura]] is not included by default and must be added manually.

[[Aura]] は標準では含まれていないので自分で追加する必要がある。

====光源の書式====

Beneath each group header are a list of light sources. The syntax for these is very similar to the syntax for Sight Types, with a couple exceptions. Let's look at the entry for Sunrod:

グループ見出しの次の行には、光源の一覧がある。この書式は例外はあるが視界タイプの書式とよく似ている。Sunrod（陽光棒）を例に解説してみよう：

 Sunrod - 30: 30 60#000000

&lt;div style=&quot;color:gray&quot;&gt;There are three elements shown here:&lt;/div&gt;

この項目は次の3つの要素から成り立つ：

&lt;div style=&quot;color:gray&quot;&gt;
* '''Sunrod - 30''': the name of the light source; this is what appears in the right-click menu on a token, under the appropriate Light Source group
* '''30''': this is a light source radius of 30 units; the &quot;first&quot; radius of the light
* '''60#000000''': this is a ''second'' radius to the light, and a hexadecimal color code.
** '''Light Source Radii''': A light source can have one or more radii, each of which can be set to a different color. In the sunrod example, the first radius has no color (or rather, it has the default color of white, which means that the area it covers is completely illuminated). The second radius (60) has the color #000000, which, when rendered by MapTool, makes a &quot;dim light&quot; area (translucent gray) from 30 units to 60 units. The overall effect is that from the center of the light source out to 30 units, the light is &quot;bright,&quot; and everything is fully illuminated. From 30 units to 60 units, the light is a big darker, and items in that area are less brightly lit. 
&lt;/div&gt;

* '''Sunrod - 30'''：光源の名称。この名称はトークンの右クリックメニューの中の、所属する光源グ ループの下に表示される。
* '''30'''：この数字は光源の半径が30単位であることを示す。照明の「最初」の半径だ。
* '''60#000000'''：これは照明の「二つ目」の半径と16進数の色コードだ。
** '''光源の複数の半径'''：光源には複数の半径を持たせることができ、それぞれ異なる色を指定できる。こ の例では、最初の半径は色がない（厳密にいえば、標準色の白であり、照明がカバーする範囲は完全に照られるということだ）。二つ目の半径「60」は色コー ド「#000000」 を持ち、MapTool は30単位から60単位までを「薄暗い照明」の範囲（半透明の灰色）として描画する。全体の効果は光源の中心より30単位の「明るい光」が占め、そこにあ るものはすべて照らされる。30単位から60単位の範囲では、照明がかなり暗くなるので薄暗く照らされる。

&lt;div style=&quot;color:gray&quot;&gt;One element is left out here, which is the light source ''shape.'' Like Sight Types, light sources can have shapes. The default shape is circular, and so if you do not specify a shape, the light source will default to circle-shaped. The other shapes are:&lt;/div&gt;

上記に加えて、''形状''の要素がある。視界タイプと同じように、光源も''形''を選べる。標準の形状は円形なので、形状を指定しなけば円形になる。他の形状は次のとおり：

&lt;div style=&quot;color:gray&quot;&gt;
* '''Cone''': create a conic area with a user-defined arc. This projects the light along the current facing of the token.
* '''Square''': this creates a square light area
* '''[[Aura]]''': this is a special light source, because while it is blocked by VBL and can cast colored light, it does not actually illuminate anything (therefore, an [[aura]] will not reveal hidden areas to a player, but it does act as a way to see how far from a token its aura extends).
&lt;/div&gt;

* '''Cone'''：ユーザーが定義した形状で、円錐状の範囲を作る。トークンの向いている方向に 光を放つ。
* '''Square'''：正方形の照明を作る。
* '''[[Aura]]'''： これは特殊な光源であり、通常の照明と同じように遮光域に阻まれ、色をつけることができるが、実際には何も照らさない（そのため、[[aura]]は隠されている部分を明らかにすることはないが、トークンが放つオーラが どこまで伸びているかを視覚的に表すことができる）。

===トークンやオブジェクトに視界と照明を設定する===

[[Image:Token-config-sight.png|thumb|トークンに視界タイプを設定する、&quot;Has Sight（視界あり）&quot;のチェックボックスをチェック。]]

[[Image:Token-config-light.png|thumb|トークンの光源を選択する右クリックメニュー。]]

&lt;div style=&quot;color:gray&quot;&gt;To give a token Sight and Light, do the following:&lt;/div&gt;

トークンに視界と光源を設定する方法は次のとおり：

&lt;div style=&quot;color:gray&quot;&gt;
# Double-click on the token and go to the Config tab. There, check the Has Sight box, and select the appropriate sight type. Remember that a token can only have one type of sight active at a time. 
# Click '''OK''' to save the sight settings.
# Right-click on the token, and go to Light Source. Navigate through the submenus until you can select a specific light source. The token now has a light source.
&lt;/div&gt;

# トークンをダブルクックして、Config タブを開く。Has Sight のチェックボックスをチェックし、適切な視界タイプを選択する。トークンは一度に1種類の視界タイプしか持てないことを忘れないように。
# '''OK'''をクリックして視界の設定を保存する。
# トークンを右クリックし、光源を選択。サブメニューを開き、いずれかの光源を選択する。これでトークンは光源を持つようになる。

==視覚モード==

[[Image:Map-vision-mode.png|thumb|マップの視覚モードを設定。]]

&lt;div style=&quot;color:gray&quot;&gt;Recent builds of MapTool introduced the concept of Vision Modes, which let the GM dictate how vision and light will affect a given map. There are three Vision Modes: '''Off''', '''Day''', and '''Night''', each of which alters the way in which light and vision interact for a token. &lt;/div&gt;

最近ビルドされた MapTool は、視覚と照明がマップにどのように影響を与えるかGMが指定できる、視覚モードの機能を取り入れた。視覚モードは '''Off（なし）'''、'''Day（昼）'''、'''Night（夜）''' の3つがあり、照明と視界がトークンに与える影響はそれぞれ異なっている。

&lt;div style=&quot;color:gray&quot;&gt;In the following discussion of vision modes, what is visible to the player as they move their token is based on what is visible to the ''token itself''. Thus, if, under the proper settings, an enemy token is visible to the player's token, the player will see it on the Map. However, if that enemy token is ''not'' visible to the player's ''token'', it will not appear on the player's instance of MapTool.&lt;/div&gt;

下記の視覚モードの説明では、プレイヤーがトークンを操作する際に何が見えるかは、トークンそのものから見えるものに基づいている。そのため、適切な設定のもとでは、敵のトークンがプレイヤーのトークンから見えるなら、プレイヤーはマップ上で敵のトークンを見ることができる。そして、敵のトークンがプレイヤーのトークンから見えないのであれば、MapTool の画面に敵は表示されなくなる。

===Off（なし）===

&lt;div style=&quot;color:gray&quot;&gt;When Map Vision is set to &quot;Off,&quot; Token vision settings are not taken into account when displaying information to players: all things are visible at all times, unless hidden beneath Fog of War.&lt;/div&gt;

「Map → Vision」の設定を「Off」にした場合、トークンの視覚の設定はプレイヤーに表示する情報に対して影響を与えない。不明領域の下にあるもの以外は全て表示される。

===Day（昼）===

&lt;div style=&quot;color:gray&quot;&gt;In Day mode, light sources are not considered when evaluating token vision and what lies inside the tokens visual range. Furthermore, no part of the map is hidden from the players (that is, they will see the entire map - not necessarily all the ''tokens'' on a map, but they will see the layout of the entire dungeon, building, or area). Effectively, the Day mode assumes that a bright sun is shining down on everything, illuminating it all, and everything is visible unless blocked by VBL or covered by Fog of War.&lt;/div&gt;

昼のモードでは、トークンの視覚と視覚が届く距離を決める際に、光源は考慮されない。さらに、マップ上でプレイヤーに隠される場所はなくなる（つまり、マップの全てを見ることができる。全てといっても、必ずしもマップ上の全ての''トークン''が見えるとは限らないが、ダンジョンや建物の間取りや区画の配置などは見ることができる）。事実上、昼モードは太陽の光が全ての場所に降り注ぎ、全てを照らしているのと同じ状態であり、遮光域に阻まれていない限り、また不明領域に覆われていない限り、全てのものが表示される。

===Night（夜）===

&lt;div style=&quot;color:gray&quot;&gt;This mode incorporates Light Sources into the calculations, effectively assuming that it is &quot;night&quot; in the game, and that without a light source, the tokens are in a pitch-black environment and can see nothing. If Fog of War is used with Night Mode, light sources will reveal areas covered by Fog of War, assuming a token can see the light source and the area is not blocked by VBL.&lt;/div&gt;

このモードは計算に光源が組み込まれており、ゲーム内の「夜」を効果的に再現しており、暗闇の環境化にいる光源を持たないトークンは何も見えなくなる。夜モードで不明領域を使用すると、光源は不明領域に覆われている場所を明らかにし、トークンは光源で照らされ遮光域で阻まれていない場所を見ることができる。

===視覚モードと不明領域===

&lt;div style=&quot;color:gray&quot;&gt;You can use Fog of War with any of the Vision modes: Off, Day, or Night. &lt;/div&gt;

不明領域はどの視覚モード（なし、昼、夜）でも使える。

&lt;div style=&quot;color:gray&quot;&gt;
* When Map Vision is Off, Fog is removed to the extent of the token's sight (set using the Token Properties dialog). Soft Fog does not appear when using Off Mode, as tokens do not actually &quot;see&quot; anything in this mode. VBL works normally.
* In Day Mode, the Fog will be removed out to the limit of the token's visual range (which, if you note when you create a map, defaults to 1,000 units), and token vision is blocked by VBL. In this mode, Fog of War has both Hard and Soft Fog, as token vision is active.
* In Night Mode, Fog of War (when removed) is cleared to the maximum radius of a token's light source (remember, though - the token must a) have sight, and b) have a light source - without a light source, the token can't see at all!). Thus, when using Fog of War and Night mode for vision, the fog will be removed only where the light source illuminates it. Soft Fog works in this mode just as it works in Day mode.
&lt;/div&gt;

* マップの視覚モードが「Off」の場合、トークンの視界が広がる範囲の不明領域は取り除かれる（トークンプロパティ・ダイアログで設定）。「Off」モードでは、トークンが「実際に見ていない」場所に半透明の不明領域が表示されることはない。遮光域は通常通り機能する。
* 昼モードでは、不明領域はトークンの視覚の届く最大距離（マップ作成時に設定したものか、初期設定の1,000単位）まで取り除かれる。遮光域はトークン の視覚を遮る。トークンの視覚を有効にしたとき不明領域は完全なものと半透明なものがありうる。
* 夜モードでは、不明領域は光源の届く範囲まで取り除かれる（トークンは、視界を持ち、かつ光源を持っていなければならないことを忘れないように。光源を持たないトークンは何も見ることはできない!!）。そのため、不明領域と夜の視覚モードを使用する場合、不明領域が取り除かれる範囲は照明に照らされている場所だけである。半透明の不明領域は昼モードと同じように機能する。

==ゲームでの視界と照明==

&lt;div style=&quot;color:gray&quot;&gt;Sight, Light, and Fog interact in a number of ways in-play. To start, let's look at using Sight without Light or Fog of War. The examples below will use the sample dungeon shown to the right. Note that the sample dungeon uses [[Introduction to Vision Blocking|Vision Blocking]], a feature of MapTool that blocks the line of sight of a token (meaning you can use it to indicate the placement of walls, pillars, and similar objects that would obstruct a character's vision). &lt;/div&gt;

視界、照明、不明領域はプレイ中にさまざまな方法で相互に関係し合う。まず、照明と不明領域のことは考えず、視界について説明していこう。下記の例では右のサンプルダンジョンを使用する。なお、このサンプルダンジョンはトークンの視線を遮る MapToo の[[Introduction to Vision Blocking|遮光域]]の機能を使っている（遮光域は、壁や柱などキャラクターの視覚を遮るさまざまなものを再現する機能）。

===視程===

[[Image:Nofog-sight-boundary.png|thumb|MapTool はトークンの視覚が届く範囲を表す、白い境界線を描く。]]

[[Image:Nofog-sight-boundvbl.png|thumb|視界を持つトークンは、[[Introduction to Vision Blocking|遮光域]]を使ったマップでは視界の境界線は遮光域に沿って表示される。]]

&lt;div style=&quot;color:gray&quot;&gt;When you configure a token to have sight, when you hover your mouse token over the token, MapTool will illustrate the limit of the token's visual range with a white border (a circle if the sight type is circular, or square if square, or a cone if it's cone shaped, etc.). The screenshot to the right shows a PC token with the sight type &quot;Normal - Short Range&quot; configured. Note the white circle indicating the boundary of the token's vision.&lt;/div&gt;

トークンが視界を持つように設定して、トークン上にマウスカーソルをかざした場合、MapTool はトークンの視覚が届く範囲を白い境界線を使って表示する（視界タイプが円形なら円形、正方形なら正方形、円錐状であれば円錐状の形状で）。右のスクリーンショットには「Normal - Short Range」の視界タイプを持つPCトークンが表示されている。白い円はトークンの視程を表すものだ。

&lt;div style=&quot;color:gray&quot;&gt;In the first screenshot to the right, there is no VBL on the map, so the token's visual range is unaffected. For a more practical illustration of the &quot;line of sight&quot; boundary, consider the second screenshot, taken using the same token, but on the dungeon map, which employs VBL along the the walls of the dungeon. If you look closely, you'll see the white boundary - however, instead of being circular, it is blocked in certain areas by the VBL of the map, and thus has an irregular shape.&lt;/div&gt;

最初のスクリーンショットでは、遮光域を使用していないマップであり、そのためトークンの視程に影響はない。二つ目のスクリーンショットでは、同じトークンを、壁に沿って遮光域を置いたダンジョン・マップの中で使い、より実用的な「視線」を表す境界線を実演したものだ。よく見ると、円形の境界線ではなく、遮光域を配置した個所に遮られいびつな形をした白い境界線が見えるはずだ。

==視覚モードと視界==

&lt;div style=&quot;color:gray&quot;&gt;As mentioned above, there are three vision modes - '''Off''', '''Day''', and '''Night'''. Each setting affects how token vision is evaluated by MapTool.&lt;/div&gt;

前述のとおり、視覚モードには'''Off'''、'''Day'''、'''Night'''の3種類がある。それぞれ MapTool がトークンの視界を演算する方法に影響を与える。

===視覚モード「Off」のときの視界===

[[Image:Nofog-visionoff-gmview.png|thumb|視覚のないマップのGM側の表示。このマップは遮光域を持ち、トークン視程の白い境界線は表示されているが、視覚が無効になっているので、見えているもの 見えていないものを決めるのに使われない。]]

[[Image:Nofog-visionoff-plyrview.png|thumb|同じマップのプレイヤー側の表示。]]

&lt;div style=&quot;color:gray&quot;&gt;When Vision is set to '''Off''', the token's sight settings are not taken into account when deciding what to display to the player. Instead, the player can look at all of the items and backgrounds on the map. VBL will still block the &quot;visual boundary&quot;, but it won't actually block vision in any way - something on the far side of VBL from a token is still visible on the player's screen. &lt;/div&gt;

視覚モードを'''Off'''にした場合、プレイヤーが見える範囲を決定する際、トークンの視界の設定は考慮されない。プレイヤーはマップ上の全てのアイテムと背景を見ることができる。遮光域は「視程の境界線」を遮りはするが、実際のトークンの視覚を妨げることはない。遮光域を挟んでトークンの反対側にあるものは、プレイヤーの画面にしっかり表示される。

&lt;div style=&quot;color:gray&quot;&gt;The two screenshots to the right illustrate this: the top screenshot is the GM's view of the screen, while the shot on the bottom is the Player's view of the same map - note that they both see the same items. The only items a player will not see are those items on the Hidden layer, or those items that the GM has explicitly flagged as invisible to players.&lt;/div&gt;

右にある二つのスクリーンショットは次のことを表している。上のスクリーンショットはGM側の表示であり、下は同じマップのプレイヤー側の表示である。両者とも同じものが表示されことがわかるだろう。プレイヤーに表示されないものは、Hidden レイヤーに配置されたアイテムか、GMが意図的に「プレイヤーに非表示にする」設定を行ったものだけである。

===視覚モード「Day（昼）」の ときの視界===

[[Image:Nofog-visionday-gmview.png|thumb|マップの視界モードが''昼''のときのGM側の表示。]]

[[Image:Nofog-visionday-plyrview.png|thumb|同じマップのプレイヤー側の表示。GMが見ることが可能な他のトークンは遮光域に遮られているので、プレイヤーには''表示されない''。]]

&lt;div style=&quot;color:gray&quot;&gt;When Vision is set to '''Day''', the token's sight settings are take into account when determining what objects and other tokens are visible to the player. Light source settings are ''not'' taken into account. If an object or token lies outside the player's token's vision, it will not be visible to the player. Likewise, if an object or token lies beyond VBL from the player token, it will not be visible.&lt;/div&gt;

視覚モードを'''Day（昼）'''に設定した場合、オブジェクトや自分以外のトークンがプレイヤーに表示されるかどうか決定する際にトークンの視界の設定が影響を与える。光源の設定は影響を''与えない''。プレイヤーのトークンの視覚の外側にあるオブジェクトやトークンは表示されない。同じように、遮光域の向こう側にあるオブジェクトやトークンも表示されない。

&lt;div style=&quot;color:gray&quot;&gt;The screenshots to the right show this (again, the top is the GM's view, and the bottom is the Player view). Note that in the player view, the Dragon and Hero token are not visible to the Elf token (the player token), because they are hidden by VBL.&lt;/div&gt;

右側のスクリーンショット（上：GM表示、下：プレイヤー表示）は以上のことを再現したものだ。プレイヤー表示では、ドラゴンとヒーローのトークンは遮光域に遮られているのでエルフのトークンから見えていないことが見て取れる。

===視覚モード 「Night（夜）」の ときの視界===

[[Image:Nofog-visionnight-gmview.png|thumb|マップの視界モードが''夜''のときのGM側の表示。]]

[[Image:Nofog-visionnight-plyrview.png|thumb|同じマップのプレイヤー側の表示。エルフのトークン（プレイヤーのトークン）は光源を持っていないので見えない。]]

[[Image:Nofog-visionnight-plyrview-candle.png|thumb|光源を手に入れたので、プレイヤーのエルフ・トークンが見えるようになった。]]

&lt;div style=&quot;color:gray&quot;&gt;When vision is set to '''Night''', both the token's sight settings ''and'' the token's light source setting is taken into account when determining what the token is able to see. If a token lacks a light source, it will be unable to see anything unless it has a sight type that indicates ''personal light'' (in other words, a sight type like the &quot;Darkvision&quot; type discussed previously) - in fact, the token itself will not be visible to the player!&lt;/div&gt;

視覚モードを'''Night（夜）'''に設定した場合、トークンの視界の設定とトークンの光源の設定は、トークンが何を見ることができるか決定する際に両者とも影響を与える。光源を持たないトークンは、''本人のみ有効な照明''（前述の「暗視」のような視界タイプのことだ）を持つ視界タイプを持っていない限り何も見ることができず、トークン自体もプレイヤーに表示されない。

&lt;div style=&quot;color:gray&quot;&gt;The screenshots to the right show Night-mode vision in effect. The top screenshot is the GM view; the second two show the Player view ''without'' a light source on the player's Elf token, and then with the &quot;Candle - 5&quot; light source selected. There are several things to note about this:&lt;/div&gt;

右のスクリーンショットは視覚モード「夜」の場合のものだ。上はGM側の表示のスクリーンショット。二つ目はプレイヤーのエルフ・トークンが照明を持っていない場合のプレイヤー側の表示。その下はエルフトークンに「Candle - 5」の光源を設定したときのプレイヤー表示だ。このスクリーンショットには次にあげる良く見てもらいたいことがある：

&lt;div style=&quot;color:gray&quot;&gt;
# &quot;Night&quot; mode vision does not add &quot;darkness&quot; to the map in any visual way - it simply means that without a light source, tokens cannot see other tokens, objects, or themselves. 
# In the first Player screenshot, the player's Elf token is not visible in the lower left room of the dungeon - that's because the player's token doesn't have a light source, so it can't see - and therefore, the ''player'' can't see anything but the map background.
# In the second Player screenshot, the Elf is now visible because it has a light source active. This light source means that the player can see out to the limit of its light source's area.
&lt;/div&gt;

# 「夜」の視覚モードは視覚的にマップに「暗闇」を追加しているのではなく、単に光源がないため、他のトークン、オブジェクト、トークン自身を見ることができないということだ。
# 1枚目のプレイヤー側のスクリーンショットでは、ダンジョンの左下にいるプレイヤーのエルフ・トークンは表示されていない。このトークンは照明を持っていないので何も見ることができない。そのため、''プレイヤー''もマップの背景以外は何も見ることができない。
# 2枚目のプレイヤー側のスクリーンショットでは、照明の設定が有効になったのでエルフが見えるようになった。プレイヤーが光源の届く範囲まで見えるようになるために、この光源が重要な役目をはたしている。

{{Languages|Introduction to Lights and Sights}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:12345.JPG</title>
    <ns>6</ns>
    <id>1080</id>
    <revision>
      <id>4284</id>
      <parentid>4281</parentid>
      <timestamp>2010-06-19T10:50:30Z</timestamp>
      <contributor>
        <username>AssaCom</username>
        <id>178</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:12345.JPG]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Image Token/ja</title>
    <ns>0</ns>
    <id>1081</id>
    <revision>
      <id>4593</id>
      <parentid>4296</parentid>
      <timestamp>2010-09-29T01:41:23Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1637">{{#customtitle:画像トークン|画像トークン}}
{{Languages|Image Token}}{{Translation}}
==画像トークン==

&lt;div style=&quot;color:gray&quot;&gt;An image token is a [[Token]] whose name starts with the string &quot;image:&quot; -- case is not important. These [[Token|token]]s can appear on any [[Map:map|map]] and you can use functions such as [[getImage|getImage()]] to search through all of the [[Map:map|map]]s to find the [[Token|token]] and return the [[Asset ID|asset id]] for the [[Token|token]]'s image. The [[Image Token|image token]] does not have to be owned by a player to be used but the [[Token:visible to player|visible to player]] flag must be set. You can not have more than one [[Image Token|image token]] with the same name in a [[Campaign:campaign file|campaign file]].&lt;/div&gt;

画像トークンは&quot;image:&quot;の文字列で始まる名前を持つ[[Token|トークン]]のことだ（大小文字は区別しない）。この[[Token|トークン]]はどの[[Map:map|マップ]]でも配置でき、[[getImage|getImage()]]のような全ての[[Map:map|マップ]]からトークンを探し出し、トークン画像の[[Asset ID|アセットID]]を返す関数を使える。[[Image Token/ja|画像トークン]]は、プレイヤーが使用するにあたり所有権を設定する必要はないが、[[Token:visible to player|プレイヤーに表示]]の設定を有効にしていなければならない。[[Campaign:campaign file|キャンペーン・ファイル]]の中で同じ名前を持つ[[Image Token/ja|画像トークン]]を複数持つことはできない。

[[Category:Token]]
{{Languages|Image Token}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>MapTool ChangeLog (by build version)</title>
    <ns>0</ns>
    <id>1082</id>
    <revision>
      <id>7317</id>
      <parentid>7316</parentid>
      <timestamp>2019-03-22T21:09:10Z</timestamp>
      <contributor>
        <username>RPTroll</username>
        <id>16</id>
      </contributor>
      <comment>/* MapTool ChangeLog (for the source code) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="50336">==MapTool ChangeLog (for the source code)==
Note: This ChangeLog is for the 1.3 versions of MapTool. MapTool source code is now housed on GitHub. Newer versions of MapTool and their associated changelogs can be found on the [https://github.com/RPTools/maptool GitHub MapTool Page]. 

This page will attempt to document the on-going changes to the '''MapTool''' source code by those individuals who have Commit authority to the Subversion repository on Sourceforge.net.

Ideally, I'd like to see an actual ChangeLog for each build of MapTool as well as an &quot;in my queue right now&quot; list, but the latter is unlikely to be kept up to date (even by me!) so I'll settle for just a ChangeLog. :)

Since the RPTools team has not been using the SourceForge bug tracker for 1.3 there hasn't been a comprehensive list of bugs/features being worked on (long story, but we '''will''' be using the Mantis bug tracker for 1.4).  I have provided a list of [[Things I'd Like to See Fixed]] for 1.3 but there is no guarantee expressed or implied that any of them will come to fruition!

===Where to find more information===

For information about how to download (a.k.a. checkout) the source code, please see the thread on our forum that discusses that topic:  [http://forums.rptools.net/viewtopic.php?f=7&amp;t=421 How to get RPTools source via Eclipse and subversion].   Another topic worth reviewing is a ''stream of consciousness'' thread by Azhrei regarding notes on how to build the application using Eclipse:  [http://forums.rptools.net/viewtopic.php?f=7&amp;t=14196 MapTool build notes for Eclipse].

===ChangeLog entries===

====1.3 Final p07 (1.3.b90; released [soon])====

* replaced a lot of calls to System.err with logging to .error() or .warn()

* commented out a lot of System.out.println() statements!

* simple VBL line thickness fix (Jamz); http://forums.rptools.net/viewtopic.php?f=60&amp;t=23850&amp;view=unread#p242498

* updated formatting preferences for Eclipse

* latest VBL functions from Jamz; http://forums.rptools.net/viewtopic.php?f=60&amp;t=23849

* fixed handling of spaces in &lt;key,value&gt; pairs for varsFromStrProp since spaces are allowed in keys now; added javadoc

* fix for setSize() not working when token is Native or Free size; http://forums.rptools.net/viewtopic.php?f=27&amp;t=23843

* removed MapToolLauncher written in C++ -- superseded by Java version in new project

* updated logging XML files; fix for i18n in drawVBL/eraseVBL; updates to StringUtil

* formatting; removed System.out debugging call

* added drawVBL/eraseVB functions; added get/setTokenShape() and getTokenWidth/Height() functions

* fix for canSeeToken() when token is !snapToGrid; (Jamz)

* fix for how VBL line segments join; (Jamz)

* added X as topology (VBL) drawing shape; (CoveredInFish)

* added image to use in Help menu

* allow setLayer() and copyToken() to take optional parameter that prevents token shape change; (Azhrei) http://forums.rptools.net/viewtopic.php?f=20&amp;t=23610

* formatting; regex change looking for Help keys in properties; &quot;import map&quot; code test

* fixed typo in reference to i18n.properties key

* added Help menu item for Networking Setup (points to NFAQ); added confirmation of ImportMap menu function; http://forums.rptools.net/viewtopic.php?f=3&amp;t=23614

* fix removeFacing() parameter count; (Jamz) http://forums.rptools.net/viewtopic.php?f=60&amp;t=23802

* new UPNP library; added &quot;-Xdock:name&quot; to Debug configurations (will it work on non-OSX?)

* sorry, I believe the only changes are licensing and some fixed warnings but not guaranteed :(

* general cleanup, license change, warnings fixed in prep for end of 1.3 and beginning of 1.4

* added licensing details; some code is Apache, some is LGPL, some is AGPL

* reformatting; license update to LGPL

* fix NPE for macrokeys in J7 but not J6 (Lee); http://forums.rptools.net/viewtopic.php?f=60&amp;t=23568

* updated list of logging configuration options

* added OOM handling during campaign IO so a better message is provided

* added InputMap debugging (trying to track down NPE); http://forums.rptools.net/viewtopic.php?f=3&amp;t=23541

* fix missing/incorrect translation keys (found by looking at log.txt)

* attempt to standardize calls to getInputMap() to help track down NPE

* updated fix for drawVBL/eraseVBL feature (Jamz); http://forums.rptools.net/viewtopic.php?f=60&amp;t=23545

* backed out the fix for better smiley parsing in the HTML chat (caused duplicate text); http://forums.rptools.net/viewtopic.php?f=3&amp;t=23543

* added &quot;all.xml&quot; file to turn on all available logging

* fix for autosaving not clearing the AppState flag (final fix?)

* fix action.undoMapDrawing (remove &quot;Map&quot;), test version of new autosave code

* fix filenames (remove spaces) and update logging info

* fix to VBL macro boundary checks (Jamz); http://forums.rptools.net/viewtopic.php?f=60&amp;t=23521

* added logging in AppState to help isolate problems with autosave deadlocks

* switch to new Windows-based batch file setup (Vhex); http://forums.rptools.net/viewtopic.php?f=3&amp;t=21856&amp;p=239330#p239304

* cleanup of Windows batch files; move towards making them more generic

====1.3 Final p06 (1.3.b89; released 2013-04-05)====

* removed unneeded JAR file
* removed stupid files auto-created by OSX's File Manager
* added rplib-1.0.b134 for maptool-1.3.b89
* fix smiley parsing in chat output (tiorthan); http://forums.rptools.net/viewtopic.php?f=60&amp;t=22591
* fix handling of exceptions that could have caused exceptions (tiorthan); http://forums.rptools.net/viewtopic.php?f=60&amp;t=22547
* added text from &quot;Help &gt; Gather Sys Info...&quot; to the getInfo() macro result (CiF); http://forums.rptools.net/viewtopic.php?f=60&amp;t=23442
* fix token highlighting after grid adjustment (Lee); http://forums.rptools.net/viewtopic.php?f=60&amp;t=23080
* corrects how paths are calculated for tokens under certain circumstances (Lee); http://forums.rptools.net/viewtopic.php?f=60&amp;t=22924
* fix movement of token group when snapped token follows unsnapped token on map with snap-to-grid turned on (Lee); http://forums.rptools.net/viewtopic.php?f=60&amp;t=22920#p234014
* add macro functions for drawing/erasing VBL (JamzTheMan); http://forums.rptools.net/viewtopic.php?f=3&amp;t=22624
* last piece of VisibleAreaSegment cleanup
* added Apache commons-net-3.2.jar to the build path for FTP fix
* sometimes input() panels are too large; this patch constrains the height to 5/8 the screen height
* fixes problem where loading a campaign would delete straight lines made with the drawing tools
* modify getTokenImage() so it returns an empty string instead of causing an error for invalid token identifiers
* fix HTML form submission; patch based on Lee's code
* fix &quot;Comparator violates contract!&quot; exception without using Java 6 legacy mode
* using FTP to update an existing repository is being removed (slowly) as a feature
* change broadcast() so empty list sends to no one; http://forums.rptools.net/viewtopic.php?f=3&amp;t=23212
* fixed handling of line terminators inside list string functions; http://forums.rptools.net/viewtopic.php?f=3&amp;t=23223
* new field suggested by wolph42; http://forums.rptools.net/viewtopic.php?f=26&amp;t=23154
* credit to yorick for finding a huge inefficiency!  http://forums.rptools.net/viewtopic.php?f=3&amp;t=23174
* removed source file no longer used; cleaned up &quot;Help &gt; Gather Debug Info...&quot; menu option
* Help menu now dynamically builds menu items for external URLs by reading language-dependent property files
* Fix &quot;Comparable doesn't abide by contract&quot; error in Java 7 (no testing by me as I don't have J7 on OSX -- yet)
* json.type.patch.txt contributed by tiorthan
* browserstartfix.txt contributed by tiorthan with some changes from azhrei_fje
* colordisplayfix.txt as contributed by tiorthan
* tiorthan/imageaspectfix.txt -- keep aspect ratio of image if only width or height change
* Craig's patch to revert a previous patch which cleared the tokenCache prematurely in the Zone renderer
* Problems encountered while closing the upnp port now log a warning message rather than producing a pop up with information that is not useful to the user.
* Changed the way the MTscript strformat() works when a format string specifies an invalid variable name inside %{} -- should be backward compatible
* Create import file for RegEdit on Windows that removes MapTool registry entries
* Applied high resolution mouse wheel fix from RevenantBob.
* Removed fix for map not displaying on first start up of campaign bug fix as it was causing a more serious bug with resizing of objects.
* Applied patch from username that fixed a bug while dropping a second token.
* Fix conversion of string list into json array via json.fromList()
* Replaced DrawableUndoManager with UndoPerMap (the previous one was global); temporary commit -- needs a lot of testing
* Remove block dot from center of Radius Template when drawn

====1.3 Final p05 (1.3.b88; released 2012-03-16)====

* German translation updated
* Spanish translation updated
* Fix problem with color chooser not working in non-English locale
* Ensure dialogs larger than the owner window are not positioned off-screen
* Fix that leaves original '''%{}''' intact in [[strformat]] when unknown variable is used http://forums.rptools.net/viewtopic.php?f=20&amp;t=21206
* Fix NPE when autosaving and copying a map
* Another attempt to correct the formatting of '''Can't create data directory &quot;{0}&quot;''' which somehow seems to always treat the &quot;{0}&quot; literally (sigh); added stacktrace to any error that causes that message to try to determine where it's coming from
* Fix conic vision problem http://forums.rptools.net/viewtopic.php?f=1&amp;t=20068&amp;start=120#p215768
* Fix inability to draw a second VBL line after drawing the first http://forums.rptools.net/viewtopic.php?f=7&amp;t=19741#p215627
* Hide exceptions used for [[abort]] and [[assert]] from the user (they were hidden originally, but changes made them visible)
* Added [[assert]] handling to look like [[abort]] handling
* Fix problem with new &quot;title&quot; being ignored when refreshing an HTML frame http://forums.rptools.net/viewtopic.php?f=1&amp;t=20068&amp;p=214990#p214990
* Added StringUtil.parseBoolean() function that accepts a string and checks for &quot;true&quot; or non-zero (currently unused, but available for new MTscript function in the future)
* Fix for campaign not refreshing properly on first load http://forums.rptools.net/viewtopic.php?f=7&amp;t=19741&amp;p=214883#p214883
* Move rendering of labels after rendering of fog (so they are drawn on top of fog); needs more testing
* MapTool.confirmTokenDelete() should default to YES instead of NO  http://forums.rptools.net/viewtopic.php?f=1&amp;t=20068&amp;p=212306#p212306
* Make sure '''Map &gt; Import Map...''' is disabled whenever '''File &gt; Open Campaign...''' is disabled, such as for a client logged in as GM
* Move calls that render movement paths of owned tokens so they occur after fog is rendered; this should put them on top in all situations
* Fix dropping of token doesn't use ''Preferences'' setting for '''Filename vs. Creature''' name  http://forums.rptools.net/viewtopic.php?f=3&amp;t=19202&amp;p=202692
* Changed &quot;Green&quot; to &quot;Lime&quot; to match HTML color names used elsewhere http://forums.rptools.net/viewtopic.php?f=1&amp;t=20068#p214381
* Remove debugging code that was '''System.out'''-related (ugh)
* Don't add trailing delimiter to end of string in [[setStrProp]] function http://forums.rptools.net/viewtopic.php?f=3&amp;t=20517#p214422
* Fix using an IF roll option with an empty ELSE block causes an NPE http://forums.rptools.net/viewtopic.php?f=20&amp;t=19230&amp;p=213725#p213725
* Fix error in help docs for the '''Campaign Properties &gt; Light''' tab http://forums.rptools.net/viewtopic.php?f=3&amp;t=19240&amp;p=203192
* Fix oval VBL tool so that it correctly draws the rubberband image http://forums.rptools.net/viewtopic.php?f=1&amp;t=20068&amp;p=212044
* Fix hitting the close button on an [[input]] dialog causes NPE http://forums.rptools.net/viewtopic.php?f=20&amp;t=20180&amp;p=211624
* Fix new HTMLFrames (frame/dialog roll option) appear in the center of the screen http://forums.rptools.net/viewtopic.php?f=1&amp;t=20068&amp;p=211716
* Changed initial docked panel layout to only show '''Resource Library''', '''Map Explorer''', and '''Chat''' panel (others are hidden by default)
* Added exception handling to downloading of art pack list (network IO exceptions)
* Cleanup asset root handling (duplicates removed when asset is added/removed; removing is more efficient)
* Fix IllegalArgumentException: Comparable does not adhere to contract (needs more testing)
* Fix conversion of File object into URL for art packs; fixes some errors when downloading art packs
* Updated the '''Default.theme''' and '''README.wri''' shipped in the ZIP file
* Autosave manager should have been encased in try/finally block to prevent AppState from thinking autosave is in progress if an exception is thrown
* Updated '''sbbi-upnplib''' to rebuilt source code with Generics support and JXPath interface fixed for JXPath-1.3; fixes UPNP not working
* Fix so [[input]] dialogs auto-scroll to the top on open
* '''OK''' button should be set as default so &lt;Enter&gt; closes dialog
* Dialog window height set to 75% of screen height
* Zone constructor for maps wasn't deep copying its contents
* username -- Added a new public API that allows waiting for images to be available when using FileUtil.saveToken()
* username -- Fix to avoid a concurrency issue (workaround; needs proper fix)
* username -- Fixes on OpenJDK compatibility

====1.3 Final p04 (1.3.b87; released 2011-10-06)====

* Added menu item for '''Help &gt; Gather Debugging Information''' (user debugging)
* Fixed the zoom field so that typing in a number has better error handling
* Fix for assets referenced in a campaign file but not included in it (would cause &quot;Cannot load campaign&quot; errors)
* Fix MTscript '''setSize()''' and '''copyToken()''' to accept &quot;free&quot; or &quot;native&quot; to indicate original image size
* Updated Spanish translation from '''patoace'''
* Added some keystroke mappings for OSX (instead of requiring HOME and END, Meta-Left and Meta-Right will suffice now)
* Fixed bug in the way MTscript function '''copyToken()''' initialized exposed fog for new tokens http://forums.rptools.net/viewtopic.php?f=3&amp;t=20025
* Change handling of token deletion dialog so that NO is the default when the window Close button is used
* Add check to avoid NPE when exporting a screenshot
* FoW fixes - selecting only an NPC works like not selecting any token at all
* FoW fixes - no tokens selected shows the same as all owned tokens merged; global FoW added to individual fog
* Fixed NPE when releasing the mouse and Object/Background token was being resized http://forums.rptools.net/viewtopic.php?f=21&amp;t=19638
* Defer image update to avoid deadlock http://forums.rptools.net/viewtopic.php?f=21&amp;t=19325
* Fix for crash when quitting MT and saying &quot;Yes&quot; to save and an autosave is currently running http://forums.rptools.net/viewtopic.php?f=3&amp;t=18998&amp;p=200564#p200564
* Updated XStream library from 1.3.1 to 1.4.1 (fixes crash under Java 7)
* Halos on objects and footprints were drawn wrong on objects.  http://forums.rptools.net/viewtopic.php?f=3&amp;t=18878
* Made sure Windows .BAT files had CR-LF terminators
* Phergus' -- fix for keyboard movement of tokens on hex grids
* Phergus' -- fix for hard fog appearing when no owned tokens are selected
* Last (?) fix for NPE on movement when Lock Movement flag is set on init panel
* Add ability for DEVELOPMENT version to act as client or server to any other version (but causes '''properties.xml''' to contain a version number of DEVELOPMENT in saved campaigns)
* Changed hard-coded CTRL_DOWN_MASK to platform-specific key (Ctrl on Windows and Unix, Command on OSX)
* Moved &quot;Change To&quot; on right-click menu for stamps so it appears in the same place as on tokens
* Updated many third-party libraries (string handling, docking panels, TinyLAF, JSON)
* Added '''Default.theme''' to the ZIP file -- may require copying it to your '''.maptool/config''' directory to enable it on some platforms

====1.3 Final p03 (1.3.b86; released 2011-04-18)====

* Tweak to token's context menu so that merging all tokens' TEA is faster (not used much anyway?)
* Fixed a lot of warnings (about 70 out of 700!)
* Better error/exception handling
* Fixed timer not being stopped at the correct times
* Tweaks to prevent exceptions and speed up rendering
* Added Apache License statement to source files that didn't have it already

====1.3 Final p02 (1.3.b85; released 2011-04-06)====

Easy to read update:

* Added support for platform specific picture formats
* Fixed hex grid movement
* Bug Fixes

Patchlevel 02:

* MRU campaign list wasn't being updated on OSX (flawed handling of special characters in campaign filenames fixed for all platforms).
* Players dropping a token with a duplicate name now refuses to add the token at all (message to chat window).
* Changed drag/drop handling again; split if-else into a series of IF statements.
* Modified the token movement validation code to make debugging easier.
* Added README to the '''.maptool/resource''' directory to warn users not to put their own files there!
* Add warning when running MapTool on Java 5.  http://forums.rptools.net/viewtopic.php?f=3&amp;t=18045&amp;p=190751#p190751
* Revert call to String constructor that requires Java 6 (trying to keep MapTool as Java 5 compatible as possible).
* Fix NPE when dragging tokens on hex map.
* Added two Unix scripts to extract all possible logging objects directly from the source code (not directly useful for users).
* Fixed some screenshot issues.  However, no 100% fix is possible.  http://forums.rptools.net/viewtopic.php?f=3&amp;t=17984#p191059
* Make '''StackOverflow''' messages look nicer and give the user a hint to solving it.  http://forums.rptools.net/viewtopic.php?f=20&amp;t=18089&amp;p=191313#p191313
* ConnectToServer reports error when the external address is used on the ''Direct'' tab.  http://forums.rptools.net/viewtopic.php?f=3&amp;t=12270&amp;p=191318#p191318
* Size limits on global macros are now reported if a saved macro is not read back as identical text.  http://forums.rptools.net/viewtopic.php?f=20&amp;t=18085&amp;p=191317#p191317
* '''Edit&gt;Clear Drawings''' was always working on the Token layer instead of the currently selected layer; message box changed to report the layer to the user.  http://forums.rptools.net/viewtopic.php?f=3&amp;t=18151&amp;p=192216#p192216
* Loading a campaign now releases all drawables when only eraser drawables still remain after optimization.
* Exporting campaign properties didn't properly save table images, so loading them later caused FileNotFound errors.  Exported tables work fine.  Related to this report? http://forums.rptools.net/viewtopic.php?f=21&amp;t=15452&amp;p=165978#p165955
* Better handling of FileNotFound errors in general.
* Fix for asset directory disappearing or not being accessible.
* Add support for platform-specific image filetypes using conditional Java 6 code.  On pre-Java 6 the list of filename extensions remains hard-coded to '''gif''', '''jpg''', '''jpeg''', '''bmp''', and '''png''' but Java 6 systems may have additional formats ('''tiff''' and '''wbmp''' are common).
* Modified how performance data is reported by '''Tools&gt;Collect Performance Data'''.
* Renamed ''README'' to ''README.wri'' so it opens in Wordpad on Windows (it's still just an ordinary text file).
* Movement on hex grids now checks properly for fog in both source and destination cells.  http://forums.rptools.net/viewtopic.php?f=1&amp;t=17914#p191030
* Fix missing '''Details''' button of some exceptions.
* Fix NPE bug in the States and Healthbar image handling.
* Fix NPE bug when rendering tokens.  http://forums.rptools.net/viewtopic.php?f=1&amp;t=17914&amp;p=193455#p193435
* Fixed a NumberFormatException.  http://forums.rptools.net/viewtopic.php?f=60&amp;t=18288&amp;p=193782#p193683
* Some URLs still don't open properly when dropped on the map -- JRE bug?
* Allow development version to have any client version connect to it (primarily for developer use).
* Renamed PDF of documentation to match '''MapToolLauncher.exe'''.
* Some fog performance issues cleaned up; hopefully less lag.
* non-SnapToGrid tokens on hex map no longer snap to grid.
* Add a comment to the chat window (and via popup) when fog toolbar is used the first time with no server running (a warning about using IF features with no server).
* Add yes/no confirmation to clear fog when importing a map.
* Holding down Shift when mousing over a token prevents stat sheet from being displayed (see window's statusbar help message).
* Fixed how duplicate maps are named on import.
* jay - InitiativePanel was not being handled properly during campaign load, causing the panel to be cleared sometimes.
* jfrazierjr - updates to how fog is broken down into &quot;global&quot; vs. &quot;token&quot; and how they are merged for display purposes; small amount of other fog-related cleanup.
* CoveredInFish - found a Java bug with the drag/drop support; not going to be fixed in 1.3.  Drag the image to your desktop first, then from there to MapTool.
* patoace - Spanish translation updated.

====1.3 Final p01 (1.3.b84; released 2011-02-09)====

Patchlevel 01:

* Fixed NPE when dragging a token on a gridless map (and certain conditions are met).
* Updated documentation on Campaign Properties dialog '''Light''' tab.
* Fixed NPE in setting token name regarding calling isTrusted().
* Fix rendering of token names/labels on mouseover.
* Removed dock badge from icon on OSX.
* Fix bug with profiling window trying to open before main frame is open.
* Fix NPE bug with moving token on gridless map.
* Updated French translation (see credits)

====1.3 Final (1.3.b83; released 2011-02-08)====

* Removed binary '''Abeille''' forms from SVN (not a user-visible change).
* The ''MapExplorer'' was showing players too much information.
* Resizing a rotated object image will ignore the Shift key (which constrains the size); I recommend setting the size first, then rotating.
* Changing the token's image via the ''EditTokenDialog'' didn't update the token's native width/height.
* Fixed &quot;you are not the GM&quot; dialog popping up during {{func|copyToken}} in a trusted function.
* Fix bug in handling of non-existent images dropped onto a map (race condition).
* Adding logging in ''HTMLPane'' to try to locate why mouseClick events are lost in frames.
* Updated display of credits in the '''About MapTool''' dialog.
* Added lots of comments to English translation file to describe how to do translations.
* New Japanese translation added (based on SVN revision 5623 so very current).
* Cause light sources and auras to be sorted alphabetically on the right-click menu.
* Changed the algorithm that determines if a token may move into a particular location.  Only works for square grids.  New maps are constrained to a grid size of at least 9 pixels to support the new algorithm.
* As part of the previous item, code has been refactored to make it easier to write similar algorithms for gridless and hex maps.
* Added error trapping for corrupted campaign files to give users a better message.
* Added data from the '''Collect Performance Data''' window to '''log.txt''' (must be enabled in the XML files that are part of the ZIP download).
* Changed typing notification window status so it doesn't interfere with the mouse pointer shape when drawing VBL or templates.
* Fix a couple of exceptions: IllegalStateException and add comment re: ConcurrentModificationException - http://forums.rptools.net/viewtopic.php?f=1&amp;t=17651&amp;p=187874#p187860
* Added Meta-Shift-L as '''Lock Player Movement''' shortcut.
* Fix token labels not appearing when moving a token in some cases.

====1.3b82-RC5 (released 2011-01-22)====

* Fixed NPE when working with gridless maps and using the middle mouse button http://forums.rptools.net/viewtopic.php?f=1&amp;t=17340&amp;start=30#p184966
* Changed the token editor dialog so that the ''Size'' dropdown field has the correct first entry (either {{code|Native Size}} or {{code|Free Size}} depending on whether the token is on the Token layer or another layer)
* Fixed bug where the token editor dialog was only initializing the ''Size'' field once and populating it with the sizes for the grid type on that map so changing maps to a different grid type showed the wrong sizes!
* Added the ability to double-click on the ''Layout'' panel image (on the token editor dialog's '''Config''' tab) to reset the position and zoom
* Added a status bar message when the mouse enters the ''Layout'' panel
* Fixed {{func|currentToken}} when multiple tokens with identical names are selected and a macro is executed that has ApplyToSelected active http://forums.rptools.net/viewtopic.php?f=1&amp;t=17442&amp;p=185550#p185550
* Fixed bug in table handling that could cause an existing table to be deleted if it were to be renamed and had a syntax error in the range field, then the user '''Cancel'''-ed the dialog
* Fixed text labels not appearing to players although they show up fine for the GM
* Fixed MapExplorer showing NPC information that it didn't previously
* Added support for the VisibleToOwnerOnly flag for drag/drop between CharacterTool and MapTool (implemented in MapTool only)
* Removed small dot drawn at (0,0) by the RadiusTemplate (this bug goes back to at least 1.3b34!)
* Token movement now occurs below fog so it's not visible to players unless the fog has been exposed
* Data from &quot;export screenshot&quot; saved correctly in campaign file (previous fix was incomplete)
* Fixed drag/drop of files from desktop onto map on Linux/OSX (now allows multiple files to be dropped at once)
* Fix NPE when selected token is deleted by macro then moved by user without unselecting and re-selecting
* Fix NPE when Impersonation panel tries to refresh without a map visible
* Fix NPE when loading campaign from 1.3b45 (bug in macro button handling)
* Change {{func|getInfo}} so the light source information is more detailed when {{code|campaign}} is the topic being queried (should add {{code|preferences}} somewhere as well)
* Fix fog-of-war not being updated when a token was copy/pasted from another map
* Entries in '''i18n.properties''' for slash commands now use the same key format as menu items (not a user-visible change)
* All forms converted from '''.jfrm''' to '''.xml''' (not a user-visible change, but please report any display problems with dialog boxes)
* Fix copy/paste of tokens so that relative offsets between tokens are preserved; works whether source or destination maps are gridless
* Added audio feedback: '''Copy''' and '''Cut''' beep when no (owned) tokens are selected and '''Paste''' beeps if no tokens have yet been copied or cut
* Change to allow token editor dialog's '''Properties''' tab to resize with the dialog window; this is a Java6-only change!  We need a Java5-compatible method of doing this before '''1.3 Final'''
* Halo colors are updated to the same list as button and font colors
* aku - ''huge'' number of strings have been localized and now appear in the '''i18n.properties''' translation file
* aPown - updated German translation
* Natha - updated French translation
* patoace - updated Spanish translation
* (user?) - add new Japanese translation

====1.3b81-RC4 (released 2011-01-08)====

* Clicking on server in '''Connect To Server''' dialog now copies server name to '''Server Name''' textfield http://forums.rptools.net/viewtopic.php?f=21&amp;t=17346&amp;p=184553#p184524
* Change ''Import Map'' and ''Export Map'' to be always enabled and remove the checkbox from Preferences
* ''Export As...'' settings are now persisted as part of the campaign (should be able to read old campaigns, although information will not be converted to the new dialog)
* Updated macro font colors again; this time to compensate for color names that are unrecognized by CSS
* Fixed typo in setLibProperty to correct Lib: tokens being copied
* NPE fix http://forums.rptools.net/viewtopic.php?f=1&amp;t=17340&amp;p=184975#p184966
* Added extra checks in assetpanel.Directory http://forums.rptools.net/viewtopic.php?f=3&amp;t=17393#p184959
* jfrazierjr - fix assignment for visibleOnlyToOwner field in token

====1.3b80-RC3 (released 2010-12-30)====

* Fix bug similar to the one in b79 that prevents saved tokens from being loaded in some (most?) cases.
* Fix copyToken's handling of hex grids http://forums.rptools.net/viewtopic.php?f=1&amp;t=17331#p184385
* Fix NPE (see SVN revision 5531 comment for details)
* jfrazierjr - Individual FoW with Vision turned off (uncommitted patch)
* Colors for macro button fonts weren't being recognized
* Changed {{func|setOwner}} back to its previous definition

====1.3b79-RC2 (released 2010-12-29)====

* Fix massive bug which prevented campaigns from being loaded http://forums.rptools.net/viewtopic.php?f=1&amp;t=17329#p184351

====1.3b78-RC1 (released 2010-12-29)====

* Fix handling of the font size for the macro buttons http://forums.rptools.net/viewtopic.php?f=21&amp;t=17184#p183613
* Start cleanup of {{func|copyToken}} code for hex grids by reverting meaning of {{code|useDistance}} so that old macros work again (sigh).  We need regression tests written in MTscript!!
* Fix token's (x,y) coords when snapToGrid is turned on (x,y coords were not being constrained to grid cell when snapToGrid was enabled).  Hex grids appear to not snap correctly and never have; work-in-progress http://forums.rptools.net/viewtopic.php?f=60&amp;t=16604&amp;p=183236#p183223
* Fix token.readResolve() so that pre-1.3b66 tokens (those without a CaseInsensitiveHashMap) can be read properly (warning: ugly backward compatibility code!)
* Updated {{func|getInitiativeList}} (and wiki) so that it checks for trusted context; includes small performance optimization
* Fixed NPE in '''InitiativeListCellRenderer.java''' (line 174) so that the init panel doesn't try to render a token that doesn't exist
* Menu option '''Lock Zoom''' didn't stop the -/= keys from zooming, only the mouse wheel http://forums.rptools.net/viewtopic.php?f=21&amp;t=17192&amp;p=183222#p183222
* '''Lock Zoom''' also disables the zoom status bar field and '''View &gt; Zoom''' menu options
* Fixed bug when macro with {{code|Apply to Selected}} used currentToken() which returned the same id multiple times when multiple tokens with the same name are selected http://forums.rptools.net/viewtopic.php?f=3&amp;t=15904&amp;p=169665#p169563
* Fix {{code|setOwner(&quot;&quot;)}} not turning on '''All Players'''
* Fix NPE in TokenImageOverlay when non-Boolean value is state value (shouldn't happen?)
* MapExplorer did not check some token attributes correctly before adding to the various parts of the panel
* Changed {{code|.text}} to {{code|.desc}} for a couple of keys in the English translation file '''i18n.properties'''
* Updated Polish translation (see the Credits inside MapTool)
* Added Russian translation (see the Credits inside MapTool)

====1.3b77 (released 2010-12-07)====

* Fixed error in check for number of parameters in {{func|getLayer}}
* Added crosshairs to token editor dialog's Properties tab for the Layout image to allow easier alignment http://forums.rptools.net/viewtopic.php?f=26&amp;t=14777
* Fixed NPE caused when init panel was accessed after importing a map http://forums.rptools.net/viewtopic.php?f=3&amp;t=15258&amp;p=178021#p177947
* Clients connecting to a server got the Campaign object from before the server was started?!  Not sure this is actually fixed though.  http://forums.rptools.net/viewtopic.php?f=21&amp;t=16274&amp;p=173423#p173423
* Add support for variant fields to the autosave of the chatlog; for details see http://download.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html  The default format is '''chatlog-%1$tF-%1$tR.html''' which produces a filename of the form '''chatlog-YYYY-MM-DD-HH-MM.html''' using a 24-hour clock.  Note that the filename is only evaluated once at startup or when the filename field is changed.  We need some way of cleaning up old chatlogs as well.
* Trim leading and trailing spaces from server names, passwords, player names, etc to prevent copy/paste errors for these fields
* added {{code|delta}} field to the updates parameter of {{func|copyToken}} so that distances can be relative to the starting point
* added {{code|layer}} field to {{func|getTokens}} and {{func|getTokenNames}} http://forums.rptools.net/viewtopic.php?f=20&amp;t=16825&amp;p=179535#p179535
* Fixed '''Light''' tab of campaign properties dialog so that it displays the help screen properly http://forums.rptools.net/viewtopic.php?f=60&amp;t=16604&amp;p=180097#p180065
* Fixed relative font sizes in macro editing by changing them to absolute sizes http://forums.rptools.net/viewtopic.php?f=21&amp;t=16875
* Changed button color and font color fields of the macro editor dialog to allow typed-in colors (still need ColorPicker and FontChooser for each)
* Added default of {{code|black}} to the font color in the macro editor dialog (value of {{code|default}} for button color means a '''null''' background color)
* Changed macro editor dialog to position the caret at the top of the command text area upon open
* jfrazierjr - turn off Meta-Shift-O (fill in hard fog) for players
* jfrazierjr - lots of Individual View work in combination with hard/soft fog of war '''lots of testing needed!'''
* jfrazierjr/dorpond - added purple &quot;blacklight&quot; glow as a possible border; use yellow to indicate selected tokens when modifying group fog-of-war
* CoveredInFish - Add support to {{func|copyToken}} for images to be set http://forums.rptools.net/viewtopic.php?f=26&amp;t=15063
* CoveredInFish - Add {{func|broadcast}}, {{func|setTokenHandout}}, {{func|setTokenPortrait}}
* Gringoire - updated Italian translation
* patoace - updated Spanish translation
* Lukasz - created new Polish translation (work-in-progress)

====1.3b76 (released 2010-10-21)====

* Added cleanup after saving resources (should help with &quot;too many open files&quot; error and with '''.maptool/tmp''' not being cleaned up properly)
* The &quot;Test Connection&quot; button has been replaced with the &quot;Network Help&quot; button
* The long-standing bug where the border around a selected token is drawn outside the map window is fixed!
* Fixed Un*x start scripts to use '''JAVA_HOME''' if set; also fixed a typo in those scripts
* jay - init panel no longer loses tokens that are dropped &quot;outside&quot; the area of the list
* jfrazierjr/Rumble - fix for the &quot;jumping template&quot; bug; lots of testing needed.
* jfrazierjr - MTscript functions for FoW manipulation ({{func|exposeFOW}} and {{func| exposePCOnlyArea}})  http://forums.rptools.net/viewtopic.php?f=3&amp;t=15950#p173912
* jfrazierjr - Ignore client Preferences for FoW revealing
* jfrazierjr - patch for ownerVisibleOnly setting on tokens
* jfrazierjr - add movement metric to Start Server dialog to force it onto clients
* jfrazierjr - added Lock Token Movement to the server policy(internal to the code) so that newly connected clients will get the value of the server's menu item checkbox.
* jfrazierjr - added new move function: {{func|getMoveCount}}.  This gets the last movement count in units using the movement metric defined by the server(see above for new server setting)
* jfrazierjr - fixed path not showing to players when Use Individual Views is selected for tokens they do not own.  http://forums.rptools.net/viewtopic.php?f=3&amp;t=16451
* CoveredInFish - patch to add '''timeInMs''' and '''timeDate''' to the {{func|getInfo}} MTscript function
* CoveredInFish - patch for disabling macroLink tooltips in chat
* Rumble - Selection Panel no longer repaints itself if it is not visible (performance improvement)
* Rumble - building on the previous one, a new internal event was added that only fires on macro change which also speeds things up
* patoace - new Spanish translation file

====1.3b75 (released 2010-09-27)====

* Fix bug in return value of empty string for some MTscript functions that return JSON objects http://forums.rptools.net/viewtopic.php?f=21&amp;t=16047&amp;p=170771#p170765
* Fix bug in which I/O streams were not being explicitly closed which caused &quot;too many open files&quot; error http://forums.rptools.net/viewtopic.php?f=21&amp;t=16042&amp;p=170772#p170685
* Fix file handles being held after exporting data (this may be an on-going process but I think the majority of them have been caught)
* Change the list of restricted characters in '''AppHome''' -- the only one specifically prohibited by Java is the '''!''' due to {{code|jar://}} URLs using it
* Fix {{func|setNPC}} to correctly check number of parameters http://forums.rptools.net/viewtopic.php?f=3&amp;t=14823
* Change '''Test Connection''' button on the '''Start Server''' dialog so that it gives the user a link to the NFAQ http://forums.rptools.net/viewtopic.php?f=1&amp;t=16020&amp;p=173003#p173003
* Build rplib-1.0.b124 for distribution with MapTool (required by MetaGamer's work and other fixes)
* whited - Fix how rotated images are resized -- not done yet? http://forums.rptools.net/viewtopic.php?f=21&amp;t=13221
* MetaGamer - add ability to export arbitrary size map screenshots; menu terminology still being discussed http://forums.rptools.net/viewtopic.php?f=7&amp;t=15325
* MetaGamer - added the '''Map-&gt;Edit Map...''' menu option for changing map parameters (lots of testing needed here)
* jfrazierjr - Fixed CNTL+SHIFT+O to propagate to client's.
* jfrazierjr - Fixed CNTL+SHIFT+O to enforce Server policy use individual views and not reveal FOW for non owned tokens
* jfrazierjr - Finished up {{func|onTokenMove}} and {{func|onMultipleTokenMove}} functions
* jfrazierjr - Added {{func|movedOverPoints}} function.
* jfrazierjr - various other small fixes

====1.3b74 (released 2010-09-07)====

* Change MapTool startup to check for bogus directory names (ones that contain punctuation for example) http://forums.rptools.net/viewtopic.php?f=4&amp;t=15866#p169037
* Fix tokens dropped from the Library panel: as GM they come in as their original type, as player they come in as PC http://forums.rptools.net/viewtopic.php?f=1&amp;t=15817#p168884
* Fix file I/O to properly use UTF-8 for all text-based resources
* Modify UI property (for OSX) for Ctrl-Shift-O to ignore ''''toggle component orientation'''' (testing; if this works well it'll be added to Windows) http://forums.rptools.net/viewtopic.php?f=3&amp;t=15326&amp;p=163015#p163015
* Modify UI properties (for OSX) so that Cmd-Left and Cmd-Right jump to beginning and end of line in text fields
* jfrazierjr -  ''Visible to Owners Only'' patch.  Still needs MTscript support re: {{func|setOwnerVisibleOnly}} but also evaluation of how other script functions should change:  {{func|isVisible}}, {{func|getVisibleTokens}}, etc.  http://forums.rptools.net/viewtopic.php?f=26&amp;t=15044&amp;p=164509#p164163
* jfrazierjr -  ''onTokenMove functions'' patch.  Still needs additional MTscript support. '''This feature should be considered beta and should only be used in a live game  after very thorough testing. '''  http://forums.rptools.net/viewtopic.php?f=3&amp;t=15550
* Fixed NPE in handling of Update/Delete/Move(Up|Down) when a health bar image isn't selected on the ''''Bars'''' tab of the campaign properties dialog
* whited - Cleanup of warnings in rplib and maptool projects
* whited - added JUnit tests for FileUtil and ModelVersionManager

====1.3b73====

* Fixed NullPointerException in new vision arc code http://forums.rptools.net/viewtopic.php?f=1&amp;t=15817

====1.3b72====

* Fix sight types to be limited by the map settings by default http://forums.rptools.net/viewtopic.php?f=26&amp;t=15549&amp;p=165436#p165436
* Vision arcs should only be visible to owners (if StrictOwner==true) or all PCs (if StrictOwner==false) http://forums.rptools.net/viewtopic.php?f=3&amp;t=15790
* The property 'macro.function.general.macro.function.number.invalid' wasn't defined in '''i18n*.properties'''
* Updated macro script messages to include more information about errors
* Add solution text to error message when out-of-memory error occurs while saving a campaign http://forums.rptools.net/viewtopic.php?f=3&amp;t=15082#p160393
* {{func|getImpersonated}} now fails gracefully
* {{func|setPropertyType}} had bad parameter checking http://forums.rptools.net/viewtopic.php?f=1&amp;t=14896#p160423
* {{func|getStrProp}}'s wiki page was wrong (code was correct)
* Fixed NullPointerExceptions with {{func|json.type}} and similar (may not have gotten all of them) http://forums.rptools.net/viewtopic.php?f=20&amp;t=15061#p160011
* URLs should include the colon as valid in the path component (already fixed? MessagePanel.java)
* Fix b71 bug by finishing rewrite of zip file I/O to handle localizations correctly (last set of fixes I hope!)
* Fixed potential race condition with an autosave occurring while loading a campaign
* When a campaign is loaded, set the map to the one that was current when the campaign was saved (bug was in AppActions.loadCampaign(); does this work on clients now also?)
* Add check for campaign file version number and alerts user when the version number is greater than the version of MT (ModelVersionManager.java for version number checks)
* Found a few spots where Java I/O streams were not being closed immediately; could lead to inaccessible files on (broken) operating systems :)
* Using the experimental &quot;map import&quot; feature could cause the initiative panel for the map to fail repeatedly; importing a map now correctly clears the initiative panel entirely

====1.3b71====

* Java 5 does not have String.isEmpty() started a poll because MANY of the libraries use this method :-/  In the mean time references to Java 6 methods have been culled from the main MT source as much as possible
* Wrong parameter count check for {{func|sendToBack}} and {{func|bringToFront}} http://forums.rptools.net/viewtopic.php?f=12&amp;t=12516&amp;p=158796
* Updated Italian translation by Gringoire
* {{func|createMacro}} now properly takes 5 parameters (was only 4) http://forums.rptools.net/viewtopic.php?f=21&amp;t=15108&amp;start=0
* {{func|hasMacro}} wasn't accepting a second parameter correctly http://forums.rptools.net/viewtopic.php?f=21&amp;t=15098&amp;p=160584#p160502
* Comments in campaign property types (&quot;-----&quot;) still cause warnings when doing the case-insensitive comparison of property names but the message is hopefully better http://forums.rptools.net/viewtopic.php?f=53&amp;t=15041&amp;p=160469#p160469
* (incomplete) Multilanguage support http://forums.rptools.net/viewtopic.php?f=26&amp;t=14608#p156184
* (incomplete) Need UTF-8 specification when reading/writing XML http://forums.rptools.net/viewtopic.php?f=26&amp;t=15022
* Jfrazierjr - patch to provide owner-only auras (overridden by &quot;gm&quot; when both flags are provided) campaign file save format has changed
* Jfrazierjr - patch for queuing of chat notifications on-screen http://forums.rptools.net/viewtopic.php?f=26&amp;t=8690&amp;start=0
* Rumble - chat notification moved to client-side
* Updated campaign file version number to 1.3.70 (so that campaigns created in b70+ won't be loadable by earlier version due to Light.ownerOnly)

====1.3b70====

* Add trusted macro for {{func|setOwner}} (done by Craig in b69)
* Rectangles drawn with zero width/height are removed and not added to the map (http://forums.rptools.net/viewtopic.php?f=21&amp;t=14793)
* Preferences dialog is clearer regarding how map defaults are only for new maps (http://forums.rptools.net/viewtopic.php?f=3&amp;t=14797)
* NPE due to stacked tokens on a map (not sure how an NPE happens though? http://forums.rptools.net/viewtopic.php?f=21&amp;t=14865)
* Drag/drop of filesystem objects (finished?  http://forums.rptools.net/viewtopic.php?f=3&amp;t=14068&amp;p=154991)
* Added help info for GM-only auras to the Abeille form for the Campaign Properties dialog
* Craig - fixed bug in {{func|setPC}} added by Azhrei :( (http://forums.rptools.net/viewtopic.php?f=3&amp;t=14823)
* Craig - added {{func|isVisible}} and a &quot;campaign&quot; parameter for the {{func|getInfo}} script function
* Craig - fixed bug on &quot;image&quot; input type in html forms not working (http://forums.rptools.net/viewtopic.php?f=21&amp;t=14789)
* Craig - added &quot;closeFrame()&quot; function (http://forums.rptools.net/viewtopic.php?p=157814#p157814)
* {{func|getPropertyNames}} checked for the wrong number of parameters
* Rumble - select unowned tokens patch

====1.3b69====

* When loading a campaign referenced assets are not found; assets are not saved when the asset isn't there
* Fixed bug with MacroButtonProperties when saving to the GlobalPanel as a Player connected to a server (http://forums.rptools.net/viewtopic.php?f=1&amp;t=14644&amp;p=155439)
* Fixed bug displaying macro button dialog in situation similar to above
* Iain - Fix to allow code to compile on Eclipse when not running on OSX (http://forums.rptools.net/viewtopic.php?f=1&amp;t=14644&amp;p=156024)
* Using Meta-Shift-O resets all fog so that only currently visible areas are exposed and everything else is hard fog
* Rumble's chat notifier moved to upper left corner of map (overlay color can be set in Preferences)
* Rumble's select-unowned-tokens patch
* change Random() to SecureRandom()
* Craig - added [[getInfo]]() function

====1.3b68====

* Change Wiki: resetProperty() so that the property is actually removed from the token
* A lot of token-related macro functions were cleaned up to ensure that they cause the token to be sent to other machines when modified. (example: http://forums.rptools.net/viewtopic.php?f=21&amp;t=14139)
* Add Preferences option that enables the map load/save menu options with the requisite &quot;Are You Sure?&quot; prompt when the checkbox is enabled.
* Finished the autosave code for the chat log
* Updated Italian translation
* Ability to turn the map import/export feature on/off via a checkbox in Preferences (still considered a &quot;beta&quot; feature)
* More updates to Rumble's select-unowned-tokens patch
* Added support for changing the OSX dock icon inside MapTool (one more step towards eliminating the shell scripts)

====1.3b67====

* Added code to disable performance counters when the corresponding logger is turned off (might save us a few cpu cycles here and there)
* Fix for autosave race condition (moved variable to avoid concurrency issues when an autosave occurs during a regular File &gt; Save Campaign)
* Fixed drawings on Hidden layer being &quot;above&quot; tokens on the same layer (should be below; http://forums.rptools.net/viewtopic.php?f=3&amp;t=14344)
* Some bug fixes for importing maps (correct GUID in Zone, for example; http://forums.rptools.net/viewtopic.php?f=3&amp;t=11676&amp;p=150989#p150989). Import/export feature still requires special command line parameter to enable. It'll become a Preferences setting in the next build.
* Problem with importing a token macro with accented characters in it (http://forums.rptools.net/viewtopic.php?f=1&amp;t=14322&amp;p=151741#p151609; fix required restructuring PackedFile.putFile() methods)
* Remove redundant entries from the resource library list upon startup, and prevent redundant entries from being saved
* getTokenX() should return a BigDecimal value (http://forums.rptools.net/viewtopic.php?f=20&amp;t=14546#p154261)
* Assets marked as &quot;broken&quot; in the campaign file were not restored properly; warnings added to the log file -- change to popup box to alert GM instead?
* Patch for turning on word wrapping in textareas (kkragenbrink)
* Patch for preventing token names from being empty (Rumble)
* Token stacks allow access to incorrect token (reported by aliasmask; fixed by Rumble)
* Selection of unowned tokens is always allowed, even when Strict Token Ownership is enabled on the Start Server dialog (Rumble; http://forums.rptools.net/viewtopic.php?f=3&amp;t=14547) this patch didn't make it into b67 :(
* Chat notifiers -- messages that indicate someone else is typing (Rumble; http://forums.rptools.net/viewtopic.php?f=3&amp;t=14355&amp;start=45#p152754)
* Four different opacity levels on Preferences dialog (halo, aura, light, fog). This effectively allows removal of soft fog by specifying a value of 255 for &quot;fog&quot;.
* Updated the German translation (aPown)
* Updated Spanish translation (patoace)

====1.3b66====

* Deal with 64-bit vs. 32-bit JVMs

====1.3b65====

* Tooltips fixed on the Sound tab of the Preferences dialog (had text copied from other fields)
* Add equals sign to URL parsing (following URL now parses correctly: http://forums.rptools.net/viewtopic.php?f=20&amp;t=14274&amp;view=unread#unread)
* Macro tab removed from the Token Editor dialog (an old Abeille form snuck back in)
* getPropertyType() again accepts a single default parameter (typo in parameter counting)
* Short names for properties are no longer &quot;variables&quot; in MTscript, but still evaluate on the statsheet
* Fixed map importing (internal data wasn't being updated)
* Another stab at fixing assets being saved in binary but allowing loading in binary and XML

====1.3b64====

* Add confirmation dialog to right-click macro menu Reset option
* Add check to Campaign Properties to disallow property names that differ only in their case
* Add getPropertyNamesRaw new macro script function which returns mixed case variable names
* Cleaned up all parameter checking in all of the macro token property functions (new translations needed).
* Assets in RPToks are no longer being written out as MIME64 encoded text; instead they are binary images. Need lots of testing on this one for backward-compatibility
* Don't merge old assets from PackedFile into new PackedFile. This should fix RPTOKs growing larger each time they're saved.
* Remove the Macro tab and all references to macros on the token editor dialog
* Disable the rest of the UI while the Test Connection is doing its thing
* Change ImagePanel vertical scrollbar so that the BlockIncrement moves by an entire page height/width, minus one row; UnitIncrement is exactly one row
* Fix URL regex's so that links pasted into the chat window grab the entire URL
* Modify wording of Preferences-&gt;Application regarding auto-exposing fog
* Added tooltips to every label on all four tabs of the Preferences dialog
* fixed the problem with the fog of war paint getting reset back to black when a server is started (cheesethulu)
* fixed the problem with players momentarily getting a GM view when they disconnect (cheesethulu)
* support for GM-only auras (woohoo!) (jfrazier)
* French translation updated (simonutp)
* Spanish translation updated (patoace)
* Italian translation updated (Gringoire)

====1.3b63====

* Fix bug: server locks up when player disconnects unexpectedly
* Fix bug: typo in UPnP error message (Azhrei)
* Update Spanish translation (Patricio)
* Update French translation (Pierre)
* Update German translation (aPown)</text>
      <sha1>qebum89acj57vlyf4wznu3c96chkpq2</sha1>
    </revision>
  </page>
  <page>
    <title>MapTool Preferences/ja</title>
    <ns>0</ns>
    <id>1083</id>
    <revision>
      <id>4624</id>
      <parentid>4602</parentid>
      <timestamp>2010-10-04T15:16:30Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <comment>/* Save */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18691">{{Translation}}{{#customtitle:MapTool の設定|MapTool の設定}}
{{Languages|MapTool Preferences}}
{{note|'''Important Note:''' There are map related preferences that allow you to set default values for creating new maps. While you are able to change these defaults upon map creation, some of them cannot be changed after the map has been created. This is the behaviour of version 1.3b56 and all preceeding versions. Preferences that follow this behaviour will be marked with a {{mark}}&lt;br&gt;'''重要'''：新しいマップを作成すときの初期値を設定できるマップに関する設定がある。この初期値はマップ作成時に変更することはできるものの、その内のいくつかはマップ作成後に変更できないものがある。この動作はバージョン1.3b56以降のものだ。このように動作する設定項目には{{mark}}の印をつけている。&lt;br&gt;&lt;br&gt;'''Note:''' All screenshots in this article are shown with the default settings, which might not necessarily be the ''recommended'' settings for your use.&lt;br&gt;'''注'''：このページ内のスクリーンショットは初期設定の画面よりキャプチャしたものだが、''推奨設定''というわけではない。}}
__TOC__
==Interactions Tab==
[[Image:prefs_tab_interactions.png|thumb|right|300px|Interactions Tab on the Preferences Dialog]]

===Maps===
[[Image:prefs_interactions_maps.jpg|frame|right|Maps Section]] 
* '''New maps have Fog of War'''
: &lt;div style=&quot;color:gray&quot;&gt;Determines if new maps should have [[Fog of War]] enabled when created. If you use [[Fog of War]], it might seem obvious to have this &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked; however, when creating multiple maps for a new campaign, it is often useful to to disable this feature to assist with rapid map creation since even as a GM you will be unable to view a map covered in [[Fog of War]]. After completing a map, it is a simple process to re-enable [[Fog of War]].&lt;/div&gt;
: 新規マップの[[Fog of War/ja|不明領域（Fog of War）]]を有効にする設定。[[Fog of War]]を使うのであれば有効にしておくと良いだろう。しかし、新しいキャンペーンで一度に多数のマップを作成する場合、GMであっても[[Fog of War]]に覆われたマップは見えなくなるので、マップを手早く作成するため無効にしておくと便利だ。マップ完成後に再度、[[Fog of War]]を有効にすればよい。
:'''訳注：'''実際にはGMは半透明の領域で覆われるため見えなくなるのではなく「見えにくくなる」。
* '''New maps visible to players'''
: &lt;div style=&quot;color:gray&quot;&gt;Determines if new maps should be set as Player Visible when created. Although there are exceptions, typically having this &lt;span style=&quot;font-size: 24px; line-height: 1px; color: red; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;unchecked is the optimal setting; that way you won't unintentionally leave a map visible to players.&lt;/div&gt;
: 新規マップの作成時に「プレイヤーに表示」を有効にする設定。例外もあるが、意図せずプレイヤーにマップを見せてしまわないように、通常は無効にしておくべきであろう。
* '''Default Grid Type'''{{mark}}
** '''Square''' [[Image:gridSquare.png|sub]]
** '''Horizontal Hex''' [[Image:gridHorizontalHex.png|sub]]
** '''Vertical Hex''' [[Image:gridVerticalHex.png|sub]]
: Determines the grid type of new maps when created. You are free to create maps without a grid type, and also a grid type different than the one specified here, but you can not set the Default Grid Type to none.
* '''Default Grid Size'''{{mark}}
: Represents the amount of pixels you want MapTool to use drawing each grid cell at full resolution. The default setting of {{code|50}} pixels is adequate for most computers, but higher-end computers can handle {{code|100}} pixels or even {{code|200}} pixels for very high-end computers. There is no requirement that you use specific sizes, but {{code|50}} pixels and {{code|100}} pixels are commonly used. This setting will also determine how large an image appears when placed on a map; if set to Free-size and not manually re-sized.
* '''Default Units Per Cell'''{{mark}}
: Sets the amount of units that each grid cell represents. The ambiguous &quot;unit&quot; is used in this case because you decide what &quot;unit&quot; means. If you want each grid cell to represent 5 feet, this would be set to {{code|5}}. If you want each grid cell to represent 4 kilometers, this would be set to {{code|4}}. This is often referred to as ''Distance Per Cell''.
* '''Default Vision Distance'''{{mark}}
: The maximum distance that [[PC Token]]s can expose [[Fog of War]] after [[Light]]s, [[Sight]]s, and [[Vision Blocking Layer]]s are taken into account. It is important to note that this setting is measured in ''Distance Per Cell''.
* '''Movement metric'''
** '''ONE_TWO_ONE'''
** '''ONE_ONE_ONE'''
** '''MANHATTAN'''
** '''NO DIAGONALS'''
: Determines how movement should be calculated when a [[Token]] moves diagonally. This affects the total distance displayed beneath a [[Token]] when it is moving, or when its previous path is displayed; it is calculated based on ''Distance Per Cell''. '''ONE_TWO_ONE''' specifies that every second diagonal movement will calculate as twice the ''Distance Per Cell''. '''ONE_ONE_ONE''' specifies that diagonal movement will calculate the same as non-diagonal movement. '''MANHATTAN''' specifies that every diagonal movement will calculate as twice the ''Distance Per Cell''. '''NO DIAGONALS''' specifies that [[Token]]s can only move non-diagonally. The '''Movement metric''' setting only comes into play with maps that use the Square grid type; maps with a Hex grid type calculate movement in any direction using the ''Distance Per Cell''.

===Tokens===
[[Image:prefs_interactions_tokens.jpg|frame|right|Tokens Section]] 
* '''Start Snap to Grid'''
: Determines if [[Token]]s will default to having '''Snap to Grid''' &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Having this setting &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked is optimal for maps that use a grid, but even on such maps there are cases when you might want to temporarily disable this setting(e.g. when placing a lot of &quot;prop&quot; [[Token]]s on the Object layer while drawing a map). 
* '''New tokens visible to players'''
: Determines if new [[Token]]s have the '''Visible''' option &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked upon creation. The optimal setting for this really depends on your play style; if you have a lot of random encounters and build them during play, you may find it useful to have this setting disabled. 
* '''Duplicate Token Numbering'''
** '''Increment'''
** '''Random 2-digit'''
: Will automatically append numbers to [[Token]]s with duplicate names, upon creation. '''Increment''' will leave the first token unnumbered, but will number each duplicate after that, starting with the number {{code|1}} (e.g. Troll, Troll 1, Troll 2). '''Random 2-digit''' will append a random two-digit number to the token name, even if there are no duplicates on the map yet. '''Random 2-digit''' might be considered the optimal setting, as it gives your players no indication of how many copies of that [[Token]] can be expected to exist.
* '''Show Numbering on'''
** '''Name'''
** '''GM Name'''
** '''Both'''
: Specifies where the number that derived from '''Duplicate Token Numbering''' is applied. '''Name''' appends the number after the name (derived from '''New Token Naming'''). '''GM Name''' places the number within the ''GM Name'' field of the [[Token]] options. '''Both''' appends the number after the name, and places it within the ''GM Name'' field of the [[Token]] options. Due to odd behaviour that MapTool will display when handling tokens with the same name, it is recommended that you use '''Name''' or '''Both''', but not '''GM Name'''.
* '''New Token Naming'''
** '''Use Filename'''
** '''Use &quot;Creature&quot;'''
: Determines what the name will be when creating a new [[Token]], or what the ''Name'' field will be pre-filled with in a new [[Token]] dialog. '''Use Filename''' specifies that the name will be derived from the name of the file that was added to your Resource Library (e.g. if you add the file ''uglytroll.jpg'' to your Resource Library, tokens created from that image will begin with the name ''uglytroll''). '''Use &quot;Creature&quot;''' defaults all new [[Token]]s to being named &quot;Creature&quot; (without quotes). 
* '''Start Freesize'''
: If you are using a map with a grid, [[Token]]s typically default to the size of one grid cell upon creation. Having this setting &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked allows you to have them default to ''Freesize'', which is very useful for when you're placing a lot of 'prop' [[Token]]s on the Object layer while creating a map.
* '''Show Dialog on New Token'''
: When this setting is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, a ''New Token'' dialog will open when you drag an image onto the map, allowing you to set some options prior to creation. If you disable this setting, all new tokens will be created with the default settings derived from previous settings in this section.
* '''Stat Sheet Portrait Size''' ''(Set to 0 to disable portaits)''
: Sets the width (in pixels) of the portrait that is displayed in the lower left corner of the map when mousing over certain [[Token]]s; the image is resized proportionately. A portrait is displayed under a few different circumstances; if the [[Token]] has properties that are set to display on the stat sheet, and those properties have values, the portrait will display the token image. If the [[Token]] has a portrait image set, it will display with or without a stat sheet. Why might you want to set this to {{code|0}}? Besides the obvious reason of not displaying the portrait, you might want to use a stat sheet, but not want a portrait displayed with it; or perhaps you don't want to use a stat sheet or a portrait, but would like to have the portrait image 'slot' usable for other purposes, like inside a Dialog or Frame.

===Chat===
[[Image:prefs_interactions_chat.jpg|frame|right|Chat Section]] 
* '''Show Avatar per line'''
: The image for the impersonated token is shown next to any chat output it creates, when this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. This is a client-side setting and does not effect any other clients connected to the same game.
* '''Insert Smilies'''
: Replaces common smiley(emoticon) character sequences with graphical smilies when this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. If you use a lot of macros, it is recommended that you turn this off, as it could cause some complications if any of your macro code is interpreted as a smiley.
* '''Use ToolTips for Inline Rolls'''
: Sets the default display ([[:Category:Display Roll Option|Display Roll Option]]) for rolls in the chat panel. Will use {{roll|tooltip}} if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, otherwise it will default to {{roll|expanded}}.
* '''Trusted Prefix Background'''
: Sets a custom background for macro output that comes from a [[Trusted Macro]].
* '''Trusted Prefix Foreground'''
: Sets a custom foreground (text color) for macro output that comes from a [[Trusted Macro]].
* '''Time between autosaves'''
: The amount of time in minutes between the autosaving of the chat log. This is not functional as of 1.3b54.
* '''Autosave Chat Log Filename'''
: The filename that will be used when automatically saving your chat log. This is not functional as of 1.3b54.

===Objects===
[[Image:prefs_interactions_objects.jpg|frame|right|Objects Section]] 
* '''Start Snap to Grid'''
: Tokens created on map's Object layer will automatically be set to '''Snap to Grid''' if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. 
* '''Start Freesize'''
: Tokens created on a map's Object layer will automatically be set to '''Freesize''' if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.

===Backgrounds===
[[Image:prefs_interactions_backgrounds.jpg|frame|right|Backgrounds Section]] 
* '''Start Snap to Grid'''
: Images dropped on a map's Background layer will automatically be set to '''Snap to Grid''', if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. 
* '''Start Freesize'''
: Images dropped on a map's Background layer will automatically be set to '''Freesize''', if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.

===Facing===
[[Image:prefs_interactions_facing.jpg|frame|right|Facing Section]] 
* '''On Edges'''
: A token's facing will snap to the edges when &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Edges are the lines that make up a grid cell.
* '''On Vertices'''
: A token's facing will snap to the vertices when &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Vertices are the points that connect the lines that make up a grid cell.

==Accessibility Tab==
[[Image:prefs_tab_accessibility.png|thumb|right|300px|Accessibility Tab on the Preferences Dialog]]
[[Image:prefs_accessibility_all.jpg|frame|right|Accessibility Tab Close-up]] 
* '''Chat Font Size'''
: The default size of the font in the chat panel; measured in points.
* '''ToolTip Initial Delay'''
: The time it takes for a tooltip to display when hovering the mouse over an element that possesses a tooltip; measured in miliseconds.
* '''ToolTip Dismiss Delay'''
: The time it takes for a tooltip to disappear when hovering the mouse over an element that possesses a tooltip; measured in miliseconds.

==Application Tab==
[[Image:prefs_tab_application.png|thumb|right|300px|Application Tab on the Preferences Dialog]]
===Save===
[[Image:prefs_application_save.jpg|frame|right|Save Section]] 
* '''Save Autorecover every [   ] min'''
: &lt;div style=&quot;color:gray&quot;&gt;Saves a copy of your campaign in the interval specified. Unlike Autosave, this will not overwrite your campaign file, but rather create a new one every time it automatically saves.&lt;/div&gt;
: 指定した間隔でキャンペーンのコピーを保存する。自動保存（Autosave）と異なり、この機能は現在のキャンペーンファイルを上書きせず、その代わりに保存のたびに新しいファイルを作成する。
* '''Save reminder on close'''
: &lt;div style=&quot;color:gray&quot;&gt;Displays a dialog when attempting to close the program with unsaved changes to your campaign when &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.&lt;/div&gt;
: 有効の場合、キャンペーンを変更後、保存せずにプログラムを閉じようとしたときに警告のダイアログを表示する。
* '''1.3b50 Compatability Mode'''
: Due to some changes in how certain data is stored in the campaign file in versions after 1.3b50, they might not be compatible with version 1.3b50 and earlier. If this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked your campaign will be saved in the older format, allowing it to be opened in older versions, but losing some of the new features.

===Map Defaults===
[[Image:prefs_application_mapdefaults.jpg|frame|right|Map Defaults Section]] 
* '''Halo line width'''
: Controls the width of the [[Halo]] when it is displayed on a [[Token]]. 
* '''Vision opacity'''
: Areas that are no longer directly visible, but have previously had their [[Fog of War]] exposed, will will be dimmed by layering a translucent black on top of them. This setting controls the opacity of the translucent black.
* '''Use halo color for vision'''
: Related to '''Vision opacity''', if this setting is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, the translucent color layered on top of previously viewed areas will be the [[Token|Token's]] [[Halo]] color as opposed to black.
* '''Autoshow Fog'''
: Will automatically expose [[Fog of War]] after moving a [[Token]] if &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.

===Macro Panels===
[[Image:prefs_application_macropanels.jpg|frame|right|Macro Panels Section]] 
* '''Default: Allow Players to Edit Macros'''
: In order for a macro to be considered a [[Trusted Macro]], players must not be able to edit it. This setting determines if a new macro should default to allowing players to edit if &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Disabling this setting can be very useful if you intend to create a lot of macros that you intend to be trusted.

==Sounds Tab==
[[Image:prefs_tab_sounds.png|thumb|right|300px|Sounds Tab on the Preferences Dialog]]
[[Image:prefs_sounds_all.jpg|frame|right|Sounds Tab Close-up]] 
* '''Play system sounds'''
: When &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, MapTool will play a sound when new content is sent to the chat panel.
* '''Only when window not focused'''
: When &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, the sound that MapTool plays when new content is sent to the chat panel will only play if MapTool is not the application that has focus.
[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Speed Up Your Macros</title>
    <ns>0</ns>
    <id>1086</id>
    <revision>
      <id>6271</id>
      <parentid>6270</parentid>
      <timestamp>2014-01-29T09:18:04Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <comment>/* macros */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27603">{{Advanced}}
==Introduction==
If you start creating your own framework and if you like the process, then most likely you will get to a point that some of your more advanced macros start to become a drag. MT script isn't the fastest of languages and there are a couple of functions or methods that can really slow things down. Fortunately a couple of users (like Aliasmask) have started testing different methods to speed up their code. Below you can find the results, some tips are based on conjecture others have been throughly tested to be faster. I you find a new faster method, don't hesitate to put it here.

==Do it yourself==
Recently I've added a new function to the [http://forums.rptools.net/viewtopic.php?f=46&amp;t=16066 Bag of Tricks] called Benchmark. This function can be found in the Setup tab of the virtual menu. On lib:EventMacros there is a group called 'Benchmark Macros' with one macro called 'Default' which should be empty. In this group you can create new macros. When you hit 'Benchmark' then the execution time of these macros will be calculated. The Default macro is used as reference and that execution time is deducted so the actual execution time of your added macros remains. The result is shown in the chat. If add one macro you will be presented with the execution time of that macro on that PC. If you add more then one macros then a comparison report is shown as well so you can get a feeling of which methods is faster.

This way you can run your own tests by simply adding your code to that group and running the Benchmark Macro. In the latest lib:EventMacros you can find two example macros 'if roll option' and 'if function' to show you how it works.

==Macro vs UDF vs directly==
This is again something to take into consideration. Sometimes you need to split up macro because of the {{code|CODE}} nesting limit, sometimes to prevent stack overflow and sometimes cause its easier. Here's the impact of your choices:&lt;br/&gt;

I've tested the macro:
&lt;source lang=&quot;mtmacro&quot;&gt;
   [r:&quot;Test&quot;]&lt;/source&gt;
in three ways. Once directly, once through a User Defined Functions (UDF) {{code|Test()}} and once through the macro call {{code|&quot;Test&quot;}}:
&lt;source lang=&quot;mtmacro&quot;&gt;
   [r:&quot;Test&quot;]
   [r:Test()]
   [r,macro(&quot;Test@lib:cifStopwatch&quot;):&quot;&quot;]
   [r:eval(&quot;Test()&quot;)]
&lt;/source&gt;
The result is (with 10,000 cycles): directly 8.5 seconds, UDF 14.3s, Macro 18.5 and Eval 15.4 seconds. In short, if speed is of the essence, try to keep it into one macro. If you need to split up: use UDF as much as possible. If you feed it one variable (argument) then the total time for both the UDF and the macro increases with 1 second.

==Storing and Retrieving Variables==
You can store a variable in three ways:
* on a token using {{func|setProperty}}
* on a lib:token using {{func|setLibProperty}}
* on one of the tokens identifiers ({{code|token.name}}, {{code|token.gm_name}}, {{code|token.label}})
The fastest method to '''retrieve''' a simple value is from the identifiers. If the time to retrieve a value from an identifier takes 1 second then the same value takes (on average) 1.2 seconds using {{func|getLibProperty}} and 1.8 seconds using {{func|getProperty}}. 
The same test but using a heavy json object: if we set the identifier again on 1 (still the fastest) we notice that: {{func|getLibProperty}} is still 1.2 however {{func|getProperty}} time has increased to 2.8 seconds. The json used was constructed out of 1000 identifiers. And the time average was taken over 10,000 loops.

Now the surprising part:
To '''set''' a value one would expect similar results but that ain't the case. Using the same heavy json it turns out that {{code|token.gm_name}} was the fastest and {{code|token.label}} the slowest !!! If {{code|gm_name}} is set to 1 second than the rest is: 2 seconds for both {{func|setProperty}} and {{func|setLibProperty}} (yes equal speed) and 2.4 seconds for {{code|token.label}}. 
Again 10,000 loops used to test.

I've ran more test, to see which method is faster to store multiple simple variables onto a libtoken and retrieving them again:
* Using json
* Using strProps list
* Each variable seperately.
The last method is by far the slowest (10x the time for the other methods). Using json or strProps does not really make a lot of difference though strProps are faster. What I tested:
&lt;source lang=&quot;mtmacro&quot;&gt;
    [testJson = json.set(&quot;{}&quot;, &quot;test0&quot;,test0,&quot;test1&quot;,test1,&quot;test2&quot;,test2,...,&quot;test9&quot;,test9)]
    [testJson = json.fromStrProp(strPropFromVars(&quot;test0,test1,test2,...,test9&quot;,&quot;UNSUFFIXED&quot;))]
    [testStrProp = strPropFromVars(&quot;test0,test1,test2,...,test9&quot;,&quot;UNSUFFIXED&quot;)]
&lt;/source&gt;
I also tried the strFormat trick (though the I could not properly retrieve the json object form the lib with this method:
&lt;source lang=&quot;mtmacro&quot;&gt;
    [testJson = strformat('{&quot;test0&quot;:&quot;%{test0}&quot;,&quot;test1&quot;:&quot;%{test1}&quot;,&quot;test2&quot;:&quot;%{test2}&quot;,...,&quot;test9&quot;:&quot;%{test9}&quot;}')]
    [testStrProp = strformat('test0=%{test0};test1=%{test1}...;test9=%{test9}')]
&lt;/source&gt;
Of these 5 methods the {{func|strPropFromVars}} and the {{func|strformat}} methods were the fastest: 9.1 seconds (10,000 cycles) and {{func|json.set}} the slowest 13.1s. The {{func|json.fromStrProp}} was slightly only slower 9.6s.

Retrieving the data showed roughly the same result, strProps are a bit faster:
&lt;source lang=&quot;mtmacro&quot;&gt;
    [result = getLibProperty(&quot;testJson&quot;,&quot;lib:OntokenMove&quot;)]
    [varsFromStrProp(json.toStrProp(result))]
    [result = getLibProperty(&quot;testStrProp&quot;,&quot;lib:OntokenMove&quot;)]
    [varsFromStrProp(result)]
&lt;/source&gt;
Using another method to retrieve the json vars e.g.
&lt;source lang=&quot;mtmacro&quot;&gt;
    [foreach(item, result):set(item, eval(item))]
&lt;/source&gt;
is considerably slower.

Another thing that is interesting is that using the above {{func|varsFromStrProp}} and {{func|strPropFromVars}} it hardly matter how many variables you set. I've tested this with setting 2 and 100 variables in one go. It turned out that {{func|strPropFromVars}} took 4x longer (4ms to set 100 vars vs 1 ms to set 2) and {{func|varsFromStrProp}} was equally fast for both 2 and 100! (ok a very small difference, 2 takes 0.9ms and 100 take 1.1ms). This was tested again with 10,000 cycles (I divided the results by 1,000 to get to the ms).

==Storing and Retrieving Variables II==
I've noticed that storing a LOT of properties on a token influences the set get-property method in a negative way. This I wanted to quantify. 

Keep in mind, this is quite a bit technical and mainly shows the effect of storing a certain amount of data on a token in an absolute sense. This was tested on an average PC

First test: setProperty() x1,x2,...x10000 to the value 10 and then immediately retrieving it (getProperty())

Result: no time difference between the first and the last set value.

Second test: changing the variable to a 26+ characters and the value to 260 characters. The total get/set time increased a bit, but again not changes whether is was value 1 or 1000.

Third test, same as the second, but now I raised the cap to 10,000. Finally we see something. The initial get/set time is 30,5 ms (averaged over the first 100 samples). The last 100 (average) took 130 ms !!

It turned out that with these variables and values that there was no change for the first 1000 variables and around 1200 a linear increase started of roughly +8ms per 2000 variables. Around 9200 an exponential increase started.  Variable 9176 took 96ms and variable 9290 took 118ms. Finally point 10,000 took 130ms (note that the times are averaged over the last 1000). If you look at the individual results then its interesting to note that the last 100 points generally took 100ms but every 14th variable took nearly 5x as long (475 ms).
[[Image:getsetpropertiesTime.jpg]]

Next test was increasing the length of the variable (so not the value). Starting with 'i', 'i1', 'i12', etc upto 'i1234....1000'. This remained at 21ms per get set 21 variables, after that a pretty steep linear increase of 40 ms extra for the 10000 variant. (20 took 20ms and 1000 took 60ms.)

Fourth test was increasing the length of the value, with the same method as directly above. This resulted in two linear increases with the break at 400. In short the increase from 1 to 400 characters is 22 to 28 ms (1.25ms increase per 100). While from 400 to 800 is 28 to 46 ms (4.5 increase per 100). Here I was still using a new property name for each variable. Which means that the previous variables also stored on the token will also influence the time.

In the final test I simply increased the length of the value with the same method as above, so this gives insight in the actual length of the value. Surprisingly this made hardly any difference. The increase from 1 to 10,000 characters was about 2ms. Which raises the question: when *does* it go wrong. So I bench-marked (in a 1000 test loop) writing and reading 1,10,100,1000,10000 and 100000 characters. For 1 to 1000 its roughly the same, after that it doubles for 10,000 and 100,000 is about '''87x'''''Italic text'' slower!!. Further testing (taking inbetween points) shows that its an exponential of 1.54. If you would assume that a processing time of 100ms (0.1 second) is acceptable, then you're at 50,000 characters.

==Token(), GetProperty() and switchToken()==
When you need to retrieve a property from a token that is not {{func|currentToken}} these are the three methods to get it. Now there are quite a lot of ways of how to use these and even combinations of these. I've ran two tests both tests with different approaches. The first test I retrieved 1 value, {{code|&quot;Dexterity&quot;}}, which contains a long (150 char.) string value:
&lt;source lang=&quot;mtmacro&quot;&gt;
  [tmp = getProperty(&quot;Dexterity&quot;, &quot;Eagle&quot;)]              0.9ms
  [token(&quot;Eagle&quot;): tmp = getProperty(&quot;Dexterity&quot;)]       1.3ms
  [switchToken(&quot;Eagle&quot;)][tmp = getProperty(&quot;Dexterity&quot;)] 1.3ms
  [token(&quot;Eagle&quot;): tmp = Dexterity]                      1.3ms
  [switchToken(&quot;Eagle&quot;)][tmp = Dexterity]                1.3ms
&lt;/source&gt;
In the second test I ran the same macros, but now I executed the above lines 10 times, but it turned out they were all equally fast with the exception of 
	[token(&quot;Eagle&quot;): tmp = getProperty(&quot;Dexterity&quot;)]
which was about 50% slower then the rest.
So I've upped the number to 50x:
&lt;source lang=&quot;mtmacro&quot;&gt;
  [tmp = getProperty(&quot;Dexterity&quot;, &quot;Eagle&quot;)]                    50x 18ms
  [token(&quot;Eagle&quot;): tmp = getProperty(&quot;Dexterity&quot;)]             50x 29ms
  added:
  [token(&quot;Eagle&quot;), CODE:{  [tmp = getProperty(&quot;Dexterity&quot;)] 50x }] 18ms
  [switchToken(&quot;Eagle&quot;)] 1x   [tmp = getProperty(&quot;Dexterity&quot;)] 50x 18ms
  [token(&quot;Eagle&quot;), CODE:{ [tmp = Dexterity] 50x }]                 17ms
  [switchToken(&quot;Eagle&quot;)] 1x [tmp = Dexterity]                  50x 16ms
&lt;/source&gt;
If you take into account minor fluctuations of my pc then again you can only say something of the second line, which apparently is the slowest, the rest is (surprisingly) still equally fast.

Fortunately I have a humongous json structure lying around (9,000 key value pairs and 175,000 characters) so I tried that one, only realizing after 10 minutes or so that calling such an object say 300,000 times might not be the smartest thing... so after rebooting my pc I tried again, this time first 1 (=300 times retrieving the object which took 14 seconds) and then 10x (137 seconds, its always nice if its scales along a straight line). This only made things even more confusing:
&lt;source lang=&quot;mtmacro&quot;&gt;
  [tmp = getProperty(&quot;Dexterity&quot;, &quot;Eagle&quot;)]                    50x 2s
  [token(&quot;Eagle&quot;): tmp = getProperty(&quot;Dexterity&quot;)]             50x 2s
  [token(&quot;Eagle&quot;), CODE:{  [tmp = getProperty(&quot;Dexterity&quot;)] 50x }] 2s
  [switchToken(&quot;Eagle&quot;)] 1x   [tmp = getProperty(&quot;Dexterity&quot;)] 50x 2s
  [token(&quot;Eagle&quot;), CODE:{ [tmp = Dexterity] 50x }]                 1.8s
  [switchToken(&quot;Eagle&quot;)] 1x [tmp = Dexterity]                  50x 1.6s
  added:
  [switchToken(&quot;Eagle&quot;)] 1x [tmp = Dexterity] 1x [tmp1 = tmp]  50x 1.6s
&lt;/source&gt;
I think the conclusions you can derive from this are:
* Don't do {{code|[token(tokID): var {{=}} getProperty(property)]}}, either use {{code|[var {{=}} getProperty(property,tokID)]}} or {{code|[token(tokID): var {{=}} property]}}.
* If you need only a few properties of a token use {{code|getPropety(property, tokID)}}.
* If you need a lot of properties use {{func|switchToken}} and then access the vars straight away.
* If you use {{func|switchToken}} and then assign the property to a local var, or you just keep using the property straightaway, makes no difference (although in the latter you might inadvertently change the property).

==jsons==
* Try to avoid nested json objects (so json object within a json object). Objects within a json array is likely better.
* When storing a json as a property on a token, try to limit the {{code|get/setproperty}}. Do it once, store it in a local variable and pass it along also into submacros. This also accounts if you're changing a property directly (so without {{code|get/setproperty}}) e.g.:

&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- this (using get/setPropery) --&gt;
[HP = getProperty(tokenName, Hitpoints)]
[HP = HP-1]
[setProperty(tokenNam, HP)]
&lt;!--is the same as this (changing property directly)--&gt;
[Hitpoints = Hitpoints - 1]&lt;/source&gt;

* It might be the case that converting (using {{func|encode}}) a json to string and then storing it on a token. Retrieving it using {{func|decode}}.
* If you want to store a huge and complex json variable temporarily on a token, don't use a property but use {{code|token.gm_name}} (or {{code|token.label}} or {{code|token.name}}) to store it (using a lib token for that). It goes without saying that this is a bit a of an extreme method, i.o.w. a hack. If you were to e.g. use the {{code|token.name}} variable on a lib token, interesting (that you don't want) stuff will happen.
* Overall keep in mind that read/write operations will get slower with the length of the json object. With extremely large json objects the read/write speed can bog down to 1 or more seconds per operation.

==jsons object vs json array vs lists==
For '''simple''' operations:&lt;br&gt;
  slower ------------------------------------------------------&gt; faster &lt;br&gt;
  json object operations  --&gt; json array operations --&gt; list operations &lt;br&gt;
The operations were building the structure and retrieving all values. The speed differences are significant!!!&lt;br&gt;
These test were done by comparing getting and setting 1000 x and y coordinates:
* 1 list with x items, with every item being a list with y items, using different separator: {{code|&quot;1,2,3,..; 1,2,3,..; 1,2,3,..&quot;}}
* 1 array with x items, where every items contains y items: {{code|&lt;nowiki&gt;[[&lt;/nowiki&gt;1,2,3,...],[1,2,3,...],[1,2,3,...], etc]}}
* 1 json containing x*y keys: {{code|{&quot;x1y1&quot;:{&quot;x&quot;:1,&quot;y&quot;:1}, &quot;x1y2&quot;:{&quot;x&quot;:1,&quot;y&quot;:2}, etc&lt;nowiki&gt;}&lt;/nowiki&gt;}}
Obviously there are situations where a json object or array will be faster just because its smarter coding or much easier to use them. So only give value to this test if you want to do something similar as done with this test.

==functions==
===Nested functions===
It seems I had it wrong before. I had it from hearsay, now I've benchmarked it myself. Nested is much faster then unnested. First I tried one nested function vs unnested for 10,000 cycles the result was 10s for nested and 15s for unnested. 
Then next test I ran a really nested function:
&lt;source lang=&quot;mtmacro&quot;&gt;
    [varsFromStrProp(json.toStrProp(json.fromStrProp(strPropFromVars(theList,&quot;UNSUFFIXED&quot;)))]
&lt;/source&gt;
vs unnested
&lt;source lang=&quot;mtmacro&quot;&gt;
    [tmp = strPropFromVars(theList,&quot;UNSUFFIXED&quot;)]
    [testJson = json.fromStrProp(tmp)]
    [tmp1  = json.toStrProp(testJson)]
    [varsFromStrProp(tmp1)]
&lt;/source&gt;
Running both 10,000 times resulted in: Nested '''14'''s and Unnested '''31'''s. It might not help the readability of you code, but nesting your functions '''can be more then twice as fast'''!!!

===Loop speeds===
The following loops:&lt;br/&gt;
{{roll|count}}&lt;br/&gt;
{{roll|for}}&lt;br/&gt;
{{roll|foreach}}&lt;br/&gt;
take exactly the same amount of time to roll a 1d100 10000 times. In other words, they're equally fast.
*CIF's stopwatch was used to measure this

This means that you can and should use the right loop function for the right reason. Some examples of good use: 
Some examples of proper use:
* use {{roll|foreach}} to loop through a list or json array
* use {{code|count(n)}} if you want to execute a routine n times
* use {{code|for(i, n, 0, -2)}} if you want to use an a-typical but regular countdown from {{code|n}} to {{code|0}}, using {{code|i}} in your routine.

==macros==
When getting arguments within a UDF (user defined function):
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Slow --&gt;
[h: var1 = json.get(macro.args,0)]
[h: var2 = json.get(macro.args,1)]
&lt;!-- Faster --&gt;
[h: var1 = arg(0)]
[h: var2 = arg(1)]
&lt;/source&gt;

'''Notes:'''
* If you use the {{roll|macro}} function you can only make use of the {{code|macro.args}} method (the slow way).
* This method doesn't work the other way around, if you set {{code|macro.return}} within a UDF you cannot use {{code|arg(0)}} from within the function you called the UDF from. E.g.;
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!--after calling some UDF:--&gt;
[h: doSomething(var)]
&lt;!--this works--&gt;
resultOfDoSomething = macro.return
&lt;!--this won't--&gt;
[resultOfDoSomething = arg(0)]
&lt;!--actually most likely it will 'work' but it won't contain the value you want --&gt;
&lt;/source&gt;

==eval vs evalMacro==
Test {{func|eval}} vs {{func|evalMacro}}. Used the following two functions:
  [h:eval(&quot;table('tbl_Image',2)&quot;)]
and
  [h:evalMacro(&quot;[table('tbl_Image',2)]&quot;)]
not quite surprising result: eval was twice as fast as evalMacro. Actual execution times:
eval: 0.8 ms
evalMacro: 1.6 ms

Tested other things as well e.g. &quot;2+2&quot;, which resulted in roughly the same times.

Basically they're both very fast so it doesn't really matter which you use. However as soon as you start a loop using this then it might get relevant!

==Tokens==
Though this isn't really about macros, it ''is'' about speed.
What you put in your tokens will also effect the snappiness of the game play.
* Having a lot (guesstimation &gt;100) of macrobuttons on a token will influence dragging it on the map (slow it down). Note: this issue has been partially fixed in MT by Rumble around b70-75. It still has impact on speed, but not, by a long shot, as much as it used to be.
* Having a token with lots of data stored on it, will effect the update of movement of a token on other pc's connected to the server.
* Large image on a token will also influence speed, try to keep them at 200x200 pixels or lower.
* Finally having a LOT of data on the token will influence the write speed for ALL properties. here a test result:
  setProperty on empty token      	took 2.4 ms
  setProperty on 'lots of data token'	took 82 ms
  getProperty on empty token      	took 2 ms
  getProperty on 'lots of data token'	took 2 ms

==&lt;nowiki&gt;&lt;!-- Comments --&gt;&lt;/nowiki&gt;==
There are two ways to put comment in MT script:
&lt;source lang=&quot;mtmacro&quot;&gt;
  &lt;!-- this is open comment --&gt;
&lt;/source&gt;
Note the space {{code|&quot; &quot;}} after {{code|&lt;nowiki&gt;'&lt;!--'&lt;/nowiki&gt;}}. This is essential or it won't be seen as comment.
Or:
&lt;source lang=&quot;mtmacro&quot;&gt;
  [H:'&lt;!-- this is hidden comment --&gt;']
&lt;/source&gt;
Note the quotes {{code|' '}} at the beginning and end, again you get errors if you forget them.

These two methods both have a big pro and a big con. The open comment is processed very fast. On a moderately fast pc it takes about 100 ms to process 10,000 lines (100 ms is the border time you start to notice in macro execution). In short you can use these freely. Do keep in mind, though, that if you put comment in a e.g. {{code|count(1000):}} loop, then this adds 1000 lines of comment to your code! The big con of the open comment however is stack. I've benchmarked this as well and it turns out to be completely system dependent, but I noticed that the text of about half a page of a book, ported straight to the chat, will render a stack overflow with a stack set to 5!!! That is not a lot of text. The best method to omit this issue is by setting the output of the macro standard to {{code|0}} in the UDF and use {{code|macro.return {{=}} result}} at the end. Another method is by making sure that at least all your loops are hidden {{code|[h,foreach(),CODE:{}]}} so all the comment you put inside can be open. 

The hidden comment thus has the big advantage that it does not add to the stack and the chances of a stack overflow are a lot less. However the big drawback is that its ''relatively'' slow. Mind you its still pretty fast, on (again a moderately fast pc) it takes 4 ms to execute, which means that it gets noticeable after around 250 lines. If however you keep slower systems in mind as well, this number might easily become half that! Another big advantage for the more experienced coder among use: if you use the console to check the running code {{code|[h:'&lt;nowiki&gt;&lt;!-- --&gt;&lt;/nowiki&gt;']}} shows up, {{code|&lt;nowiki&gt;&lt;!-- --&gt;&lt;/nowiki&gt;}} doesnt! So to track which routine is currently active I always start my macros with {{code|[h:'&lt;nowiki&gt;&lt;!-- macro name --&gt;&lt;/nowiki&gt;']}}. 

What I personally do is use {{code|[h:'&lt;nowiki&gt;&lt;!-- --&gt;&lt;/nowiki&gt;']}} outside any loops and {{code|if()}},{{code|CODE}} statements and {{code|&lt;nowiki&gt;&lt;!-- --&gt;&lt;/nowiki&gt;}} inside these loops and {{code|if}} statements. I obviously make sure that these routines are all hidden. 

[http://forums.rptools.net/viewtopic.php?f=20&amp;t=20298&amp;hilit=benchmark Here] a more in depth discussion on the subject.

==To [h: or not to [h:==
In a routine like e.g.:
&lt;source lang=&quot;mtmacro&quot;&gt;
  [h,count(100), CODE:{
    some code
  }]
&lt;/source&gt;
you can put in {{code|[h:some code]}} or {{code|[some code]}} which to the end result would make no difference. It turns out that no discernible difference between the two.

==if(): or if(,,)==
There is the {{func|if}} and {{roll|if}}. A simple test:
&lt;source lang=&quot;mtmacro&quot;&gt;
  [tmp = if(1,1,0)]
  [if(1): tmp = 1, tmp = 0]
&lt;/source&gt;
Resulted in the {{roll|if}} to be twice as slow. Although this is only 0.5 ms. Essentially they are both very fast. The {{func|if}} takes about 0.5 ms and the {{roll|if}} 0.9 ms.  Do keep in mind that in the {{func|if}} evaluates BOTH TRUE AND FALSE and {{roll|if}} only true OR false. So if you have a rather complex operation for the true and or false you might be faster of with {{roll|if}}.

==if(x&lt;0,0,x) or max(0,x)==
A comparison between {{func|if}} and {{func|max}}, where x was randomized (between -5 and 5)
Resulted in both functions being equally fast. {{func|max}} occasionally turned out to be slightly faster, but we're talking 0,08ms (==0,00008 seconds) which really is negligible.

==String concatenation, strformat, add, concat and + ==
The following lines of code were tested 10,000 times:
&lt;source lang=&quot;mtmacro&quot;&gt;
	[strformat(&quot;%{var1}%{var2}%{var3}%{var4}%{var5}%{var6}%{var7}%{var8}%{var9}&quot;)]		1.9377ms
	[strformat(&quot;%s%s%s%s%s%s%s%s%s&quot;, var1, var2, var3, var4, var5, var6, var7, var8, var9)]	2.0979ms
	[concat(var1, var2, var3, var4, var5, var6, var7, var8, var9)]				2.0056ms
	[add(var1, var2, var3, var4, var5, var6, var7, var8, var9)]				2.018ms
	[var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + var9]				1.9944ms
&lt;/source&gt;
The realistic conclusion is that THEY ARE ALL EQUALLY FAST !!
Looking at it at a more 'anal retentive' point of view: {{func|strformat}} is both the fastest and the slowest. This you start to notice when you have more then 600 lines of this type of code in one macro!! A second test made {{func|add}} the fastest, so there's also some marginal error...boiling down to the realistic fact that there is no difference!

Of course, as is the general belief, you'll notice the real speed difference when using functions... so I tested that as well (different pc so different times, you can't derive anything between the speeds of test1 vs this test.): 

&lt;source lang=&quot;mtmacro&quot;&gt;
	[h:var1	= getProperty(&quot;var1&quot;)]
	[h:var2	= getProperty(&quot;var2&quot;)]
	[h:var3	= getProperty(&quot;var3&quot;)]
	[h:var4	= getProperty(&quot;var4&quot;)]
	[h:var5	= getProperty(&quot;var5&quot;)]
	[h:var6	= getProperty(&quot;var6&quot;)]
	[h:var7	= getProperty(&quot;var7&quot;)]
	[h:var8	= getProperty(&quot;var8&quot;)]
	[h:var9	= getProperty(&quot;var9&quot;)]
	[strformat(&quot;%{var1}%{var2}%{var3}%{var4}%{var5}%{var6}%{var7}%{var8}%{var9}&quot;)]

	[strformat(&quot;%s%s%s%s%s%s%s%s%s&quot;, getProperty(&quot;var1&quot;), getProperty(&quot;var2&quot;), getProperty(&quot;var3&quot;), getProperty(&quot;var4&quot;), getProperty(&quot;var5&quot;), getProperty(&quot;var6&quot;), getProperty(&quot;var7&quot;), getProperty(&quot;var8&quot;), getProperty(&quot;var9&quot;))]

	[concat(getProperty(&quot;var1&quot;), getProperty(&quot;var2&quot;), getProperty(&quot;var3&quot;), getProperty(&quot;var4&quot;), getProperty(&quot;var5&quot;), getProperty(&quot;var6&quot;), getProperty(&quot;var7&quot;), getProperty(&quot;var8&quot;), getProperty(&quot;var9&quot;))]

	[add(getProperty(&quot;var1&quot;), getProperty(&quot;var2&quot;), getProperty(&quot;var3&quot;), getProperty(&quot;var4&quot;), getProperty(&quot;var5&quot;), getProperty(&quot;var6&quot;), getProperty(&quot;var7&quot;), getProperty(&quot;var8&quot;), getProperty(&quot;var9&quot;))]

	[getProperty(&quot;var1&quot;) + getProperty(&quot;var2&quot;) + getProperty(&quot;var3&quot;) + getProperty(&quot;var4&quot;) + getProperty(&quot;var5&quot;) + getProperty(&quot;var6&quot;) + getProperty(&quot;var7&quot;) + getProperty(&quot;var8&quot;) + getProperty(&quot;var9&quot;)]
&lt;/source&gt;

The respective times ('nothing' is an empty loop for reference):
  nothing count took			0.2203ms
  strformat(&quot;%{var1}%{var2}%{var3}etc&quot;)	3.5844ms
  strformat(&quot;%s%s etc&quot;, var1, var2, etc) 1.0036ms
  concat() 				0.9629ms
  add()					0.9591ms
  var1 + var2				0.9638ms

The first {{func|strformat}} is obviously slower as the vars need to be defined each loop. So a bit more 'fair' is to move the {{code|[var1  {{=}} …][var2 {{=}} …] etc.}} outside the first {{func|strformat}} loop. If you do that and rerun then you get:
  strformat(&quot;%{var1}%{var2}%{var3}etc&quot;)	0.8833ms
  strformat(&quot;%s%s etc&quot;, var1, var2, etc) 0.9929ms
  concat()				0.9565ms
  add()					0.9524ms
  var1 + var2 				0.9509ms

And here we see again that {{func|strformat}} is both the slowest and the fastest, but the speed difference is so insignificant that I would certainly not start rewriting my code. If you happen to have one macro that has 10,000 lines (indeed: ''ten thousand'' lines) of the slowest type then rewriting it to fastest type would save you 1 second execution time.  In short: not worth the effort.

==Assign Function result to Variable first or not (before multiple use) ==
Sometimes these tests surprises me, like in this case. Lets say you need to retrieve the same x position of a token multiple times, for example in a more complex macro. From a coding perspective its always faster to assign it to a variable first and then use it. However the benchmark told me something completely different:

The test code:
&lt;source lang=&quot;mtmacro&quot;&gt;
	[h:bot_startTime()]

	&lt;!-- empty loop, so you can extract the exact time it takes for the operation alone --&gt;
	[h,count(1000): 0]
	[h:loopTime = bot_subTime()]

	[h:Tx		= getTokenX()]
	[h:Ty		= getTokenY()]
	[h,count(1000): y = Tx + Ty]
	variable assignment: [r:bot_formatTime(bot_subTime() - loopTime)]&lt;br&gt;

	[h,count(1000): y = getTokenX() + getTokenY()]
	multiple function call: [r:bot_formatTime(bot_subTime() - loopTime)]
&lt;/source&gt;
which surprisingly resulted in:

variable assignment: 0.112s 
multiple function call: 0.039s

So using variables takes nearly 3x as long !! Keep in mind though that this is tested for a relatively simple function. Stuff like json.get() might render quite some different results. Which is why I pasted the entire code block here for future use. (The bot_ functions can be found in the [http://forums.rptools.net/viewtopic.php?f=46&amp;t=16066 Bag of Tricks]).



--[[User:Wolph42|Wolph42]] 08:52, 12 August 2010 (UTC)
[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Glossary/it</title>
    <ns>0</ns>
    <id>1087</id>
    <revision>
      <id>4403</id>
      <parentid>4402</parentid>
      <timestamp>2010-09-04T06:52:56Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <comment>/* M */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="316">==M==

;Macro
:Una serie di istruzioni testuali usate per automatizzare i processi i MapTool. Guarda [[Macros:introduction | Macro Introduction]] per ulteriori informazioni.

;Mappa
:Un file immagine visualizzato nella map display area in MapTool. Questa immagine è condivisa fra tutti i giocatori e il GM connessi.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Forms tutorial</title>
    <ns>0</ns>
    <id>1088</id>
    <revision>
      <id>6299</id>
      <parentid>6082</parentid>
      <timestamp>2014-08-02T04:07:07Z</timestamp>
      <contributor>
        <username>Bubblobill</username>
        <id>150</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25991">[[Category:Tutorial]]

{{Advanced}}

= HTML forms covered in fish =

''A tutorial to creating html forms for maptool.''

== What is this about? ==

The [[input|input()]] function is a great way to get data from the user. Its simple to use as well. But it limits you in the ways you can design the resulting dialog. You might even miss features like multi-line textboxes. Maybe you want keep an dialog open to send it when you are ready, but still want the other maptool features to work - and not freeze.

If you can't create the user interaction with [[input|input()]] you have to create a html form. And here I explain to you how to do that.

But be aware! A input pauses your macro, creates a pop up dialog and creates variables containing the entered data all by itself. With html forms you have to split the process in (at least) two macros and make all that by yourself.

I assume you know how to write simple macros and create/use lib:tokens. All my code examples will be located on a [[Library Token|lib:token]] named &quot;Lib:token&quot;.

'''NOTE''' I'm not the first one who tried to explain this. There is a nice tutorial on using html frames for creating a character sheet that covers even css embedding and tab page creation: [[Introduction to Dialogs and Frames]].

== Where can you use forms? ==

Maptool accepts html in uncountable places and theoretically where ever html is interpreted you could create a form. But really useful is it to place your html form either in a [[dialog (roll option)|dialog]] or a [[frame (roll option)|frame]]. A frame is a dockable window while a dialog is floating above the rest of the UI. A dialog has a close button as default while a frame has no buttons other than those you create there.

Both commands (or to be more specific: roll options) open some kind of window. Both frames and dialogs are named so when you use code that would open a window, it will update the content of an open window with the same name if that exists.

You can close dialogs in macro with [[closeDialog|closeDialog()]] and in later versions you can close frames as well ([[closeFrame|closeFrame()]]).

Lets create a macro &quot;openFrame&quot; so that we can display a form.
&lt;source line lang=&quot;mtmacro&quot;&gt;
[frame(&quot;myForm&quot;): {
    here will be a fishy form
}]
&lt;/source&gt;

For my following examples we will use this slightly changed openFrame-macro:
&lt;source line lang=&quot;mtmacro&quot;&gt;
[frame(&quot;myForm&quot;): {
    &lt;h3&gt;my form:&lt;/h3&gt;
    [r, macro(&quot;displayForm@Lib:token&quot;): &quot;&quot;]
}]
&lt;/source&gt;

And probably you can guess: all the form related code will be placed in  a displayForm-macro. So we can forget about opening the frame and concentrate all on forms. Yay.

== About forms ==

Now lets begin with that form. HTML supports user editable forms and a good variety of input fields that can be placed in such a form. A html page (your frame for example) can even contain multiple forms (but you'll only receive the content of one of them).

For general syntax information about the {{code|&lt;form&gt;}}-tag and the input fields I find  [[http://www.w3schools.com/html/html/forms.asp w3schools.com]] quite helpful.

We begin at the start and create a form with two text input fields.
&lt;source line lang=&quot;html4strict&quot;&gt;
&lt;!-- this example displays correctly but does nothing --&gt;
&lt;form&gt;
Character name: &lt;input type=&quot;text&quot; name=&quot;charName&quot;&gt;&lt;br&gt;
Strength: &lt;input type=&quot;text&quot; name=&quot;str&quot;&gt;
&lt;/form&gt;
&lt;/source&gt;

Note that you can place all possible html in such a form so you can easily design it any way you want. Create tables, use CSS, fonts, colors, ... '''Maptool only supports HTML3.2 and [[Supported CSS Styles|CSS1]]'''. This is because the java controls being used in maptool don't support more recent versions of HTML/CSS. Dont blame maptool ;)

While this is pretty handy you don't get the data your user enters yet. First we dont have a submit button and second maptool doesnt know where to send that data.

If we do it right a form - if submitted - calls another macro, lets call that 'processForm', and passes the entered data as macro.args.
You can receive this data as string property list or as json which I prefer. If you prefer string property lists you have to omit the method field of the form tag (and change the processForm-macros).

We specify the called macro using [[macroLinkText|macroLinkText()]]. You should not specify the macro.args here as it will interfere with the form data.

Now lets make my little form work:
&lt;source line lang=&quot;mtmacro&quot;&gt;
[h: processorLink = macroLinkText(&quot;processForm@Lib:token&quot;, &quot;all&quot;)]
&lt;form action=&quot;[r:processorLink]&quot; method=&quot;json&quot;&gt;
Character name: &lt;input type=&quot;text&quot; name=&quot;charName&quot;&gt;&lt;br&gt;
Strength: &lt;input type=&quot;text&quot; name=&quot;str&quot;&gt;&lt;br&gt;
&lt;input type=&quot;submit&quot; name=&quot;myForm_btn&quot; value=&quot;Okay&quot;&gt;
&lt;/form&gt;
&lt;/source&gt;

And create the processForm-macro.
&lt;source line lang=&quot;mtmacro&quot;&gt;
&lt;pre&gt;
[r: json.indent(macro.args,2)]
&lt;/pre&gt;
&lt;/source&gt;
With this setup we can very easily find out how a specific form packs the data entered and how we could work with that. For this tutorial this processForm-macro will do.

The output we receive from this example is
&lt;source line lang=&quot;mtmacro&quot;&gt;
{
  &quot;charName&quot;: &quot;the fishy dude&quot;,
  &quot;str&quot;: &quot;7&quot;,
  &quot;myForm_btn&quot;: &quot;Okay&quot;
}
&lt;/source&gt;
Now its pretty easy to access the name and strength using [[json.get|json.get()]].

== The input fields ==


Now let me introduce you to the input fields in detail. Some are a little tricky in how they send their data - so there will be advice about that as well.

In general all input fields should be given a name. This name will be used in the resulting json data as key.

[[image:Cif_forms_tutorial_example_input_fields.png]]

=== Text fields ===

&lt;source line lang=&quot;html4strict&quot;&gt;
&lt;input type=&quot;text&quot; name=&quot;&quot; size=&quot;&quot; maxlength=&quot;&quot; value=&quot;&quot;&gt;
&lt;/source&gt;
This is your standard one line text input field. The width of the field can be set with {{code|size}} and the maximum length of the input with {{code|maxlength}}. If you set a {{code|value}} your field will appear filled with that.

You can have a password type text field as well if you set

&lt;source line lang=&quot;html4strict&quot;&gt;
&lt;input type=&quot;password&quot; name=&quot;&quot; size=&quot;&quot; maxlength=&quot;&quot; value=&quot;&quot;&gt;

&lt;/source&gt;

=== Multi line text fields ===

If you need multiple lines you use
&lt;source line lang=&quot;html4strict&quot;&gt;
&lt;textarea name=&quot;&quot; cols=&quot;&quot; rows=&quot;&quot;&gt;
Enter your text here...
&lt;/textarea&gt;
&lt;/source&gt;
You can specifiy the size of that text box with {{code|cols}} and {{code|rows}}. A preset text would be written between the open and closing tags.

'''TRICK:''' You can process the content of a textarea line by line if you use the following trick. By using [[encode|encode()]] on the complete content you change line breaks into {{code|%0A}}. Then you can use string list functions using {{code|%0A}} as separator.

As example let me show you a processForm macro that adds all numbers you enter in the textarea - one number per line. Dice expressionsare evaluated.
&lt;source line lang=&quot;mtmacro&quot;&gt;
&lt;!-- processForm --&gt;
[h: formData = macro.args]
&lt;!-- get the content of a textarea named &quot;textarea&quot; --&gt;
[h: text = json.get(formData, &quot;textarea&quot;)]
&lt;!-- encode it --&gt;
[h: text = encode(text)]
&lt;!-- loop through the content --&gt;
[h: sum=0]
[h, foreach(line, text, &quot;&quot;, &quot;%0A&quot;), code: {
    &lt;!-- decode line again --&gt;
    [h: decodedLine = decode(line)]
    [h, if(isNumber(decodedLine):
        sum = sum + decodedLine;
        sum = sum + eval(decodedLine)
    ]
}]
&lt;!-- and output. done. --&gt;
[r: sum]
&lt;/source&gt;

=== Drop down lists ===

&lt;source line lang=&quot;html4strict&quot;&gt;
&lt;select name=&quot;&quot; size=&quot;&quot;&gt;
    &lt;option&gt;A&lt;/option&gt;
    &lt;option&gt;B&lt;/option&gt;
    &lt;option selected=&quot;selected&quot;&gt;C&lt;/option&gt;
&lt;/select&gt;
&lt;/source&gt;
'''NOTE''' {{code|multiple}} doesnt work, only one entry appears in the resulting json. Known bug.

=== Radio buttons ===

&lt;source line lang=&quot;html4strict&quot;&gt;
A&lt;input type=&quot;radio&quot; name=&quot;group1&quot; value=&quot;A&quot; checked=&quot;checked&quot;&gt;
B&lt;input type=&quot;radio&quot; name=&quot;group1&quot; value=&quot;B&quot;&gt;
C&lt;input type=&quot;radio&quot; name=&quot;group1&quot; value=&quot;C&quot;&gt;

A&lt;input type=&quot;radio&quot; name=&quot;group2&quot; value=&quot;A&quot; checked=&quot;checked&quot;&gt;
B&lt;input type=&quot;radio&quot; name=&quot;group2&quot; value=&quot;B&quot;&gt;
C&lt;input type=&quot;radio&quot; name=&quot;group2&quot; value=&quot;C&quot;&gt;
&lt;/source&gt;

=== Checkboxes ===

&lt;source line lang=&quot;html4strict&quot;&gt;
&lt;input type=&quot;checkbox&quot; name=&quot;group1&quot; value=&quot;A&quot;&gt; A
&lt;input type=&quot;checkbox&quot; name=&quot;group1&quot; value=&quot;B&quot;&gt; B
&lt;input type=&quot;checkbox&quot; name=&quot;group1&quot; value=&quot;C&quot;&gt; C
&lt;input type=&quot;checkbox&quot; name=&quot;group1&quot; value=&quot;D&quot; checked=&quot;checked&quot;&gt; D
&lt;/source&gt;
'''NOTE''' unchecked boxes don't appear in the json; only checked ones will.
So test if a box is checked by using {{code|json.contains}} on the field name.

See my [[Forms tutorial#Predefine checkboxes|&quot;Good advice&quot; tip #4]] for another way to treat this (you can predefine the value with a 0-value).

'''NOTE''' multiple selection doesnt work as well. So do not name the checkboxes alike.

=== Hidden data ===

&lt;source line lang=&quot;html4strict&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;&quot; value=&quot;&quot;&gt;
&lt;/source&gt;
Since you cannot send additional information to your form processor using the args parameter of {{code|macroLinkText}} you have to send it piggyback with the form data. This can be done with invisible fields.

=== Buttons ===

&lt;source line lang=&quot;html4strict&quot;&gt;
&lt;input type=&quot;submit&quot; name=&quot;&quot; value=&quot;&quot;&gt;
&lt;/source&gt;
The button caption is set via the {{code|value}} parameter.

'''NOTE''' only the pressed button appears in the json. If you use multiple buttons use [[json.contains|json.contains()]] to  identify it. Predefining the key/name could probably help (see checkboxes).

'''NOTE''' You can use '''html formatting''' inside of the button caption (value parameter). You have to enable this by beginning with {{code|&lt;html&gt;}} like this:

&lt;source lang=&quot;mtmacro&quot;&gt;

&lt;input type=&quot;submit&quot; value=&quot;&lt;html&gt;&lt;b&gt;Button&lt;/b&gt;&lt;/html&gt;&quot;&gt;

&lt;/source&gt;

You can't apply any kind of CSS to html inputs. 
To remove the html tags from the submitted value you can use code like this

&lt;source line lang=&quot;mtmacro&quot;&gt;

[H: submit = json.get(macro.args,&quot;submit&quot;)]
[H: submit = replace(submit,&quot;&lt;[^&gt;]*?&gt;&quot;,&quot;&quot;)]

&lt;/source&gt;

=== Image buttons ===

First you have to get the asset of the image you want to place on a button. Good ways to do so is by using an image table or image tokens. I wont explain that here in more detail.
&lt;source line lang=&quot;html4strict&quot;&gt;
&lt;input type=&quot;image&quot; src=&quot;&quot; name=&quot;&quot; value=&quot;&quot;&gt;
&lt;/source&gt;

This image button submits the form exactly as a submit button does. As {{code|src}} you have to set an image asset. Note that you cannot used resized assets (using the ASSETxSIZE notation or specifying the size on asset generating function calls).

It does not only send the button name and value but also the coordinates where you clicked in the image. This could be used for some pretty UI.

&lt;source line lang=&quot;mtmacro&quot;&gt;
&lt;!-- this image button pushed .. --&gt;

&lt;input type=&quot;image&quot; src=&quot;[r:getImage(&quot;Image:Attack&quot;)]&quot; name=&quot;img_btn&quot; value=&quot;image button clicked&quot;&gt;

&lt;!-- .. would send this args --&gt;
{
    &quot;img_btn.value&quot;: &quot;image button clicked&quot;,
    &quot;img_btn.x&quot;: &quot;21&quot;,
    &quot;img_btn.y&quot;: &quot;13&quot;
}
&lt;/source&gt;

== Events ==

Since I'll use this in one of my examples (see below) let me very shortly introduce you some kind of event maptool supports and how to set it up. A discussion about this can be found in the [http://forums.rptools.net/viewtopic.php?p=143242#p143242 maptool forums] and a list of events on the [[:Category:Event]] page.

Maptool macros can react on three events: if a token is changed, if token selection is changed and if impersonation is changed. You can specifiy a macro that is called if one event happens.

This will work if a frame is open at that moment. The onChangeToken-event is a little bit tricky. First it is fired numerous times and not only if you'd expect it. Second is your macro can change tokens and so fire the event and call itself… what could cause problems.

The other two events are pretty easy to use and quite handy for dumping informations about selected tokens and such.

To set it up you have to define a html header and specify a specific link element. So your frame content should begin like this:
&lt;source line lang=&quot;html4strict&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel='onChangeSelection' type='macro' href='macroLink'&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/source&gt;
Replace {{code|macroLink}} by an actual macroLinkText-call to a macro of your choice. A common practice is to call the frame opening macro itself to actualize the content. the {{code|rel}} parameter is set either {{code|onChangeSelection}}, {{code|onChangeImpersonated}} or {{code|onChangeToken}}.

== Good advice ==

=== Always encode user input ===

It is always wise to trust in the dumbness of users. If they can break things they will. And i dont say they do it intentionally.

So you should protect your macros against trouble making user inputs. For example can a comma inside of an item of a comma separated list break the list.

So its always always good to use [[encode|encode()]] on user input (and [[decode|decode()]] to .. well .. decode it again).

=== Building complex html forms can take time ===

Just be aware of this. Building and rendering html and collecting and displaying lots of data and images and fields can take serious time. If your frame is updated frequently it could cause speed issues.

Think about storing calculated frame content, only updating the necessary parts. Reduce the number of updates to the needed minimum. (See Caching)

Dont make things complicated if you do not have speed issues but be prepared to fight them if you do.

=== Caching html forms ===

Since building html forms can take serious amounts of time its a good practice to store build form html in a token property and reuse it as long it doesnt have to be rebuild. Its especially effective if you build complex stuff by accessing lots of property - usually the case if you build character sheets. When creating complex html structures and storing them into a token property you're asking for trouble so its common practice to encode them first before you store them.
It's also best to store character sheets (token specific) onto the (n)pc token and general forms like weapon list, skill list, etc. onto a lib:token

Here an example of 'caching' a charactersheet. 

&lt;source line lang=&quot;mtmacro&quot;&gt;
[h: rebuild = macro.args]
[h: id = currentToken()]
[h: output = getProperty(&quot;charSheetCache&quot;, id)]

[h, if(rebuild || output == &quot;&quot;), code: {
    [h: output = &quot;here you build&quot;]
    [h: output = output + &quot;your mega complex character sheet&quot;]
    ...
    [h: output = encode(output)]

    [h:'&lt;!-- though it might be better to define a UDF for that --&gt;']
    [h:'&lt;!-- e.g: output = encode(createSheetContent()) --&gt;']

    [h: setProperty(&quot;charSheetCache&quot;, output, id)]
};{}]

[frame(&quot;Character Sheet&quot;):{
    [r: decode(output)]
}]
&lt;/source&gt;


A nice technique to individualize cached forms/html is described here: [http://forums.rptools.net/viewtopic.php?f=20&amp;t=16324&amp;start=0  Making cached structures dynamic (Load BIG forms FAST)]

=== Don't forget the token context ===
When you work with macrolinks you can easily lose the token context. If you happen to work with explicit ids and get/setProperty() a lot that may be no problem for you.

However it does change the chat output. If a macrolink is called with unknown token context instead of token image and name the chat line begins with user name.

If you dont like this always specify the token context in your {{func|macroLink}} and {{func|macroLinkText}} calls.

An example of this can be found in the [http://forums.rptools.net/viewtopic.php?p=170425#p170425 forum].

=== Predefine checkboxes ===

Checkboxes only create data in macro.args if they are checked. There is a neat trick to always create the relevant data even if it is unchecked.
Predefine the key/value-pair using a hidden input with a 0 (of course you have to use the same name as your checkbox has). A checked checkbox will overwrite a predefined 0 while a unchecked checkbox (as it does not generate anything) won't overwrite a predefined 1.

If you want to have a initially checked checkbox you can set it as checked like this (regardless of beeing predefined or not)
&lt;source line lang=&quot;html4strict&quot;&gt;
&lt;input type=&quot;checkbox&quot; name=&quot;surprised&quot;  value=&quot;1&quot; checked=&quot;checked&quot; /&gt;
&lt;/source&gt;
Big thanks to wolph42 for learning me this.

=== Don't shy away from layout tables ===

In webdesign layout tables might be a no-go. Don't be afraid of them in maptool. They are a great way to precisly align your form elements. Let me demonstrate how different a simple layout table looks compared to a very simplistic inline approach.

[[Image:Cif forms tutorial example layout table.png]]

&lt;source line lang=&quot;mtmacro&quot;&gt;
[frame(&quot;test&quot;): {

&lt;h3&gt;this is ugly&lt;/h3&gt;
Value &lt;input type=&quot;text&quot; size=&quot;5&quot; /&gt;&lt;br&gt;
Option1&lt;input type=&quot;checkbox&quot; /&gt;&lt;br&gt;
Option2&lt;input type=&quot;checkbox&quot; /&gt;&lt;br&gt;
&lt;input type=&quot;submit&quot;&gt;&lt;br&gt;

&lt;h3&gt;this is pretty&lt;/h3&gt;
&lt;table&gt;
&lt;tr&gt;
   &lt;td&gt;Value&lt;/td&gt;
   &lt;td&gt;&lt;input type=&quot;text&quot; size=&quot;5&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;Option1&lt;/td&gt;
   &lt;td&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;Option2&lt;/td&gt;
   &lt;/td&gt;&lt;input type=&quot;checkbox&quot; /&gt;
&lt;/td&gt;
&lt;tr&gt;
   &lt;td colspan=&quot;2&quot;&gt;&lt;input type=&quot;submit&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

}]
&lt;/source&gt;

== The big examples ==

=== Character sheet/editor ===

Lets create an character sheet and editor for the [[Sample Ruleset|maptool sample ruleset]] using what we learned so far.


[[image:Cif_forms_tutorial_screenshot_example1.png]]

First we need a frame. We want it to auto-update with the selected content. We pass the selected tokens to the character sheet generating macro so we know what do display.

We want more eyecandy, so we will use css. As we like separating css rules from the content we will place it in its own macro.

'''openCharacterSheet'''
&lt;source line lang=&quot;mtmacro&quot;&gt;
[h: link = macroLinkText(&quot;openCharacterSheet@Lib:token&quot;, &quot;none&quot;)]
[frame(&quot;csheet&quot;): {
&lt;html&gt;
&lt;head&gt;
&lt;link rel=&quot;onChangeSelection&quot; type=&quot;macro&quot; href=&quot;[r:link]&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css@Lib:token&quot;&gt;&lt;/link&gt;
&lt;/head&gt;
&lt;body&gt;
[r, macro(&quot;characterSheet@Lib:token&quot;): getSelected()]
&lt;/body&gt;
&lt;/html&gt;
}]
&lt;/source&gt;

'''css'''
&lt;source line lang=&quot;css&quot;&gt;
.odd { background-color: #FFFFFF }
.even { background-color: #EEEEAA }
th { background-color: #113311; color: #FFFFFF }
&lt;/source&gt;

Then we have to actually build the character sheet. Since selection will cause this to be called we have to deal with empty and multiple selections. We'll just don't create any output then.

'''characterSheet'''
&lt;source line lang=&quot;mtmacro&quot;&gt;
[h: id = macro.args]
[r, if(listCount(id)!=1), code: {};{

[h: link = macroLinkText(&quot;editCharacterSheet@Lib:token&quot;, &quot;all&quot;)]
&lt;form action=&quot;[r:link]&quot; method=&quot;json&quot;&gt;
 &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;[r:id]&quot;&gt;
&lt;h1&gt;[r:getName(id)]&lt;/h1&gt;

&lt;table width=&quot;*&quot;&gt;
&lt;tr&gt;
  &lt;th colspan=&quot;2&quot;&gt;Primary Attributes&lt;/th&gt;
&lt;/tr&gt;

[h: attributes = &quot;Strength, Dexterity, Intelligence, Endurance&quot;]
[h: row = &quot;odd&quot;]
[r, foreach(attrib, attributes, &quot;&quot;), code: {
    &lt;tr class=&quot;[r:row]&quot;&gt;
    &lt;td&gt;&lt;b&gt;[r:attrib]:&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;[r:attrib]&quot; value=&quot;[r:getProperty(attrib, id)]&quot; size=&quot;3&quot; align=&quot;right&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    [h: row = if(row==&quot;odd&quot;, &quot;even&quot;, &quot;odd&quot;)]
}]

&lt;tr&gt;
  &lt;th colspan=&quot;2&quot;&gt;Secondary Attributes&lt;/th&gt;
&lt;/tr&gt;
[h: attributes = &quot;Hit Points, Armor, Movement&quot;]
[h: row = &quot;odd&quot;]
[r, foreach(attrib, attributes, &quot;&quot;), code: {
    &lt;tr class=&quot;[r:row]&quot;&gt;
    &lt;td&gt;&lt;b&gt;[r:attrib]:&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;[r:getProperty(attrib, id)]&lt;/td&gt;
    &lt;/tr&gt;
    [h: row = if(row==&quot;odd&quot;, &quot;even&quot;, &quot;odd&quot;)]
}]
[h: classes = &quot;Warrior, Rogue, Wizard, Priest&quot;]
[h: CharClass = getProperty(&quot;CharClass&quot;, id)]
&lt;tr class=&quot;[r:row]&quot;&gt;
    &lt;td&gt;&lt;b&gt;Class:&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;
        &lt;select name=&quot;CharClass&quot; size=&quot;1&quot;&gt;
        [r, foreach(c, classes, &quot;&quot;), code: {
            &lt;option [r, if(c==CharClass): &quot;selected&quot;]&gt;[r:c]&lt;/option&gt;
        }]
    &lt;/select&gt;
    &lt;/td&gt;
&lt;/tr&gt;

&lt;input type=&quot;submit&quot; name=&quot;edit_btn&quot; value=&quot;Submit changes&quot;&gt;
&lt;/form&gt;
}]
&lt;/source&gt;

If the submit button is pressed we want to save the changes back to the token.

'''editCharacterSheet'''
&lt;source line lang=&quot;mtmacro&quot;&gt;
[h: arguments = macro.args] 
[h: id = json.get(arguments, &quot;id&quot;)]

&lt;!-- set primary attributes --&gt;
[h: attributes = &quot;Strength, Dexterity, Intelligence, Endurance&quot;]
[h, foreach(attrib, attributes), code: {
    [h: val = json.get(macro.args, attrib)]
    [h, if(! isNumber(val)): val=eval(val)]
    &lt;!-- allowed values are 1..6 --&gt;
    [h: val = min(max(val,1), 6)]
    [r: setProperty(attrib, val, id)]
}]

[h: setProperty(&quot;Hit Points&quot;, 6*getProperty(&quot;Endurance&quot;,id), id)]
[h: setProperty(&quot;Class&quot;, json.get(macro.args, &quot;CharClass&quot;), id)]
[h: setProperty(&quot;Movement&quot;, getProperty(&quot;Dexterity&quot;,id), id)]


[h: CharClass = getProperty(&quot;CharClass&quot;, id)]





[h, switch(CharClass):
    case &quot;Warrior&quot;: val=6;
    case &quot;Rogue&quot;: val=2;
    case &quot;Wizard&quot;: val=1;
    case &quot;Priest&quot;: val=4;
   default: val=0
]
[h: setProperty(&quot;Armor&quot;, val, id)]

[h: setProperty(&quot;Hit Points&quot;, 6*getProperty(&quot;Endurance&quot;,id), id)]

Changes saved to [r: getName(id)].
[h, macro(&quot;openCharacterSheet@Lib:token&quot;): id]
&lt;/source&gt;

If you'd want to play with this you'd surely come up with lots of improvements .. great! I would as well. But this should be enough to demonstrate building a character sheet or editor with html forms.

'''Download''' this example:[http://www.bastian-dornauf.de/example1.rptok example1.rptok](token is saved with b73) Drop this libtoken into an empty map and toy around with it.

=== Click-based Target selection ===

There are very differen ways how to select targets of an action. The clickbased targeting (first done by Rumble) works best in maptool version b70 or later with the &quot;unowned selection&quot; feature.


[[image:Cif_forms_tutorial_screenshot_example2.png]]

You impersonate or select the active token. Then you execute a macro, eg &quot;Attack&quot; that opens a frame. In that frame you can enter additional infos like modifier. While that frame is open you select ((with the mouse on the map)) the target(s) of the attack. The frame has a button that actually performs the attack.

Lets start with the macro that opens that frame.

'''openActionFrame'''

This macro first determines what token should be considered the ''active'' token. A token impersonated would be preferred. Otherwise the selection is taken. If no or multiple tokens are selected the macro us aborted.

Then the macro checks if the user has the right to perform actions with   that token - he has if he is GM or own the token.

After that the current selection is cleared and the frame displaying code is called.

If you have different actions to perform here would the place to branch into different actionFrames according to the chosen action.

&lt;source line lang=&quot;mtmacro&quot;&gt;
[h: chosenAction = macro.args]
[h, if(hasImpersonated()): activeId = getImpersonated(); activeId = getSelected()]
[h, if(listCount(activeId)!=1): assert(0, &quot;You have to select only one token&quot;)]
[h: gm = isGM()]
[h: owned = isOwner(getPlayerName(), activeId)]
[h, if(gm ||  owned): &quot;&quot;; assert(0, &quot;You have no right to act with this token.&quot;)]
[h: deselectTokens()]

&lt;!-- call right actionFrame for chosenAction --&gt;
[r, macro(&quot;actionFrame@Lib:tkn&quot;): activeId]
&lt;/source&gt;


Now we need a way for the user to call this macro. This can be either a campaign or a token macro - depending on your taste.

'''Attack'''

&lt;source line lang=&quot;mtmacro&quot;&gt;
[r, macro(&quot;openActionFrame@Lib:token&quot;):&quot;Attack&quot;] 
&lt;/source&gt;

''Note'' that I send {{code|&quot;Attack&quot;}} to the frame opening macro and that this is placed in a variable named {{code|chosenAction}}. It is never used. If you want to support different actions (like ranged and melee attacks) you could, right after the comment, branch - depending on {{code|chosenAction}} - into different actionFrame.

'''actionFrame'''
This is pretty simple. It shows a frame and uses the {{code|onChangeSelection}}-event to display the targets.

&lt;source line lang=&quot;mtmacro&quot;&gt;
[h: activeId = macro.args]
[h: selection = getSelected()]
[h: link = macroLinkText(&quot;actionFrame@Lib:tkn&quot;, &quot;none&quot;, activeId)]
[h: perform= macroLinkText(&quot;performAction@Lib:tkn&quot;, &quot;all&quot;)]
[frame(&quot;Action&quot;): {
&lt;html&gt;
&lt;head&gt;
&lt;link rel='onChangeSelection' type='macro' href='[r:link]'&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;b&gt;Attacker:&lt;/b&gt;&lt;br&gt;
[r, token(activeId): strformat(&quot;&lt;img src='%s' alt='%s'&gt;&quot;, getTokenImage(50), getName())]
&lt;br&gt;
&lt;b&gt;Targets:&lt;/b&gt; &lt;br&gt;
[r, foreach(id, selection, &quot; &quot;), code: {
[r, token(id): strformat(&quot;&lt;img src='%s' alt='%s'&gt;&quot;, getTokenImage(50), getName())]
}]
&lt;form action=&quot;[r:perform]&quot; method=&quot;json&quot;&gt;
&lt;input type=&quot;text&quot; name=&quot;mods&quot; value=&quot;0&quot;&gt;&lt;br&gt;
&lt;input type=&quot;submit&quot; name=&quot;btn_submit&quot; value=&quot;Perform action&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;[r:activeId]&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;targets&quot; value=&quot;[r:selection]&quot;&gt;
}]
&lt;/source&gt;

'''performAction'''
&lt;source line lang=&quot;mtmacro&quot;&gt;
[h: arguments = macro.args]
[h: id = json.get(arguments, &quot;id&quot;)]
[h: targets = json.get(arguments, &quot;targets&quot;)]
[h, if(listCount(targets)&lt;1): abort(0)]
&lt;!-- target and performer could be the same --&gt;
&lt;!-- target could be one or many --&gt;

&lt;!-- roll the attack --&gt;
&lt;b&gt;Melee attack:&lt;/b&gt;&lt;br&gt;
[r, foreach(target, targets, &quot;&lt;br&gt;&quot;), code: {
    &lt;b&gt;[r: getName(id)]&lt;/b&gt; rolls
    [r, token(id): rollResult = 1d20 + Strength]
    [r, if(rollResult&gt;=15), code: {
        and hits &lt;b&gt;[r:getName(target)]&lt;/b&gt; for
        [r: dmg = 1d6 + getProperty(&quot;Strength&quot;, id) - getProperty(&quot;Armor&quot;, target)]
        points of damage.
        [h: setProperty(&quot;Hit Points&quot;, getProperty(&quot;Hit Points&quot;, target) - max(0,dmg), target)]
    };{and misses [r:getName(target)]}]
}]
&lt;/source&gt;
This macro does the actual attack. The attacker and the targets are submitted via {{code|macro.args}}. The rest is the usual dice rolling and comparing to target numbers and stuff...

Again this could be done better. It doesnt modify the roll by the entered mods. It does not even model the sample ruleset right. You'd want to support attack powers and maybe set states for being wounded or dead.

But it demonstrates how to target .. the rest is up to you.

'''Download''' a lib token for this example [http://www.bastian-dornauf.de/example2.rptok example2.rptok] (token is saved with b73)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Game Hosting/it</title>
    <ns>0</ns>
    <id>1089</id>
    <revision>
      <id>6388</id>
      <parentid>6387</parentid>
      <timestamp>2015-10-16T09:25:37Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19682">{{Languages|Introduction to Game Hosting}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}__TOC__

==Introduzione==

Come già visto nella [[Introduction_to_Mapping/it|Introduzione al Mapping]], MapTool permette di creare mappe e &quot;miniature&quot; virtuali (conosciute nel gergo del programma come [[Introduction_to_Tokens/it|tokens]]) da utilizzare per riprodurre una sessione di gioco di ruolo proprio come se la si giocasse su un vero tavolo. Infatti, è per questo che chiamiamo Maptool un &quot;Virtual tabletop&quot; o &quot;VTT&quot; (tavolo virtuale). In questa guida tratteremo la ragione principale dell'esistenza di MapTool: Condividere una mappa con altri giocatori attraverso internet.

'''Nota:''' MapTool non è utile ''solo'' per giocare online - molte persone lo usano per le loro sessioni faccia a faccia, perché con una mappa virtuale si possono fare cose impossibili con una reale. Inoltre, avete meno probabilità di roversarci sopra una birra. Tuttavia questa guida presume che giochiate online. 

L'introduzione al mapping vi ha guidato attraverso i passi base per procurare MapTool, aprirlo e disporre map e token. Ha anche parlato del salvataggio dei Campaign Files e del movimento/zoom di map e token. Queste sono le caratteristiche principali del programma senza le quali niente del resto che è scritto in proposito avrebbe valore!

Poiché l'hosting non è divertente senza persone che si connettono alla nostra partita, la parte finale della guida illustra come connettersi al server di MapTool. Avete bisogno di spiegare ai vostri amici come fare, quindi siate sicuri di leggere questa sezione!

Infine, visto che questa guida parla di ''ospitare'' (hosting) un gioco online, &quot;voi&quot; sarete intesi come &quot;la persona che ha in esecuzione il server&quot;.

==Architettura==

Quando viene usato per giocare online, MapTool usa un architettura ''client-server''. In altre parole, una persona (usualmente il GM, ma non per forza) utilizza MapTool per avviare un ''server'' e le altre persone del gruppo ci si connettono come ''clients''. 

Una volta che si avvia il server e tutti sono collegati, il campaign file (con tutte le maps, tokens e le altre informazioni) è quindi condiviso con tutti i giocatori, in modo che chiunque di loro possa osservare la stessa mappa, gli spostamenti dei token propri e degli amici, inserire testo nella finestra di chat e divertirsi molto.

==Una Parola sugli accessori del Networking==

Uno dei cimenti con la quale ci si dovrà confrontare durante la creazione di una partita a MapTool (come per le altre applicazioni client-server incluso gli altri programmi di Virtual Tabletop), è configurare la vostra rete domestica per consentire agli amici di connettersi al vostro server. 

Ci sono diversi modi per configurare la vostra rete per consentire a Maptool di hostare attraverso internet. UPnP, port forwarding, oppure una VPN (un programma per il Networking privato su reti pubbliche). Dipendentemente dal vostro computer, ISP ed hardware (come una connessione via cavo/DSL e o router) verrà determinata quale di queste opzioni funzionerà meglio per la vostra situazione - con gli innumerevoli tipi di reti domestiche e di hardware, non è possibile darvi un singolo insieme di regole che garantiscano il successo.

===UPnP===

Un alternativa al port forwarding - se disponibile sul vostro router - si chiama ''UPnP'' (acronimo di ''Universal Plug-and-Play''). Questa peculiarità, invece di indicare permanentemente &quot;il traffico transita sulla porta XYZ&quot;, comunica al router &quot;per un po' - mentre giochiamo - dovrò chiederti di aprire la porta XYZ per noi. Sarebbe stràààfico&quot;. 

In altre parole, questo rende la gestione delle porte e del traffico in entrata/uscita più semplice e scorrevole. Indubbiamente, l'aspetto negativo è che non tutto supporta l'UPnP e si dovrà capire se la propria rete può farlo. Nondimeno, se il vostro hardware di rete lo supporta, questo è senza dubbio il modo più semplice per conseguire la corretta esecuzione di un server di Maptool.

===Port Forwarding===

Per le reti domestiche che utilizzano router o firewall fisici probabilmente occorrerà configurare il ''port forwarding'' (apertura delle porte). Questo è un meccanismo per il quale le informazioni in arrivo sulla ''vostra'' rete, attraverso una specifica ''porta'', sono spedite nel posto giusto all'''interno'' della vostra rete. Questo è importante per voi che siete l'esecutore del server di MapTool, visto che i tuoi amici hanno bisogno di inviare le informazioni al posto giusto!

Le istruzioni specifiche per configurare il port forwarding dipendono dall'hardware, dovrete controllare il manuale per questo. L'idea base è che voi indichiate due cose al vostro router/switch/firewall:

# Quale porta userà MapTool (più avanti avrete i dettagli) - questo dirà al router &quot;delle informazioni possono arrivare sulla porta XYZ, fai attenzione!&quot;
# Quale computer, all'interno della rete, deve ricevere queste informazioni - in sostanza, &quot;e quando delle informazioni arrivano su questa porta, spediscile ''quì''&quot; 
## Per coincidenza, configurare il port forwarding comunica al router anche dove far passare le informazioni in ''uscita''. 

Questo è in breve il port forwarding, la ragione principale per cui avete bisogno di impostarlo è che la maggior parte dei router (specialmente se sono configurati in maniera corretta e sicura) non consentono il traffico casuale di informazioni.

===Precisazioni e approfondimenti sul Networking===

Ero pronto a scrivere un'elaborata sezione sul Networking finché mi sono accorto che ce n'è già una eccellente nelle [http://forums.rptools.net/download/file.php?id=116 FAQ] scritta da Azhrei sul [http://forums.rptools.net Forum di Maptool]. Se avete poca dimestichezza su concetti come Port Forwarding, configurazione del router o funzionamento della rete (in generale), provate a leggere le FAQ. 

Se invece la configurazione e gestione di una rete casalinga (specialmente se siete capaci di configurare programmi che agiscono da server o aprire porte per altre applicazioni) vi è familiare, far funzionare MapTool come un server risulterà normale amministrazione: essenzialmente dovrete configurare il port forwarding oppure l'UPnP sul vostro router per permettere al traffico di rete di MapTool di passare. 

Se avete bisogno di informazioni specifiche sulla configurazione del port forwarding per il vostro hardware di rete cercate in [http://www.portforward.com Portforward.com] per consultare una vasta raccolta di guide e programmi appositi al riguardo.

D'altronde, se tutto quello scritto in precedenza non ha alcun significato per voi: leggete [http://forums.rptools.net/download/file.php?id=116 Networking FAQ]! Tutto vi sarà rivelato!

Ora proseguiamo il discorso.

==Avviare un Server di MapTool==

===Presupposti===

Da quì in poi le istruzioni considereranno configurata la rete per la gestione del traffico di MapTool (attraverso il port forwarding o l'UPnP per esempio). Se non è così, bisognerà che capiate come farlo prima che sia possibile far partire un server utilizzabile dai vostri amici.

===La finestra di dialogo Start Server===

[[Image:mt-file-menu-startserv.jpg|thumb|Selezionare ''Start Server'' dal menu File]]

[[Image:mt-start-server.jpg|thumb|La finestra di dialogo '''Start Server''']]

1. Andare su '''File &gt; Start Server'''.

2. Ora potrete vedere la finestra '''Start Server''' 
. In essa ci sono molte opzioni.

===Opzioni del Server ed Impostazioni===

====Impostazioni====

* '''Username''': Questo è il nome che apparirà in chat e nella finestra Connections; potete scriverci quello che preferite.
* '''Role''': questo menù a tendina comunica a MapTool  che ''tipo'' di utente siete: siete un GM (e quindi in possesso del Potere Cosmico Totale di tutte le funzioni di MapTool) o siete un giocatore, che sopravvive ai capricci del GM (o, in altre parole, ha solo accesso alle funzioni del player)? Nontate che un gioco può avere anche più di un GM! 
* '''Port''': un impostazione ''veramente'' importante, qui è dove dovrete indicare a Maptool la porta di trasferimento che avete configurato sul router. Se gli date una porta sbagliata Il traffico di MapTool non sarà incapace di uscire dalla vostra rete e non avrete nessun gioco!
* '''RPTools Alias''': questo campo vi consentirà di impostare un &quot;soprannome&quot; al vostro server per apparire nel registro server di RPTools. Di base ciò vi servirà a comunicare ai vostri giocatori &quot;cercate il Sublime Server e connettetevici&quot; piuttosto che &quot;connettetevi al server all'IP 123.45.678.9&quot;
* '''Passwords''': Potete proteggere il vostro server configurando una password. Decidere una password è un operazione opzionale; tuttavia, se lasciate in bianco chiunque potrà trovare e connettersi al vostro server come utente. Ci sono due categorie di password:
** '''GM''': la password da GM si usa per chiunque abbia  l'accesso remoto completo alla campagna benché ci siano un piccolo numero di funzionalità non possibili in remoto, come il caricamento di una campagna. La password da GM si usa solitamente per un Master secondario in modo da poter condividere i suoi compiti, ma può anche essere usata in altri casi dove il GM non riesce a configurare correttamente l'hosting e uno dei giocatori ospita la sessione.
** '''Player''': le persone connesse al server con il ruolo di &quot;Player&quot; utilizzeranno questa password per connettersi.

====Proprietà, Visione e Capacità====

* '''Strict Token Ownership''': MapTool fa uso di un concetto chiamato &quot;token ownership&quot; per controllare chi può selezionare, muovere o guardare nelle  [[Macros:Glossary/it#P|proprietà]] di un token specifico. Se abilitate ''Strict Token Ownership'', solamente il &quot;proprietario&quot; di un determinato token potrà compiere qualsiasi azione su di esso - tutti gli altri potranno solo guardarlo.
* '''Players can reveal vision''': MapTool possiede un sistema di visione e nebbia-di-guerra (dove si può configurare come i tokens &quot;vedono&quot; la mappa). Con questa opzione abilitata, i giocatori possono scoprire l'area che è &quot;visibile&quot; ai loro token senza l'intervento del GM (in altre parole, un area sconosciuta è coperta dalla nebbia di guerra e appare opaca sullo schermo; quando la rivelate il rivestimento opaco viene scoperto e la mappa sottostante diventa visibile). Altrimenti il GM dovrà liberarla tutta. 
* '''Use Individual Views''': Nel sistema di visione menzionato prima, i token dei giocatori possono &quot;condividere&quot; la propria visione (''ossia'', tutti i giocatori riescono a vedere quello che vede ognuno) oppure essere limitati alla propria.
* '''Restricted Player Impersonation''': Questo significa che i giocatori possono impersonare solamente i token che gli appartengono (guardare di seguito).
* '''Players Receive Campaign Macros''': MapTool permette di scrivere [[Macros:introduction/it|macros]], che sono fondamentalmente sequenze di testo, token e tiri di dado usati per automatizzare alcuni eventi - in sostanza, piccoli script che fanno &quot;qualcosa&quot;. Il GM può creare &quot;Campaign Macros&quot; che saranno dispoibili a tutti i giocatori se questa opzione è attivata. 
* '''Use Tooltip for [] rolls''': Abilitando questa opzione qualsiasi lancio di dadi verrà rinchiuso in parentesi quadre che ne mostreranno solo il risultato, per vedere i dettagli del tiro basterà posizionarci il puntatore del mouse sopra.

===Testare la connessione===

&lt;s&gt;Prima di avviare il vostro server è una buona idea premere il pulsante '''Test Connection'''. Questo manderà un messaggio ad un server di RPTools.net chiedendogli di provare a connettersi al vostro computer - in altre parole, il server di test su RPTools.net cercherà di capire se il vostro computer è visibile su internet!&lt;/s&gt;

&lt;s&gt;Quello che vorrete leggere è '''Success! I can see your computer!''' e se questo si mostrerà saprete con certezza che il vostro server sarà visibile.&lt;/s&gt;

&lt;s&gt;Se ''non'' vedrete un messaggio che acclama il successo del test, sarà necessario che indaghiate sul port forwarding e la configurazione della vostra rete per sincerarvi di aver impostato le giuste porte e tutto il resto.&lt;/s&gt;&lt;sub&gt;Questa descrizione è deprecata.&lt;/sub&gt;


'''Nota:''' La connessione di test spesso non funziona e ha causato molte seccature. Quindi è stata rimossa in b76 (o giù di li). La finestra di avvio del server ora ha un bottone &quot;Networking Help&quot; che vi porta alle Networking FAQ nel forum. Questo è veramente il posto dove recarsi. Leggete (si leggete, non sfogliate!) e seguite i passi. Se non vi è d'aiuto la comunità sarà sicuramente in grado di darvi una mano.

Per un veloce test di connessoine potete usare canyouseeme.org[http://canyouseeme.org/]

===Ottieni le Informazioni di Connessione e Dille ai Tuoi Amici===

[[Image:mt-file-menu-cinfo.jpg|thumb|Apertura delle ''Connection Information'' dal menu File]]

[[Image:connection-info.jpg|thumb|La finestra di dialogo '''Connection Information''']]

Supponendo che il test di connessione abbia avuto successo e voi premiate '''OK''' per avviare il server, sarà ora possibile controllare le proprie ''Connection Information'' per verificare le informazioni di connessione. Dovrete passare queste informazioni agli amici perché possano connettersi al vostro server.

1. Andate su '''File &gt; Connection Information'''. 

Questo mostrerà ciò che MapTool sa attualmente sul vostro computer. Fin quando non avrete avviato un server potrete vedere esclusivamente il vostro IP interno ed esterno (questa è un informazione importante, specialmente se non avete ancora impostato il port forwarding!).

Quando il server è avviato potrete vedere anche il suo nome (se gliene avete dato uno) e la porta che userà per il traffico di rete.

2. Provvedete a fornire queste informazioni ai vostri amici: il ''Server Name'' (noto anche come RPTools Alias, se lo impostate), l'indirizzo IP ''esterno'' e la ''porta''. Loro avranno bisogno di questi dati per poterli inserire nella finestra di dialogo '''Connect to Server''' quando tenteranno di accedere al vostro server.

&lt;br style=&quot;clear:both;&quot;/&gt;

==Connettersi ad un Server di MapTool==

I passi compiuti fino ad ora vi hanno consentito di creare un server di Maptool disposto al collegamento di altre persone. Indubbiamente, se non avete nessuno connesso al vostro server le cose finiranno ben presto per diventare noiose. La procedura mostrata in seguito si concentrerà sulla connessione dei vostri amici al server che avete appena creato. 

===Prerequisiti===

Le asserzioni qui elencate si presume siano tutte positive, il viaggio durerà ben poco altrimenti!.

* Avete degli amici
* Avete un server di Maptool in esecuzione
* I Vostri amici sanno:
** Il ''Nome'' del server e/o ''l'indirizzo esterno'' (preferibilmente entrambi)
** L'appropriata ''password'' impostata (per il GM o per i Player)
** La ''Porta'' del server in uso
* '''MOLTO IMPORTANTE: Tutti i partecipanti devono utilizzare la stessa versione di MapTool del server!'''

===Aprire la finesta di dialogo Connect to Server===

[[Image:mt-connect-to-server.jpg|thumb|La finestra di dialogo '''Connect to Server''']]

Se tutti i presupposti precedentemente menzionati sono soddisfatti, ecco cosa dovrete dire ai vostri amici:

1. Andate su '''File &gt; Connect to Server''' per vedere la finestra di dialogo '''Connect to Server'''.

2. Inserite un ''User name''. Quale usare è a discrezione dei vostri amici. 

3. Inserite la password (che avete impostato all'avvio del server).

4. Scegliete il vostro ''Ruolo''. I tuoi amici possono connettersi come GM oppure come Player. Siati sicuri che loro scelgano il giusto ruolo rispetto alla password in uso!

&lt;br style=&quot;clear:both;&quot;/&gt;

===Scegliere Come Connettersi===

La finestra di dialogo '''Connect to Server''' offre tre strade per connettersi al server in esecuzione.

====RPTools.net====

[[Image:mt-connect-registry.jpg|thumb|La scheda '''RPTools''' in '''Connect to Server''']]

Questa scheda (che è quella mostrata per prima) elenca la lista completa dei server presente sul ''Server Registry'' di RPTools.net . Durante la configurazione del server avete avuto l'opportunità di assegnargli un ''alias'' che sarà quello che poi apparirà in questa lista. Il ''Server Registry'' immagazzina le informazioni di connessione del server così che i tuoi amici possano semplicemente selezionare il server che cercano e premere '''OK'''.

&lt;br style=&quot;clear:both;&quot;/&gt;

====LAN====

[[Image:mt-connect-lan.jpg|thumb|La scheda '''LAN''' in '''Connect to Server''']]

Questa scheda mostra tutti i server attualmente in esecuzione nella rete ''locale'', utile quando si ospita un Lan Party di MapTool oppure quando i vostri amici sono all'interno della stessa rete (come ad esempio una riunione notturna con i propri portatili a casa di qualcuno). 

&lt;br style=&quot;clear:both;&quot;/&gt;

====Direct====

[[Image:mt-connect-direct.jpg|thumb|La scheda '''Direct''' in '''Connect to Server''']]

La connessione diretta è proprio questo - i tuoi amici bypassano l'amichevole scheda RPTools.net e semplicemente inseriscono l'indirizzo esterno e la porta del server.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Verificare le Connessioni===

Quando gli amici si connetteranno al vostro server di MapTool apparirà nel '''Chat Pane''' (riquadro della chat), in riferimento alla persona appena connessa, una notifica come questa:

&lt;font color=&quot;blue&quot;&gt;''GiocatoreX has connected.''&lt;/font&gt;

Potete anche controllare il '''Connections Pane''' (riquadro della connessione) per osservare la lista completa delle persone connesse al vostro server. Se non trovate il Connections Pane andate su '''Window &gt; Connections''' per farlo comparire.
{{Languages|Introduction to Game Hosting}}[[Category:MapTool]]

==Tokens Sulle tue Map==

Quando utilizzate MapTool in solitario il programma vi lascia accedere a qualsiasi elemento della mappa poiché presume che voi siate il GM (e quindi l'onnipotente dio del piccolo mondo rappresentato nella mappa). Tuttavia quando si ospita un gioco, MapTool possiede un ruolo differente (menzionato precedentemente) per ogni persona connessa. Il ruolo del '''GM''' mantiene il suo stato d'onnipotenza, può selezionare e manipolare qualsiasi cosa sulla map; invece il ruolo del '''Player''' ha una rosa di opzioni molto più ristretta, può controllare solamente quegli elementi di cui detiene il ''possesso'' (ownership). 

Per questo fatto, ogniqualvolta si avvia un server, bisogna essere sicuri di aver dato ad ogni giocatore l'ownership del token che gli spetta! Dimenticarsi di selezionare l'ownership di un token dopo che i vostri giocatori si sono connessi è una svista comune! 

L'Ownership dei Token è spiegato in maggior dettaglio in [[Introduction to Tokens/it|Introduzione ai Tokens]], ma per scopo illustrativo, quando avete avviato un server con gli amici connessi come player, dovete compiere le seguenti operazioni per ognuno di essi:

# Doppio clic sul token che dovrebbe entrare in possesso del giocatore come il suo Player Character (vedi nota sotto).
# Definisci il tipo di token come PC.
# Vai sulla scheda '''Ownership'''
# Spuntate la casella affianco al nome del ''player'', concedendogli così l'ownership del token.
# Clicca su '''OK''' per salvare i cambiamenti.

Fatto questo i giocatori saranno in grado di muovere e modificare i propri token. Potete anche assegnare l'ownership di un token a tutti i players se tutti i giocatori hanno il bisogno di manipolarlo.

'''NOTA''': I players possono avere anche l'ownership dei token NPC se volete (il processo è identico eccetto per l'assenza del secondo punto); tuttavia, avrete bisogno che loro possiedano almeno i propri player token!</text>
      <sha1>quwp0dcxg9vqtdjddgn31kpvku2j35x</sha1>
    </revision>
  </page>
  <page>
    <title>User talk:Vinnie</title>
    <ns>3</ns>
    <id>1090</id>
    <revision>
      <id>4481</id>
      <timestamp>2010-09-08T06:19:55Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <comment>New page: Sorry, I miss the page for editing, but I have recovered all</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="60">Sorry, I miss the page for editing, but I have recovered all</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getLastPath</title>
    <ns>0</ns>
    <id>1091</id>
    <revision>
      <id>5981</id>
      <parentid>4556</parentid>
      <timestamp>2012-06-29T13:52:04Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="659">{{MacroFunction
|name=getLastPath
|version=1.3.b74
|description=
Returns a json array of the coordinates of every step in the last movement path of the impersonated token. The coordinates are json objects with the keys {{code|x}} and {{code|y}}. 
|usage=

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: getLastPath()]
[r: getLastPath(units)]
&lt;/source&gt;

'''Parameters'''
* {{code|units}} - If set to {{false}}, the coordinate is a location on the grid in ''cells''. Defaults to {{true}}, where the coordinate is in ''Distance Per Cell'' ''units'' (in other words 0:distance in cells, 1: distance in pixels)'.



{{stub|example needed}}
}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>movedOverToken</title>
    <ns>0</ns>
    <id>1092</id>
    <revision>
      <id>7221</id>
      <parentid>7220</parentid>
      <timestamp>2019-03-07T04:36:41Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="484">{{stub|lastPath-format specified, define/explain return value, examples}}
{{MacroFunction
|name=movedOverToken
|version=1.3.b74
|description=
Is used to check if {{code|token}} is in an array of cell coordinates like the one received from {{func|getLastPath}} or the [[onTokenMove]] event's {{code|macro.args}}.
&amp;nbsp;
&lt;!-- The 'nbsp' is needed to close the DIV --&gt;
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
movedOverToken(token, lastPath)
&lt;/source&gt;

}}
[[Category:Miscellaneous Function]]</text>
      <sha1>awtjparkcfvw7wgq2tvuhxt8rbs2dmr</sha1>
    </revision>
  </page>
  <page>
    <title>File:Cif forms tutorial example layout table.png</title>
    <ns>6</ns>
    <id>1093</id>
    <revision>
      <id>4537</id>
      <timestamp>2010-09-09T09:06:01Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <comment>Example screenshot of a form containing frame.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="46">Example screenshot of a form containing frame.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Cif forms tutorial screenshot example2.png</title>
    <ns>6</ns>
    <id>1094</id>
    <revision>
      <id>4540</id>
      <timestamp>2010-09-09T09:23:06Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <comment>Screenshot of example 2 in the forms tutorial.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="46">Screenshot of example 2 in the forms tutorial.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Cif forms tutorial screenshot example1.png</title>
    <ns>6</ns>
    <id>1095</id>
    <revision>
      <id>4541</id>
      <timestamp>2010-09-09T09:23:46Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <comment>Screenshot of example 1 in the forms tutorial.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="46">Screenshot of example 1 in the forms tutorial.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Cif forms tutorial example input fields.png</title>
    <ns>6</ns>
    <id>1096</id>
    <revision>
      <id>4545</id>
      <timestamp>2010-09-09T09:50:27Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <comment>Screenshot with examples of the form fields.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="44">Screenshot with examples of the form fields.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>closeFrame</title>
    <ns>0</ns>
    <id>1097</id>
    <revision>
      <id>5629</id>
      <parentid>5619</parentid>
      <timestamp>2011-07-27T14:38:05Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Rulling out of &quot;Dialog Function&quot; category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="582">{{MacroFunction
|name=closeFrame
|version=1.3b70
|description=Closes the specified macro frame that was previously created using {{roll|frame}}. If the 
frame is not open then the function has no effect. 

The most common use for this function is closing a frame based from a macro that is run when clicking on a link or button for the 
frame that has no close button. 

'''NOTE''' this function can not close dialogs opened with {{roll|dialog}}. Use {{func|closeDialog}} for that.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: closeFrame(name)]
&lt;/source&gt;
}}
[[Category:Frame Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Campaign Repositories/ja</title>
    <ns>0</ns>
    <id>1098</id>
    <revision>
      <id>4584</id>
      <parentid>4583</parentid>
      <timestamp>2010-09-28T14:54:37Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <comment>/* リポジトリーの作成 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5999">{{Languages|Introduction to Campaign Repositories}}{{#customtitle:はじめてのキャンペーン・リポジトリー|キャンペーン・リポジトリー}}{{Translation}}

== リポジトリーとは ==
&lt;div style=&quot;color:gray;&quot;&gt; A campaign repository is a set of files (mostly images) that are used in a campaign.  By hosting a repository someplace other than the GM's computer you can help speed up the image download time of your players, making the game run smoother in general. &lt;/div&gt;

キャンペーン・リポジトリーは、キャンペーンで使用するファイル（主に画像）を集めたものだ。リポジトリーをGMのコンピューター以外の場所に設置することで、プレイヤーが画像をダウンロードする速度を速めることができ、円滑なゲーム進行の一助となる。

&lt;div style=&quot;color:gray;&quot;&gt;You must have some externally hosted web space to properly use a repository.  Many ISPs give you some space you can use for this type of purpose.  If your ISP does not provide this you can usually find cheap (and even free, in some cases) web hosting if you search around. &lt;/div&gt;

そのためにリポジトリーを設置可能なウェブ上のディスク領域が必要だ。多くの接続プロバイダーはリポジトリーを問題なく設置できる領域を提供している。契約しているプロバイダーが領域を提供していない場合、安価な（または無料の）レンタルサーバーを探せば良いだろう。

&lt;div style=&quot;color:gray;&quot;&gt;Unless you are running MapTool from a really beefy server-class machine on a T1 connection (or you picked a really bad web server) you're almost guaranteed that clients will be able to download files from any hosted web storage faster than they will from your machine.  This is one of the main benefits of a repository.&lt;/div&gt;

光ファイバー接続されたサーバー並みのマッチョなマシンで MapTool を稼働させていない限り（もくは粗悪なレンタルサーバーを使用していない限り）、参加者のダウンロード速度は、君のパソコンからダウンロードするよりWeb上にホストしたサーバーからダウンロードする方が速いことは十中八九間違いない。このことはリポジトリーの主要な利点の一つだ。

== リポジトリーの作成 ==
&lt;div style=&quot;color:gray&quot;&gt;To create a repository file, open your campaign in MapTool and go to File -&gt; Export -&gt; Campaign Repository File.  This will create a zip file that contains the repository information.&lt;/div&gt;

リポジトリー・ファイルを作るには、MapTool でキャンペーンを開き、「ファイル→書き出し→キャンペーン・リポジトリー」を選択する。

&lt;div style=&quot;color:gray&quot;&gt;Unzip the file. (This is very important!  MapTool cannot use the repository if it remains zipped!)  Inside should be a folder called &quot;assets&quot; and a file called index.gz.  Upload both the assets folder and the index.gz file to your web storage.  Make sure they are in the same directory.  (Do not put the index.gz file ''inside'' the assets folder.  It should be at the same level as the assets folder.)&lt;/div&gt;

ZIPファイルを展開する（非常に重要なことなので忘れないように!! MapTool はZIP圧縮されたリポジトリーを使用不可能）。展開した中には「assets」フォルダーと「index.gz」ファイルがある。このふたつをウェブ上のサーバーへアップロードする。二つとも必ず同じディレクトリーにアップするように（「index.gz」を「assets」の中に'''入れてはいけない'''。「index.gz」は「assets」フォルダーと同じレベルに置くように）。

&lt;div style=&quot;color:gray&quot;&gt;Make a note of the URL for to your index.gz file.  You can test the URL by typing it or copying and pasting it into your browser's address bar.  If you have the address right you should see a page full of letters and numbers that won't mean much to you.&lt;/div&gt;

作成した index.gz ファイルのURLを記憶する。ブラウザのアドレスバーにURLを貼付けてテストすることができる。アドレスが正しければ解読不可能な英数字の羅列するページが表示されるだろう。

&lt;div style=&quot;color:gray&quot;&gt;In MapTool, go to Edit -&gt; Campaign Properties then go to the Repositories tab.  Delete any links that are already there, then add the URL of your index.gz file.&lt;/div&gt;

MapTool に戻り、「編集→キャンペーン・プロパティ」を開き、「リポジトリー」のタブを選択。既にあるリンクを全て削除し、先ほどの index.gz へのURLを追加する。

&lt;div style=&quot;color:gray&quot;&gt;Save your campaign.  Now when clients connect to your server they will get the campaign files from the repository online instead of your PC.&lt;/div&gt;

キャンペーンを保存する。以上で、君のサーバーに接続する参加者はキャンペーンのファイルを君のパソコンからではなく、リポジトリーから取得するようになった。

&lt;div style=&quot;color:gray&quot;&gt;If you make changes to your campaign file you will need to re-export the campaign repository file and re-upload it to your web space.  You will not need to re-add the URL to the Repositories tab of the Campaign Properties unless you changed the location where your files are being kept.&lt;/div&gt;

その後、キャンペーン・ファイルを変更するのであれば、再度エクスポートして、もう一度Webサーバーにアップロードする必要がある。再アッブしても、キャンペーン・プロパティのリポジトリー・タブのURLは変更しなくて構わない。もちろんアップロード先を変えた場合は変更先のURLを追加しなければならない。

[[Category:MapTool]]
[[Category:Tutorial]]
{{Languages|Introduction to Campaign Repositories}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token Types/ja</title>
    <ns>0</ns>
    <id>1099</id>
    <revision>
      <id>4654</id>
      <parentid>4648</parentid>
      <timestamp>2010-10-05T18:10:39Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="444">{{#customtitle:トークンの種類|トークンの種類}}{{Translation}}{{Languages|Token Types}}
&lt;div style=&quot;color:gray&quot;&gt;There are various token types available in MapTool, each with a different purpose.&lt;/div&gt;

MapTool で使用するトークンの種類。それぞれ異なる用途を持つ。

* [[Image Token/ja|画像トークン]]
* [[Library Token/ja|ライブラリトークン]]
* [[PC Tokens]]
* [[NPC Token]]
[[Category:Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Token/ja</title>
    <ns>0</ns>
    <id>1100</id>
    <revision>
      <id>4649</id>
      <parentid>4644</parentid>
      <timestamp>2010-10-05T14:55:12Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <comment>/* トークン: トークン */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11956">{{Languages|Token}}{{#customtitle:トークン|トークン}}{{Translation}}
=トークン: トークン=

&lt;div style=&quot;color:gray&quot;&gt;Every object that can be dropped down on a map and manipulated by the GM or the players is a ''token'' of some type.  The possible token types are [[Image Token]], [[Library Token]], [[PC Token]], and [[NPC Token]].  In addition, when images are dropped onto a [[map layer]] other than the '''Token''' layer, they take on the name ''object'' or ''stamp'' instead.  (The term ''stamp'' is often used to denote an image that is placed repeatedly, sometimes in a pattern, whereas ''object'' means a less often used image.  A forest would be full of '''tree stamps''' but an office building would have ''table and chair objects''.)&lt;/div&gt;

マップ上に配置され、GMやプレイヤーが操作するモノは''トークン''であり、いくつかの種類がある。有効なトークン種別は[[Image Token/ja|画像トークン]]、[[Library Token/ja|ライブラリトークン]]、[[PC Token|PCトークン]]、[[NPC Token|NPCトークン]]だ。さらに、'''トークン・レイヤー'''以外の[[map layer|マップレイヤー]]に配置した画像は、トークンではなく''オブジェクト''や''スタンプ''と呼ばれる。（''スタンプ''という用語は、模様など頻繁に繰り返し配置する画像を指し、''オブジェクト''は少数使われる画像を指す。森は沢山の'''樹木のスタンプ'''を敷き詰めるが、オフィスビルでは'''テーブルと椅子のオブジェクト'''を使用する）

&lt;div style=&quot;color:gray&quot;&gt;This page discusses how tokens and objects are saved externally; the overall file format as well as some specifics about how to manipulate the contents of the '''.rptok''' file.&lt;/div&gt;

このページでは、トークンとオブジェクトを外部に保存する方法、'''.rptok'''ファイルのファイル・フォーマットの全容と内容の操作に関する詳細に取り組む。

==ファイル・フォーマットの全容==

&lt;div style=&quot;color:gray&quot;&gt;Tokens can be saved by the token owner by right-clicking on the token and choosing '''Save As...''', then navigating to a directory and entering a filename.  The filename will automatically have '''.rptok''' appended to the end to indicate that contents.  The actual format of the file, however, is an ordinary ZIP file!  This means you can rename the file to end with '''.zip''' and treat it as any other ZIP file.  There are a number of features related to this:&lt;/div&gt;

トークンは所有者がトークン上の右クリックメニューから'''Save As...'''を選択し、任意のディレクトリに、任意のファイル名で保存できる。このファイル名の末尾には自動的にファイルの種類を示す'''.rptok'''の拡張子が追加される。実のところ、このファイルの中身はどこにでもある ZIP ファイルだ！ つまり、ファイル名を'''.zip'''で終わる名前に変更することで普通の ZIP ファイルとして扱えるということだ。ファイルには次の特徴がある：

&lt;div style=&quot;color:gray&quot;&gt;
* All tokens are automatically stored in a compressed format.
* All tokens can contain multiple data files inside
** One file is called '''content.xml'''
** Another one is '''properties.xml'''
** A directory is also included called '''assets'''
*** The token image is stored here,
*** The token portrait is stored here, and
*** The token handout is stored here.
** The last file is called '''thumbnail'''
&lt;/div&gt;

* 全てのトークンは自動的に圧縮して保存される。
* 全てのトークンは内部に複数のデータ・ファイルを含むことが可能。
** ひとつ目のファイルは'''content.xml'''。
** もうひとつは'''properties.xml'''。
** さらに'''assets'''という名のディレクトリーも含まている。
*** ここにはトークンの画像と、
*** トークンの肖像画像と、
*** トークンのハンドアウトが保存されている。
** 最後のファイルは'''thumbnail'''だ。

==トークン・ファイルの内容の解析==

&lt;div style=&quot;color:gray&quot;&gt;Because the token files are ZIP files, you can easily extract the images or other data from the token.  To do so, unpack the ZIP file into a directory on your computer.  Look inside the '''assets''' directory and you'll see multiple filenames.  They will appear to be random strings of letters and numbers, but actually the are checksums of the image they contain.  You can think of a checksum as a ''summary'' of the content.  These files don't have filename extensions so you may not be able to view the content unless you use a program that ignores the filename extension and looks at the content instead.  One example utility that does that is the GNU Image Manipulation Program, or GIMP for short.&lt;/div&gt;

トークン・ファイルは ZIP ファイルなので、トークンから画像やデータファイルを抜き出すのは簡単だ。パソコンの好きなディレクトリーにZIPファイルを展開すれば良い。'''assets'''ディレトリーの中にはいくつかのファイルがあることが確認できるだろう。そこには英数字がでたらめに並んだファイル名があるが、この文字は収容されている画像のチェックサムになっている。チェックサムは内容の''要約''と考たら良い。このファイル名は拡張子がないのでそのままでは画像を確認することができない。ビューアが拡張子を無視してファイルの中身を検査して判別するソフト（例えばGIMPなど）であれば表示することが出来る。

&lt;div style=&quot;color:gray&quot;&gt;Note that some versions of MapTool (which ones?) store the asset as the image data encoded in XML.  This makes the image unviewable using _any_ standard graphics tool.  Trevor has said that this is a bug and future versions will use the actual graphics image format (JPG or PNG).&lt;/div&gt;

あるバージョンのMapTool（さてどのバージョンだったか…）では画像をXMLにエンコードして保存する。このため、一般的などの画像ツールを用いても画像を表示することは出来ない。トレボーは、この振る舞いは不具合であり、将来のバージョンでは実際の画像フォーマット（JPG、PNG）を使用すると述べている。

==トークン・ファイル内の画像やデータを修正する==

&lt;div style=&quot;color:gray&quot;&gt;Modifying the images used in the token is more complex, however.  Here are the required pieces of the puzzle:&lt;/div&gt;

トークンで使用している画像を修正することはより複雑だ。必要な材料は次の通り：

&lt;div style=&quot;color:gray&quot;&gt;
# Locate the new image(s) to be stored in the token,
# Calculate the checksum of the image (it's an MD5 checksum),
# Rename the image file to be the checksum, removing any filename extension in the process,
# Move the new file into the '''assets''' directory,
# Record the name of the old image from the '''assets''' directory, and
# Remove the old image from the '''assets''' directory.
&lt;/div&gt;

# トークンに格納する新しい画像を用意する。
# 画像のチェックサムを計算する。（MD5チェックサム）
# 画像のファイル名をチェックサムの値に変更し、拡張子を取り除く。
# 新しい画像を'''assets'''ディレクトリに移動する。
# '''assets'''にある古い画像のファイル名を記録し、
# 古い画像を'''assets'''ディレクトリーから削除する。

&lt;div style=&quot;color:gray&quot;&gt;Sounds easy, right?  But that's only half of it.  It turns out that just dumping images into the '''assets''' directory wouldn't tell MapTool enough about the image, such as what size to scale it to and whether it represented the portrait or handout image.  Those details are stored in the '''content.xml''' file.  This file is '''NOT''' in the '''assets''' directory, but is at the top level of the unpacked ZIP file.&lt;/div&gt;

実に簡単だが、まだ行程の半分だ。画像を'''assets'''ディレクトリーに放り込んだだけではMapToolに十分な情報（画像サイズや、どのファイルが肖像画像やハンドアウト画像であるかなど）を伝えることにはならない。これらの詳細は'''content.xml'''に格納される。このファイルは'''assets'''ディレクトリーに'''入れずに'''、展開したZIPファイルの最上位に配置する。

&lt;div style=&quot;color:gray&quot;&gt;If you open the '''content.xml''' file use a text editor.  Do not use a word processor or saving the file could corrupt the contents with extra information created by the word processor.  Use a program such as Notepad or TextPad to perform any editing.  Obviously, an editor that understands the XML syntax can make editing much easier.&lt;/div&gt;

'''content.xml'''を編集するには、テキストエディターを使用する。ワープロソフトは保存するときに余分な情報を加えてファイルを壊してしまうので使わないように。編集には「メモ帳」や「TextPad」などのソフトが相応しい。もちろん、XML構文を解釈する編集ソフトであれば申し分ない。

&lt;div style=&quot;color:gray&quot;&gt;You need to locate the portion of the XML file that refers to the portrait image (if you were planning to replace the portrait) and replace the 16-character checksum from the old asset with the 16-character checksum of the new asset.  Fortunately, you recorded that information as you performed the steps given above!  But fear not -- if you did not record the old checksum value, you can simply delete the entire top-level directory and unpack the ZIP archive again, starting from the beginning.&lt;/div&gt;

肖像画像を置き換えるのであれば、XMLファイルの中から肖像画像を参照する箇所を見つけ出し、古い肖像画像の16文字のチェックサムを新しいものと置き換える必要がある。幸いにも、上記の行程で古い情報は記録済みだ！ 記録し忘れてたとしても心配する必要はない。最上位のディレクトリーを削除し、もう一度ZIPファイルを展開し、最初からやり直せば良い。

&lt;div style=&quot;color:gray&quot;&gt;The simplest way to make the change, is to perform a string search for the old checksum, replacing it with the new one whenever you find it.&lt;/div&gt;

一番簡単な変更手順は、古いチェックサムを文字検索し、新しいものと置き換える方法だ。

&lt;div style=&quot;color:gray&quot;&gt;After you've made all of your replacements, use a ZIP utility to create a ZIP file containing the contents of the top-level directory and everything below it in the directory structure (which currently means the '''assets''' directory).  Be sure that the directory structure is preserved because the '''assets''' directory must be there.  Now the file can be dragged and dropped into MapTool!  You can change the filename extension to '''.rptok''' if you like, but MapTool isn't particular about the name of the file, only about the contents.&lt;/div&gt;

全ての変更作業が終わったら、ZIPツールを使ってこれまでのファイルを含む最上位ディレクトリーを下位のディレクトリー構造（'''assets'''ディレクトリーが重要）を保ったままZIP形式で圧縮する。'''assets'''ディレクトリーがなければならないのでディレクトリー構造を必ず確認するように。これでMapToolにファイルを配置できるようになった！ お好みでファイル名の拡張子を'''.rptok'''に変更しても構わないが、MapToolはファイル名ではなく、ファイルの中身を重視する。
[[Category:Token]]
{{Languages|Token}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getOwnerOnlyVisible</title>
    <ns>0</ns>
    <id>1101</id>
    <revision>
      <id>4635</id>
      <parentid>4632</parentid>
      <timestamp>2010-10-04T21:40:02Z</timestamp>
      <contributor>
        <username>Jfrazierjr</username>
        <id>227</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="641">{{stub|Examples of usage.}}
{{MacroFunction
|name=getOwnerOnlyVisible
|version=1.3b74
|description=
Returns {{true}} if the [[Token:Visible to Owners Only|Visible to Owners Only]] flag is set on a [[Token]] otherwise returns {{false}}. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getOwnerOnlyVisible()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getOwnerOnlyVisible(id)
&lt;/source&gt;
'''Parameter'''
{{param|id|The token {{code|id}} of token that has its player visibility checked, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|also=
[[getVisible|getVisible()]], [[setOwnerOnlyVisible|setOwnerOnlyVisible()]]

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setOwnerOnlyVisible</title>
    <ns>0</ns>
    <id>1102</id>
    <revision>
      <id>5628</id>
      <parentid>4636</parentid>
      <timestamp>2011-07-26T11:27:28Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="732">{{stub|Examples of usage.}}
{{MacroFunction
|name=setOwnerOnlyVisible
|trusted=true
|version=1.3b74
|description=
Sets the [[Visible to Owners Only]] flag on a [[Token]] if the value passed in is non-zero({{true}}), otherwise resets it to {{false}}. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setOwnerOnlyVisible(visible)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setOwnerOnlyVisible(visible, id)
&lt;/source&gt;
'''Parameters'''
{{param|visible|The state of owner only visibility, {{true}} or {{false}}.}}
{{param|id|The token {{code|id}} of the token which has its owner only visibility set, defaults to the [[Current Token]].}}

|also=
[[setVisible|setVisible()]], [[getOwnerOnlyVisible|getOwnerOnlyVisible()]]

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getOwnerOnlyVisible()</title>
    <ns>0</ns>
    <id>1103</id>
    <redirect title="getOwnerOnlyVisible" />
    <revision>
      <id>4633</id>
      <timestamp>2010-10-04T21:38:18Z</timestamp>
      <contributor>
        <username>Jfrazierjr</username>
        <id>227</id>
      </contributor>
      <comment>[[getOwnerOnlyVisible()]] moved to [[getOwnerOnlyVisible]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[getOwnerOnlyVisible]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Library Token/ja</title>
    <ns>0</ns>
    <id>1104</id>
    <revision>
      <id>4653</id>
      <parentid>4650</parentid>
      <timestamp>2010-10-05T18:08:52Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6877">{{Languages|Library Token}}{{#customtitle:ライブラリトークン|ライブラリトークン}}{{Translation}}
&lt;div style=&quot;color:gray&quot;&gt;Introduced in MapTool version b46, the Library Token is a special token type that acts as a library of properties and trusted macros that may be accessed and called by other macros. &lt;/div&gt;

MapToolバージョンb46で導入された、ライブラリトークンはプロパティと他のマクロにアクセスし実行可能な承認マクロを収蔵する特殊なトークン種別である。

==ライブラリトークンの命名==

&lt;div style=&quot;color:gray&quot;&gt;All library tokens must have a name in the format &quot;Lib:''name''&quot;, to indicate that they are to serve as a Library Token and not a &quot;normal&quot; token. Example library token names might be:&lt;/div&gt;

ライブラリトークンの名前は必ず「Lib:''名前''」の書式であり、このトークンがライブラリトークンであり通常のトークンではないことを示している。ライブラリトークン名の例は次の通り：

*Lib:test
*Lib:combat
*Lib:gamemaster

==ライブラリトークンを作成する==

&lt;div style=&quot;color:gray&quot;&gt;To create a Library Token, do the following:&lt;/div&gt;

ライブラリトークンを作成するには、次の手順になる：

&lt;div style=&quot;color:gray&quot;&gt;
# Drag a new token on to one of the maps in your campaign.
# Rename it with a name in the format '''Lib''':''name'' (''e.g.'', '''Lib:DnD''', '''Lib:GameRules''', etc.). 
# Right click on the token and make sure that '''Visible to Players''' is checked.
# Double-click on it, and go to the '''Ownership''' tab. Make sure that '''''nothing''''' is checked.
# Set the token type to NPC (upper right corner of the Token Configuration dialog).
&lt;/div&gt;

# キャンペーンのマップ上にトークンを配置する。
# 名前を'''Lib''':''name''の書式に変更する（例：'''Lib:DnD'''、'''Lib:GameRules'''など）。
# トークン上で右クリックし、'''プレイヤーに表示'''が有効になっていることを確認する。
# トークンをダブルクリックし、'''Ownership'''タブを開く。いずれのチェックボックスも'''''無効になっている'''''ことを確認する。
# トークン・タイプをNPCに設定する。（トークン設定ダイアログの右上）

&lt;div style=&quot;color:gray&quot;&gt;After that, you have a Library Token. Note that you cannot have two library tokens with the same name in the same campaign (even if they're on different maps!). &lt;/div&gt;

以上でライブラリトークンの完成だ。同一キャンペーン内で、同じ名前持つライブラリトークンを複数持つことができないことを覚えておくように。（それぞれが違うマップにあっても、だ！）

&lt;div style=&quot;color:gray&quot;&gt;Once again, the requirements are:&lt;/div&gt;

しつこいようだが、必要条件を挙げておく：

&lt;div style=&quot;color:gray&quot;&gt;
* The library token must be visible to players (make sure Visible to Players is set in the right-click context menu).  The library token need not be on the &quot;Token&quot; layer (you can keep it on the &quot;Hidden&quot; layer to hide it from players, although &quot;Visible to Players&quot; must still be set to true).
* The library token must have a name in the format &quot;Lib:''name''&quot;
* The library token must be present on ''only one'' map in the campaign file.
* The library token '''may not''' be owned by any players (it's best not to be owned by ANYONE!)
&lt;/div&gt;

* ライブラリトークンはプレイヤーに表示していなければならない（右クリックメニューの「プレイヤーに表示（Visible to Players）が有効になっていることを確認）。ライブラリトークンは「トークン・レイヤー」にある必要はない（「Hidden」レイヤーに置くことでプレイヤーから隠すことは可能だが、それでも「プレイヤーに表示」は有効にしておかなければならない）。
* ライブラリトークンは「Lib:''名前''」の書式でなければならない。
* ライブラリトークンはキャンペーン・ファイルに''ひとつだけ''存在することができる。
* ライブラリトークンはどのプレイヤーも'''所有権を持たないほうが良い'''（『誰も』所有権を持たないほうが良い！）。

==ライブラリトークンと承認マクロ==

&lt;div style=&quot;color:gray&quot;&gt;In addition to the above requirements if you want players to be able to run any macro that calls a function designated as a trusted function the following requirement must also be met.&lt;/div&gt;
&lt;div style=&quot;color:gray&quot;&gt;
# The library token must ''not'' be owned by any players (in the Ownership tab of the Edit Token dialog, make sure that no boxes are checked)
&lt;/div&gt;

上記の必要条件に加えて、プレイヤーが承認関数として指定された関数を呼び出すマクロを実行できるようにする必要がある場合、上記の条件に加えて次の条件も満たしている必要がある。
# ライブラリトークンはどのプレイヤーも''所有権を持ってはならない''（トークン編集ダイアログのOwnershipタブにあるチェックボックスがすべて無効になっていることを確認）。

&lt;div style=&quot;color:gray&quot;&gt;Multiple library tokens may exist in the same campaign provided no two library tokens have the same token name.&lt;/div&gt;

複数のライブラリトークンはそれぞれが異なる名前を持っている限りキャンペーン内で共存できる。

==ライブラリトークンマクロ==

&lt;div style=&quot;color:gray&quot;&gt;Library token macros are created and edited like macros on any token. Macros on a library token may be called using the [[Macros:Branching_and_Looping#MACRO_Option| [MACRO(): ]]] roll option. Since Library token macros are trusted, they may perform operations not available to regular tokens.
&lt;/div&gt;

ライブラリトークン・マクロはトークンのマクロと同じように記述する。ライブラリトークンのマクロはロール・オプション：[[Macros:Branching_and_Looping/ja#MACRO_Option| [MACRO(): ]]]を使用することが多い。ライブラリトークンマクロは承認されるので、通常のトークンがなしえない操作を行うことができる。

==ライブラリトークンプロパティー==

&lt;div style=&quot;color:gray&quot;&gt;Library token properties can be accessed by using the {{func|getLibProperty}} function.  Note that default property values do '''NOT''' work using that function.&lt;/div&gt;

ライブラリトークンのプロパティーは関数：{{func|getLibProperty}}を使用してアクセス可能だ。標準のプロパティ値はこの関数を使っても'''機能しない'''ことに注意。
{{Languages|Library Token}}
[[Category:Token]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>More Roll Initiative</title>
    <ns>0</ns>
    <id>1105</id>
    <revision>
      <id>4682</id>
      <parentid>4670</parentid>
      <timestamp>2010-10-12T02:53:51Z</timestamp>
      <contributor>
        <username>Mlangsdorf</username>
        <id>241</id>
      </contributor>
      <comment>/* Macro &quot;Roll_Init&quot; */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3759">==Roll Initiative with Hold==
This example contains three different macros.  Together, they will roll initiative for a group of tokens selected using a somewhat popular game system's rules.  Specifically, the rules are:

* each token gets a card
* tokens that are on hold do not get a card, but use their card from the previous turn
* groups of monsters all use the same roll -- or as implemented, tokens with the same image share the same roll.
* tokens that are dead or incapacitated (defined by having one of those states) do not get a card.

The code needs to be in three different macros because it nests more than two levels of CODE.  The &quot;onCampaignLoad&quot; macro is used to set up some user defined function names.  The main function can be called from the chat interface with the command &quot;[dealinit()]&quot;, and the macro called by dealinit() then calls another macro.  All of these macros should be defined in the same library token.

===Macro &quot;onCommandLoad&quot; ===
&lt;source lang=&quot;mtmacro&quot;&gt;
[h: defineFunction(&quot;dealinit&quot;,&quot;Roll_Init@this&quot;)]
[h: defineFunction(&quot;coreinit&quot;,&quot;roll_init_core@this&quot;)]
&lt;/source&gt;

===Macro &quot;Roll_Init&quot; ===
&lt;source lang=&quot;mtmacro&quot;&gt;
[h: initList = &quot;booga=-1&quot;];
[h: cardList = &quot;-1&quot;];
[h: rndnum = getInitiativeRound()]
[h: cntSize = initiativeSize()]
[h: setCurrentInitiative(cntSize + 1)]

[h,foreach(Selected, getSelected(&quot;json&quot;)), CODE:
{
	[h: switchToken(Selected)]
	[h: init = getInitiative()]

	[h, if(getInitiativeHold() != 1), CODE:
	{
		[h: removeFromInitiative(init)]
		[h: SelectedGMName = getTokenImage()]

		[h: init = coreinit(SelectedGMName, cardList, initList)]

		[h: arr = json.fromStrProp(initList)]
		[h, if(json.contains(arr, SelectedGMName) == 0): initList = concat(initList, &quot;;&quot;, SelectedGMName, &quot;=&quot;, init)]
		[h: switchToken(Selected)]
		[h: addToInitiative()]
		[h: setInitiative(init)]
	};
	{
		[h: removeFromInitiative(init)]
		[h: switchToken(Selected)]
		[h: addToInitiative()]
		[h: setInitiative(init)]
		[h: setInitiativeHold(1)]
	};]

	[h,if(getState(&quot;Dead&quot;) || getState(&quot;Incapacitated&quot;)), CODE:
	{
		[h: removeFromInitiative(init)] 
	};
	{
		[h: cardList = concat(cardList,  &quot;;&quot;, init)]
	};]
}]

[h: sortInitiative()]
[h: setCurrentInitiative(0)]

[h: setInitiativeRound(rndnum + 1)]
[h:abort(0)]
&lt;/source&gt;
cardList is used to keep track of the cards that have been dealt.

initList keeps track of tokens with the same image.  Tokens that are on hold are never put in the initList, and keep their old status.

===Macro &quot;roll_init_core&quot; ===
&lt;source lang=&quot;mtmacro&quot;&gt;
[h: SelectedGMName = arg(0)]
[h: cardList = arg(1)]
[h: initList = arg(2)]

[h: arr = json.fromStrProp(initList)]
[h, if(json.contains(arr, SelectedGMName) != 0), CODE:
{
    [h: init = json.get(arr, SelectedGMName)]
};
{
    [h: init = 1d54]
    [h: foo = json.fromStrProp(cardList)]
    [h, while(json.contains(foo, init) != 0), CODE:
    {
        [h: init =1d54]
    }]
};]

[h: macro.return = init]
&lt;/source&gt;
This macro draws a unique card from a deck of 54 cards.  There's likely a better way to implement drawing from a deck, but this is simple and works fast enough.

===Commentary===
The result is that if you have a party of 4 PCs all with different token images, and a group of 4 skeletons with the same token image, and 2 zombies with the same token image, which would be typical, and you select all the tokens and run this macro, your initiative list will be populated with all the tokens.  The 4 skeletons will all have the same initiative result.  The 2 zombies will both have the same initiative result.  If any of the tokens are on hold, they'll keep their last initiative, but other tokens with the same image will share a different initiative.

This code was based on the [[Roll Initiative]] sample.

[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Mlangsdorf</title>
    <ns>2</ns>
    <id>1106</id>
    <revision>
      <id>4672</id>
      <parentid>4671</parentid>
      <timestamp>2010-10-10T17:26:13Z</timestamp>
      <contributor>
        <username>Mlangsdorf</username>
        <id>241</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="81">See [http://westmarchsaga.wikia.com/wiki/User:Mlangsdorf My page at my main wiki]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Tokens/it</title>
    <ns>0</ns>
    <id>1107</id>
    <revision>
      <id>6389</id>
      <parentid>4771</parentid>
      <timestamp>2015-10-16T09:31:28Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <comment>aggiornato all'ultima versione inglese del 26 feb 2013 alle 05:26</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20448">{{Languages|Introduction to Tokens}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}__TOC__

{{Beginner}}
==Introduzione ai Tokens di Maptool==

Come menzionato nella guida d'[[Introduction_to_Mapping/it|Introduzione al Mapping]], il [[Macros:Glossary/it#T|token]] è il gergo per indicare un marcatore visuale posizionato sulla map di MapTool. L'uso più intuitivo per i tokens è rappresentare i personaggi nel gioco - in altre parole, i tokens prendono il posto delle miniature sul tavolo virtuale (virtual tabletop). 

===Presupposti===

Questa guida presume che voi abbiate letto L'[[Introduction_to_Mapping/it|Introduzione al Mapping]] e che voi sappiate come:

* Aggiungere una cartella alla vostra Resource Library ed aggiornare/aggiungere le immagini che la compongono di modo che compaiano in lista
* Creare una map in MapTool
* Depositare tokens sulla map e spostarle
* Cambiare il Name, GM Name e Label dei tokens
* Ridimensionare i token (size)
* Cambiare le immagini dei token
* Traslare un token attraverso i layer (livelli)

Se non sapete come fare queste cose, per piacere leggete la guida di Introduzione al Mapping - altrimenti quello che è scritto di seguito potrebbe risultarvi insensato!

Infine, questa guida è stata scritta principalmente dal punto di vista del GM -- qualcuno che ha il controllo completo su tutte le impostazioni dei token e sulle proprietà della campaign. I Giocatori (cioé gli individui che si uniscono al gioco nel ruolo di &quot;Player&quot;) sono limitati su diversi cambiamenti effettuabili in una determinata campaign.

===I Layer's di MapTool===

Sebbene molti utenti di MapTool si riferiscano ai &quot;token&quot; solamente come le immagini che rappresentano i personaggi e le creature sulla map, in realtà, la parola &quot;token&quot; definisce ''qualsiasi'' oggetto-immagine deposto sulla map in MapTool. Le modalità di interazione con uno specifico token dipendono dal Layer della Map dove vengono immessi. Questi layers sono illustrati qui in basso, perché è importante capire come agiscono sui tokens.

*Gli elementi deposti nel layer '''Token''' sono quelli che vengono considerati più comunemente &quot;tokens&quot; - rappresentano i personaggi, i mostri, i PNG (personaggi non giocanti) - le persone e creature del gioco. 
*Gli elementi deposti nel layer '''Object''' sono le immagini che rappresentano gli arredamenti, i contenitori, le ''cose'' nel mondo di gioco - quello che una persona può manipolare o usare. MapTool continua a ritenerli tokens, naturalmente (per esso è tutto un token - ha veramente una mentalità restrittiva), ma per amor di chiarezza, molti utenti li chiamano ''oggetti'' per distinguerli dai token che rappresentano i ''personaggi''
*Gli elementi deposti nel layer. '''Background''' sono tipicamente le cose che arricchiscono la map - muri, pareti rocciose, sporcizia, erba. Potrebbero essere unici, ma solitamente sono &quot;stampati&quot; sulla map più e più volte, sia a formare un disegno ben preciso o proprio perché state utilizzando diverse copie distinte della stessa immagine (ad esempio, utilizzare più muri per completare una stanza). Per questa ragione, molti utenti chiamano queste immagini ''francobolli''. 

====The Hidden Layer====

Avrete notato che non ho parlato del layer '''Hidden''' nel paragrafo precedente. Questo perché il Layer Hidden ha una finalità leggermente differente. 

Mentre i layers Token, Object e Background  hanno una relazione abbastanza intuitiva in termini concezione del mondo -- Io sono una ''persona o creatura'', quell'elemento lì è un ''oggetto'' e tutto quello che ci circonda è lo ''sfondo'' -- il Layer Hidden è quello che ''non si vede''. In MapTool qualsiasi cosa posizionata sul Layer Hidden è visibile solo dal GM fintanto che questi non decida di spostarla su un altro layer.

Generalmente su questo layer vorrete metterci personaggi e oggetti - non ci sono ragioni per inserirci francobolli di sfondo, malgrado io sia sicuro che voi potete già pensarne un paio. 

E' sufficiente dirvi che quando piazzate un token su una map di MapTool dovete prestare attenzione al layer dove lo mettete!

==Creare un nuovo Token==

Creare un token consiste semplicemente nel trascinare un immagine dalla [[Macros:Glossary/it#R|Resource Library]] al Layer Token della map. Ma come si fa a creare un immagine in primo luogo? ci sono diverse alternative.

===Scaricare un Immagine===

La comunità di utenti di MapTool ha creato una moltitudine di immagini-token pronte all'uso. Visitate la [http://gallery.rptools.net Galleria di RPTools] per visionare le centinaia di immagini-token già pubblicate. 

===Crearne una attraverso TokenTool===

Un altra alternativa è creare le vostre immagini utilizzando [http://www.rptools.net/index.php?page=tokentool TokenTool], un programma sviluppato dagli stessi autori di  MapTool per creare immagini-token in modo facile e veloce. Per creare un token usando TokenTool bisogna:

1. Scaricare TokenTool ed aprirlo facendo doppio clic sul file con estensione '''.jar''' (questo è un Java &quot;JAR file&quot;, un eseguibile che avvierà un programma java). 

2. Trovare un immagine che vi piace (siate cauti con il copyright!) e trascinatela sul riquadro a sinistra della finestra di TokenTool (questa è la sezione con un piccolo anello centrato sullo sfondo nero). 

3. Quando compare l'immagine, trascinatela in giro con il mouse fintantoché la porzione che desiderate per il vostro token sia all'interno dell'anello. Potrete vedere un anteprima di  come diverrà il token in alto a sinistra della finestra di TokenTool.
* '''Consiglio''': Potete usare la rotellina del mouse o i pulsanti di ridimensionamento per regolare la grandezza dell'immagine per come vi sembra opportuno. 
* '''Consiglio''': Potete cambiare l'aspetto e il colore dei bordi, la grandezza finale del token ed alcune altre configurazioni utilizzando i menu a tendina nella parte destra della finestra di TokenTool.

4. Quando avrete ottenuto ciò che volete, andate su '''File &gt; Save Token''' e salvate il token appena creato in un percorso assegnato alla vostra Resource Library, oppure dove pianificate questo utilizzo. Notate che il file verrà salvato nel formato PNG (questa è buona cosa! le immagini *.png supportano le trasparenze che sono indispensabili per la creazione di pedine non necessariamente quadrate!). 

5. Ritornate a MapTool e aggiungete o aggiornate la cartella nella vostra Resource Library, li vedrete apparire il vostro nuovo token! Trascinatelo sulla map e sarete apposto. 

===Disegnarla da te===

Potete creare un immagine-token autonomamente usando programma di disegno e salvando il file in formato PNG o JPG in una cartella che è o sarà parte della vostra Resource Library. Il formato PNG è quello raccomandato per i tokens di MapTool perché consente le trasparenze e, sostanzialmente, rende meglio. 

Indubbiamente potete anche miscelare l'utilizzo di tutti i metodi esposti per creare tokens belli e ben formati.

==Editare un Token==

Editare un token vuol dire cambiare le sue caratteristiche, siano esse le sue immagini, i suoi nomi o i suoi settaggi impostati. Le istruzioni per cambiare nomi, immagini e dimensioni di un token sono coperte nel capitolo [[Introduction_to_Mapping/it|Introduzione al Mapping]].  

La seguente sezione tratta delle varie opzioni, schede e menù a tendina nella finestra di dialogo '''Edit Token'''. 

===Tipi di Token===

I Tokens sono di due possibili tipi (type) in MapTool: NPC e PC (PNG e PG). Questi termini saranno familiari ai giocatori di ruolo poiché stanno per &quot;Player Character&quot; e &quot;Non-Player Character&quot; (Personaggi Giocanti e Personaggi Non Giocanti), l'uso più comune di quest'impostazione &quot;type&quot; è di fare distinzione tra i due gruppi durante una partita vera e propria. 

In generale, i tokens appartententi ai vostri giocatori dovrebbero avere il tipo &quot;PC&quot;. I tokens appartenenti a ''voi'' (GM) dovrebbero avere il tipo &quot;NPC&quot;. 

[[Image:Edit-token.jpg|thumb|La finestra di dialogo '''Edit Token''']]

'''NOTA''': Il ''type'' dei token non ha influenza su chi può manipolarli o vederne le proprietà - al contrario, questo potere è garantito agli ''owner'' o ''owners'' (proprietari) di quel token. Come GM, voi siete considerati possessori (ownership) di tutti i tokens su tutte le maps nelle campaign. Guardate [[Introduction_to_Tokens/it#Ownership|Ownership]] più sotto per maggiori dettagli. 

Per cambiare il type dei token:

1. Doppio-clic sul token per aprire la finestra di dialogo '''Edit Token'''.

2. Nell'angolo in alto a destra utilizzate il menù a tendina per selezionare PC o NPC. 

3. Cliccate su '''OK'''.

===Notes===

[[Image:Notes-tab.jpg|thumb|La scheda Notes nella finestra di dialogo '''Edit Token''']]

La scheda Notes presenta due aree dove potete inserire delle note approposito del token. Questi campi supportano i tag HTML base, così che possiate formattare la nota. 

Il campo del testo in alto è li per le note disponibili e visibili per chiunque voglia vederle. Il campo in basso (intitolato '''GM Notes''') è per le note che solo il/i GM possono vedere. 

Le note sono un po' intricate - Maptool può esporle in un elegante finestra a scomparsa, ma dovete fare un paio di cose prima. 

# Inserire informazioni nei campi delle note di un token.
# Mettere questo token in un layer che non sia il &quot;Token Layer&quot; cliccandogli sopra con il pulsante destro del mouse e selezionando '''Change To &gt;'''
# Essere sicuri di trovarsi o spostarsi nel '''Token Layer'''

Ora noterete che, quando posizionate il cursore sopra il token, il puntatore diventerà una mano. Se farete doppio-click, al posto della normale finestra di dialogo '''Edit Token''', vedrete una piccola finestra a scomparsa nell'angolo in basso a sinistra della mappa che visualizzerà le note.

La lezione da trarne è -- ove le note di un Token sono accessibili in diversi modi -- uno dei più comuni usi è quello di porre annotazioni e promemoria su token o oggetti depositati nell'&quot;Object&quot; o &quot;Background&quot; layer.

===Properties===

[[Image:Properties-tab.jpg|thumb|La scheda '''Properties''']]

Le '''Properties''' (proprietà) sono un tema che merita una guida apposita, in quanto sono &quot;pesantemente&quot; coinvolte nella creazione e uso delle token macros. Questa guida non entrerà nei minimi dettagli delle proprietà, piuttosto si incentrerà solo sulle informazioni di base che le riguardano. 

Qualsiasi token deposto sulla map in MapTool acquisisce automaticamente una serie di '''properties''', che fondamentalmente possono essere viste come statistiche, caratteristiche o tratti (lo sapete, i numeri su una scheda del personaggio). In effetti, ogni token si porta dietro la propria scheda del personaggio incorporata. In termini di programmazione, le proprietà sono reputabili come variabili a cui può essere assegnato un valore utilizzabile successivamente dalle macros. 

* '''Nota: sebbene le persone facciano riferimento spesso alle &quot;proprietà dei token&quot;, le proprietà visibili nella finestra di dialogo &quot;Edit Token&quot; non sono altro che le proprietà specifiche in quella sola ed unica campaign.

Quando si clicca sulla scheda '''Macros''' nella finestra di dialogo '''Edit Token''' vedrete una lista di proprietà che sono attualmente configurate per la '''Campaign''' che state usando. Se avete aperto una nuova campagna (o appena avviato MapTool), potrete vedere il ''default property set'' (serie di opzioni predefinite) che appaiono così:

* Strength
* Dexterity
* Constitution
* Intelligence
* Wisdom
* Charisma
* HP
* AC
* Defense
* Movement
* Elevation
* Description

Per il resto di questa guida gli esempi useranno la lista di qui sopra. 

L'elenco di proprietà che vedete è racchiuso in una tabella (o foglio di calcolo), con il nome specifico sulla sinistra e uno spazio bianco sulla destra. In questo spazio potete inserire il valore che volete assegnare alla rispettiva proprietà. Potete inserire testo, numeri o in casi più avanzati direttamente delle istruzioni macro (dichiarazione o contenuto di una macro) come valore per una particolare proprietà.

Una volta fatto questo e premuto '''OK''', il valore immesso verrà assegnato alle proprietà '''di quel token'''. Più tardi potrete scrivere una  macro che si riferisca a queste proprietà per fare dei calcoli o tirare dadi.

Dal momento che le proprietà già di per sé rappresentano uno dei temi di maggior importanza, consultate la guida [[Introduction to Properties/it | Introduzione alle proprietà]] per informazioni più dettagliate.

===State===

[[Image:State-tab.jpg|thumb|La scheda '''State''']]

[[Image:State-example.jpg|thumb|Questo token ha applicato uno state - la piccola immagine rossa è la &quot;state image&quot; sovrimpressa sulla token image]]

Gli '''States''' sono marcatori visuali che possono essere applicati ad un token (tipicamente appaiono come un'immagine sovrimpressa sul token) e rappresentano una sorta di richiami che potrebbero servire in un gioco. Per esempio, se cercate un marchio per identificare che un particolare token NPC è &quot;morto&quot;, potete selezionare lo stato &quot;dead&quot; sul token, e qualsiasi immagine abbiate selezionato per indicare la &quot;morte&quot; apparirà sopra il token. 

Gli stati predefiniti che sono caricati quando avviate MapTool sono:

* Dead
* Disabled
* Hidden
* Prone
* Incapacitated
* Other
* Other 2
* Other 3
* Other 4

&lt;br style=&quot;clear:both;&quot;/&gt;

====Health Bar====

[[Image:Bar-example.jpg|thumb|Questo token ha una ''bar'' applicata, sovrimpressa al di sopra. La barra può essere impostata per rispecchiare differenti quantità attraverso le macros]]

La scheda State contiene anche le informazioni di regolazione per le '''bars''' che il token mostra o potrebbe mostrare. Queste barre vengono esposte in sovrimpressione sul token (in alto, in basso o ai lati), e possono essere usati per tracciare cose come la vitalità (o le munizioni, le magie o qualsiasi altra cosa possa essere persa o spesa).

&lt;br style=&quot;clear:both;&quot;/&gt;

===Macros===

Dalla versione 1.3.b54 di MapTool, la tab Macros non è più abilitata. Questa scheda originariamente deteneva le token macros ma con l'avanzamento delle capacità delle macro questa scheda è diventata sempre meno utile, finché alla fine non è stata del tutto rimossa. Però, se volete ancora dare un occhiata, è presente nelle vecchie versioni.

===Speech===

[[Image:Speech-tab.jpg|thumb|La scheda '''Speech''']]

Questa scheda contiene una lista di '''speech''' (frasi) del token. Potete usarla per impostare detti, aforismi, gridi di battaglia e qualsiasi cosa desideriate che il vostro token possa &quot;say&quot; (dire) in chat. Ci sono due campi per ogni singolo speech item (elemento orativo) : 

* '''ID''': Questo campo è il breve identificativo che si assegna ad un elemento orativo; l'ID è usato in chat come riferimento al testo completo del discorso. L'ID può essere alfanumerico, potete usare numeri o lettere o un mix di entrambi. Non può contenere nessuno spazio, però!
* '''Speech Text''': Questo è il testo effettivo che verà visualizzato  nel riquadro di chat. 

Per utilizzare uno speech item, dovete conseguire:

# Selezionate il token che volete abbia qualcosa da dire (&quot;say&quot;)
# Nel riquadro di chat scrivete '''/tsay (ID)''', dove &quot;(ID)&quot; è sostituito dall'ID effettivo dello speech item. Se quindi volevate urlare il vostro grido di battaglia - a cui avete abilmente assegnato l'ID &quot;bcry&quot; - selezionereste il vostro token e scrivereste '''/tsay cry''' nel riquadro di chat.

===Ownership===

[[Image:Ownership-tab.jpg|thumb|La scheda '''Ownership''' tab]]

Il Token '''ownership''' (possesso dei token) determina chi fra i giocatori [[Introduction_to_Game_Hosting/it|connessi al gioco]] è abilitato a selezionare, muovere o controllare i dettagli di un determinato token. 

Se voi siete il possessore di un token potete selezionarlo, fare doppio clic su di esso per aprire la finestra di dialogo &quot;Edit Token&quot; e personalizzarne le opzioni e anche spostarlo per la map. Se ''non'' siete il possessore di un token in particolare, non potete far altro che rimirarlo sulla map -- non potrete selezionarlo, muoverlo o vederne proprietà e configurazioni.

Per assegnare il possesso semplicemente spuntate le caselle antecedenti il nome di qualcuno. I nomi mostrati nel box saranno i nomi di ogni giocatore (compreso il GM) connesso al gioco (se osservate la scheda Ownership quando nessuno è connesso vedrete solo il vostro nome). Se volete dare possesso di un token a tutti i giocatori, semplicemente spuntate '''All Players'''.

(Notate che selezionare l'opzione '''Strict token ownership''' quando avviate il server è indispensabile per le funzionalità descritte poc'anzi. Consultate [[Introduction to Game Hosting/it#Avviare un Server di MapTool|Avviare un Server di MapTool]] per i dettagli sulle opzioni del server.)

===Config===

[[Image:Config-tab.jpg|thumb|La scheda '''Config''']]

Questa scheda contiene una serie di impostazioni che hanno effetto sul campo visivo, movimento ed interazione di un token attraverso MapTool. 

====Shape====

I Tokens in MapTool possono avere tre tipi di shapes (conformità):

* '''Top Down''': i token di stampo top-down sono usualmente disegnati a mano o renderizzazioni di creature, oggetti e persone vedute dall'alto in basso (a volo d'uccello). Impostare lo shape di un token su '''Top-down''' indica a MapTool di abilitare la rotazione del token quando selezionate '''Change Facing''' al clic destro su di essi (in questo modo il vostro token potrà guardare in faccia i suoi nemici!).
* '''Circle''': i token dalle fattezze circolari sono come Pog o fiches da poker - immagini tonde che rappresentano creature o personaggi. Poiché sono raffigurazioni simboliche e non realistiche vedute &quot;dall'alto&quot;, quando voi selezionate Change Facing invece di ruotare l'immagine - che sarebbe brutto da vedere - una piccola freccia gialla apparirà ad indicarci dov'è rivolto il token.
* '''Square''': i tokens dalla sagoma squadrata funzionano come quelli a forma circolare eccetto perché sono...un momento...quadrati. (N.d.T. in realtà semplicemente la punta della freccia gialla che indica la direzione della pedina costeggerà una cornice quadrata invece che circolare)

====Size====

Un token può avere un dato numero di taglie che scalano la larghezza della token image. 

Le graduazioni disponibili dipendono dalla griglia selezionata durante il [[Introduction_to_Mapping/it|regolamento di una map]]. Se impostate la map con una griglia (essa sia esagonale o quadrata) avrete a disposizione sia ''Free Size'' come modello di scalatura (che vi consente un ridimensionamento fluido) che una serie di taglie a tutti gli effetti, da &quot;Fine&quot; a &quot;Colossal&quot; (se avete mai giocato a D&amp;D probabilmente li avrete già riconosciuti). 

Se invece dalle Map Properties avrete scelto di togliere la griglia una scala numerica da -11 a +20 sostituira le taglie. 

====Properties====

Questo campo vi permette di indicare quale serie di proprietà adotta un token fra quelle disponibili nella campaign. Il progettista della campaign può assegnare distintamente le serie di proprietà ai tokens (per esempio, una apposita per i tokens PG e l'altra per gli NPG).

====Has Sight====

Questo campo vi consente di decidere che tipo di [[Introduction to Lights and Sights/it|facoltà visive]] possiede il token. L'opzione '''Sight''' consente al GM di simulare l'oscurità, la luce, gli oggetti celati e i nemici furtivi.

====Snap to Grid====

Questa casella di spunta indica semplicemente che il token si aggancia alla griglia esistente quando viene spostato. Se  deseleziona, il token non si curerà della griglia mentre lo trascinate sulla map.

====Visible to Players====

Questa casella di spunta fa consente di far scomparire un determinato token alla vista - se spuntata nessun giocatore connesso al gioco potrà vedere il token o interagire con esso in nessun modo.

====Layout, Portrait, ed Handout====

Ci sono tre campi che hanno a che fare con l'apparenza estetica di un token:

* '''Layout''': questo mostra come il token è raffigurato sulla map
* '''Portrait''': questa è un immagine separata che compare nell'angolo in basso a sinistra della map al passaggio del mouse sul token
* '''Handout''': consente di scegliere un immagine che apparirà alla pressione del tasto destro sul token, scegliendo '''Show Handout'''
[[Category:MapTool]][[Category:Tutorial]]
{{Languages|Introduction to Tokens}}</text>
      <sha1>sx4iu5j7p4hrnbi1vzztpfnu5fc1f0n</sha1>
    </revision>
  </page>
  <page>
    <title>exposeFOW</title>
    <ns>0</ns>
    <id>1108</id>
    <revision>
      <id>7199</id>
      <parentid>6980</parentid>
      <timestamp>2019-03-06T07:54:05Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="365">{{stub}}
{{MacroFunction

| name=exposeFOW
| version=1.3b76
|trusted=true
| description=
Clears the Fog of War (FOW) for all selected tokens according to their sight settings.

| usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
exposeFOW()
&lt;/source&gt;
'''Parameters'''
{{param|none|This macro function has no parameters.}}

}}

[[Category:Miscellaneous Function]] [[Category:FoW]]</text>
      <sha1>m0lpijbhh7a1y8abbfddm90z2kthcuz</sha1>
    </revision>
  </page>
  <page>
    <title>exposePCOnlyArea</title>
    <ns>0</ns>
    <id>1109</id>
    <revision>
      <id>7201</id>
      <parentid>7200</parentid>
      <timestamp>2019-03-06T07:57:56Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="580">{{stub}}
{{MacroFunction
| name=exposePCOnlyArea
| version=1.3b76
|trusted=true
| description=
Clears Fog of War (FOW) where PC tokens can see and establishes/restores FOW everywhere they cannot.
{{note|This works the same as Meta-Shift-O.  Note that the keystroke may be different for locales other than U.S. English.}}
This function is often used in combination with the [[onTokenMove]] event.
| usage=
&lt;source lang=&quot;mtmacro&quot;&gt;
exposePCOnlyArea()
&lt;/source&gt;

or

&lt;source lang=&quot;mtmacro&quot; &gt;
exposePCOnlyArea(mapname)
&lt;/source&gt;
}}

[[Category:Miscellaneous Function]]
[[Category:FoW]]</text>
      <sha1>tl36jxntfm3m7n8evqdt6eu4hbud4ij</sha1>
    </revision>
  </page>
  <page>
    <title>Introduction to Properties/it</title>
    <ns>0</ns>
    <id>1111</id>
    <revision>
      <id>6390</id>
      <parentid>4789</parentid>
      <timestamp>2015-10-16T09:38:09Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <comment>aggiornato all'ultima versione inglese del 27 lug 2011 alle 17:13</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21984">{{Languages|Introduction to Properties}}{{Beginner}}
==Campaign Properties==

Una delle caratteristiche più utili in MapTool è la capacità dei [[Introduction_to_Tokens/it|tokens]] di portarsi dietro un assortimento di '''Properties''' (proprietà) allegate ad esse, che possono essere manipolate dalle macro ed usate per creare rapide esposizioni di informazioni. Di base le proprietà dei token sono come schede del personaggio incorporate.

Tuttavia, per il fatto che queste opzioni sono così utili, gli sviluppatori di MapTool hanno creato molti differenti modi di usarle e manipolarle. La presente guida tratterà della creazione di gruppi di Campaign Property (proprietà campagna), di come regolarli affinché abbiano valori predefiniti e del modo in cui impiegarli per plasmare gli Statsheet (scheda delle statistiche).

==Il Regolamento d'Esempio o MTRPG==

Al fine di avere utili riferimenti durante lo svolgimento della guida, diversi collaboratori ed utenti di MapTool hanno creato il [[Sample Ruleset/it|Regolamento d'Esempio]] -- un semplice sistema di gioco di ruolo prodotto specificatamente per illustrare parti di Maptool. Chiameremo le suddette regole &quot;MapTool RPG&quot; - o in breve MTRPG. Quello che andremo a fare sarà creare un nuovo Campaign File (file di campagna) e impostare diverse ''campaign properties'' che corrispondano agli attributi delle MTRPG.

==La Finestra Campaign Properties==

[[Image:Edit-campaign-props.png|thumb|Il Menù di Edit, mostra l'opzione Campaign Properties]]

Per cominciare ad operare sulle Campaign Properties (Proprietà Campagna), la prima cosa da fare è andare su '''Edit &gt; Campaign Properties''' così da aprire l'apposita finestra. Una volta dentro vedrete diverse schede e una mole considerevole d'informazioni.

Le schede presenti nella finestra '''Campaign Properties''' conteranno sei elementi:

* '''Token Properties''': qui dimorano tutte i gruppi di proprietà che un token potrebbe adoperare nella campaign corrente
* '''Repositories''': qui è dove potete designare un &quot;[[Introduction to Campaign Repositories/it |repository]]&quot; (deposito) online per contenere i campaign files, specialmente le immagini, allo scopo di migliorare i tempi di caricamento e la velocità quando ospitate o partecipate ad un gioco online
* '''Sight''': qui è dove si configurano le opzioni per i tipi di campi visivi della campaign corrente
* '''Light''': qui si configurano le sorgenti di luce e le aure della campaign corrente
* '''States''': questa scheda permette la configurazione degli [[Token:state/it|stati dei token]] per la campaign corrente
* '''Bars''': qui è dove si configurano le [[bar.name/it|barre dei token]] per la campaign in corso

Questa guida terrà in considerazione solamente la prima scheda, '''Token Properties'''.

==La scheda Token Properties==

[[Image:Camp-props.png|thumb|La scheda'''Token Properties''' nelle Campaign Properties]]

La prima scheda visualizzata all'apertura di Campaign Properties è la &quot;Token Properties&quot;. Questa appare relativamente semplice, ma li si annidano enormi potenziali. Ci sono 3 campi di testo in questa scheda:

* Name: questo è come chiamerete una gruppo di proprietà esposto in basso. Quando aprite la finestra campaign properties nessun gruppo di proprietà sarà evidenziato, perciò il campo sottostante risulterà vuoto.
* Token Type: la colonna sul fianco sinistro non è editabile, elenca per nome tutti i gruppi di proprietà appartenenti alla campaign corrente. L'unico gruppo predefinito esistente è '''Basic''', è presente anche se non si carica nessuna campaign.
* Una larga area di testo dove potete immettere le proprietà per la campaign corrente. In primo luogo apparirà vuota, lo sarà fintanto che non evidenzierete il nome di gruppo di proprietà dalla lista di sinistra '''Token Type''', in questo caso compariranno le nomenclature di quella selezione con i loro valori.

===Token Type===

In questo campo potete vedere i nomi della serie di &quot;Property Types&quot; differenti (potremmo immaginarli come insiemi di proprietà) che sono stati configurati nella campaign corrente. Se nessuna campaign è caricata, l'unico gruppo di proprietà presente sarà il ''Basic'', quello predefinito. Il campo '''Token Type''' non sarà direttamente editabile dall'utente.

===Name===

Questo è un semplice campo di testo dove potete inserire il nome che volete dare al rispettivo gruppo di proprietà. Questo nome comparirà nella colonna &quot;Token Type&quot; una volta fatto l'''update'' (aggiornamento) cliccando in basso a destra. I nomi possono essere come preferite; per esempio molti utenti creano gruppi chiamati &quot;PNG&quot; per distinguerli dai &quot;PG&quot; nei giochi dove le statistiche e i tratti fra queste due entità differiscono.

===Properties===

Qui è dove vi dovrete sbizzarrire. In questa area di testo potrete creare qualsivoglia proprietà che rifletta tutti i possibili valori numerici o statistiche attribuibili ad un personaggio da GDR (e anche altre proprietà, molti utenti ne creano alcune utili per scrivere macros ma che poi non appaiono in nessuna scheda del personaggio!).

==Creare Properties==

===Properties Senza Valori Predefiniti===

[[Image:Basic-default-props.png|thumb|Le serie di proprietà del gruppo predefinito &quot;basic&quot;]]

Se andate a guardare gli [[Sample_Ruleset/it#Attributi_Primari|Attributi Primari del MTRPG]], potrete vedere che ce n'è sono quattro basilari per un personaggio: ''Forza'', ''Destrezza'', ''Intelligenza'' e ''Resistenza''. Stiamo per sbarazzarci delle proprietà predefinite e sostituirle con queste nuove. 

1. Andate su '''Edit &gt; Campaign Properties'''. Vedrete nel lato sinistro, sotto ''Token Type'', che l'unico gruppo presente è &quot;Basic&quot;. Ora gli creeremo una nuova selezione di proprietà.

2. Nell'elenco '''Token Type''' a sinistra, selezionate ''Basic''. Una volta fatto, vedrete molte proprietà stagliarsi con simboli di ogni sorta, come @, #, e simili. 

3. Selezionate tutto quello che è nell'area di testo e premete il tasto Cancella sulla vostra tastiera per eliminare ciò che concerne le proprietà. Avanti - non siate timidi!

4. Lasciate il campo '''Name''' inalterato - MapTools necessita obbligatoriamente di avere un gruppo di proprietà chiamato ''Basic'', non potete cambiargli nome.

[[Image:Default-props-replaced.png|thumb|Le proprietà predefinite sono state cancellate e sostituite con i quattro Attributi Primari delle MTRPG]]

5. Nell'area di testo sotto al campo '''Name''', inserite il nome di ognuno dei quattro Attributi Primari del MTRPG in questo modo:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Forza&lt;br/&gt;
Destrezza&lt;br/&gt;
Intelligenza&lt;br/&gt;
Resistenza&lt;/tt&gt;&lt;/blockquote&gt;

Quando avete finito la vostra finestra assomiglierà a quella della schermata qui di fianco. 

6. Una volta finito d'inserire le proprietà che volete, cliccate sul pulsante '''Update'''. Niente Panico! Le proprietà sono scomparse ma se riselezionerete ''Basic'' dalla colonna di sinistra riappariranno nell'area principale di testo.

7. Cliccate su '''OK''' per confermare tutti i vostri cambiamenti e chiudere la finestra '''Campaign Properties'''. 

8. Andate su '''File &gt; Save Campaign As''' e salvate la vostra campaign col nome di '''MTRPG.cmpgn'''. A questo punto avete creato un nuovo file di campaign con un rinnovato gruppo di proprietà. 

Quando create le proprietà in questo modo -- semplicemente elencando gli attributi uno dopo l'altro -- all'apertura di un token vedrete che queste proprietà non hanno alcun valore. Questo non significa che valgano zero o come se fossero una riga vuota - loro hanno letteralmente ''nessun valore''. Generalmente questo non significa molto, ma è una distinzione importante in termini di scrittura delle macro (nella programmazione c'è una grossa differenza fra una stringa lasciata in bianco ed una variabile al momento ''vuota''!). 

Una volta aggiornato la scheda Token Properties tutti i nuovi tokens e quelli già presenti sulla map &quot;erediteranno&quot; le nuove proprietà impostate.

'''NOTA''': Il Name dei gruppi di proprietà non può contenere al suo interno degli spazi - quindi se avete dei gruppi chiamati ad esempio &quot;Punti Ferita&quot;, dovrete necessariamente inserirli come ''PuntiFerita''.

===Creare Properties comprensivi di Valori Predefiniti===

[[Image:Newprops-defvalues.png|thumb|Le proprietà MTRPG hanno ora dei valori predefiniti]]

Ora, sappiamo che le MTRPG contemplano un valore minimo di 1 per ogni attributo primario. Ha quindi senso impostare il &quot;valore predefinito&quot; di queste proprietà a 1, cosicché ogni token non possa scendere al di sotto del punteggio minimo consentito per gli attributi. Le direttive di conseguimento sono::

1. Aprire la finestra Campaign Properties.

2. Selezionare il gruppo ''Basic''.

3. Editare le proprietà copiandole dalle seguenti (come anche dall'immagine):

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Forza:1&lt;br&gt;
Destrezza:1&lt;br&gt;
Intelligenza:1&lt;br&gt;
Resistenza:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

4. Cliccate su '''Update'''.

Inserendo i due punti alla fine di ogni attributo seguiti dal numero 1, avete detto a MapTool che il valore predefinito per le proprietà corrispondenti è 1 (in altre parole, qualsiasi valore mettiate dopo i due punti diventerà il ''valore prerdefinito'' per quella proprietà). Notate che in basso alla finestra Token Properties c'é una legenda descrittiva sulle varie opzioni utilizzabili nelle proprietà.

Adesso, se trascinate un nuovo token sulla map e guardate le sue proprietà (doppio-cliccate sul token ed entrate nelle scheda Properties all'interno della finestra di dialogo '''Edit Token'''), vedrete che ha i valori predefiniti. 

Approposito: non preoccuparti di nessun tokens che potresti aver già configurato - aggiungere o modificare i valori predefiniti ''non'' ne sovrascriverà le proprietà. MapTool è sufficientemente furbo da gestire la cosa.

===Mettere in Mostra le Properties nello Statsheet===

[[Image:Statsheet-props.png|thumb|Gli Statsheet visualizzano le proprietà del gruppo che avete selezionato. Vedrete come farle apparire in questa sezione]]

MapTool integra una funzionalità chiamata '''Statsheet''' (scheda delle statistiche)  che abbiamo brevemente accennato nel capitolo [[Introduction to Tokens/it|Introduzione ai Tokens]] - in pratica è una finestra a scomparsa che appare nell'angolo a sinistra della map ogni volta che indugiate con il mouse sopra un token. 

Potreste dire: &quot;Un momento... quando punto il mio token non c'è nessun statsheet! dove sta?&quot; Il motivo per cui non lo vedete è che lo Statsheet è gestito dalle Campaign Properties - mostrerà le proprietà di un token (insieme ad una versione larga della sua immagine) ''solo'' dopo aver soddisfatto un paio di requisiti:

* Le proprietà sono configurate per essere mostrate dallo statsheet; e
* Le proprietà da mostrare devono avere effettivamente un valore

====Configurare le Properties per essere visualizzate====

[[Image:Newprops-visible.png|thumb|Notate gli asterischi prima delle proprietà, questo le abiliterà alla comparsa nello Statsheet]]

Se guardate in basso della parte adibita alle '''Campaign Properties''', nella scheda '''Token Properties''', vedrete una legenda dei caratteri che serviranno a rendere visibile una proprietà nello Statsheet. Ci sono tre opzioni di visualizzazione, ognuna di queste va indicata ponendo il simbolo corrispondente prima del nome della proprietà:

# '''&lt;nowiki&gt;*&lt;/nowiki&gt;''': un asterisco significa &quot;mostra questa proprietà sullo statsheet&quot;
# '''@''': significa &quot;mostra questa proprietà solo al proprietario del token (ed al GM)&quot;
# '''&lt;nowiki&gt;#&lt;/nowiki&gt;''': significa &quot;mostra questa priprietà solo al GM (nemmeno il proprietario del token può vederla)&quot;

L'asterisco è '''richiesto''' per ogni statistica da mostrare in generale - se non mettete un asterisco per prima, niente verrà mostrato a prescindere di quant'altro scriviate li. D'altro canto i simboli @ e # sono facoltativi. 

Quindi, per il nostro gioco, andremo a configurare tutte le proprietà per essere visibili a chiunque (solo con una stellina). Per farlo, aprite le vostre proprietà ed editatele come mostrato in seguito:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Forza:1&lt;br&gt;
 *Destrezza:1&lt;br&gt;
 *Intelligenza:1&lt;br&gt;
 *Resistenza:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

Da adesso, quando sposterete il mouse sopra un token, vedrete la finestra a scomparsa dello Statsheet (guardate la schermata sopra) con i valori delle proprietà di Forza, Destrezza, Intelligenza e Resistenza. Inoltre, poiché ogni nuovo token parte con dei valori predefiniti, lo Statsheet apparirà subito per tutti quanti.

====Short Names====

[[Image:Newprops-shortnames.png|thumb|Le campaign properties hanno ora uno Short Names stabilito per ognuna di esse]]

A volte, i nomi delle proprietà possono diventare troppo lunghi (o risultare poco amichevoli - niente spazi e via dicendo). MapTool vi permette di inserire uno ''Short name'' (abbreviazione) per ogni proprietà. Per farlo inserite semplicemente la sigla fra le parentesi dopo il nome della proprietà, in questo modo:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Forza(For):1&lt;br&gt;
 *Destrezza(Des):1&lt;br&gt;
 *Intelligenza(Int):1&lt;br&gt;
 *Resistenza(Res):1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

Queste sigle verranno mostrate nello Statsheet al posto del nome intero della proprietà.

'''Le sigle hanno una sola funzione espositiva - quando vi riferirete alle proprietà in una macro, dovrete utilizzare il nome completo appropriato.'''

===Creare Properties Derivate===

[[Image:Newprops-derived.png|thumb|Le properties ''PuntiFerita'' e ''Movimento'' hanno ora  del codice macro che istruisce MapTool sul come derivarne il valora da altre proprerties preesistenti]]

[[Image:Statsheet-with-allnewprops.png|thumb|Lo Statsheet  espone tutte le properties, incluso quelle derivate]]

Bene, ora faremo qualcosa di bello. In molti giochi di ruolo ci sono attributi dei personaggi che derivano da altre statistiche - ad esempio, nel regolamento di ''Savage World'', la statistica di &quot;Parata&quot; è basata sull'abilità ''Combattimento''; similmente, in Dungeons &amp; Dragons, i &quot;Punti Ferita&quot; si ricavano in parte dal punteggio di &quot;Costituzione&quot;. 

Tornando a noi, potete creare questi altri attributi derivati come proprietà separate, immettendo manualmente i loro valori per ogni token - ma come potreste farli calcolare direttamente a MapTool? Proprio così, le campaign properties di MapTool non devono essere per forza numeri o testo, ma anche calcoli o equazioni basati su altre proprietà che il token possiede. 

In MTRPG, ci sono tre statistiche ''derivate'': Punti Ferita, Armatura e Movimento. Queste statistiche si abbreviano con &quot;PF&quot;, &quot;AR&quot; e &quot;MV&quot;. Per fare un esempio, stiamo per impostare i ''Punti Ferita'' e il ''Movimento'' per far si che vengano calcolati tramite le proprietà già esistenti. Lasceremo l'''Armatura'' in un secondo tempo (ci vuole un calcolo più complesso per esplicare il suo valore e noi ce la stiamo prendendo comoda). 

Prima di tutto abbiamo bisogno di aggiungere le proprietà per questi tre valori derivati:

1. Aprire il gruppo di proprietà &quot;Basic&quot;. 

2. Sotto ''Resistenza'', inserire quanto segue:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *PuntiFerita(PF)&lt;br&gt;
 *Armatura(AR)&lt;br&gt;
 *Movimento(MV)&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

A questo punto noterete che non abbiamo impostato nessun valore predefinito. Non premete ancora '''Update''' - immettete del codice macro per creare i valori derivati.

Nel [[Sample Ruleset/it|MTRPG]] possiamo osservare che i &quot;Punti Ferita&quot; sono il valore della &quot;resistenza&quot; moltiplicato per 6. Replicare questo calcolo nelle campaign properties è veramente banale. Editate la proprietà &quot;Punti Ferita&quot; come leggete:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *PuntiFerita(PF):{Resistenza * 6}&lt;/tt&gt;
&lt;/blockquote&gt;

Quello che abbiamo fatto qui è inserire [[Introduction to Macro Writing/it|codice macro]] nella proprietà come fosse un valore predefinito (ricordate, i valori predefiniti si mettono sempre dopo i due punti) in grado di far calcolare a MapTool il suo punteggio effettivo. Due cose accadono in questa procedura:

# Abbiamo racchiuso il calcolo in { } per far sapere a MapTool che il testo racchiuso nelle parentesi graffe deve essere gestito come una macro e non solo come testo.
# All'interno delle parentesi graffe abbiamo detto, &quot;Trova il valore della proprietà ''Resistenza'', moltiplicalo per 6, e rendi ciò che ne risulta il valore della proprietà ''Punti Ferita''&quot;

Ora, per gestire l'attributo ''Movimento'', il nostro lavoro sarà altrettanto semplice: ci serve istruire MapTool a prendere il valore della proprietà ''Destrezza'' e assegnarlo invariato alla proprietà ''Movimento''. Per farlo, effettuate le modifiche seguenti:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Movimento(MV):{Destrezza}&lt;/tt&gt;
&lt;/blockquote&gt;

Quando avete finito, la serie completa delle proprietà risulterà come questa:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Forza:1&lt;br&gt;
 *Destrezza:1&lt;br&gt;
 *Intelligenza:1&lt;br&gt;
 *Resistenza:1&lt;br&gt;
 *PuntiFerita(PF):{Resistenza * 6}&lt;br&gt;
 *Armatura(AR)&lt;br&gt;
 *Movimento(MV):{Destrezza}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

Quando passerete il puntatore del vostro mouse sopra il token, lo Statsheet dovrebbe somigliarsi a quello nella schermata in alto a destra. Ricordate, anche se abbiamo specificato che ''Armatura'' dovrà comparire nello Statsheet, solo le proprietà aventi un valore verranno effettivamente mostrate - ''Armatura'' è ancora vuoto, lo vedrete solamente quando gli verrà assegnato un valore.

==Salvare la Vostra Campaign==

A questo punto, avete creato un gruppo di proprietà della campagna, collocato un token sulla map e pasticciato con le proprietà da voi create. Probabilmente dovreste salvare il vostro lavoro in un file [Campaign file]. Questo salverà i tokens, le proprietà che avete creato e tutte le informazioni che avete messo nella campaign finora. 

Inoltre, questo vi permetterà di lavorare sulla stessa campaign in futuro, per provare i trucchi degli altri tutoriali di MapTool.

Per salvare la vostra campagna:

# Andate su '''File -&gt; Save Campaign As...'''
# Nella finestra di dialogo inserite il nome del file. Qualcosa di simile a '''MTRPG.cmpgn''' va bene!
# Cliccate su '''OK'''

La vostra campagna è stata salvata e voi potete riaprirla quando volete, lavorandoci di nuovo!

Per piacere fate caso al fatto che il salvataggio creato ha una versione ben specifica ed incompatibile con una versione ''vecchia'' di MapTool; tuttavia la maggior parte di campaign files possono essere riaperti con una versione più nuova del programma (non è garantito, nonostante...MapTool sia in costante evoluzione!)

==Alcuni Dettagli Tecnici==

Un paio di volte in questa ed altre guide i token properties sono stati descritti come &quot;le proprietà ''visibili''&quot; nella campaign, oppure le proprietà impostate &quot;''per questa campaign''&quot;. C'è un motivo per l'utilizzo di queste diciture. 

Vedete, un token - ipotizzando di averlo scomposto per analizzare il suo funzionamento interno - è un file XML che contiene una ''carrellata'' di informazioni. Esso contiene le informazioni riguardo la propria immagine, la dimensione, il campo visivo, la luce, la sagoma, ed ovviamente le sue proprietà. Ciò che è importante capire è che il token memorizzerà non soltanto le proprietà del MTRPG, ma, nel caso venga salvato in un file '''.rptok''' o ripreso da un altro campaign file, terrà registrate anche le proprietà della campagna da dove proviene. Queste informazioni non saranno visibili, ma saranno comunque stipate al suo interno. 

Quindi, in realtà, un assortimento di Campaign Properties indica le proprietà che:

* Potete vedere con un doppio clic a ridosso di un token, e
* Potete modificare direttamente cliccando nella cella accanto a loro

Potrebbe suonarvi come una ricetta per il disastro - cosa succederebbe se configurereste una proprietà già stabilita in precedenza ma invisibile? Fortunatamente Maptool, durante l'esecuzione di una macro,  non tenterà di accedere a nessuna proprietà nascosta se non gli verrà chiesto ''Specificatamente'' tramite due funzioni speciali ben precise. Dunque state tranquilli, non potete accedere accidentalmente a proprietà che non configurabili nelle Campaign Properties.

Tirando le somme, se un Property Type (come il gruppo predefinito ''Basic'') ha una proprietà chiamata '''PF''', questa verrà registrata nel file XML del token con il nome di '''PF'''. Se un altro property type che avete creato (ad esempio il gruppo personalizzato ''Pathfinder'') possiede anch'esso una proprietà chiamata '''PF''', entrambe si riferiranno allo stesso parametro nel token. Modificare il valore di '''PF''' quando il token è ''Basic'' mostrerà lo stesso valore anche quando si cambierà il gruppo in ''Pathfinder''.

==Proseguire da qui==

MapTool supporta proprietà e derivate di proprietà molto elaborate, con svariate funzioni matematiche e operazioni.
Alcune delle più comuni utilizzabili sono (gli esempi non si riferiscono per forza a MTRPG, sono solo esempi):

* '''Operatori matematici di base''': addizione (+), sottrazione (-), moltiplicazione (*), e divisione (/)
** '''Esempio''': &lt;tt&gt;PuntiFerita: {Resistenza * 6}&lt;/tt&gt;
* '''Arrotondamento''': ci sono alcune ''funzioni'' che consentono di arrotondare i numeri una volta divisi
** '''Floor''': la funzione floor() arrotonda per ''difetto''. '''Esempio''': &lt;tt&gt;PuntiFerita:{floor(Costituzione / 2)}&lt;/tt&gt; dividerebbe la Costituzione in due arrotondandola per difetto
** '''Ceiling''': la funzione ceil() agisce nella stessa maniera di floor(), ma arrotonda per eccesso. '''Esempio''': &lt;tt&gt;PuntiFerita:{ceil(Costituzione/2)}&lt;/tt&gt;
[[Category:MapTool]][[Category:Tutorial]]
{{Languages|Introduction to Properties}}</text>
      <sha1>bat55yvlqysfyxrama0t36j0480irso</sha1>
    </revision>
  </page>
  <page>
    <title>Sample Ruleset/it</title>
    <ns>0</ns>
    <id>1112</id>
    <revision>
      <id>4739</id>
      <parentid>4733</parentid>
      <timestamp>2010-10-19T02:37:15Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6300">{{Languages|Sample Ruleset}}{{#customtitle:Regolamento d'Esempio |Regolamento d'Esempio}}

Questo è un piccolo sistema di gioco di ruolo creato da Phergus a scopo illustrativo, come canovaccio per le applicazioni di RPTools. Menzionando la discussione originale, questo sistema non è pensato per essere maturo e bilanciato ma piuttosto come un sistema sufficientemente ampio da delineare una vasta selezione di funzionalità. Guardate la [http://forums.rptools.net/viewtopic.php?f=12&amp;t=6343 discussione originale] per maggiori dettagli.

==Caratteristiche==
===Attributi Primari===
Gli attributi primari sono determinati usando un sistema a punti. Ad ogni nuovo personaggio saranno assegnati {{code|14}} punti che dovrà distribuire nei quattro attributi primari. Gli attributi primari possono variare di sei gradi ciascuno, da un minimo di {{code|1}} ad un massimo di {{code|6}}.
* '''Forza (For)'''
* '''Destrezza (Des)'''
* '''Intelligenza (Int)'''
* '''Resistenza (Res)'''
'''Sommario:''' Totale di {{code|14}} punti. Minimo {{code|1}}. Massimo {{code|6}}.

===Attributi Derivati===
I Personaggi possiedono tre attributi derivati. I ''Punti Ferita'' sono determinati moltiplicando la ''Resistenza'' per {{code|6}}. Ogni classe di personaggio ha un punteggio di ''Armatura'' specifico; l'''Armatura'' può essere incrementata dai poteri. Il ''Movimento'' di base è uguale alla ''Destrezza'' del personaggio.
* '''Punti Ferita (PF)'''
* '''Armatura (AR)'''
* '''Movimento (MV)'''
'''Sommario:''' (''Resistenza'')x{{code|6}} ''Punti Ferita''. ''Armatura'' determinata dalla classe. ''Movimento'' uguale alla ''Destrezza''.

===Classi===
Alla creazione di un personaggio, i giocatori dovranno scegliergli una classe. La classe scelta determinerà i poteri iniziali e l'''Armatura'''.
{| cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|- bgcolor=#e0ddd5 align=left
! Classe !! Poteri Iniziali !! Armatura
|-
| Guerriero || Spada, Colpo di Scudo, Arco, Scudo, Torcia ||align=center| 6
|- bgcolor=#eeede9
| Ladro || Pugnale, Nascondersi, Colpo Furtivo, Scassinare, Torcia ||align=center| 2
|-
| Mago || Pugnale, Staffa, Luce, Saetta Fulminante, Palla di Fuoco ||align=center| 1
|- bgcolor=#eeede9
| Chierico || Mazza, Cura, Proteggi, Scaccia non-Morti, Torcia ||align=center| 4
|}

==Combattimento==
===Iniziativa===
Ciascun combattente tirerà l'iniziativa allo scoccare di ogni ripresa. Il tiro iniziativa sarà il risultato di {{code|1d6}} + ''Destrezza''. Ogni combattente agirà nella ripresa in ordine decrescente d'iniziativa.

===Movimento===
I combattenti possono usare i poteri o muoversi durante una ripresa. Quando si sposta, un combattente si può muovere un numero di quadrati/esagoni uguale al suo ''Movimento''.

===Tiro d'Attacco===
I poteri di attacco richiedono un tiro di dado per determinare se hanno successo. Se il lancio è {{code|15}} o più dopo aver applicato qualsiasi bonus, il potere d'attacco ha successo.
* '''Attacco Ravvicinato''' - Tira {{code|1d20}} + ''Forza'' + Bonus di Attacco del Potere
* '''Attacco a Distanza''' - Tira {{code|1d20}} + ''Destrezza'' + Bonus di Attacco del Potere
* '''Attacco Magico''' - Tira {{code|1d10}} + ''Intelligenza'' + Bonus di Attacco del Potere
'''Sommario:''' Un {{code|15+}} in un tiro d'Attacco è un successo.

===Tiro di Danno===
Se un potere di attacco riesce ad andare a segno, determinare il danno tirando {{code|1d6}}, sommare il bonus di danno del potere, il bonus di attacco del attributo pertinente e infine sottrarre l'''Armatura'' del bersaglio. Il risultato dovrà essere tolto dai ''Punti Ferita'' della vittima.&lt;br&gt;
'''Sommario:''' {{code|1d6}} + (Bonus di Danno del Potere) + (Bonus di Attacco del Attributo) - Armatura

==Poteri==
I PG/PNG dispongo di Poteri che rappresentano i loro attacchi ed abilità. Inizialmente i PG hanno 5 poteri. I PNG ne hanno un numero variabile ma almeno 1. Ci sono due tipi di poteri: di Attacco e Altri. Durante una ripresa un PG/NPG può mantenere 1 Potere attivo che non sia d'attacco e usarne 1 di attacco.

====Poteri di Attacco====
{| cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|- bgcolor=#e0ddd5 align=left
! Nome !! Bonus di Attacco !! Bonus di Danno !! Raggio !! Specialità
|-
| Colpo Furtivo || +4 || 2x || - || Solo attaccando alle spalle e se si è nascosti dalla ripresa precedente.
|- bgcolor=#eeede9
| Scaccia non-Morti || +0 || +8 || 4 || Funziona solo sui non-Morti. Se esce 6su6 al tiro di dado il non-Morto è adirato e guadagna +2 danni per tre riprese.
|-
| Morso I || -1 || -2 || - || 
|- bgcolor=#eeede9
| Morso II || -1 || -1 || - || Con risultato di 5+ al tiro, infetta la vittima riducendone la Forza di 2.
|-
| Arco || +0 || +1 || 8 || 
|- bgcolor=#eeede9
| Tocco Gelido || -1 || +2 || - || Il tocco congelante fa danno e abbassa la Destrezza di 2.
|-
| Artiglio|| -2 || +2 || - || 
|- bgcolor=#eeede9
| Maledizione || +0 || +0 || 3 || Il tormento dell'attacco riduce l'Intelligenza di 2.
|-
| Pugnale || +0 || -1 || 2 || Ravvicinato o a Distanza.
|- bgcolor=#eeede9
| Palla di Fuoco || -1 || +0 || 4 || Causa danno al bersaglio e a tutti quelli sui quadrati/esagoni immediatamente adiacenti.
|-
| Cura || * || - || 4 || Cura il bersaglio (se stesso/altri) di 2d6. *Nessun Tiro d'Attacco.
|- bgcolor=#eeede9
| Saetta Fulminante || +1 || +4 || 6 || Bersaglio Singolo
|-
| Mazza || +1 || +1 || - || 
|- bgcolor=#eeede9
| Colpo di Scudo || -1 || 1/2 || - || Stordisce per tre riprese l'avversario con un risultato di 4+ su 1d6.
|-
| Staffa  || +0 || +0 || - || 
|- bgcolor=#eeede9
| Evoca non-Morto || - || - || 2 || Evoca 1 zombi.
|-
| Spada || +2 || +2 || - || 
|}

====Altri Poteri====
{| cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|- bgcolor=#e0ddd5 align=left
! Nome !! Raggio !! Specialità
|-
| Nascondersi || - || Nasconde il Ladro dai nemici. Non può attaccare eccetto che per il Colpo Furtivo.
|- bgcolor=#eeede9
| Luce || - || Illumina un raggio di 6 quadrati/esagoni intorno al Mago.
|-
| Scassinare || - || Apre serrature di 1d6 + Destrezza &gt; Difficoltà serratura.
|- bgcolor=#eeede9
| Proteggi || 4 || Conferisce +4 all'Armatura del bersaglio. (se stesso/altri)
|-
| Scudo || - || Aggiunge +2 all'Armatura. Non si può usare assieme al Colpo di Scudo.
|- bgcolor=#eeede9
| Torcia || - || Illumina un raggio di 3 quadrati/esagoni intorno al personaggio.
|}
[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>exposePCAreaOnly</title>
    <ns>0</ns>
    <id>1114</id>
    <redirect title="exposePCOnlyArea" />
    <revision>
      <id>4823</id>
      <parentid>4817</parentid>
      <timestamp>2010-11-02T09:47:42Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <comment>#REDIRECT [[exposePCOnlyArea]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[exposePCOnlyArea]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getMoveCount</title>
    <ns>0</ns>
    <id>1115</id>
    <revision>
      <id>4777</id>
      <parentid>4775</parentid>
      <timestamp>2010-10-22T17:03:01Z</timestamp>
      <contributor>
        <username>Jfrazierjr</username>
        <id>227</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="338">{{MacroFunction

| name=getMoveCount
| version=1.3b76
|trusted=true
| description=
{{stub}}
Returns the token's last movement count in units.  The count takes movement metric into account, and thus works on gridless, hex, and square grids.

| usage=
&lt;source lang=&quot;mtmacro&quot;&gt;
getMoveCount()
&lt;/source&gt;
}}

[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:selectTokens</title>
    <ns>1</ns>
    <id>1116</id>
    <revision>
      <id>4786</id>
      <parentid>4785</parentid>
      <timestamp>2010-10-26T16:29:46Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>/* IDs vs. Names */ new section</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="326">The description says this takes token IDs, but the example says (and shows) names.  Both names and IDs seem to work for me.
[[User:Teejaydub|Teejaydub]]

== IDs vs. Names ==

Yes, you're right - I'm used to using names and didn't think about putting an example with an id! [[User:Cclouser|Rumble]] 16:29, 26 October 2010 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:setHasSight</title>
    <ns>1</ns>
    <id>1117</id>
    <revision>
      <id>4790</id>
      <timestamp>2010-10-28T02:37:04Z</timestamp>
      <contributor>
        <username>Geneocide</username>
        <id>253</id>
      </contributor>
      <comment>New page: It says you cannot set the HasSight of an NPC token but I'm pretty sure you can, at least as of b75.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="100">It says you cannot set the HasSight of an NPC token but I'm pretty sure you can, at least as of b75.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>MapTool Preferences/it</title>
    <ns>0</ns>
    <id>1118</id>
    <revision>
      <id>6392</id>
      <parentid>6391</parentid>
      <timestamp>2015-10-16T09:40:45Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17476">{{Languages|MapTool Preferences}}

{{note|'''Note Importanti:''' Ci sono preferenze relative alle map che consentono di preconfigurare i valori di quelle create ex-novo. Sebbene abbiate la possibilità di cambiare queste preferenze durante la creazione di una map, alcune di queste non possono più essere cambiate una volta che la mappa è stata creta. Questo è il comportamento delle versioni 1.3b56 e precendenti. Le Preferences di questo tipo saranno contrassegnate da un {{mark}}  '''N.d.T.:''' [[Dalla versione 1.3b75 tutte le preferences della map si possono modificare in qualsiasi momento e quindi le affermazioni precedenti non sono più valide.]]
&lt;br&gt;&lt;br&gt;'''Nota:''' Tutti gli screenshots in questo articolo sono mostrati con i valori predefiniti, ma non sono per forza le preferenze ''raccommandate'' per voi.}}{{Beginner}}
__TOC__
==Scheda Interactions==
[[Image:prefs_tab_interactions.png|thumb|right|300px|La scheda Interactions nella finestra di dialogo Preferences]]

===Maps===
[[Image:prefs_interactions_maps.jpg|frame|right|Sezione Maps]] 
* '''New maps have Fog of War'''
: Determina se le nuove maps hanno la [[Fog of War/it|Nebbia di Guerra]] abilitata alla creazione. Se siete soliti usarla, potrebbe sembrare ovvio avere questa &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;casella spuntata; tuttavia, quando create più di una map per la campaign, spesso è utile disabilitare questa opzione per velocizzarne la lavorazione poiché anche come GM non potrete vedere tutto quello che è coperto dalla [[Fog of War/it|Nebbia di Guerra]] (N.d.T. mica vero, la visuale viene solo ingrigita). Una volta completata la map, sarà un solo passo riabilitare la [[Fog of War/it|Nebbia di Guerra]].
* '''New maps visible to players'''
: Determina se alla creazione di una nuova map questa deve essere impostata come visibile dai giocatori. Anche se ci sono eccezioni, tipicamente avere questa &lt;span style=&quot;font-size: 24px; line-height: 1px; color: red; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt; casella non spuntata risulta la scelta ottimale; non rischierete di lasciare involontariamente la map visibile ai giocatori.
* '''Default Grid Type'''{{mark}}
** '''Square''' [[Image:gridSquare.png|sub]]
** '''Horizontal Hex''' [[Image:gridHorizontalHex.png|sub]]
** '''Vertical Hex''' [[Image:gridVerticalHex.png|sub]]
: Determina il tipo di griglia alla creazione di nuove maps. Siete liberi di creare maps senza alcun tipo di griglia, o anche un tipo di griglia diverso da quelli specificati qui, ma non potete scegliere come valore predefinito l'assenza di un qualsiasi tipo di griglia.
* '''Default Grid Size'''{{mark}}
: Rappresenta la quantità di pixel che volete MapTool utilizzi per disegnare le celle di una griglia ad una risoluzione completa (scalatura 1:1). Il valore predefinito è {{code|50}} pixels, risulta adeguato per molti computer, ma quelli di ultima generazione supportano tranquillamente dai {{code|100}} ai {{code|200}} pixels. Non ci sono limiti specifici di dimensioni, ma {{code|50}} e {{code|100}} pixels sono i valori più comunemente usati. Questa opzione determina anche quanto grande sia, alla depositazione su una map, un immagine impostata su Free-size e non ridimensionata manualmente.
* '''Default Units Per Cell'''{{mark}}
: Imposta l'ammontare di unità che ogni cella rappresenta. Sono chiamate ambiguamente &quot;unità&quot; perché è lasciato a noi decidere quello che rappresentano. Se volete che ogni cella rappresenti 5 piedi, allora imposterete questo campo su {{code|5}}. Se invece volete che rappresenti 4km imposterete {{code|4}}. Questa opzione è usualmente chiamata ''Distanza per Cella''.
* '''Default Vision Distance'''{{mark}}
: E' la massima distanza attraverso la quale un [[PC Token]]s può dissolvere la [[Fog of War/it|Nebbia di Guerra]] dopo che le [[Light\it|Luci]], il [[Sight/it|Campo Visivo]], ed il [[Vision Blocking Layer/it|Livello di Blocco Visuale]] siano stati considerati. E' importante sottolineare che questo valore è misurato in ''Distanza per Cella''.
* '''Movement metric'''
** '''ONE_TWO_ONE'''
** '''ONE_ONE_ONE'''
** '''MANHATTAN'''
** '''NO DIAGONALS'''
: Determina come viene calcolata la modalità di movimento durante lo spostamento diagonale di un [[Token/it]].  Questo ha effetto sul valore totale della distanza percorsa mostrato sotto ad un [[Token/it]] quando lo si sposta, o quando si richiede la visualizzazione del suo percorso precedente (Ctrl+P); viene calcolato in base alla ''Distanza per Cella''. '''ONE_TWO_ONE''' specifica che ogni due spostamenti diagonali il valore calcolato dell'ultima cella così raggiunta verrà raddoppiato. '''ONE_ONE_ONE''' specifica che i movimenti diagonali saranno calcolati nello stesso modo degli altri. '''MANHATTAN''' specifica che ogni movimento diagonale sarà calcolato come il doppio della ''Distanza per Cella''. '''NO DIAGONALS''' specifica che i [[Token/it|Token]]s possano muoversi solo in direzioni non diagonali. L'impostazione '''Movement metric''' entrar in gioco solo quando si utilizza una griglia quadrata, per le esagonali il movimento in ogni direzione usa la ''Distanza per Cella''.

===Tokens===
[[Image:prefs_interactions_tokens.jpg|frame|right|Tokens Section]] 
* '''Start Snap to Grid'''
: Determines if [[Token]]s will default to having '''Snap to Grid''' &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Having this setting &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked is optimal for maps that use a grid, but even on such maps there are cases when you might want to temporarily disable this setting(e.g. when placing a lot of &quot;prop&quot; [[Token]]s on the Object layer while drawing a map). 
* '''New tokens visible to players'''
: Determines if new [[Token]]s have the '''Visible''' option &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked upon creation. The optimal setting for this really depends on your play style; if you have a lot of random encounters and build them during play, you may find it useful to have this setting disabled. 
* '''Duplicate Token Numbering'''
** '''Increment'''
** '''Random 2-digit'''
: Will automatically append numbers to [[Token]]s with duplicate names, upon creation. '''Increment''' will leave the first token unnumbered, but will number each duplicate after that, starting with the number {{code|1}} (e.g. Troll, Troll 1, Troll 2). '''Random 2-digit''' will append a random two-digit number to the token name, even if there are no duplicates on the map yet. '''Random 2-digit''' might be considered the optimal setting, as it gives your players no indication of how many copies of that [[Token]] can be expected to exist.
* '''Show Numbering on'''
** '''Name'''
** '''GM Name'''
** '''Both'''
: Specifies where the number that derived from '''Duplicate Token Numbering''' is applied. '''Name''' appends the number after the name (derived from '''New Token Naming'''). '''GM Name''' places the number within the ''GM Name'' field of the [[Token]] options. '''Both''' appends the number after the name, and places it within the ''GM Name'' field of the [[Token]] options. Due to odd behaviour that MapTool will display when handling tokens with the same name, it is recommended that you use '''Name''' or '''Both''', but not '''GM Name'''.
* '''New Token Naming'''
** '''Use Filename'''
** '''Use &quot;Creature&quot;'''
: Determines what the name will be when creating a new [[Token]], or what the ''Name'' field will be pre-filled with in a new [[Token]] dialog. '''Use Filename''' specifies that the name will be derived from the name of the file that was added to your Resource Library (e.g. if you add the file ''uglytroll.jpg'' to your Resource Library, tokens created from that image will begin with the name ''uglytroll''). '''Use &quot;Creature&quot;''' defaults all new [[Token]]s to being named &quot;Creature&quot; (without quotes). 
* '''Start Freesize'''
: If you are using a map with a grid, [[Token]]s typically default to the size of one grid cell upon creation. Having this setting &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked allows you to have them default to ''Freesize'', which is very useful for when you're placing a lot of 'prop' [[Token]]s on the Object layer while creating a map.
* '''Show Dialog on New Token'''
: When this setting is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, a ''New Token'' dialog will open when you drag an image onto the map, allowing you to set some options prior to creation. If you disable this setting, all new tokens will be created with the default settings derived from previous settings in this section.
* '''Stat Sheet Portrait Size''' ''(Set to 0 to disable portaits)''
: Sets the width (in pixels) of the portrait that is displayed in the lower left corner of the map when mousing over certain [[Token]]s; the image is resized proportionately. A portrait is displayed under a few different circumstances; if the [[Token]] has properties that are set to display on the stat sheet, and those properties have values, the portrait will display the token image. If the [[Token]] has a portrait image set, it will display with or without a stat sheet. Why might you want to set this to {{code|0}}? Besides the obvious reason of not displaying the portrait, you might want to use a stat sheet, but not want a portrait displayed with it; or perhaps you don't want to use a stat sheet or a portrait, but would like to have the portrait image 'slot' usable for other purposes, like inside a Dialog or Frame.

===Chat===
[[Image:prefs_interactions_chat.jpg|frame|right|Chat Section]] 
* '''Show Avatar per line'''
: The image for the impersonated token is shown next to any chat output it creates, when this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. This is a client-side setting and does not effect any other clients connected to the same game.
* '''Insert Smilies'''
: Replaces common smiley(emoticon) character sequences with graphical smilies when this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. If you use a lot of macros, it is recommended that you turn this off, as it could cause some complications if any of your macro code is interpreted as a smiley.
* '''Use ToolTips for Inline Rolls'''
: Sets the default display ([[:Category:Display Roll Option|Display Roll Option]]) for rolls in the chat panel. Will use {{roll|tooltip}} if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, otherwise it will default to {{roll|expanded}}.
* '''Trusted Prefix Background'''
: Sets a custom background for macro output that comes from a [[Trusted Macro]].
* '''Trusted Prefix Foreground'''
: Sets a custom foreground (text color) for macro output that comes from a [[Trusted Macro]].
* '''Time between autosaves'''
: The amount of time in minutes between the autosaving of the chat log. This is not functional as of 1.3b54.
* '''Autosave Chat Log Filename'''
: The filename that will be used when automatically saving your chat log. This is not functional as of 1.3b54.

===Objects===
[[Image:prefs_interactions_objects.jpg|frame|right|Objects Section]] 
* '''Start Snap to Grid'''
: Tokens created on map's Object layer will automatically be set to '''Snap to Grid''' if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. 
* '''Start Freesize'''
: Tokens created on a map's Object layer will automatically be set to '''Freesize''' if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.

===Backgrounds===
[[Image:prefs_interactions_backgrounds.jpg|frame|right|Backgrounds Section]] 
* '''Start Snap to Grid'''
: Images dropped on a map's Background layer will automatically be set to '''Snap to Grid''', if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. 
* '''Start Freesize'''
: Images dropped on a map's Background layer will automatically be set to '''Freesize''', if this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.

===Facing===
[[Image:prefs_interactions_facing.jpg|frame|right|Facing Section]] 
* '''On Edges'''
: A token's facing will snap to the edges when &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Edges are the lines that make up a grid cell.
* '''On Vertices'''
: A token's facing will snap to the vertices when &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Vertices are the points that connect the lines that make up a grid cell.

==Accessibility Tab==
[[Image:prefs_tab_accessibility.png|thumb|right|300px|Accessibility Tab on the Preferences Dialog]]
[[Image:prefs_accessibility_all.jpg|frame|right|Accessibility Tab Close-up]] 
* '''Chat Font Size'''
: The default size of the font in the chat panel; measured in points.
* '''ToolTip Initial Delay'''
: The time it takes for a tooltip to display when hovering the mouse over an element that possesses a tooltip; measured in miliseconds.
* '''ToolTip Dismiss Delay'''
: The time it takes for a tooltip to disappear when hovering the mouse over an element that possesses a tooltip; measured in miliseconds.

==Application Tab==
[[Image:prefs_tab_application.png|thumb|right|300px|Application Tab on the Preferences Dialog]]
===Save===
[[Image:prefs_application_save.jpg|frame|right|Save Section]] 
* '''Save Autorecover every [   ] min'''
: Saves a copy of your campaign in the interval specified. Unlike Autosave, this will not overwrite your campaign file, but rather create a new one every time it automatically saves.
* '''Save reminder on close'''
: Displays a dialog when attempting to close the program with unsaved changes to your campaign when &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.
* '''1.3b50 Compatability Mode'''
: Due to some changes in how certain data is stored in the campaign file in versions after 1.3b50, they might not be compatible with version 1.3b50 and earlier. If this is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked your campaign will be saved in the older format, allowing it to be opened in older versions, but losing some of the new features.

===Map Defaults===
[[Image:prefs_application_mapdefaults.jpg|frame|right|Map Defaults Section]] 
* '''Halo line width'''
: Controls the width of the [[Halo]] when it is displayed on a [[Token]]. 
* '''Vision opacity'''
: Areas that are no longer directly visible, but have previously had their [[Fog of War]] exposed, will will be dimmed by layering a translucent black on top of them. This setting controls the opacity of the translucent black.
* '''Use halo color for vision'''
: Related to '''Vision opacity''', if this setting is &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, the translucent color layered on top of previously viewed areas will be the [[Token|Token's]] [[Halo]] color as opposed to black.
* '''Autoshow Fog'''
: Will automatically expose [[Fog of War]] after moving a [[Token]] if &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked.

===Macro Panels===
[[Image:prefs_application_macropanels.jpg|frame|right|Macro Panels Section]] 
* '''Default: Allow Players to Edit Macros'''
: In order for a macro to be considered a [[Trusted Macro]], players must not be able to edit it. This setting determines if a new macro should default to allowing players to edit if &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked. Disabling this setting can be very useful if you intend to create a lot of macros that you intend to be trusted.

==Sounds Tab==
[[Image:prefs_tab_sounds.png|thumb|right|300px|Sounds Tab on the Preferences Dialog]]
[[Image:prefs_sounds_all.jpg|frame|right|Sounds Tab Close-up]] 
* '''Play system sounds'''
: When &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, MapTool will play a sound when new content is sent to the chat panel.
* '''Only when window not focused'''
: When &lt;span style=&quot;font-size: 24px; line-height: 1px; color: green; font-weight: bold; vertical-align: sub;&quot;&gt;&amp;#10003;&lt;/span&gt;checked, the sound that MapTool plays when new content is sent to the chat panel will only play if MapTool is not the application that has focus.
[[Category:MapTool]]</text>
      <sha1>mne8pyy052hni4126z6i6nt5477hwjz</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:MapTool Preferences</title>
    <ns>1</ns>
    <id>1119</id>
    <revision>
      <id>4809</id>
      <parentid>4808</parentid>
      <timestamp>2010-10-29T06:48:36Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <comment>/* updates to be made */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="214">== updates to be made ==

-Delete the important note, are not longer true

-Update names of option in section &quot;Maps&quot;

-Section &quot;Tokens&quot; (add &quot;option warm when tokens are deleted&quot; and &quot;show stat sheet on mouseover&quot;)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Shortcut Keys</title>
    <ns>0</ns>
    <id>1121</id>
    <revision>
      <id>6895</id>
      <parentid>6894</parentid>
      <timestamp>2017-08-17T07:44:05Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4989">{{Languages|Shortcut Keys}}
Most of the Shortcut Keys in Maptool 1.3b76+ can be found in the menu; some however are not listed. These &quot;stealth&quot; keys are marked in ''italic''.

Here is a comprehensive list of all known keystrokes.  Most keystrokes require that the map window have the keyboard focus.

Note that '''Meta''' means '''Ctrl''' on Windows and Linux, and '''Cmd''' on OSX.  Also note that most of these can be changed in the translation files, so these settings are primarily for the English locale.

==Light/Vision Related==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |Keystroke 
! style=&quot;background-color:#e0ddd5;&quot; |Description 
|-
| '''Meta+K''' || Toggle display of light source icons 
|-
| '''Meta+I''' || Clear fog visible by selected token(s) 
|-
| '''Meta+P''' || Clear fog visible by selected token(s) along last moved path
|-
| '''Meta+Shift+O''' || Restore fog-of-war to entire map except area currently visible to selected token(s) 
|-
| '''Meta+W''' || Toggle fog-of-war on/off (GM only) 
|}


==Drawing Tools Related==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |Keystroke 
! style=&quot;background-color:#e0ddd5;&quot; |Description 
|-
| '''Meta+LeftMouseButton''' || Snap to grid while drawing
|-
| '''Alt+LeftMouseButton''' || Draw from centre (vs corner to corner) 
|-
| '''Shift+LeftMouseButton''' || Erase 
|}


==Map Related==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |Keystroke 
! style=&quot;background-color:#e0ddd5;&quot; |Description 
|-
| '''Spacebar'''	|| Show a pointer (arrow) on the map
|-
| '''Meta+Spacebar'''	|| Show a pointer (talk-balloon)
|-
| '''Shift+Spacebar'''	|| Show a pointer (think-balloon)
|-
| '''Spacebar'''	|| Adds a waypoint while moving (as does middle mouse button)
|-
| '''Meta+G'''		|| Toggle grid on/off (current client only)
|-
| '''Meta+Shift+S'''	|| Create screenshot
|-
| '''Meta+Shift+D'''	|| Clear all drawings
|-
| '''Meta+Z'''		|| Undo last drawing
|-
| '''Meta+R'''		|| Redo last drawing (only when drawing tool is active)
|-
| '''Meta+Alt+Enter'''	|| Toggle full screen map
|-
| '''='''		|| Set zoom to 1:1 and back on second press
|-
| '''-'''		|| Zoom out
|-
| '''+'''		|| Zoom in
|-
| '''Z'''		|| (keep it pressed) inverse mouse scroll zoom
|-
| '''Meta+H'''		|| Toggle map (in)visible to player(s) (GM only)
|-
| '''Meta+Shift+A'''	|| Grid settings (spacing, alignment, color) (GM only)
|-
| '''Meta+N'''		|| New map (GM only)
|-
| '''Meta+Shift+P'''	|| Toggle player view (GM only)
|-
| '''Meta+Shift+F'''	|| Center players on current view continuously (GM only)
|-
| '''Meta+F'''		|| Center players on current view (GM only)
|-
| '''Meta+E'''		|| Force players to current map (GM only)
|}

==Token Related==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |Keystroke 
! style=&quot;background-color:#e0ddd5;&quot; |Description 
|-
| '''Meta+T'''		|| Toggle token name display.
|-
| '''T'''		|| select next token (Shift=previous) on map.
|-
| Digits on numeric keypad || Move in the direction of the digit (7=NW, 9=NE, 1=SW, 3=SE).
|-
| '''D''', '''NumPad5''', or '''Home'''	|| Drop selected tokens after moving (when using arrow keys).
|-
| '''Shift+MouseWheel''' || Rotate facing of token.  '''MouseWheel_Up''' = clockwise.  '''Ctrl'''=rotate by 1 degree.  Otherwise angle controlled by '''Preferences'''.  When the token is set to '''TOP_DOWN''' (double-click on token &gt; '''Config''' tab &gt; '''Shape''') the whole token will rotate instead of the yellow facing arrow.
|-
| '''Shift+LeftArrow''' and '''Shift+RightArrow''' ||
On ''TOKEN'' layer: Same as '''Shift+MouseWheel''':  rotate token.

On all other layers: Move token per pixel instead of per cell.
|-
| '''Meta+R'''		|| Turn on token facing. With a mouse click set the facing in the direction of the mouse pointer.  Angle controlled as for '''Shift+MouseWheel'''.  Use '''Delete''' to remove facing.
|-
| '''Shift+MouseOver''' || Mouseover on a token normally displays a statsheet; holding down '''Shift''' turns off the statsheet.
|}

==Chat Related==

See [[Chat Commands]] for specifics on the '''/''' commands.

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |Keystroke 
! style=&quot;background-color:#e0ddd5;&quot; |Description 
|-
| '''/'''		|| Macro command (press '''Enter''' to complete)
|-
| '''Meta+Enter'''	|| Toggle chat frame visibility
|}

==Standard==

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
! style=&quot;background-color:#e0ddd5;&quot; |Keystroke 
! style=&quot;background-color:#e0ddd5;&quot; |Description 
|-
| '''Meta+O'''	|| Open Campaign File...
|-
| '''Meta+S'''	|| Save Campaign
|-
| '''Meta+A'''	|| Save Campaign As...
|-
| '''Meta+X'''	|| Cut (tokens only)
|-
| '''Meta+C'''	|| Copy (tokens only)
|-
| '''Meta+V'''	|| Paste (tokens only)
|}

[[Category:MapTool]]</text>
      <sha1>9ge4pro32sxwfcjkscyxalipu6jvrgs</sha1>
    </revision>
  </page>
  <page>
    <title>Things I'd Like to See Fixed</title>
    <ns>0</ns>
    <id>1123</id>
    <revision>
      <id>5711</id>
      <parentid>5488</parentid>
      <timestamp>2011-09-06T01:19:08Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <comment>Update bug list</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2143">=Overview=

The list below was made by me personally (Azhrei) as a reminder of things I wanted to work on.  It is not given in any particular order, although I did rank things I thought were more important with plus signs (&quot;+&quot;) and less important with minus signs (&quot;-&quot;).  Anyone wishing to contribute code to MapTool in the form of Java patches should post to the Developer Notes forum and specify which items you want to tackle as we may have guidelines on how we want to see the item implemented.

=List of bug fix items for MapTool 1.3=

There are other things beyond this list that would be &quot;nice to have&quot; but since 1.3 is in feature freeze, they won't be happening.

# Loading campaign doesn't draw the screen correctly on the first refresh of the map
# Error in Help docs for the Campaign Properties &gt; Light tab.  http://forums.rptools.net/viewtopic.php?f=3&amp;t=19240&amp;view=unread#p203192
# Moving seems to clear fog for all players, while Meta-I only clears for the selected token(s).
# Add build.xml target for clearing the version.txt to get back to DEVELOPMENT
# Add Help menu option that displays Java SystemProperties for debugging purposes (Java version, user.dir, other information from SysInfo?)
# Add startup check that grabs notes from rptools.net for display to user (used for things like version notes, update notes, etc)
# Feedback on SVN 5769 (latest as of 7/3) http://forums.rptools.net/viewtopic.php?f=60&amp;t=19195
# Variable transparency for the statsheet?
# Dropping first token doesn't use Preferences setting for Filename vs. Creature name? http://forums.rptools.net/viewtopic.php?f=3&amp;t=19202&amp;p=202692#p202692
# Movement metrics need to be displayed above hard fog
# If statsheet is being displayed, map rendering should be clipped out of that area
# Right-click menu on tokens sometimes is above or under the statsheet
# When I draw VBL with the Poly Line tool and try to start a new line where the last line ended, it won’t work. I have to literally draw the line somewhere else and then go back to that point.
# Using the # in campaign properties should imply the *, but without the * actually showing up in the list</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Shortcut Keys/ja</title>
    <ns>0</ns>
    <id>1124</id>
    <revision>
      <id>4834</id>
      <parentid>4830</parentid>
      <timestamp>2010-11-04T17:53:46Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3700">{{Languages|Shortcut Keys}}{{#customtitle:ショートカット・キー|ショートカット・キー}}{{Translation}}
マップツールにおける大半のショートカット・キーはメニューで見る事ができるが、一部のショートカットは表示されていない。メニューに非表示のショートカットは''斜体''にしている。以下は（私の知る限りの）ショートカットの全リストだ：

'''照明'''
*'''CTRL＋K''' 光源の表示／非表示の切り替え
*'''''CTRL＋i''' 選択しているトークンの不明領域を公開''
*'''''CTRL＋P''' 選択しているトークンの不明領域を直近の移動経路に沿って公開''
*'''''CTRL＋SHIFT＋O''' すべてのPCトークン（サーバー・オプションの individual views（独立した視界）を有効にしている場合は個々のPCトークン）の不明領域（半透明領域を含む）を復帰する''
*'''CTRL＋W''' 不明領域の表示／非表示の切り替え

'''マップ'''
*'''''スペース''' マップ上にポインター（矢印）を表示''
*'''''CTRL＋スペース''' ポインター（ふきだし）を表示''
*'''''SHIFT＋スペース''' ポインター（独白のふきだし）を表示''
*'''''スペース''' 移動の際、通過点を追加する（マウスの中ボタンと同様）''
*'''CTRL＋H''' プレイヤーへのマップ表示／非表示を切り替え
*'''CTRL＋G''' グリッドの表示／非表示を切り替え
*'''CTRL＋SHIFT＋A''' グリッド調整
*'''CTRL＋N''' 新規マップ
*'''CTRL＋SHIFT＋P''' プレイヤー表示モードの切り替え（GMの画面専用）
*'''CTRL＋SHIFT＋S''' スクリーンショット
*'''CTRL＋SHIFT＋D''' すべての描画を消去
*'''CTRL＋Z''' 描画を一段階戻す
*'''CTRL＋SHIFT＋F''' プレイヤーの表示を現在の表示に合わせる（継続的）
*'''CTRL＋ALT＋Enter''' マップの全画面表示の切り替え
*'''CTRL＋F''' プレイヤーの表示を現在の表示に合わせる
*'''CTRL＋E''' 現在のマップをプレイヤーに強制
*''' = ''' 拡大
*''' - ''' 縮小
*''' + ''' 拡大率を1：1にする
*'''Z''' （キーを押している間）スクロールホイールによる拡縮の方向を逆にする

'''トークン'''
*'''CTRL＋T''' トークン名表示／非表示の切り替え
*'''''（SHIFT＋）T''' マップ上の次の（SHIFT：前の）トークンを選択''
*'''''D''' 選択中のトークンを移動させた後、選択を解除する（カーソルキーでの移動時）''
*'''''（CTRL＋）SHIFT＋ホイール（上／下）''' トークンの向きを90度回転させる。CTRL：1度回転。トークンの形状を「Top down」に設定している場合（トークンをダブルクリック→config タブ→Shape）は、黄色い矢印が表示されるのではなくトークン自身が回転する。''
*'''''（CTRL＋）SHIFT＋カーソルキー（左／右）''' トークンレイヤー：マウスホイールと同じようにトークンを回転する。その他のレイヤー：マス目ごとではなくピクセル単位でトークンを移動する''

'''チャット'''
*'''/''' マクロコマンド
*'''CTRL＋Enter''' チャットウィンドウの表示／非表示を切り替え

'''標準'''
*'''CTRL＋O''' 既存のキャンペーンファイルを開く
*'''CTRL＋S''' 現在のキャンペーンファイルを保存
*'''CTRL＋A''' 現在のキャンペーンファイルを名前を付けて保存
*'''CTRL＋C''' コピー
*'''CTRL＋X''' 切り取り
*'''CTRL＋V''' 貼り付け

[[Category:MapTool]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Fourwoods</title>
    <ns>2</ns>
    <id>1125</id>
    <revision>
      <id>4949</id>
      <parentid>4839</parentid>
      <timestamp>2010-12-02T18:16:33Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="690">Hello, I'm maptool user in Japan. I use these tools only in off-line session.
And, I re-distribute [http://fourwoods.net/b.cgi/trpg/rptools/maptool-ja.htm Home brewed MapTool for Japanese] in my webs.

英語の勉強がてら、基本操作の記事を中心に翻訳してます。MapTool はオンラインセッションではなくオフのセッションでマップ表示に使用しています。

また、下記で勝手に日本語化した MapTool を配布しています。

[http://fourwoods.net/b.cgi/trpg/rptools/maptool-ja.htm MapTool 日本語版（私家版）]

Wiki の更新、日本語版の更新は[http://twitter.com/fourwoods Twitter]で告知しています。</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Size</title>
    <ns>0</ns>
    <id>1126</id>
    <revision>
      <id>4854</id>
      <parentid>4853</parentid>
      <timestamp>2010-11-12T07:55:04Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="689">Size can be edited in the Token properties (double click on token or right mouse click on token). Size can also be set with the macro [[setSize]] and be retrieved with the [[getSize]] function.

The valid sizes for a Token are:
* {{code|Fine}}
* {{code|Diminutive}}
* {{code|Tiny}}
* {{code|Small}}
* {{code|Medium}}
* {{code|Large}}
* {{code|Huge}}
* {{code|Gargantuan}}
* {{code|Colossal}}

Note that 'Giant' used to be among this wiki-list, but this has never been implemented into maptool. This list currently corresponds with the d&amp;d system. Voices have been raised to make this also system independent (for instance 1 to 9).


--[[User:Wolph42|Wolph42]] 07:54, 12 November 2010 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Michel</title>
    <ns>2</ns>
    <id>1137</id>
    <redirect title="free reverese phone lookup" />
    <revision>
      <id>4871</id>
      <timestamp>2010-11-16T06:40:00Z</timestamp>
      <contributor>
        <username>Michel</username>
        <id>264</id>
      </contributor>
      <comment>[[User:Michel]] moved to [[free reverese phone lookup]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[free reverese phone lookup]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setTokenHandout</title>
    <ns>0</ns>
    <id>1138</id>
    <revision>
      <id>5610</id>
      <parentid>4964</parentid>
      <timestamp>2011-07-24T08:56:16Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="499">{{MacroFunction
|name=setTokenHandout
|version=1.3b77
|description=
Sets the handout image for the for the [[Current Token]]. The image can come from several sources. It can be an [[asset id]] (like from [[Macros:Functions:tblImage |tblImage()]] or[[Macros:Functions:getTokenImage|getTokenImage()]].)  or a [[Image Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenHandout(assetId)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenHandout(tokenImageName)
&lt;/source&gt;
}}

[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setTokenPortrait</title>
    <ns>0</ns>
    <id>1139</id>
    <revision>
      <id>5611</id>
      <parentid>4965</parentid>
      <timestamp>2011-07-24T08:57:34Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilink</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="504">{{MacroFunction
|name=setTokenPortrait
|version=1.3b77
|description=
Sets the portrait image for the for the [[Current Token]]. The image can come from several sources. It can be an [[asset id]] (like from [[Macros:Functions:tblImage |tblImage()]] or[[Macros:Functions:getTokenImage|getTokenImage()]].)  or a [[Image Token]].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenPortrait(assetId)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenPortrait(tokenImageName)
&lt;/source&gt;

}}

[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Stack Size/ja</title>
    <ns>0</ns>
    <id>1140</id>
    <revision>
      <id>5650</id>
      <parentid>4894</parentid>
      <timestamp>2011-08-09T05:08:11Z</timestamp>
      <contributor>
        <username>Fourwoods</username>
        <id>76</id>
      </contributor>
      <comment>/* .BATや.SHでのスタックサイズの設定 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11996">{{Languages|Stack Size}}{{#customtitle:スタック・サイズ|スタック・サイズ — MapToolDoc}}{{Translation}}
==スタックとは？==
&lt;!-- What is the Stack? --&gt;

&lt;div style=&quot;color:gray&quot;&gt;When MapTool starts, the Java Virtual Machine (the program that lets MapTool run on your computer!) configures a number of settings for the program. Two of these settings involve the available memory given to MapTool: main memory, and the '''stack'''.&lt;/div&gt;

MapTool の起動時、JAVA仮想マシン（これは君のパソコンでMapToolを動かすためのプログラムだ！）は MapTool 用にいくつかの設定を行う。そのうちの2つの設定は MapTool が使用するメモリー、メイン・メモリーと'''スタック'''に関するものである。

===メイン・メモリーの割り当て===
&lt;!-- Main Memory Allocation --&gt;

&lt;div style=&quot;color:gray&quot;&gt;The main memory allocated to MapTool simply indicates how much of your computer's RAM MapTool can play with - if you have, for instance, 2GB of RAM, you can tell MapTool that it can play around with 1GB; likewise if you want, you can say &quot;MapTool can only use 256KB of RAM!&quot; &lt;/div&gt;

MapTool へのメイン・メモリーの割り当ては単純にパソコンのRAMをMapToolがどれだけ利用可能かを示せば良い。たとえば、2GBのRAMがあるなら、MapTool に潤沢な1GBのメモリーを与えても良いし、望むのなら「MapToolは256KBのメモリーしか使っては行けません！」ということにしても構わない。

===スタック・サイズ===
&lt;!-- Stack Size --&gt;

&lt;div style=&quot;color:gray&quot;&gt;There is another memory amount that Java sets up when MapTool launches, and this one has to do not with the total amount of memory that MapTool gets, but the amount of memory any particular ''thread'' of a program can eat up at a given time. This memory is called the ''stack''. &lt;/div&gt;

MapToolが利用可能なメモリー総量以外に、起動時に Java が設定するメモリー量に関するもう一つの設定は、プログラム内の''各スレッド''が一度に利用可能なメモリー量のことである。このメモリーを''スタック''と呼ぶ。

&lt;div style=&quot;color:gray&quot;&gt;The stack is especially important when you are using macros to perform calculations: the more complex a macro gets (and some macros can get ''very'' complex!) the more ''stack memory'' it will consume. &lt;/div&gt;

このスタックは計算を伴うマクロを使うときに特に重要なものだ。複雑なマクロは、より多くの''スタックメモリー''を消費するからだ（いくつかのマクロは''とてつもなく''複雑だ！）。

&lt;div style=&quot;color:gray&quot;&gt;Eventually, a macro can get so complex, it eats up all the stack it is permitted, and then cries out for more. When this happens, you get a '''Stack Overflow''' error, and the macro will simply Not Work.&lt;/div&gt;

結局のところ、マクロは複雑になるもので、利用可能なスタックを食いつくすと更なるメモリを求めてだだをこね始める。そしてそのとき、'''Stack Overflow'''のエラーを吐き出し、マクロは動かなくなってしまう。

==スタックの設定==
&lt;!-- Configuring the Stack --&gt;

&lt;div style=&quot;color:gray&quot;&gt;In the beginning, MapTool used whatever default stack size Java felt like setting. The actual amount varied from computer to computer and operating system to operating system, but it was generally enough for the simple macros that were in use at the time.&lt;/div&gt;

さしあたり、MapTool は Java により設定される標準のスタックサイズをそのまま使用する。実際の容量はパソコンやOSにより様々であるが、単純なマクロを動作させるには十分な容量である。

&lt;div style=&quot;color:gray&quot;&gt;As the power and flexibility of the macro code increased, macros began to bump up against the limits of the default stack, and users began adjusting their stack size to compensate. &lt;/div&gt;

強力かつ柔軟な能力を持つマクロになってくると、標準のスタックサイズの限界に達するので、ユーザーはスタックサイズを相応しい容量まで引き上げることになる。

===.BAT や .SH でのスタックサイズの設定===
&lt;!-- Setting the Stack Size in a .BAT or .SH File --&gt;

&lt;div style=&quot;color:gray&quot;&gt;One of the ways to start MapTool is via the various ''batch files'' that are included when you download and unzip a copy of MapTool. These files are called things like '''Launch Maptool-512M-Memory.bat''' (for Windows machines) and '''Launch MapTool.sh''' (for Linux). The number in the filename indicates the amount of ''main memory'' allocated to MapTool. The contents of these batch files looks like:&lt;/div&gt;

MapTool を起動するには、ダウンロードしZIPファイルを展開した MapTool に含まれる数種類の''バッチファイル''を利用する方法がある。これらのファイルは'''Launch Maptool-512M-Memory.bat'''（Windows用）や'''Launch MapTool.sh'''（Linux用）といったファイル名になっている。ファイル名の数値は MapTool が確保する''メイン・メモリーの容量''を指している。これらのバッチファイルの中身は次のようになっている：

{{code|javaw -Xmx512M -Xss512K -jar maptool-*.jar run}}

&lt;div style=&quot;color:gray&quot;&gt;The critical pieces here are the ones that begin with {{code|-X}}. The first, {{code|-Xmx512M}} indicates how much main memory (in this case, 512MB) is allocated to the Java virtual machine. &lt;/div&gt;

ここで重要となる点は{{code|-X}}で始まる部分だ。一つ目の、{{code|-Xmx512M}}はJava仮想マシンがどれほどメイン・メモリーを予約するかを表している（この場合は512MB）。

&lt;div style=&quot;color:gray&quot;&gt;The second, {{code|-Xss512K}} is how much memory is allocated to the stack (the &quot;ss&quot; is for &quot;stack size&quot;). &lt;/div&gt;

二つ目の、{{code|-Xss512K}} はスタックがどれ程のメモリーを予約するか、ということだ（「ss」は「スタック・サイズ（stack size）」のこと）。

&lt;div style=&quot;color:gray&quot;&gt;In versions of MapTool prior to 1.3.b54, the {{code|-Xss512K}} is absent. To set the stack size allocated (overriding the defaults that are picked by Java or the value indicated), do the following:&lt;/div&gt;

バージョンが1.3.b54より古い MapTool では {{code|-Xss512K}} は欠けている。確保するスタック・サイズを設定する（Javaが設定する初期値を上書きする）方法は下記の通り：

&lt;div style=&quot;color:gray&quot;&gt;1. Open the batch file in a text editor like Notepad.&lt;/div&gt;

1. バッチファイルをメモ帳などのテキストエディターで開く。

&lt;div style=&quot;color:gray&quot;&gt;2. Edit the {{code|-Xss512K}} line to be another value, for instance, {{code|-Xss1M}} or {{code|-Xss2M}} (M is for megabytes, K is for kilobytes).&lt;/div&gt;

2. {{code|-Xss512K}}の部分を、{{code|-Xss1M}}や{{code|-Xss2M}}などの異なる値に書き換える（M はメガバイト、K はキロバイトを意味する）。

&lt;div style=&quot;color:gray&quot;&gt;3. Save the file, and then start MapTool using that batch file.&lt;/div&gt;

3. ファイルを保存し、このバッチファイルを使い MapTool を起動する。

&lt;div style=&quot;color:gray&quot;&gt;&lt;font color=&quot;red&quot;&gt;'''WARNING'''&lt;/font&gt;: When you are changing the stack size, the best settings are usually 512K, 1M, or 2M. &lt;font color=&quot;red&quot;&gt;'''DO NOT set it to 512M'''!&lt;/font&gt; That will cause Bad Things to happen.&lt;/div&gt;

&lt;font color=&quot;red&quot;&gt;'''注意：'''&lt;/font&gt;スタック・サイズを変更する場合、一般的な最適値は 512K、1M、または2Mである。&lt;font color=&quot;red&quot;&gt;'''決して 512M と設定しないように！'''&lt;/font&gt; さもなくば大変なことになってしまうだろう。

===MapToolLauncherを使用したスタックサイズの設定===
&lt;!-- Setting the Stack Size using MapToolLauncher --&gt;

&lt;div style=&quot;color:gray&quot;&gt;If you start MapTool with the Windows launcher, the third field is where you can indicate stack size. &lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;The Windows launcher defaults to a 2MB stack, which is perfectly acceptable for pretty much all uses. If you change it, that new value will be saved for the next time.&lt;/div&gt;

===WebStart利用時のスタックサイズの設定===
&lt;!-- Setting the Stack Size from WebStart --&gt;

&lt;div style=&quot;color:gray&quot;&gt;If you start MapTool using the Java WebStart option, you can change the settings here, too. &lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;1. Go to [http://www.rptools.net/index.php?page=launch The Launch Page]&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;2. Click the '''CUSTOMIZATION''' link.&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;3. Enter the values you want to use when you WebStart one of the applications.&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;4. Click on the links above to start the application you wish to use.&lt;/div&gt;

===Mac OSX でのスタックサイズの設定===
&lt;!-- Setting the Stack Size in Mac OSX --&gt;

&lt;div style=&quot;color:gray&quot;&gt;These instructions apply to OSX users who have downloaded the '''.dmg''' file from the [http://www.rptools.net RPTools web site] and installed MapTool from it. They were most recently tested on '''Snow Leopard 10.6.3'''. OSX users who are running MapTool using the WebStart approach won't need these instructions since the CUSTOMIZATION link on the [http://www.rptools.net/index.php?page=launch Launch page] allows the memory settings to be configured there.&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;(Unfortunately, Apple doesn't make this process easy. Their belief seems to be that the application provider should allow these values to be changed from inside the application but they didn't consider that the Java memory settings cannot be changed from inside Java. )&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;The installer in the .dmg creates what Apple calls an &quot;app&quot; -- it's a directory with the .app filename extension that contains all of the files necessary for the application. This includes the configuration file when the program is Java-based.&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;Here's the procedure for editing the configuration file (called a property list). Note that I'm describing the technique that uses the OSX TextEdit program because the only property list editor I have on my machine is under the /Developer directory -- which is an optional install for OSX so most people won't have it.&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;
# Ctrl-click (or right-click) on the application icon (the filename should end with .app).
# Choose Show Package Contents and a Finder window will open.
# Open the Contents folder and locate the Info.plist file.
# Ctrl-click (or right-click) on that file and choose Open With &gt; Other...
# In the Choose Application dialog that opens, locate TextEdit and double-click on it.
# The Info.plist file is now open. There is an entry in the file called VMOptions (mine was about two-thirds of the way down the file) that should be changed to match the memory characteristics your GM wants you to use. Here's what mine looks like in case you want a reference for the following steps:
#: &lt;key&gt;VMOptions&lt;/key&gt;
#:    &lt;array&gt;
#:         &lt;string&gt;-Xmx768m&lt;/string&gt;
#:         &lt;string&gt;-Xms64m&lt;/string&gt;
#:         &lt;string&gt;-Xss3m&lt;/string&gt;
#:      &lt;/array&gt;
# Replace your entries with the example text in Step 6. However, your GM may have directed you to use a particular value for the &quot;maximum memory&quot; setting. If so, replace the 768 number with the new maximum. The GM may also ask you to change the &quot;stack size&quot; amount -- that's the 3 number following the ss. (The 64 number never needs to be changed.) If you have other entries between the &lt;array&gt; and &lt;/array&gt; lines, they should be removed because you're specifying completely new values.
# Use Cmd-Q and then choose Save. You can close the Finder window that opened as well.
&lt;/div&gt;

&lt;div style=&quot;color:gray&quot;&gt;You're all done!&lt;/div&gt;

[[Category:MapTool]]
{{Languages|Stack Size}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>broadcast</title>
    <ns>0</ns>
    <id>1141</id>
    <revision>
      <id>7194</id>
      <parentid>7193</parentid>
      <timestamp>2019-03-06T07:49:30Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8249">{{MacroFunction

|name=broadcast
|trusted=true
|version=1.3b77
|description=
Allows sending a message directly to the chat area of another/all connected MapTool clients. It does not display the sender's name or token image in front of the message.

It lets send you a message either to all or a list of players - use the player names or the keyword {{code|&quot;gm&quot;}}. As delimiter you can specify either a string list separator character or {{code|&quot;json&quot;}} if you specify the target list as json array. The big differences compared to a normal chat message are:

#  if the message is part of a macro, then the message is sent even if the macro is aborted (after the broadcast),
#  the sender of the message is NOT displayed, and
#  if you broadcast an {{func|execLink}}, then that macro is AUTOMATICALLY executed on the clients it's broadcasted to, with the exception of the client that sends the message!
&amp;nbsp;
|usage= 
&lt;source lang=&quot;mtmacro&quot; line&gt; broadcast(message, [targets], [delimiter]) &lt;/source&gt;
[[Category:Miscellaneous Function]]

'''Parameters'''
{{param|message|a message that is broadcasted to the users that are listed as parameters.}}
{{param|targets|are the user names (so not token names) but the names of the users that are logged in. &quot;gm&quot; is also a valid parameter to give. E.g.: &quot;tim, tom, tarra&quot;. Defaults to all players (so if no parameter is given the message is send to all players).}}
{{param|delim|The delimiter used to separate the values in the String List that is given, defaults to {{code|&quot;,&quot;}}. If {{code|&quot;json&quot;}} is specified, a JSON array is expected instead of a String List.}}

|examples=
&amp;nbsp;
*Sending a message to all players:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: broadcast(&quot;Hello World&quot;)]
&lt;/source&gt;&lt;br /&gt;
*Sending a message to all GMs only:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: broadcast(&quot;Hello World&quot;, &quot;gm&quot;)]
&lt;/source&gt;&lt;br /&gt;
*Sending a message to &quot;tim&quot; and &quot;tom&quot; only (default comma delimiter):
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: broadcast(&quot;Hello World&quot;, &quot;tim, tom&quot;)]
&lt;/source&gt;&lt;br /&gt;
*Using json as the delimiter:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: broadcast(&quot;Hello World&quot;, '[&quot;tim&quot;, &quot;tom&quot;]')]
&lt;/source&gt; or 
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: broadcast(&quot;Hello World&quot;, json.append(&quot;&quot;, &quot;tim&quot;, &quot;tom&quot;))]
&lt;/source&gt;&lt;br /&gt;
*Executing the macro {{code|update()}} located at {{code|lib:Token}}, for the token {{code|Dragon}} on the PC of user {{code|Tim}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: link = macroLinkText(&quot;update@Lib:Token&quot;, &quot;none&quot;, &quot;&quot;, &quot;Dragon&quot;)]
[h: broadcast(execLink(link), &quot;tim&quot;)]
&lt;/source&gt;&lt;br /&gt;
}}

===Using the ''Bag of Tricks''===
Usually in a macro you would like the execution of a macro on a player's computer those users who own the token in context.  Or maybe you want to execute a macro on ALL clients but you have to figure out who the current 'executer' is and run the macro for that client separately as the {{func|execLink}} is only executed on remote clients. To make this a bit easier, I've created a couple of functions which are part of the [http://forums.rptools.net/viewtopic.php?f=46&amp;t=16066 Bag of Tricks (BoT)]. If you have the ''BoT'' installed, then the following functions are available to you:

====bot_execAllPlayers()====
This macro executes the macro {{code|macroName}} on ALL SELECTED clients. So in contrast of {{code|broadcast(execLink())}}, you do not have to worry about who is executing the macro since everyone does.
&lt;source lang=&quot;mtmacro&quot;&gt;
bot_execAllPlayers (macroName, arguments, [players], [output_to])
&lt;/source&gt;&lt;br /&gt;
{{param|macroName|name of the macro to execute; e.g. {{code|runThisMacro@lib:token}}}}
{{param|arguments|the arguments to pass to the macro (in the form of a JSON array)}}
{{param|players|a list of PLAYER names where to execute on (not token names). Defaults to all players}}
{{param|output to|Send resulting output of macro to whom ({{code|self}}, {{code|gm}}, {{code|all}}, {{code|none}}, {{code|gm-self}}, ''list''). Defaults to none}}
&lt;br /&gt;

''Example use:''

*Executing the macro {{code|update()}} located at {{code|lib:Token}}, with the parameters {{code|&quot;Hello World&quot;}} and {{code|&quot;2&quot;}} on the PC of user {{code|Tim}}, with the output of the result going to all connected systems:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: bot_execAllPlayers(&quot;update@lib:Token&quot;, json.append(&quot;&quot;,&quot;Hello World&quot;, 2), &quot;Tim&quot;, &quot;all&quot;)]
&lt;/source&gt;&lt;br /&gt;
*The same but now for all players
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: bot_execAllPlayers(&quot;update@lib:Token&quot;, json.append(&quot;&quot;,&quot;Hello World&quot;, 2), bot_all(), &quot;all&quot;)]
&lt;/source&gt;&lt;br /&gt;
The {{code|bot_all()}} function is another ''BoT'' function that returns the names of all players that are logged in. See below for more info. 

====bot_message()====
If you want to use a different message format, one is availalbe through this functions.
*{{code|bot_message(0:message [, 1:headertxt, 2:color (bgcolor-txtcolor), 3:userList, 4:token, 5:target, 6:broadcast])}}
Broadcasts a preformatted message to all users (default). The message consists out of a black (bg) and white (txt) header (default) and a delimited textbox below it, containing the message. When the message is left empty ('') only the header will be displayed. bot_message contains the following optional parameters (only message is required):
{{param|message|The message displayed}}
{{param|headerText|This defaults to: ''. The text in the header, note that the 'token' parameter is set in the header as well on the left side. E.g. when token is 'Wolf' and headerTxt is 'Attacks' the header will read 'Wolf Attacks'}}
{{param|color|This defaults to 'black-white'. Here you can set the backgroundcolor-textcolor of the header. You can choose also to only set the backgroundcolor. Some examples: 'red', 'black-yellow', yellow-red'.}}
{{param|userlist|Defaults to all(). Here you can set to whom the message should be send. You can either fill in a user name yourself (NOT TOKEN NAME!) e.g. 'Frank' or you can make use of one of the user functions defined here below, e.g. all(), gm(), ownergm().}}
{{param|token|Defaults to ''. Here you can give the name of the token to which the message reflects. The effect is that the image and name of the token appears left in the header}}
{{param|target|Defaults to ''. Here you can give the name of another token to which the message reflects. The effect is that the image of tha token appears right in the header}}
{{param|broadcast|Defaults to 0 the message is NOT broadcasted but the entire structure is returned. This is usefull is you want to e.g. embed the result in another message; (1) (default) the message is immediately broadcasted}}

''A couple examples of use:''
&lt;source lang=&quot;mtmacro&quot; line&gt;[resultMsg = bot_message('Hello world', 'Header', 'black-white', bot_all(), 'Wolf', '', 0)]&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;[bot_message(&quot;Hellow world&quot;)]&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;[bot_message(&quot;this message is shown to gm only&quot;, &quot;GM Only&quot;, &quot;red-yellow&quot;, bot_gm())]&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;[bot_message(&quot;this message is shown to all but gm&quot;, &quot;The rest&quot;, &quot;yellow-red&quot;, bot_ngm())]&lt;/source&gt;
[[Image:Example_Message.jpg]]
&lt;source lang=&quot;mtmacro&quot; line&gt;[h:bot_message(token.name+&quot; Takes damage&quot;, &quot;is attacked&quot;,&quot;red-white&quot;,bot_all(),&quot;Dragon&quot;, &quot;Eagle&quot;)]&lt;/source&gt;
[[Image:Example_Message2.jpg]]


The following functions can be used in conjunction with bot_message() and return a JSON ARRAY (e.g. [&quot;Frank&quot;,&quot;Jim&quot;,&quot;Suzy&quot;])&lt;br&gt;
{{param|bot_all()|all users}}
{{param|bot_gm()|gm(s) only}}
{{param|bot_ngm()|all but NOT gm(s)}}
{{param|bot_self()|initiator of the macro}}
{{param|bot_nself()|all but NOT initiator of the macro}}
{{param|bot_selfgm()|gm(s) and initiator of the macro}}
{{param|bot_nselfgm()|all but NOT gm(s) and initiator of the macro}}
{{param|bot_ownergm()|gm(s) and owners of the currentToken. So NOT the token that you might give as a parameter to the bot_message() function but the token that is currentToken() at that moment.}}
{{param|bot_nownergm()|all but NOT gm(s) and owners of the current token}}

The 'bot_' prefixes in all these function are added as a precaution to make sure that there are no conflicts with a framework in which you use the ''BoT''. If you however want to use these 'retrieve user' functions but without the 'bot_' prefix you need to create your own set of user defined functions.</text>
      <sha1>bw0xn15x3xzkub3pzrcpxo03td2zuqq</sha1>
    </revision>
  </page>
  <page>
    <title>movedOverPoints</title>
    <ns>0</ns>
    <id>1142</id>
    <revision>
      <id>7354</id>
      <parentid>7333</parentid>
      <timestamp>2019-04-03T15:27:14Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1821">{{stub|lastPath-format specified, define/explain return value, examples}}
{{MacroFunction
|name=movedOverPoints
|version=1.3.b75
|description=
Use to check if a token has moved through a shape that is defined by an array of pixel coordinates (formatted like the one received from {{func|getLastPath}} or the {{code|onTokenMove}} event.

Returns a JSON array with coordinates of all cells in the token's path that overlap with the area defined by the given points.

Where each coordinate pair returned is dependent on the grid type:
* Square:  Coordinates are the top-left corner.
* Hex:  Coordinates are the center point of the cell.
* Isometric:  Coordinates are the right-most point of the cell.
* Gridless: Returns just the top-left corner of the token's ending location.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
movedOverPoints(points)
movedOverPoints(points,path)
&lt;/source&gt;

'''Parameters'''
{{param|points|JSON array of X/Y coordinate X/Y pairs that defines a polygon}}
{{param|path|JSON array of X/Y coordinate such as that returned by {{func|getLastPath}}}}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- lets define a shape --&gt;

[h: jsonArray = json.append(&quot;&quot;,
    json.set(&quot;&quot;, &quot;x&quot;,   0, &quot;y&quot;,   0),
    json.set(&quot;&quot;, &quot;x&quot;,   0, &quot;y&quot;, 100),
    json.set(&quot;&quot;, &quot;x&quot;, 100, &quot;y&quot;, 100),
    json.set(&quot;&quot;, &quot;x&quot;,   100, &quot;y&quot;, 0)
)]

&lt;!-- check if token in context has moved through that shape --&gt;
[r: movedOverPoints(jsonArray)]
&lt;/source&gt;

'''With Second Parameter'''

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: jsonArray = json.append(&quot;&quot;,
    json.set(&quot;&quot;, &quot;x&quot;, 250, &quot;y&quot;, 250),
    json.set(&quot;&quot;, &quot;x&quot;, 250, &quot;y&quot;, 550),
    json.set(&quot;&quot;, &quot;x&quot;, 550, &quot;y&quot;, 550),
    json.set(&quot;&quot;, &quot;x&quot;, 550, &quot;y&quot;, 250)
)]

Last Path: [r: lastPath = getLastPath()]
&lt;br&gt;
Moved Over: [r: movedOverPoints(jsonArray,lastPath)]
&lt;/source&gt;

}}

[[Category:Miscellaneous Function]]</text>
      <sha1>o9cltkd8jyh8janrmjo1sh5yq3qpcqq</sha1>
    </revision>
  </page>
  <page>
    <title>Guide to onTokenMove</title>
    <ns>0</ns>
    <id>1143</id>
    <revision>
      <id>6218</id>
      <parentid>5944</parentid>
      <timestamp>2013-11-07T06:55:12Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <comment>/* onTokenMove */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8024">''... and all related stuff''

Recently a great new feature has been added to MapTool. This guide shall aide you to use it. Every time a token is moved (by the user) a specific macro is called. This macro can even cancel that move.

=Events=
Just like {{code|onCampaignLoad}} the new events are macros on a lib:token that have to be named like the event. Note that (and this is different to {{code|onCampaignLoad}}) these events should be only defined on a single, unique Lib:token - doing otherwise can lead to unexpected behaviour. To state it clearly: there should not be two Lib:tokens in a campaign file with these macros on it at the same time.

==onTokenMove==
The event macro {{code|onTokenMove}} is called whenever any token on the TOKEN layer is moved via the user interface. So the event is NOT triggered for movement on the hidden,object or background layer.  That tokens path is available as content of {{code|macro.args}}. The moved token is the token in context, so you can get its id with {{func|currentToken}}.

==onMultipleTokensMove==
The event macro {{code|onMultipleTokensMove}} is '''only''' called when more than one tokens are moved at once. The {{code|macro.args}} contain a json array with all moved tokens ids. The is no token context.

Note that, before {{code|onMultipleTokensMove}} is actually called, {{code|onTokenMove}} is called for each single token.

If you use both events at the same time it is recommended that you use the {{code|tokens.moveCount}} variable in {{code|onTokenMove}} and abort if its &gt;1 and let {{code|onMultipleTokensMove}} handle it.

If you dont know what event to use you probably want to use {{code|onTokenMove}}.

=How to set it up=
#You need a [[Library Token]]. You'll find some details if you follow that link, but its simply a token named &quot;Lib:something&quot; that is a NPC and visible to players.
#On this token you place macros. If you want to use the event ''onTokenMove'' you create a macro named {{code|onTokenMove}} on it.
Thats it. Yeah, it is so simple. For what you can really do with this you can see the examples below.

==Special Variables==
There are some special variables that are needed or useful in context of these events.


[[tokens.denyMove|{{code|tokens.denyMove}}]] has to be set to {{code|1}} to cancel the current movement.

[[tokens.moveCount|{{code|tokens.moveCount}}]] contains the number of tokens moved.

=Paths=
In context of these events there will sometimes be specified or returned a path or a list of coordinates. These are in this specific format:

it is a json array containing json objects for each points. Each json object defines the keys {{code|x}} and {{code|y}} with the map coordinates. 

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: samplePath = json.append(&quot;&quot;,
    json.set(&quot;&quot;, &quot;x&quot;, 50, &quot;y&quot;, 50), 
    json.set(&quot;&quot;, &quot;x&quot;,  0, &quot;y&quot;,  0)
)]


&lt;!-- samplePath contains 
[{&quot;x&quot;:50,&quot;y&quot;:50},{&quot;x&quot;:0,&quot;y&quot;:0}]
 --&gt;
&lt;/source&gt;


If you have to construct coordinate arrays by hand you can use a simple drop-in tool that you can download here: [http://forums.rptools.net/viewtopic.php?p=180113#p180113 rptools-forums: shapeBuilder]

=Related Functions=
There is a number of functions that are very useful in combination with the onMove-events.

==getLastPath()==
{{func|getLastPath}} returns the last path. Note that - if you use this in {{code|onTokenMove}} - it returns exactly the same as {{code|macro.args}}. ''(requires b74+)''

==movedOverPoints(arrayOfCoordinates)==
{{func|movedOverPoints}} returns an array of coordinates with all &quot;hit&quot; cells within a shape formed by the specified array of coordinates. ''(requires b75+)''


==movedOverToken(tokenName, [lastPath])==
{{func|movedOverToken}} returns an array of coordinates with all &quot;hit&quot; cells where the moved token crosses the specified token. ''(requires b74+)''

Note that before b77 the token must be specified by name - not id.

==getMoveCount()==
{{func|getMoveCount}} returns the calculated move cost according to the selected move metric. ''(requires b76+)''

=Examples=
Lets now give you some simple examples for most commons use cases.

==Traps/Teleporting==
An example of a trap macro:

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:'&lt;!-- this should be in onTokenMove --&gt;']
[h:'&lt;!--Routine for a Trap, trap is only triggered when the subject is moved on or over the Trap Token &quot;Spear Trap&quot;--&gt;']
[h:'&lt;!-- retrieve the path that the token has walked on --&gt;']
[h:lastPath 	= getLastPath(1)]
[h:'&lt;!-- check if that path intersects with the trap token --&gt;']
[h:trapPadTriggered = movedOverToken(&quot;Spear Trap&quot;,lastPath)]
[r, if(!json.isEmpty(trapPadTriggered)), CODE:{
	[h:'&lt;!-- If so trigger the trap for that token, do note that this only works when ONE token is moved. --&gt;']
	[h:me = getSelectedNames()]
	[h:switchToken(me)]

	[h:attackRoll = d20]
	[h:roll=1d6]
	[h,if(attackRoll &gt; Dexterity):HP=HP-roll]
	[r,if(attackRoll &gt; Dexterity):&quot;You have triggered a trap and sustained &quot;+roll+&quot; hits.&lt;br&gt;&quot;]
};{}]
&lt;/source&gt;

An example of a Teleport macro:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:'&lt;!-- Routine for a Teleport, this particular routine will move a token from a Token from a token called &quot;Start 1&quot; to a token called &quot;End 1&quot;-&gt;']
[h:'&lt;!-- note that the big difference with a trap is that here you have to step ONTO the token before it gets triggered, while the trap get triggered when you move OVER OR ONTO the token -&gt;']
[h:lastPath 	= getLastPath(1)]
[h:padName		= &quot;Start 1&quot;]
[h:teleporterTriggered = movedOverToken(padName,lastPath)]

[h,if(json.contains(teleporterTriggered,currentLocation)), CODE:{
	[teleportEndName = replace(padName, &quot;Start&quot;, &quot;End&quot;)]
	[h:'&lt;!-- This part makes sure that you end up on the same position on the end token as you started on the start token. E.g if you moved the PC onto the Upper left corner of &quot;Start 1&quot; then youll end up on the upper left corner of &quot;End 1&quot;&quot; --&gt;']

	[h:'&lt;!-- Get the actual coordinates &quot;Start 1&quot; and &quot;End 1&quot; --&gt;']
	[Token(padName): 			startCentreX	= getTokenX(1)]
	[Token(padName): 			startCentreY	= getTokenY(1)]
	[Token(teleportEndName): 	endCentreX		= getTokenX(1)]
	[Token(teleportEndName): 	endCentreY		= getTokenY(1)]

	[h:'&lt;!-- Get the coordinates of the moved token --&gt;']
	[h, Token(token):CurrentX 	= getTokenX()]
	[h, Token(token):CurrentY 	= getTokenY()]

	[h:'&lt;!-- Calculate its relative position --&gt;']
	[h:NewX 		= CurrentX + endCentreX - startCentreX]
	[h:NewY 		= CurrentY + endCentreY - startCentreY]

	[h:'&lt;!-- move the token to the new location --&gt;']
	[h, Token(token):moveToken(NewX, Newy , 1 )]	

	[h:'&lt;!-- centre view on the tokens new position. --&gt;']
	[goto(tok)]
};{}] 
&lt;/source&gt;
Please note that there already exists a drop-in [http://forums.rptools.net/viewtopic.php?f=46&amp;t=16066] that facilitates Traps and Teleports (among other things), which you can find on the forum. The tricky part is to get multiple 'special pads' working next to each other in combination with multiple tokens move.

==Movement cost tracking==
A often requested feature is to track allowed movement. With the new events we can do that. 

The example expects the movement to be tracked with a property named ''Movement''. You have to reset this property to some kind of ''max movement'' every round - eg by hand or by hooking it in your initiative handler.

&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- this should be in onTokenMove --&gt;
&lt;!-- moved token is in context --&gt;

&lt;!-- get movement --&gt;
[h: mov = getProperty(&quot;Movement&quot;)]
[h: usedMov = getMoveCount()]

&lt;!-- deny move if not allowed, reduce mov prop otherwise --&gt;
[r, if( mov &gt;= usedMov ), code: {
    [h: mov = mov - usedMov]
    [h: setProperty(&quot;Movement&quot;, mov)]
};{
    [h: tokens.denyMove = 1]
    &lt;span style=&quot;color:red;font-weight:bold;&quot;&gt;Move limit exceeded.&lt;/span&gt;    
}]
&lt;/source&gt;

==Exposure of Fog on gridless maps==
Fog does not get cleared on gridless maps. But we can do this by using a simple onTokenMove-event.
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- this should be in onTokenMove --&gt;
&lt;!-- clear fog only if pc token moved --&gt;
[h, if( isPC() ): exposeFOW()]
&lt;/source&gt;


[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>tokens.denyMove</title>
    <ns>0</ns>
    <id>1144</id>
    <revision>
      <id>4923</id>
      <timestamp>2010-11-19T21:46:30Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <comment>New page:  {{code|tokens.denyMove}}   You can use this variable in the {{code|onTokenMove}} event to cancel the movement made.   ==usage== &lt;source lang=&quot;mtmacro&quot; line&gt; &lt;!-- @onTokenMove --&gt; &lt;!-- can...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="298">
{{code|tokens.denyMove}}


You can use this variable in the {{code|onTokenMove}} event to cancel the movement made.


==usage==
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- @onTokenMove --&gt;
&lt;!-- cance movement if condition --&gt;
[h, if(condition): tokens.denyMove = 1]
&lt;/source&gt;


[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>tokens.moveCount</title>
    <ns>0</ns>
    <id>1145</id>
    <revision>
      <id>5895</id>
      <parentid>4924</parentid>
      <timestamp>2012-05-29T07:29:11Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="380">
{{code|tokens.moveCount}}


You can use this variable in {{code|onTokenMove}} and {{code|onMultipleTokensMove}} events to find out how many tokens were moved.

==usage==

&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- @onMultipleTokensMove --&gt;
&lt;!-- cancel movement if more than one token was moved --&gt;
[h, if(tokens.moveCount&gt;1): tokens.denyMove = 1]
&lt;/source&gt;


[[Category:Special Variable]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>canSeeToken</title>
    <ns>0</ns>
    <id>1154</id>
    <revision>
      <id>4961</id>
      <parentid>4960</parentid>
      <timestamp>2010-12-08T15:18:57Z</timestamp>
      <contributor>
        <username>Jfrazierjr</username>
        <id>227</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="625">{{stub}}
{{MacroFunction
|name=canSeeToken
|version=1.3b77
|description=
Returns a json array of the points visible on the token as an enumerated list.   The enumerated list will contain zero to five of the following values:
*TOP_RIGHT
*BOTTOM_RIGHT
*TOP_LEFT
*BOTTOM_LEFT
*CENTER

When a token is not visible, an empty json array is returned: '[]'

canSeeToken() takes a required target token id or name. A second optional argument may also be passed for the source token's id or name.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
canSeeToken(id|name, [id|name])
&lt;/source&gt;
}}
[[Category:Sight Function]]
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Macros:Roll:types/ja</title>
    <ns>0</ns>
    <id>1155</id>
    <revision>
      <id>5607</id>
      <parentid>4962</parentid>
      <timestamp>2011-07-19T16:23:05Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Fixing wikilinks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4864">{{Languages|Macros:Roll:types}}{{Translation}}{{#customtitle:マクロ:ロール:種類|マクロ:ロール:種類 - MapToolDoc}}
==ロールの種類（[]／{}）とオプション==
&lt;!--[]/{} Roll Types and Options--&gt;

&lt;div style=&quot;color:gray&quot;&gt;Text that you type into MapTool or execute from a [[Macro_Button|macro button]] is scanned for [ ] and { } blocks. The text within these blocks is evaluated and the output from this evaluation is placed into the string in its place.&lt;/div&gt;

マップツール上で入力するテキストや[[Macro_Button|マクロボタン]]から実行して入力するテキストは、 [ ] や { } のブロックがあるか調べられる。このブロックを含んでいるテキストは評価され、ブロックの部分を評価結果で置き換えたものになって出力される。

==={ } ロール===
&lt;!--{ } Rolls--&gt;
&lt;div style=&quot;color:gray&quot;&gt;When the text is contained within { } then the text is evaluated and the output copied in its place without any special formatting.
For example {2 + 2} produces&lt;/div&gt;

テキストに { } が含まれている場合、テキストを評価し、ブロックの部分に特殊な書式化を行わずにそのまま出力する。
{2 + 2}の場合は次のような出力になる。

[[Image:Brace2Plus2.png‎]]

===[ ] ロール===
&lt;!-[ ] Rolls--&gt;
&lt;div style=&quot;color:gray&quot;&gt;Text that is within [ ] is evaluated, the output from [ ] is inserted with a tool tip that displays the details of the evaluation -- the tool tip can be displayed by leaving the mouse pointer over the result. For example [2 + 2] produces&lt;/div&gt;

[ ] を含むテキストは評価され、[ ]の部分に評価結果の詳細を表示するツールチップを埋め込んで出力する。ツールチップはマウスポインターを結果の上にかざすことで表示される。[2 + 2]の場合は次のように出力される。

[[Image:2Plus2ToolTip.png]]

&lt;div style=&quot;color:gray&quot;&gt;There are also several options that can be used within [ ] to change the formatting. Options are specified after the [ and the option string is terminated with a ':'. If you have more than one option then need to separate them with a ',' eg [opt1, opt2: ...], if there are any arguments for an option they are enclosed within (). All options are case insensitive, so [opt: ...] is the same [OPT: ...].&lt;/div&gt;

また、書式化の方法を変更するために [ ] と共に使用可能なオプションがいくつかある。このオプションは [ の直後に':'で終わるオプション文字列を指定する。二つ以上のオプションを指定する場合は、 [opt1, opt2: … ] のように『,』で分割し、オプションに引数がある場合は () を追加する。全てのオプションは全て大文字／小文字を区別しないので、 [opt: … ] と [OPT: …] は同じ意味を持つ。

===[ ] Hidden Rolls===
'''[h: ]''', '''[hide: ]''', '''[hidden: ]''' evaluates the text after the ':' but completely discards the output. This is useful for setting variables or other similar tasks where you want to change something but not display any output. &lt;!-- [h: 2 + 2] would display.

[[Image:2Plus2Hidden.png]] --&gt;
&lt;!-- The above is no longer accurate due to the following, added in b58: --&gt;

If a chat message would appear empty because everything in it is hidden from the player, the message is not displayed.

===[ ] Expanded Rolls===
'''[e: ]''', '''[expanded: ]''' evaluates the text after the ':' and displays the detailed output of the evaluation. [e: 2 + 2 ] would display.


[[Image:2Plus2Expanded.png]]


===[ ] Result Rolls===
'''[r: ]''', '''[result: ]''' evaluates the text after the ':' and displays the plain output without any formatting or tool tips, the result is the same as using { }. [r: 2 + 2] would display.

[[Image:2Plus2Result.png]]


===[ ] Unformatted Rolls===
'''[u: ]''', '''[unformatted: ]''' evaluates the text after the ':' and displays the detailed output without coloring or tool tips. [u: 2 + 2 ] would display.

[[Image:2Plus2Unformatted.png]]


===[ ] Tool Tip Rolls===
'''[t: ]''', '''[tooltip: ]''' evaluates the text after the ':' and displays the result with a tool tip that displays the details of the evaluation -- the tool tip can be displayed by leaving the mouse pointer over the result. For example [t: 2 + 2] produces.

[[Image:2Plus2T.png]]

You can also specify an argument for the tooltip option. If you specify an argument then this argument is evaluated and displayed, the text after the ':' is evaluated and used as the tool tip. [t(&quot;four&quot;): 2 + 2] produces.

[[Image:2Plus2T-Four.png]]

==Related Pages==

* [[Dice_Expressions|Dice Expressions]]
* [[Macros:Roll:output|Roll Visibility Options]]
* [[Macros:Branching_and_Looping|Branching and Looping Roll Options]]
{{Languages|Macros:Roll:types}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setOwner</title>
    <ns>0</ns>
    <id>1156</id>
    <revision>
      <id>6167</id>
      <parentid>5046</parentid>
      <timestamp>2013-07-06T23:07:04Z</timestamp>
      <contributor>
        <username>Bone White</username>
        <id>617</id>
      </contributor>
      <minor/>
      <comment>Corrected the macro example as per http://forums.rptools.net/viewtopic.php?f=3&amp;t=23954</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2845">{{MacroFunction
|name=setOwner
|version=1.3b48?
|description=
Changes the owners of a token (default is the [[Current Token]]) when given a [[String]] owner name or [[JSON Array]] of owner names.  All other owners are removed.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setOwner(ownerName, id)
setOwner(ownerNames, id)
&lt;/source&gt;
'''Parameters'''
{{param|ownerName|The player name to set the ownership on the token.  Ownership is not constrained to the client names currently connected, but only currently connected clients appear in the Token Editor Dialog.  This parameter is a [[String]].  An empty string here is treated as an empty JSON array (see next parameter). }}
{{param|ownerNames|The player names to set the ownership on the token.  Ownership is not constrained to the client names currently connected, but only currently connected clients appear in the Token Editor Dialog.  This parameter is a [[JSON Array]]. }}
{{param|id|The token {{code|id}} of the token which has its owners changed, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|examples=
To change the [[Owners|owners]] of the [[Current Token]] to a single user use:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setOwner(&quot;Frank&quot;)]
&lt;/source&gt;

To change the [[Owners|owners]] of the [[Current Token]] to a list of three players use:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setOwner(&quot;['Peter', 'Paul', 'Mary']&quot;)]
&lt;/source&gt;
or:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: list = json.append(&quot;[]&quot;, &quot;Peter&quot;, &quot;Paul&quot;, &quot;Mary&quot;)]
[h: setOwner(list)]
&lt;/source&gt;

To make all current players [[Owners|owners]] of the [[Current Token]] use:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setOwner(getAllPlayerNames(&quot;json&quot;))]
&lt;/source&gt;

To remove all [[Owners|owners]] of the [[Current Token]] use:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setOwner(&quot;&quot;)]
&lt;/source&gt;
or:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setOwner(&quot;[]&quot;)]
&lt;/source&gt;

To display the current [[Owners|owners]] of the [[Current Token]] as checkboxes, then accept the user's changes to apply back onto the token, use the following.  Note that this example does not provide for adding owners to the list, only removing them.  (Adding owners would require the use of {{func|getAllPlayerNames}} and would make this example even more complex.)
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getOwners(&quot;json&quot;)]
[h: input = &quot;tab0 | OwnerList || TAB&quot;]
[h: count = 0]
[h, foreach(name, names), code: {
    [input = input + strformat(&quot; ## ckb_%{count}|1|%{name}|CHECK&quot;)]
    [count = count+1]
} ]
[h: cancel = input(input)]
[h: abort(cancel)]
[h: newOwners = &quot;[]&quot;]
[h, for(x,0,count):
    newOwners = if(eval(&quot;ckb_&quot;+x)==0, newOwners, json.append(newOwners, json.get(names, x))) ]
[h: setOwner(newOwners)]
&lt;/source&gt;

|also=
{{func|isOwnedByAll}},
{{func|setOwnerOnlyVisible}},
{{func|isOwner}}.

|changes=
{{change|1.3b51|Added {{code|id}} parameter option.}}

}}

[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Campaign Repositories/es</title>
    <ns>0</ns>
    <id>1157</id>
    <revision>
      <id>5746</id>
      <parentid>4982</parentid>
      <timestamp>2011-09-26T23:42:39Z</timestamp>
      <contributor>
        <username>Aspid</username>
        <id>274</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2715">{{Languages|Introduction to Campaign Repositories}}

== ¿Qué es un repositorio? ==
Un repositorio es un pack de archivo (en su mayoría imagenes) que son usadas en una campaña. Almacenandolo en algún lugar que no sea el ordenador del master se puede ayudar  mejorar la velocidad de descarga de los jugadores haciedo que el juego valla mejor en general.

Debes tener algún lugar de almacenamiento externo para poder usar el repositorio. Algunas cmopañias de las que te dan internet te dejan espacio que puedes usar para este tipo de proposito. Si tu compañía no te da esta posibilidad puedes buscar por ahí y encontrar algún lugar de almacenamiento barato (o incluso gratis).

A no ser que se ejecute el MapTool desde un buen ordenador con buena connección, tienes casi garantizado que los jugadores podrán descargar los archivos de cualquier web de almacenamiento con mayor velocidad que si lo hacen desde el ordenador del master. Este es uno de los beneficios de los repositorios.

== Creando un repositorio ==
Para crear un archivo de repositorio, abre la campaña en el MapTool y ve a Archivo -&gt; Exportar -&gt; Archivo Depósito de Campaña. Esto creará un achivo comprimido (.zip) con la información del repositorio.

Descomprime el archivo. (¡Esto es muy importante! ¡El MapTool no puede usar el repositorio si no lo descmprimes!)  Dentrod debe haber una carpeta llamada &quot;assets&quot; y un archivo llamado &quot;index.gz&quot;. Sube al servidor ambas, la carpeta &quot;assets&quot; y el archivo &quot;index.gz&quot;.  Asegurate de que estén en el mismo directorio. (No pongas el archivo&quot;index.gz&quot; ''dentro'' de la carpeta &quot;assets&quot;, deben de estar al mismo nivel).

Apunta la URL del archivo &quot;index.gz&quot;. Puedes probar la URL escriiendola o pegandola en la barra de direcciones de tu navegador. Si tienes la dirección correcta deberías ver una pçagina llena de números y letras que seguramenteno tendrán mucho setido para ti.

En el MapTool, Ve a Editar -&gt; Propiedades de campaña y luego ve al apartado de los repositorios. Borra cualquier enlace que ya esté ahí y coloca la URL de tu archivo &quot;index.gz&quot;.

Guarda la campaña. Ahora cuando los jugadores se coneccten al servidor del master conseguirán los archivos de la campaña del repositoro en la red en vez de del ordenador de este.

Si realizas cambios en la campaña deberás volver a exportar el archivo del repositorio y subirlo otra vez siguiendo los mismos pasos. No necesitarás volver a cambiar la URL a no ser que cambies el lugar donde los guardabas en la red

[[Category:MapTool]]
[[Category:Tutorial]]

{{Languages|Introduction to Campaign Repositories}}{{#customtitle:Inroducción a los repositorios de campaña|Inroducción a los repositorios de campaña}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Lights and Sights/es</title>
    <ns>0</ns>
    <id>1158</id>
    <revision>
      <id>5751</id>
      <parentid>5750</parentid>
      <timestamp>2011-09-26T23:51:11Z</timestamp>
      <contributor>
        <username>Aspid</username>
        <id>274</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20441">{{Languages|Introduction to Lights and Sights}}{{Beginner}}

===La traducción está en proceso===

==What are Sight, Light==

MapTool offers three features that help to simulate the idea that when a character is adventuring in an environment, they are not always granted an &quot;ominiscient view&quot; of the entire area - they can't see through walls, around corners, or into the depths of dark dungeons. This is a difficult thing to simulate when playing face to face, but with a computer, it becomes possible to restrict a character's vision to what they might actually see - thus raising the tension and possibly the immersion of the game. The three features that MapTool offers are '''Sight''', '''Light''', and '''Fog of War'''. 

===Sight===

Sight is the ability for a [[Token:token|token]] to &quot;see&quot; its surroundings - in this case, what a player's token can &quot;see&quot; becomes visible to the player on their instance of MapTool (the GM can always see everything on the map; players, on the other hand, can be limited in what they see by things like [[Introduction to Vision Blocking|Vision Blocking Layers]], light, and [[Introduction to Fog of War|Fog of War]]). This makes for a more immersive game, as players will wonder &quot;What's around that corner?&quot; and, &quot;I hope my torch doesn't burn out...it's dark in this dungeon!&quot;

===Light===

Light is a feature that allows tokens and objects to cast &quot;light&quot; over a certain area, illuminating it. This means that in a dark dungeon, torches on the walls can illuminate small areas of the dungeon (removing/erasing any Fog of War that might cover that area) and be seen by the players (in other words, the area illuminated by the light source becomes visible to the players, assuming that the player's token has sight, and there is no VBL in the way). 

Light is critical when a map is using &quot;Night&quot; mode for vision, since without light, a token is stuck in the pitch black!

===Fog of War===

Fog of War is a system that represents what a token has seen as it is moved about the Map, and what part of the map or environment the token can directly see at that time. Fog of War should '''not''' be confused with shadows or darkness. You can have Fog of War on a Map that has no light or vision mode active at all. 

When a token with sight &quot;sees&quot; into an area of Fog of War, the Fog is erased, letting the player see the map that was hidden beneath the opaque Fog of War. When an area that a token ''has'' seen is no longer ''directly'' visible to the token, the opaque Fog of War (the &quot;Hard Fog&quot;) is replaced by a semitransparent Fog (called &quot;Soft Fog&quot;). This is a visual reminder that the player ''has'' seen that area, but cannot see it ''right now.'' Any token in the Soft Fog is hidden from the character just as if it were in Hard Fog.

&lt;p align=&quot;center&quot;&gt;'''Remember''': ''Fog of War simply indicates what area of the maps have been directly seen by a token.''&lt;/p&gt;

Fog of War is a sufficiently complex discussion on its own that - even though it is intimately connected with light and sight - it deserves its own brief, but separate, tutorial. Check out [[Introduction to Fog of War]] to get details and screenshots on using Fog of War in your games.

==The Sample Dungeon==

[[Image:samp-dungeon.png|thumb|The sample dungeon map used in this tutorial.]]

A sample dungeon is used for all of the screenshots and examples in this tutorial (and in the [[Introduction to Vision Blocking]]). A screenshot of the sample dungeon is shown at right; you can also download the Campaign File for this dungeon [[here]].

==Configuring Sight Types and Light Sources==

Both Sight Types and Light Sources are configured from the Campaign Properties window, under the Sight and Light tabs. To open the Campaign Properties dialog, go to '''Edit &gt; Campaign Properties.'''

===Sight Types===

[[Image:cprops-sighttab.png|thumb|The Sight tab in the Campaign Properties dialog]]

The Sight Types tab lets you set up different kinds of &quot;sight&quot; (such as low-light, or darkvision/infrared, or normal vision, and so forth). MapTool has some default sight types set up when you first open it. If you look at the sight tab, you'll see the following:

 Conic Vision: cone arc=120 
 Normal Vision - Short Range: circle distance=10.0 
 Lowlight: circle x2 
 Darkvision: circle r60 
 Square Vision: square 
 Normal: circle 

Each of those items defines a '''Sight Type'''. The sight type is defined using a specific syntax, explained in the Campaign Properties window. The most basic one is simply a shape, as in:

 Normal: circle

This simply says that &quot;normal sight is circular.&quot; There is no limit to the range except the vision distance set on the ''Map itself'', which defaults to 1,000 units. You can set e.g. distance=10 to limit the sight, this can reflect a thick fog for example where the players wade through.

A more complex entry is the one for &quot;Lowlight&quot; sight:

 Lowlight: circle x2

In this case, the vision name is '''Lowlight''', and the shape is circular. However, an additional option was added on the end - ''x2''. This is an option that interacts with ''light sources'', multiplying their effective radius by 2 for any token that has the Lowlight vision. So where a token with Normal vision might see 20 units when using a torch, a token with Lowlight vision can see ''40'' units. 

Looking at an even more complex entry, consider the one for &quot;Darkvision&quot;:

 Darkvision: circle r60

In this entry, there are four components.

* '''Darkvision''': this is, of course, the ''name'' of the Sight Type (you could call it &quot;Thermographic Vision&quot; if you like). This name appears in the token configuration dialog when you want to activate token sight.
* '''circle''': this signifies the shape of the visual area, in this case, indicating that the visual area is circular; we've seen this before.
* '''r''': this is a code that signifies that this sight type has a &quot;personal&quot; light source - in other words, it is effectively a light source only ''that token'' can see. This is what makes this &quot;darkvision,&quot; for instance - the token can see just fine in the dark, but that token's ''allies'' might be completely blind. 
* '''60''': this is the range of the sight type, starting from the center of the token's square, and counted in &quot;map units&quot; (so if your map is 5 units per cell, this will cover 12 map cells; if your map is 1 unit per square, this will cover 60 squares). Note that since range is measured from the ''center'' of the square or hex, many users add a fractional amount to the range so that the end of the range lines up nicely with a hex or square boundary. 

'''Tip:'''you can use r0.5 in normal vision, this way when you turn on night mode, players that do not have a light source can at least still see there own token. This setting could look like:  &quot;Normal: circle r0.5&quot;, adding limited vision in the mix, this would become: &quot;Normal Vision - Short Range: circle r0.5 distance=10.0 &quot;

Configuring sight types is unique to the game being played, and so the specifics of it need to be left to the campaign designer. However, suffice it to say that Sight is a configurable option and offers a great deal of flexibility. 

====Sight Type Limitations====

Flexible as it is, there are a few limitations on Token Sight. 

* '''One sight type at a time''': tokens can only have one kind of sight active at a time (a token cannot have Darkvision and Normal sight active simultaneously)
* '''Sight has no color''': sight types do not have colors of their own. Any color visible to the players will be based on the color of the light source, not the sight type (there is one exception to this, however: in [[MapTool Preferences]], you can opt to have the vision color of the token match its [[token.halo|Halo]] color)

===Light Sources===

[[Image:Cprops-lighttab.png|thumb|The Light tab in the Campaign Properties dialog.]]

The Light tab provides an interface very similar to the Sight tab - a text window with a number of different items defined as a simple string of text. The default MapTool campaign properties show the following light sources: 

 D20
 ----
 Candle - 5 : 5 10#000000 
 Lamp - 15 : 15 30#000000 
 Torch - 20 : 20 40#000000 
 Everburning - 20 : 20 40#000000 
 Lantern, Hooded - 30 : 30 60#000000 
 Sunrod - 30 : 30 60#000000 
 Generic
 ----
 5 : 5 
 15 : 15 
 20 : 20 
 30 : 30 
 40 : 40 
 60 : 60 

====Groups====

In the above default lights, there are two groups: D20 and Generic. A group is defined by typing its name, and placing beneath it four hyphens in a row: {{code|----}}. Groups appear in the right-click menu on a token, and are basically a way for you, as GM, to organize the different light sources in your game.

[[Aura]] is not included by default and must be added manually.

====Light Source Syntax====

Beneath each group header are a list of light sources. The syntax for these is very similar to the syntax for Sight Types, with a couple exceptions. Let's look at the entry for Sunrod:

 Sunrod - 30: 30 60#000000

There are three elements shown here:

* '''Sunrod - 30''': the name of the light source; this is what appears in the right-click menu on a token, under the appropriate Light Source group
* '''30''': this is a light source radius of 30 units; the &quot;first&quot; radius of the light
* '''60#000000''': this is a ''second'' radius to the light, and a hexadecimal color code.
** '''Light Source Radii''': A light source can have one or more radii, each of which can be set to a different color. In the sunrod example, the first radius has no color (or rather, it has the default color of white, which means that the area it covers is completely illuminated). The second radius (60) has the color #000000, which, when rendered by MapTool, makes a &quot;dim light&quot; area (translucent gray) from 30 units to 60 units. The overall effect is that from the center of the light source out to 30 units, the light is &quot;bright,&quot; and everything is fully illuminated. From 30 units to 60 units, the light is a big darker, and items in that area are less brightly lit. 

One element is left out here, which is the light source ''shape.'' Like Sight Types, light sources can have shapes. The default shape is circular, and so if you do not specify a shape, the light source will default to circle-shaped. The other shapes are:

* '''Cone''': create a conic area with a user-defined arc. This projects the light along the current facing of the token.
* '''Square''': this creates a square light area
* '''[[Aura]]''': this is a special light source, because while it is blocked by VBL and can cast colored light, it does not actually illuminate anything (therefore, an [[aura]] will not reveal hidden areas to a player, but it does act as a way to see how far from a token its aura extends).

===Giving Tokens and Objects Sight and Light===

[[Image:Token-config-sight.png|thumb|Set the &quot;Has Sight&quot; checkbox to give a token a sight type.]]

[[Image:Token-config-light.png|thumb|Use the right-click menu for the token to select a Light Source.]]

To give a token Sight and Light, do the following:

# Double-click on the token and go to the Config tab. There, check the Has Sight box, and select the appropriate sight type. Remember that a token can only have one type of sight active at a time. 
# Click '''OK''' to save the sight settings.
# Right-click on the token, and go to Light Source. Navigate through the submenus until you can select a specific light source. The token now has a light source. 

==Vision Modes==

[[Image:Map-vision-mode.png|thumb|Setting the vision mode on a map.]]

Recent builds of MapTool introduced the concept of Vision Modes, which let the GM dictate how vision and light will affect a given map. There are three Vision Modes: '''Off''', '''Day''', and '''Night''', each of which alters the way in which light and vision interact for a token. 

In the following discussion of vision modes, what is visible to the player as they move their token is based on what is visible to the ''token itself''. Thus, if, under the proper settings, an enemy token is visible to the player's token, the player will see it on the Map. However, if that enemy token is ''not'' visible to the player's ''token'', it will not appear on the player's instance of MapTool.

===Off===

When Map Vision is set to &quot;Off,&quot; Token vision settings are not taken into account when displaying information to players: all things are visible at all times, unless hidden beneath Fog of War.

===Day===

In Day mode, light sources are not considered when evaluating token vision and what lies inside the tokens visual range. Furthermore, no part of the map is hidden from the players (that is, they will see the entire map - not necessarily all the ''tokens'' on a map, but they will see the layout of the entire dungeon, building, or area). Effectively, the Day mode assumes that a bright sun is shining down on everything, illuminating it all, and everything is visible unless blocked by VBL or covered by Fog of War.

===Night===

This mode incorporates Light Sources into the calculations, effectively assuming that it is &quot;night&quot; in the game, and that without a light source, the tokens are in a pitch-black environment and can see nothing. If Fog of War is used with Night Mode, light sources will reveal areas covered by Fog of War, assuming a token can see the light source and the area is not blocked by VBL.

===Vision Modes and Fog of War===

You can use Fog of War with any of the Vision modes: Off, Day, or Night. 

* When Map Vision is Off, Fog is removed to the extent of the token's sight (set using the Token Properties dialog). Soft Fog does not appear when using Off Mode, as tokens do not actually &quot;see&quot; anything in this mode. VBL works normally.
* In Day Mode, the Fog will be removed out to the limit of the token's visual range (which, if you note when you create a map, defaults to 1,000 units), and token vision is blocked by VBL. In this mode, Fog of War has both Hard and Soft Fog, as token vision is active. 
* In Night Mode, Fog of War (when removed) is cleared to the maximum radius of a token's light source (remember, though - the token must a) have sight, and b) have a light source - without a light source, the token can't see at all!). Thus, when using Fog of War and Night mode for vision, the fog will be removed only where the light source illuminates it. Soft Fog works in this mode just as it works in Day mode.

==Using Sight and Light in a Game==

Sight, Light, and Fog interact in a number of ways in-play. To start, let's look at using Sight without Light or Fog of War. The examples below will use the sample dungeon shown to the right. Note that the sample dungeon uses [[Introduction to Vision Blocking|Vision Blocking]], a feature of MapTool that blocks the line of sight of a token (meaning you can use it to indicate the placement of walls, pillars, and similar objects that would obstruct a character's vision). 

===Vision Range===

[[Image:Nofog-sight-boundary.png|thumb|MapTool shows a white boundary illustrating the limit of the token's visual range.]]

[[Image:Nofog-sight-boundvbl.png|thumb|When the token with sight is on a map with [[Introduction to Vision Blocking|VBL]], the token's sight boundary follows the VBL.]]

When you configure a token to have sight, when you hover your mouse token over the token, MapTool will illustrate the limit of the token's visual range with a white border (a circle if the sight type is circular, or square if square, or a cone if it's cone shaped, etc.). The screenshot to the right shows a PC token with the sight type &quot;Normal - Short Range&quot; configured. Note the white circle indicating the boundary of the token's vision.

In the first screenshot to the right, there is no VBL on the map, so the token's visual range is unaffected. For a more practical illustration of the &quot;line of sight&quot; boundary, consider the second screenshot, taken using the same token, but on the dungeon map, which employs VBL along the the walls of the dungeon. If you look closely, you'll see the white boundary - however, instead of being circular, it is blocked in certain areas by the VBL of the map, and thus has an irregular shape.

==Vision Modes and Sight==

As mentioned above, there are three vision modes - '''Off''', '''Day''', and '''Night'''. Each setting affects how token vision is evaluated by MapTool.

===Sight when Vision is &quot;Off&quot;===

[[Image:Nofog-visionoff-gmview.png|thumb|The GM's view of a map with no vision. Note that if the map has VBL on it, the white boundary of token sight range will appear, but it's not actually used to determine what is visible - since vision is disabled.]]

[[Image:Nofog-visionoff-plyrview.png|thumb|The Player's view of the same map.]]

When Vision is set to '''Off''', the token's sight settings are not taken into account when deciding what to display to the player. Instead, the player can look at all of the items and backgrounds on the map. VBL will still block the &quot;visual boundary&quot;, but it won't actually block vision in any way - something on the far side of VBL from a token is still visible on the player's screen. 

The two screenshots to the right illustrate this: the top screenshot is the GM's view of the screen, while the shot on the bottom is the Player's view of the same map - note that they both see the same items. The only items a player will not see are those items on the Hidden layer, or those items that the GM has explicitly flagged as invisible to players.

===Sight when Vision is &quot;Day&quot;===

[[Image:Nofog-visionday-gmview.png|thumb|GM's view of a map with Vision set to ''Day'' mode.]]

[[Image:Nofog-visionday-plyrview.png|thumb|Player's view of the same map. Note that the other tokens that the GM can see are ''not'' visible to the player, since VBL blocks them.]]

When Vision is set to '''Day''', the token's sight settings are take into account when determining what objects and other tokens are visible to the player. Light source settings are ''not'' taken into account. If an object or token lies outside the player's token's vision, it will not be visible to the player. Likewise, if an object or token lies beyond VBL from the player token, it will not be visible.

The screenshots to the right show this (again, the top is the GM's view, and the bottom is the Player view). Note that in the player view, the Dragon and Hero token are not visible to the Elf token (the player token), because they are hidden by VBL.

===Sight when Vision is &quot;Night&quot;===

[[Image:Nofog-visionnight-gmview.png|thumb|GM's view of a Map with vision set to Night mode.]]

[[Image:Nofog-visionnight-plyrview.png|thumb|Player's view of the same map - note that the Elf token (the player's token) is not visible, because the Elf has no light source!]]

[[Image:Nofog-visionnight-plyrview-candle.png|thumb|The player's Elf token is now visible, because it has a light source.]]

When vision is set to '''Night''', both the token's sight settings ''and'' the token's light source setting is taken into account when determining what the token is able to see. If a token lacks a light source, it will be unable to see anything unless it has a sight type that indicates ''personal light'' (in other words, a sight type like the &quot;Darkvision&quot; type discussed previously) - in fact, the token itself will not be visible to the player!

The screenshots to the right show Night-mode vision in effect. The top screenshot is the GM view; the second two show the Player view ''without'' a light source on the player's Elf token, and then with the &quot;Candle - 5&quot; light source selected. There are several things to note about this:

# &quot;Night&quot; mode vision does not add &quot;darkness&quot; to the map in any visual way - it simply means that without a light source, tokens cannot see other tokens, objects, or themselves. 
# In the first Player screenshot, the player's Elf token is not visible in the lower left room of the dungeon - that's because the player's token doesn't have a light source, so it can't see - and therefore, the ''player'' can't see anything but the map background.
# In the second Player screenshot, the Elf is now visible because it has a light source active. This light source means that the player can see out to the limit of its light source's area.

[[Category:MapTool]]
[[Category:Tutorial]]

{{Languages|Introduction to Lights and Sights}}{{#customtitle:Inroducción a luces y vistas (inacabado)|Inroducción a luces y vistas (inacabado)}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Vision Blocking/es</title>
    <ns>0</ns>
    <id>1159</id>
    <revision>
      <id>5752</id>
      <parentid>5742</parentid>
      <timestamp>2011-09-26T23:51:33Z</timestamp>
      <contributor>
        <username>Aspid</username>
        <id>274</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11815">{{Languages|Introduction to Vision Blocking}}{{Beginner}}

===La traducción está en proceso===

==Bloqueo de visión==

En el MapTool, los [[Token:token|tokens]] pueden recibisIn MapTool, [[Introduction to Lights and Sights|visión]], lo que permite al [[Token:token|token]] ver a otros [[Token:token|tokens]] o áreas del mapa. También se le puede dar  [[Introduction to Lights and Sights|iluminación]] - por lo que solo se podría ver la parte iluminada (o las fuentes de luz cercanas) - La función del bloqueo de visión es permitir al master poner límites al rango de visión de los personajes a través de los cuales no pueden ver, con esto se pueden indicar las paredes de un dungeon para que solo vea lo que está a su alcance, por ejemplo.

En este documento se hará un breve repaso de las herramientas de bloqueo, y como usarlas para crear una madmorra como la del ejemplo. Recuerda, el bloqueo de visión está muy unido a la '''luz''', la '''visión''' y la '''niebla de guerra''' (características del MapTool, por lo tanto una vez que hayas leído este tutorial, ve a ver [[Introduction to Lights and Sights/es]] y mira como funciona todo junto.

===Primero que nada, Hacer un mapa===

[[Image:samp-dungeon.png|thumb|Madmorra de ejemplo]]

Para empezar, necesitaremos un mapa de una madmorra. Algún lugar oscuro y húmedo, llego de pequeños pasajes, ¿Te haces a la idea, no?

Los mapas de ejemplo han sido creados con el MapTool usando este [http://forums.rptools.net/viewtopic.php?f=34&amp;t=7418 tileset] muy bueno creado por Jonathan Roberts (Torstan en el [http://forums.rptools.net RPTools Foros]), el mapa que se muestra a la derecha se utilizará para los ejemplos de este tutorial introductorio.

==Activando las herramientas de bloqueo de visión==

[[Image:Vbl-toolbar-btn.png|thumb|Boton de visión de la capa de bloqueo de visión (VBL)]]

[[Image:Vbl-tools.png|thumb|The VBL tools, activated when you click on the VBL toolbar button]]

Para activar las herramientas de bloqueo de visión, haz click en el icono del &quot;ojo&quot; en la barra de herramientas del MapTool (mira la imagen). al hacerlo, nuevos iconos aparecerán, estos son los iconos de de edición, que te permiten cambiar el modo de pintar las líneas. Si pones el ratón sobre ellos un recuadro expliativo te dirá que hace cada uno. De izquierda a derecha, estos son los que hay.

* '''Dibujar una CBV rectangular''': crea un área rectangular sólida que bloquea la visión (suelen conocerse como vapas de bloqueo de visión, o &quot;CBV&quot; para abreviar). . Los toens que estén fuera de este área no podrán ver lo que está adentro; los que estén dentro no verán nada de nada (es solido y opaco). 
* '''Dibujar una CBV rectangular vacía''': semejante al de arriba pero los tokens de adentro podrán ver lo que está dentro del área rectangular pero no a través de los límites. 
* '''Dibujar una CBV obalada''': Como la rectangular pero con forma obalada.
* '''Dibujar una CBV obalada vacía''': misma comparación que entre los dos tipos de rectangunlares.
* '''Dibujar una CBV de polígono cerrado''': esto te permite dibujar un polígono usando líneas, y al terminar cerrarlo uniendo con otro segmento, al cerrarlo cerá un polígono sólido de CBV. Para empezar haz click con el boton izquierdo sobre el mapa, y dibuja un primer segmento. para unir el sigueinte, haz ''click derecho'' y mueve el ratón para crearlo. Al terminar otra vez ''click izquierdo'' para cerrarlo. 
* '''Dibujar una CBV de línea poligonal''': as above, but creates a hollow polygon

===Mejores utilidades===

Vision blocking and vision processing is processor-intensive, and overuse of (or overly-complex) VBL can cause serious performance issues with MapTool - slowdowns, inability to navigate a map, and so forth. Some rules of thumb:

# '''Use square VBL wherever possible''' - and minimize the use of circular or highly irregular VBL
# '''Use solid VBL wherever possible''' - this prevents gaps between polylines, which can be performance hogs. Instead, cover the map with VBL, and cut out the areas that the tokens should be able to see.
# '''Use as little VBL as necessary to get the effect you seek''' - make it efficient!
# It is frequently a good idea to set up a vision boundary at the edges of the play area on your map - maps in MapTool are theoretically infinitely sized, but if your tokens are going to be only in the dungeon area, there's no reason for MapTool to have to be calculating what they see all the way out to the edge of the universe. 

These will help keep performance from bogging down. You ''can'' use the other kinds of VBL, but simply be aware of how complex your vision blocking setup is getting. 

==Putting VBL on the Sample Map==

Now, to add some vision blocking to the map. We will use a recommended technique, which is to cover the entire map with a solid block of VBL, and then &quot;cut out&quot; of that block the areas that the players will see. 

===Cover the Entire Dungeon with Solid VBL===

[[Image:Vbl-map-zoomed-extents.png|thumb|Zooming out so the entire dungeon area is visible]]

[[Image:Vbl-createsolidvbl.png|thumb|Creating a block of solid VBL over the whole dungeon]]

# Zoom the map so you can see the whole thing.
# Select the Draw a Rectangular VBL button.
# Left-Click to place the upper-left corner of the solid VBL. Do not hold down the left-mouse button.
# Drag the mouse to define the size of the VBL. You'll see it traced out in a transparent red color as you drag. 
# Click the left mouse button again to place the lower-right corner of the VBL. The VBL will turn blue (if you go to the toolbar and select one of the other tools on the left side - switching off the VBL tools - the blue VBL indicators will disappear. They are only visible when the VBL tools are active). 

[[Image:Vbl-complete-cover.png|thumb|The entire dungeon area covered by solid VBL]]

You've now covered the entire map with VBL. If a token was placed outside that area, and had a &quot;sight&quot; setting active, it would not be able to see into that area.

===Cut out the Visible Areas from the Solid VBL===

[[Image:Vbl-erasingvbl.png|thumb|Erasing a section of VBL - hold down Ctrl to make the area snap to the map grid.]]

Now, we cut out the rooms. This process is a bit trickier - to keep the VBL efficient, make sure you get the edges lined up as best you can and you don't leave any narrow gaps or thin lines of VBL between rooms (a trick to doing this is in the instructions below). For this part, I will be clearing all VBL, out to the outer walls. We will work on the interior walls later.

# Zoom the map until you are comfortable with the zoom level.
# Select the Draw a Rectangular VBL tool.
# Hold down the Shift key, and left-click to mark the upper-left corner of the area of VBL you want to erase. A white, transparent box will follow the mouse cursor (if it's not white, you forgot to hold shift!)
# Drag the mouse until you've reached where you want the lower-right corner of the cleared area to be, and left-click. The blue VBL will disappear. You have now erased the VBL for that area, and tokens in that area would be able to see (their vision would be blocked, of course, once it reached any VBL!). 
# Repeat this process for the rest of the rooms, tunnels, and so forth. 

[[Image:Vbl-erased.png|thumb|The VBL is now erased over the dungeon rooms themselves.]]

Afterwards, you'll have a large blue area, with the dungeon &quot;cut out&quot; inside it. 

'''TIP''': if you hold down Ctrl while you trace your VBL, it will snap to the gridlines of the map. This is very useful for aligning VBL. I used this technique to erase the VBL on the sample map, because it makes the VBL align easily and squarely on the dungeon walls.

===Interior VBL===

[[Image:Vbl-polyline-wall.png|thumb|Drawing VBL on the walls with the Poly Line VBL tool.]]

Finally, we will put VBL on the interior walls. This will make it so that the walls ''inside'' the dungeon block vision too. 

# Zoom the map to focus on a particular wall.
# Select the &quot;Draw Polyline VBL&quot; tool.
# Hold down Ctrl, and left-click on the map to place the beginning of the line segment. I recommend starting the line somewhere in the solid VBL, so that there are no gaps at the edges of the walls. 
# Drag the mouse to draw the line segment. (in the screenshot, the line segment is the thin red line inside the yellow circle; the yellow circle was drawn on the screenshot to show you where the polyline is - it's not part of the VBL process)
# Left-click to place the end of the line segment. The red line will turn blue, indicating that there is VBL now on that wall. 
# Repeat the process for the other walls, until you are satisfied.

===VBL and Objects===

There are lots of objects in a dungeon that can block vision - doors, pillars, piles of rubble, chests...you name it. It is possible to draw VBL anywhere on a map - however, at this time, VBL is not linked to particular objects. This means that you can't, for instance, put VBL on a door and have it &quot;open&quot; with the door when your players open it. You can simulate this by deleting the VBL that crossed the doorway, but you can't have the VBL automatically move with an object. 

You'll have to experiment with the VBL for the objects in your dungeon, but here are some tips:

* '''Doors''': for doors, if they are closed, simply draw the VBL along the wall in which the door sits. When (if) the door is ever opened, you can rotate the door object, and use Solid Rectangular VBL to erase the vision blocking layer that covered the doorway (remember, hold down Shift to erase VBL). Make sure to use ''solid'' VBL - if you use a hollow rectangle, it will only erase where the hollow rectangle's boundary intersects the other VBL. 

[[Image:Vbl-drawx.png|thumb|An &quot;X&quot; drawn with VBL, typically used for pillars, statues, and similar objects]]

* '''Pillars, statues, and standing objects''': remember that, when you use VBL, the tokens cannot see into or through it at all (and, because of this, the ''players'' won't see anything covered by or hidden inside VBL on their screens). If you want the players to be able to see some of an object - like a large pillar - one of the recommended tricks is to draw an &quot;X&quot; on the pillar using poly line VBL (instead of covering the whole pillar with a circular or rectangular solid VBL. Using an X means that the players can see some of the pillar, depending on where their tokens are. It makes for a much nicer look. If you look at the screenshot, you'll see an &quot;X&quot; drawn using VBL on top of one of the barrels.

==VBL Limitations==

The Vision Blocking Layer in MapTool is a tool for helping to simulate what a character can see during a game. However, it does have limitations, and doesn't &quot;completely simulate vision&quot; or anything like that. We touched on one limitation earlier, the fact that VBL cannot be attached to specific objects, and so if you open a door that is covered by VBL - the door object might move, but the VBL stays put. Here are a couple other limitations of the current (as of MapTool 1.3.b56) Vision Blocking Tools.

* '''Vision Blocking is Binary''': VBL in MapTool is on or off. There is no &quot;partially transparent&quot; or &quot;one way&quot; VBL in the current version of MapTool.
* '''Vision Blocking is Total''': Related to the above, VBL blocks all forms of vision. There are no vision types currently that can see through VBL.
* '''Vision Blocking has no Elevation''': VBL cannot at this point be given a particular height - it stretches to infinity, up and down, and so there's no way to set up VBL so a tall character can see &quot;over&quot; it

[[Category:MapTool]]
[[Category:Tutorial]]


{{Languages|Introduction to Vision Blocking}}{{#customtitle:Inroducción al bloqueo de visión(inacabado)|Inroducción al bloqueo de visión(inacabado)}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Java 64 fails when using Launcher</title>
    <ns>0</ns>
    <id>1161</id>
    <revision>
      <id>7338</id>
      <parentid>5020</parentid>
      <timestamp>2019-03-30T16:00:00Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="476">{{Caution|This was for resolving issues with Java installs a long time ago and should never be done with current (Java 8+) Java.}}

Open a Command Prompt as Administrator.

CD into your C:\Windows\SysWOW64 directory.

Check for any java executables there. There shouldn't be any since the launcher isn't working.

Then type in:

mklink java.exe ..\system32\java.exe

mklink javaw.exe ..\system32\javaw.exe

mklink javaws.exe ..\system32\javaws.exe

And try the Launcher again.</text>
      <sha1>pk7d3hgh79iv3bwtbjrvyexjsqdbtow</sha1>
    </revision>
  </page>
  <page>
    <title>User:Jasonclark3</title>
    <ns>2</ns>
    <id>1165</id>
    <redirect title="Watch The Godfather Movie Review Online" />
    <revision>
      <id>5029</id>
      <timestamp>2010-12-29T05:37:54Z</timestamp>
      <contributor>
        <username>Jasonclark3</username>
        <id>284</id>
      </contributor>
      <comment>[[User:Jasonclark3]] moved to [[Watch The Godfather Movie Review Online]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="53">#REDIRECT [[Watch The Godfather Movie Review Online]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>reverse phone lookup</title>
    <ns>0</ns>
    <id>1167</id>
    <revision>
      <id>5050</id>
      <parentid>5038</parentid>
      <timestamp>2010-12-31T05:21:24Z</timestamp>
      <contributor>
        <username>JElmore</username>
        <id>281</id>
      </contributor>
      <comment>Vandalism -- spam post</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Michel1</title>
    <ns>2</ns>
    <id>1168</id>
    <redirect title="reverse phone lookup" />
    <revision>
      <id>5039</id>
      <timestamp>2010-12-30T09:48:50Z</timestamp>
      <contributor>
        <username>Michel1</username>
        <id>287</id>
      </contributor>
      <comment>[[User:Michel1]] moved to [[reverse phone lookup]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[reverse phone lookup]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getDrawOrder</title>
    <ns>0</ns>
    <id>1171</id>
    <redirect title="getTokenDrawOrder" />
    <revision>
      <id>5096</id>
      <timestamp>2010-12-31T18:40:01Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <comment>[[getDrawOrder]] moved to [[getTokenDrawOrder]]: Incorrect name</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[getTokenDrawOrder]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Sarawilliam30</title>
    <ns>2</ns>
    <id>1175</id>
    <redirect title="Selecting Your On-line Penny Auctions Website Nicely" />
    <revision>
      <id>5104</id>
      <timestamp>2011-01-08T06:04:51Z</timestamp>
      <contributor>
        <username>Sarawilliam30</username>
        <id>295</id>
      </contributor>
      <comment>[[User:Sarawilliam30]] moved to [[Selecting Your On-line Penny Auctions Website Nicely]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="66">#REDIRECT [[Selecting Your On-line Penny Auctions Website Nicely]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Saurighton</title>
    <ns>2</ns>
    <id>1178</id>
    <redirect title="E Cigarettes" />
    <revision>
      <id>5124</id>
      <timestamp>2011-01-11T06:15:41Z</timestamp>
      <contributor>
        <username>Saurighton</username>
        <id>298</id>
      </contributor>
      <comment>[[User:Saurighton]] moved to [[E Cigarettes]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[E Cigarettes]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:JElmore</title>
    <ns>2</ns>
    <id>1179</id>
    <revision>
      <id>5133</id>
      <timestamp>2011-01-14T00:28:55Z</timestamp>
      <contributor>
        <username>JElmore</username>
        <id>281</id>
      </contributor>
      <comment>New page: Yes, I do spend time at work looking for spam entries. Why do you ask?</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="70">Yes, I do spend time at work looking for spam entries. Why do you ask?</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Add-asset-dialog.png</title>
    <ns>6</ns>
    <id>1182</id>
    <revision>
      <id>5140</id>
      <timestamp>2011-01-16T18:53:17Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <comment>Add asset to resource library dialog.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">Add asset to resource library dialog.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Add-asset-dialog.jpg</title>
    <ns>6</ns>
    <id>1183</id>
    <revision>
      <id>5141</id>
      <timestamp>2011-01-16T18:54:51Z</timestamp>
      <contributor>
        <username>Cclouser</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Susanwilliam30</title>
    <ns>2</ns>
    <id>1186</id>
    <redirect title="Eliminate your stretch marks" />
    <revision>
      <id>5175</id>
      <timestamp>2011-01-25T05:05:53Z</timestamp>
      <contributor>
        <username>Susanwilliam30</username>
        <id>308</id>
      </contributor>
      <comment>[[User:Susanwilliam30]] moved to [[Eliminate your stretch marks]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="42">#REDIRECT [[Eliminate your stretch marks]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User talk:WikiSysop</title>
    <ns>3</ns>
    <id>1342</id>
    <revision>
      <id>6285</id>
      <parentid>5402</parentid>
      <timestamp>2014-05-16T17:06:11Z</timestamp>
      <contributor>
        <username>WikiSysop</username>
        <id>1</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">Test
another test</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>MediaWiki:Spam-blacklist</title>
    <ns>8</ns>
    <id>1370</id>
    <revision>
      <id>5547</id>
      <parentid>5546</parentid>
      <timestamp>2011-06-29T23:05:39Z</timestamp>
      <contributor>
        <username>WikiSysop</username>
        <id>1</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2989"> # External URLs matching this list will be blocked when added to a page.
 # This list affects only this wiki; refer also to the global blacklist.
 # For documentation see http://www.mediawiki.org/wiki/Extension:SpamBlacklist
 #&lt;!-- leave this line exactly as it is --&gt; &lt;pre&gt;
#
# Syntax is as follows:
#   * Everything from a &quot;#&quot; character to the end of the line is a comment
#   * Every non-blank line is a regex fragment which will only match hosts inside URLs

 #&lt;/pre&gt; &lt;!-- leave this line exactly as it is --&gt;
\bstarsearchtool\.com
\bjudgewiki\.org
\.itp-fxf\.com
\bwiki\.jframework\.com
\bwww\.omanx\.net
\bcolbertphotography\.net
\bwiki.omnipacs\.com
\bopensource\.eminent-online\.com
\binclus\.net
\bwww\.asianborderlands\.net
\bwww\.localmarketingguide\.com
\bwww\.abcharvest\.mobi
\bwww\.worldcup2010southafricanews\.com
\bwiki\.creativecommons\.org\/.*Jobs.*
\bcranburian\.com
\bwww\.helpexpose\.com
\bwww\.wyvernsden\.net
\bdeveloper\.constantcontact\.com
\bpressportalonline\.com
\bkilleratlarge\.com
\bthegreennova\.org
\bresources\.bi\.org
\bdoublefacebook\.com
\bwww\.happyvalleywiki\.com
\bgunstroker\.com
\bckm\.co
\bwww\.benrapesthevillage\.net
\bwww\.wearesmrt\.com
\bgb\.greatmalvern\.org\.uk
\bdocumentation\.gumbolabs\.org
\bsternshowwiki\.com
\bgrinnelldiscclub\.org
\bwww\.underground-gamer\.com
\bmytrafficticketdefence\.com
\bwww\.roomsforrenthawaii\.com
\bwww\.bzupages\.com
\bwww\.quiltsnow\.com
\bmughaltimes\.host56\.com
\btomatoland\.org
\bwww\.binikou\.org
\bearthcharterct\.org
\bcomm\.cs\.unb\.ca
\bEcome\.org
\bbigfootywiki\.com
\bcfwiki\.net
\bcomedydb\.org
\bdemmer\.it
\bdigifar\.re-cph.com
\bdixiehighway\.us
\ben\.textopia.org
\bfellowshipmiddletown\.com
\bgerontome\.kobic.re.kr
\bgrassrootstosa\.org
\bguildwikia\.net
\bhealth\.intanzania.com
\bherspace\.spinalhelix.com
\bhoboview\.com
\bhomebuilderhelper\.com
\bhootpowered\.com
\bmathesonsundance\.myknet.org
\bmoleculewiki\.com
\bmst-office\.net
\bopenforge\.info
\bphoenixmortgagefund\.com
\bpixmedicine\.com
\brajivnarayan\.com
\bsixolsons\.com
\bsto\.eogamer.com
\bthemoviepedia\.com
\bthepoor\.org
\bwebdevtool\.com
\bwiki\.bigswiki.org
\bwiki\.splinter48708.com
\bwww\.ajb.dni.us
\bwww\.armedical.info
\bwww\.arteixinc.com
\bwww\.artofitall.com
\bwww\.barrelofmakers.org
\bwww\.biblewiki.us
\bwww\.boriel.com
\bwww\.caution.dk
\bwww\.citroen-sm.org
\bwww\.collectivetech.org
\bwww\.commlabuniversity.com
\bwww\.deliverdestin.com
\bwww\.dev.investment-times-magazine.com
\bwww\.euro-chimaera.co.uk
\bwww\.firstlightnet.com
\bwww\.forcastia.com
\bwww\.gamerapi.mechabear.co.uk
\bwww\.guidetothegalaxy.org
\bwww\.inhifi.com
\bwww\.keenix.net
\bwww\.lyriki.com
\bwww\.mygrandmaster.com
\bwww\.newsledger.org
\bwww\.orlando.dnoche.com
\bwww\.prayerhub.org.uk
\bwww\.realgov.com
\bwww\.sitasingstheblues.com
\bwww\.velwythe.com
\bwww\.xtracycle.com
#&lt;!--
# .*[_\-][Jj]obs
# .*\b[Jj]obs
# .*[bB]ank_
# .*\b[cC]ruise
# \bdawnloadonline.com
# \bwww.wikipeers.com
# \bwww.orologi-replica.net
# --&gt;</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Jenia123</title>
    <ns>2</ns>
    <id>1375</id>
    <redirect title="cruises from southampton" />
    <revision>
      <id>5460</id>
      <timestamp>2011-02-12T09:11:17Z</timestamp>
      <contributor>
        <username>Jenia123</username>
        <id>539</id>
      </contributor>
      <comment>[[User:Jenia123]] moved to [[cruises from southampton]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[cruises from southampton]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Avoiding Stack Overflow</title>
    <ns>0</ns>
    <id>1379</id>
    <revision>
      <id>5542</id>
      <parentid>5541</parentid>
      <timestamp>2011-05-21T00:11:31Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>/* Ways to Avoid Running Out of Stack Space */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6340">=Stack Overflow Exceptions=

If you create long and elaborate macros or use a lot of text in a macro, you will probably run into a '''Stack Overflow Exception'''.  Note that because one macro can call others, it can be difficult to determine which macro in particular is the root cause of the problem.

==Overview of the Problem==

At first only two things come to mind (don't miss more advice at the bottom of this page):
# Clean up your HTML as much as possible (e.g. remove all comments).
# Raise the stack size.  (Start high and work your way down) ''This is actually bad advice; why is explained below.''

==Description of Why the Error Occurs==

The error happens because of the way the macro parsing works.  It uses a [http://en.wikipedia.org/wiki/Regular_expression Regular Expression] parser that starts by looking for the largest possible string that matches the regex, then backtracking to a shorter string (using recursion) if the first one ends up not working.  This ends up requiring a huge amount of stack space in certain pathological strings when combined with the particular regexes being used by MapTool.  Regular expressions require stack space based on the amount of text entered and how that text ''might'' match the regex.  That's the whole point of [http://en.wikipedia.org/wiki/Backtracking backtracking] -- the regex might match up to a certain point, so it saves its state on the stack and then checks the next piece.

The errors are more likely when the text contains a lot of braces, brackets, and/or single/double quotes.  But none of those are '''REQUIREMENTS''' for having a stack overflow occur.

(A forum search on user &quot;Azhrei&quot; and the word &quot;backtrack&quot; or &quot;backtracking&quot; will probably find the threads that explain this in greater detail.)

==How to Determine an Appropriate Stack Size==

MapTool creates and destroys many threads on the fly and all the time.  So the best advice would be, '''Set your stack as low as possible'''.

The stack size allocated to a particular thread is part of the overall address space available to Java.  So the larger you make the heap limit, the more of the address space that can be consumed by heap and thus will be unavailable for stack space.  And the same thing works in reverse:  the more stack space you allocate per-thread, the less heap space there will be.  This is normally only a problem for the 32-bit Java since the maximum heap size is roughly '''1.5GB''' (depends on the platform; Unix systems will be slightly larger than Windows).  You'll know you've hit this problem when you get an exception that says that a new Thread couldn't be created and the description will say &quot;Native code&quot;.  (In other words, it's the C language code that implements the Java Runtime Environment that is having the problem.)

In the 64-bit world, the amount of address space available to the Java Runtime Environment is tremendous (on most hardware it's about 2^40 or roughly '''1TB'''; some hardware will support up to '''256TB''').  That means the stack size and heap space could be set very large.  This will still have an effect on the machine's performance, since using more virtual memory than the machine has in physical memory will require ''paging''.  And paging is I/O intensive and thus will slow down the entire machine.

==How to Change the Amount of Stack Space==

On all systems there is a command line parameter to the Java interpreter that tells it how much stack space to allocate for each thread and how much heap space to allocate overall.  The question becomes, &quot;How do I tell ''my'' Java installation how much to use?&quot;  And that depends on how you start MapTool.

See [[Stack Size#Configuring memory allocation for MapTool]] for details.

==Outlook for Future Versions of MapTool==

There won't be done anything about this for MT 1.3. We'll be moving to JavaScript for 1.4.  This should eliminate the regex stack overflow entirely as all macros will be JavaScript (well, except for a JavaScript macro with bugs in it).  That language uses a lexical parser and not a bastardized (but easier to implement) regex parser.  The MTscript parser is great at doing what it was designed to do, but it has been pushed waaaaay beyond it's original vision!

==Ways to Avoid Running Out of Stack Space==

Here's a list of things you can do to help avoid stack overflow errors.  They are in the order of Most Likely to Least Likely in terms of the level of benefit.

# Break up your macros into smaller parts (especially where you have brackets or single/double quotes, but not just in these cases).  This helps because there is less backtracking possible when the macros themselves are shorter.
# If you have long static strings store them in a token property instead of the macro body.  This helps because the content of properties are not subject to the parser line normal macro text is.  Lib tokens work well for this.  A table might work as well if your data is read-only.
# Use {{func|strformat}} to create your HTML, preferably with the format string stored in a token property.  (See above.)
# If you get stack issues '''it's better to reorganize your code than bump up the stack size'''.  As explained above, increasing the stack size is a bandage on the problem, and as you can see it's not a very good bandage either!
# Because of the way the regex is structured, you might be able to get more HTML text into a macro by using this construct:  {{code|[r: &quot;html text here&quot;]}}  This causes a different path to be taken in the MapTool source code, so different regexes are used.  No guarantees on this, of course, but if you're desperate and don't want to spend the time to reorganize your macros it might help.
# If you get a stack overflow while creating a dynamic form, move the HTML part of the form into a new macro (e.g. you could create a user-defined function named '''htmlBuilder(arguments)''' and pass it any variable arguments).  Then when you need the form, assign the HTML code first to a variable (such as '''tmpCache''') and then run the form using the variable:
  [h: tmpCache = htmlBuilder(arguments)]
  [h: dialog(&quot;Dialog Test&quot;): {[r:tmpCache]}]

This issue has come up many times in the forum. This text was stitched together from [http://forums.rptools.net/viewtopic.php?p=192126#p192126 this latest thread] about it.

[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Property List Editor.png</title>
    <ns>6</ns>
    <id>1380</id>
    <revision>
      <id>5478</id>
      <timestamp>2011-03-11T18:47:10Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <comment>Property List Editor on Mac OS 10.6.6</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">Property List Editor on Mac OS 10.6.6</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Working With Two CODE Levels</title>
    <ns>0</ns>
    <id>1381</id>
    <revision>
      <id>6968</id>
      <parentid>6967</parentid>
      <timestamp>2018-07-09T08:25:34Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <comment>/* Trick 4: More then 2 CODE levels */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4679">=Working With Two CODE Levels =

One of the biggest limitations of the MT macro script is that the script parser can't handle more that 2 levels of {{code|&lt;nowiki&gt;{}&lt;/nowiki&gt;}}. So this will work:
  [If(condition), CODE:{
    [if(another_condition), CODE:{
       [code to execute when true]
    };{}]
  };{}]

And this won't:
  [If(condition), CODE:{
    [if(another_condition), CODE:{
      [if(another_condition), CODE:{
        [code to execute when true]
      };{}]
    };{}]
  };{}]
*Note that this is an example, there are other occasions where one uses {{code|&lt;nowiki&gt;{}&lt;/nowiki&gt;}}, e.g. {{code|&lt;nowiki&gt;{myVar}&lt;/nowiki&gt;}} instead of {{code|[r:myVar]}}. This is subject to the same problem. The only exception I've encountered is with json objects: {{code|&lt;nowiki&gt;myVar = json.set(&quot;{}&quot;, &quot;someKey&quot;, someVar)&lt;/nowiki&gt;}}. This is NOT subject to this problem. However I believe that if you use {{code|'{}'}} instead of {{code|&quot;{}&quot;}} it won't work (or the other way around). 

==So what to do when you do need to go deeper?==
Basically there are 3 general tricks you can use if you need to go deeper:

===Trick 1: Create another UDF===
One of the most common ''tricks'' is to create a User Defined Function (UDF) and call this in the nested level.
Within this UDF you can yet again go 2 CODE levels deep.

===Trick 2: Code smarter===
Many many examples can be given here, but you can achieve a lot by using roll options e.g.:
  [if(condition): if(another_condition, &quot;show this&quot;, &quot;else show this&quot;); if(yet_another_condition, &quot;show this&quot;; &quot;else show this&quot;)]
You can also work with multiple roll options, but this ''should'' not work, but does sometimes work e.g.:
  [foreach(item,items), if(item == someVar), CODE:{};{}]
works while:
  [if(listCount(items)&gt;2), foreach(item,items), CODE:{};{}]
won't work.

A lot can be achieved by restructuring your code in this manner.

===Trick 3: Store commands===
One final trick I recently learned from Ahzrei is a rather dirty trick but can be used in certain circumstances. In my case I have code that needs to be executed that is already two levels deep and then I ALSO want to execute this for certain selected tokens.
In this case you can first store the to-execute-commands in a json object and then exit the two loops. Now you have a json object containing all code that needs to be executed onto certain tokens. For this you can start a new loop that uses {{func|json.evaluate}} per json object per token id. 

{{Clarify|(need to add example later on)}}

===Trick 4: More than 2 CODE levels ===
Officially this is NOT supported in MT and thus it ''could'' break your code if improperly used. That said, I've been using this trick for 6 (dd: 2017) years now and my code is flooded with it and have not yet encountered any issue, so its reasonable to assume that its safe to use. Disclaimer: Still this is at your own risk.

As it turns out it IS possible to have more then 2 nested code levels but in order to do that you have to ''mislead'' the parser. This is done as follows:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[if(1), CODE:{
	[if(1), CODE:{
		[if(1), CODE:{
  			  you should never see this in the chat...but you do!
		''
		};{''}]
	''
	};{''}]
''
};{''}]
&lt;/source&gt;

Important notes: 
*put the  {{code|&lt;nowiki&gt;''&lt;/nowiki&gt;}} in the ELSE statements as well when they're not empty. 
*do NOT use the single quote  {{code|&lt;nowiki&gt;'&lt;/nowiki&gt;}} anywhere in the nested code!! It *can* be used, but it *can* also lead to errors! I've not been able to determine when it goes right and when wrong, so to be safe: don't use them. 
*if you use multiple embedded if(),code statements, make sure that you use add the else: {} part as well (like in the above example), even if its empty. Due to this 'hack' its possible that if not all elses are given but some are that the an else is used of an embedded if statement instead of the one intended!!

What it boils down to is to add two single quotes {{code|&lt;nowiki&gt;''&lt;/nowiki&gt;}} at the END of EACH code block. This will fool the MT parser and it will accept this nesting. I've tried it upto 9 nestings without a problem (more is probly also no issue). Do keep in mind that this will SERIOUSLY impact the stack though, so don't go writing huge code blocks this way. I mainly use it for cases where you only have a few lines of code but are required to go 3 or 4 nestings deep and its just annoying to create a separate macro for one or two lines of code. 

Note that if in the above example the {{code|&lt;nowiki&gt;''&lt;/nowiki&gt;}} will show up in the chat. You can also use {{code|&lt;nowiki&gt;[h:'']&lt;/nowiki&gt;}} instead to prevent this.
[[Category:Cookbook]]

--[[User:Wolph42|Wolph42]] 16:22, 19 March 2011 (UTC)</text>
      <sha1>6c272ygjgfq46u0ctom1o2e49cl1viu</sha1>
    </revision>
  </page>
  <page>
    <title>User talk:Cclouser</title>
    <ns>3</ns>
    <id>1382</id>
    <revision>
      <id>5502</id>
      <parentid>5500</parentid>
      <timestamp>2011-03-31T19:48:15Z</timestamp>
      <contributor>
        <username>Michaelheggen</username>
        <id>582</id>
      </contributor>
      <minor/>
      <comment>tweak</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="275">Not sure who else to contact about this....

I am trying to correct some grammar errors on the page titled &quot;Editor&quot;. When I click &quot;Save page&quot;, it simply blanks my browser window and doesn't save my changes. 

Suggestions?

-Mike&lt;br&gt;
[[User_talk:Michaelheggen | My talk page]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User talk:Michaelheggen</title>
    <ns>3</ns>
    <id>1383</id>
    <revision>
      <id>5501</id>
      <timestamp>2011-03-31T19:47:25Z</timestamp>
      <contributor>
        <username>Michaelheggen</username>
        <id>582</id>
      </contributor>
      <comment>creation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">Welcome to my talk page. 

-Mike</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Michaelheggen</title>
    <ns>2</ns>
    <id>1384</id>
    <revision>
      <id>5503</id>
      <timestamp>2011-03-31T19:52:57Z</timestamp>
      <contributor>
        <username>Michaelheggen</username>
        <id>582</id>
      </contributor>
      <comment>creation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="243">I am an experienced MediaWiki user and administrator, as well as a gaming geek. I have done some technical writing in the past, too. 

Not sure what things I will tackle here, so to start I will just be a spelling and grammar WikiGnome.

-Mike</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Setting up DeviantNull's Character Sheet framework</title>
    <ns>0</ns>
    <id>1385</id>
    <revision>
      <id>5525</id>
      <parentid>5524</parentid>
      <timestamp>2011-04-21T21:36:11Z</timestamp>
      <contributor>
        <username>KilKidd</username>
        <id>587</id>
      </contributor>
      <comment>/* Adding Ritual Scrolls */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2966">== Setting up DeviantNull's Character Sheet framework ==
DeviantNull's Character Sheet framework is a commonly used framework that allows a &quot;macro-less&quot; combat system to be integrated into Maptools

This guide assumes:
* You have maptools installed
* You have read the maptools tutorials
* You have DeviantNull's Character Sheet framework installed

== Creating a character ==
* Drag a token that you want to become a character on the map
* Double click on the token and go to the &quot;Config&quot; tab
* In the &quot;Properties&quot; section, select DNA

This designates that token as a &quot;Player&quot; and should now have a character sheet


== Character Sheet ==
=== Adding stats ===
* If the character sheet is not open select your character token and in the campaign macros tab click on &quot;Character sheet&quot;
* The first tab that opens should be the &quot;Stats&quot; tab, if not, click on this
* In the stats tab, on the box with the token name, click on the pencil icon

This allows for character editing, just add all of your stats from your character sheet in here

=== Adding Feats ===
* If the character sheet is not open select your character token and in the campaign macros tab click on &quot;Character sheet&quot;
* Open the &quot;Feats&quot; tab

==== Adding racial features ====
* Click on the double chevron on the box titled &quot;Race Features&quot;
* Click on Add &lt;u&gt;new race feature&lt;/u&gt;
* in the dialog box that pops up, add your racial feature name, and description
* add all applicable stats to your stat sheet

==== Adding Class features ====
* Click on the double chevron on the box titled &quot;Class Features&quot;
* Click on Add &lt;u&gt;new class feature&lt;/u&gt;
* in the dialog box that pops up, add your racial feature name, and description
* add all applicable stats to your stat sheet

==== Adding Feats ====
* Click on the double chevron on the box titled &quot;Feats&quot;
* Click on Add &lt;u&gt;new feat&lt;/u&gt;
* in the dialog box that pops up, add your racial feature name, and description
* add all applicable stats to your stat sheet

=== Adding Rituals ===
* If the character sheet is not open select your character token and in the campaign macros tab click on &quot;Character sheet&quot;
* Open the &quot;Rituals&quot; tab

==== Adding Components ====
* click on the double chevron in the box titled &quot;components&quot;
* a pop-up menu will appear with different components
* &quot;add&quot; the amount of each component as necessary

==== Adding Ritual Scrolls ====
* click on the double chevron in the box titled &quot;Ritual Scrolls&quot;
* click on &lt;u&gt; Add a ritual &lt;/u&gt;
* in the pop-up box that appears add the name and info for the ritual (found in the Player Handbook(s))

==== Creating Ritual Books ====
===== Adding Rituals =====
==== Adding Martial Practices ====
=== Adding Equipment ===

=== Adding Powers ===

== Creating a NPC ==
=== Monster sheet ===
==== Adding powers ====
==== Adding Equipment ====
==== Knowledge Check ====

== Tips and hints (and other info) ==
== See also ==
* http://lmwcs.com/rptools/wiki/Frameworks : List of some frameworks for Maptools</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:String Property List</title>
    <ns>1</ns>
    <id>1386</id>
    <revision>
      <id>5527</id>
      <timestamp>2011-05-04T18:28:41Z</timestamp>
      <contributor>
        <username>Deuzy</username>
        <id>593</id>
      </contributor>
      <comment>New page: so I am trying to set up a macro that will roll for skills in DND3.5 the current way i have it is with each skill value as a string property list with the keys mod(what attribute modifies ...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="752">so I am trying to set up a macro that will roll for skills in DND3.5 the current way i have it is with each skill value as a string property list with the keys mod(what attribute modifies the skill), rank( how many ranks the character has in the skill), and misc(for miscellaneous modifiers) I have an input that shows a list of all the skills and returns the one selected as a string... now I have questions... can i even use a string property list for the properties of a token? is there a special format? and how would I use the eval() roll option to add these scores, because the mod key contains a string which corresponds to another of the tokens properties... also if I'm placing this in the wrong place I'm sorry. I just don't know where to go.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>User:Deuzy</title>
    <ns>2</ns>
    <id>1387</id>
    <revision>
      <id>5528</id>
      <timestamp>2011-05-04T19:43:14Z</timestamp>
      <contributor>
        <username>Deuzy</username>
        <id>593</id>
      </contributor>
      <comment>New page: Your average DM trying to learn the Maptools Macro language. I have some C++ knowledge and while I find that the Wiki here is useful... it is not complete... when I learn it I hope to help...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="199">Your average DM trying to learn the Maptools Macro language. I have some C++ knowledge and while I find that the Wiki here is useful... it is not complete... when I learn it I hope to help expand it.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Feature List</title>
    <ns>0</ns>
    <id>1388</id>
    <revision>
      <id>6653</id>
      <parentid>6327</parentid>
      <timestamp>2016-05-02T19:57:22Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <comment>/* Grid */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7505">{{Languages|Shortcut Keys}}
This list is compiled for Maptools version 1.3b86. If fairly extensive but still misses quite a lot of entries. It will however give you a good idea of what the capabilities are of Maptools.

==Live and active community==
*Maptool is supported by an active and lively community, this makes MT free, though your donation is always welcome
*MT is supported by a large Forum community
*MT is supported by an extensive set of Tutorial videos, in multiple languages
*MT is supported by a Wiki 
*MT is Java based, meaning it plaform independent (e.g. runs on Window, Mac, Linux etc.)

==Fog of War==
*Option for individual character fog of war, otherwise fow is shared by the entire party
*hard fog for undiscovered areas
*soft fog for previous discovered areas but outside LoS (note, no items on the token layer show to players if the item is in soft fog)
*option to reset the fog
*option to manually clear fog
*option to manually recreate fog
*option to have player movement clear fog automatically

==Maps==
*Supports virtually infinite map, limited only by each connected computer's memory resources
*Support for creating maps
*Export and Import function for MT type maps
*Hi-res Screenshot support
*Ability to create maps real time (in game)
*Ability to drag and drop images into maptools that can be used as map
*Ability to drag and drop images into maptools that can be used as objects
*Support for 4 layers of map drawing:
**'''background''' here you either draw maps or drag external images as map. Both from outside maptools or from within maptools
**'''object''' here you can again draw and drag images both from outside MT or from the internal library
**'''hidden''' same as other layers but everything in this layer is visible to GM only
**'''Token''' the actual layer where players and GM have their tokens which they can move around. Same as other layers drawing and dragging support
*Multiple map support
*Texture support, for as well background as drawing

==Grid==
*Different types of grids:
**Square
**Hex (Horizontal Hex)
**Vex (Vertical Hex)
**Isometric (as of 1.4)
*Grid color
*Grid size
*Grid offset
*Grid is positioned above the background and below the objects to give a sense of depth in the maps
*Toggle snap to grid

==Library support==
*MT a build in library with:
**Tokens (e.g. Hero, Dragon, Troll)
**Objects (e.g. door, wall, table)
**Textures (e.g. Grass, Cobble stones, Mud)
**States (e.g. Stunned, Blinded, Dazed)
**Other stuff like Overlays, a prepared Map, Health Bars, Dice, Cards
*Option to load (from the internet) other available resources like maps, tokens and objects
*Option to extend the resource library with material localized on your own PC

==Frameworks==
Through the maptools forum and its very lively community frameworks have been created which give support for the following RPG games
*D&amp;D 3.5 Ed
*D&amp;D 4 Ed (English, French and Spanish)
*Pathfinder
*Warhammer 40k - Dark Heresy
*Warhammer 40k - Roque Trader
*Warhammer 40k - Deathwatch
*Warhammer 40k - Black Crusade
*Warhammer 40k - Only War
*Warhammer 2nd Ed
*Warhammer 3rd Ed
*Call of Cthulhu 5.6 Ed
*Fate 3.0
*Hackmaster
*Dragon Age
*Savage Worlds
*Hero 5th ed.
*HarnMaster 3
*Star Wars
*Bash
*Gurps
*Gumshoe
*Ars Magica 5h Ed.
*Dogs in the Vineyard
*A couple of bord games

==Script language (Macro support)==
*MT provides a script language with which the above Frameworks have been developed
*There exists a acitve and up to date Wiki support for the script language
*There are several 'drop-in' resources available through the forum

==Tables==
*Maptools provides a (rudimentary) support for tables
*Random results from the tables can be generated with the use of the script language

==Preferences==
*A LOT of settings are provided to personalize MT to your needs

==Interface==
*Different panels are available 
**Initiative Panel: contains images of the active tokens and there respective initiative number
**Global Panel: contains macros that are locally (on the PC) stored and are independent of the active Framework i.o.w. always there.
**Campaign Panel: contains macros that are applicable for the campaign (Framework)
**Selection Panel: contains macros specifically for the currently selected Token(s)
**Impersonate Panel: same as Selection only this always applies to a single Token
**Table Panel: Panel with the tables
**Resource Library Panel: here the Resources are available
**Map explorer Panel: here one can see which tokens are on the map and in which layer
**Connection Panel: shows who's connected through the (inter)net to your game
*Panels can be 
**Docked or Undocked (floating)
**Hidden
**Auto-hidden, accordion style, ie, when you mouse near the edge where the panel is set to auto-hide, it pops out for use and hides itself once you mouse out.
**Docked panels may also be dragged into tabbed groups of multiple panels
*Full screen support
*Zoom option (which is definitely necessary with the very very very large maps

==Tools==
*Force view
*Force Zoom Level
*Lock movement
*Lock Zoom

==Different Languages==
*English
*French
*Italian
*Spanish
*German
*Polish
*Russian

==Tokens==
*Maptool differentiates between PC's and NPC's
*Option to set Ownership of tokens (so player can Own NPC tokens or multiple PCs)
*Option to set 'vision' of a token:
**Night vision
**Normal vision
**Arc/Cone, Circle, or Square
**Range
*Option to set 10 different sizes, among which free-size (technically, objects are &quot;free size&quot; and tokens are &quot;native size&quot;)
*Local properties (like Strenght and Toughness) are completely customizable per token
*Stat sheet on mouse over token, again completely customizable (and can be hidden for all tokens)
*States can be set per token
*Health bars, either standard or again completely customizable (can also be used for e.g. Ammo, Stamina, etc.)
*Shape, different shapes are supported:
**Square
**Circle
**Top Down (rotates entire token when facing is set, token is also not limited to its square) (that last part applies to all tokens)
*Option to set token visibility (e.g. all clients can see or owners only)

==Light==
*set different ranges
*set different shapes (Square, Circle, Cone with an arc ranges from 1 to 360 degrees)
*set different colors
*set layers of lights (so first e.g. yellow and then an outer ring of e.g. red)
*set auras, don't shed light, but can be used for e.g. show ranges of weapons
*set auras visible to self, all, gm only
*Create different groups of light

==Chat box==
*loads of chat commands 
*smiley support
*can handle html commands
*broadcast option
*impersonate token and talk from that token
*whisper to a single token (so the rest won't see the message) or gm only
*(show/hide) typing notifications
*different colors
*scroll lock
*allow macro commands to be typed straight into the chat

==Maptool summarized in one picture==
[[Image:DHFWOverviewScreenshot.jpg|This is a combination of native Maptool functionality and a campaign (W40K) created in maptool.]]

==Drop-in: Bag of Tricks==
This is not a default feature which comes with Maptool, but something you need to install.
This drop-in will roughly add an additional 80 features, like Teleports, animated doors, automatic VBL manipulation, token grouping, extended tables, debug tools, etc. etc. It can be found [http://forums.rptools.net/viewtopic.php?f=46&amp;t=16066 here]. The web-post includes a full list of all features, tutorials on how to use and install it. 


[[Category:MapTool]]
--[[User:Wolph42|Wolph42]] 15:18, 11 May 2011 (UTC)</text>
      <sha1>e6rsq68lys2f07ixd276dvapc2z269o</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Macro Events</title>
    <ns>14</ns>
    <id>1390</id>
    <revision>
      <id>5549</id>
      <timestamp>2011-07-01T13:03:07Z</timestamp>
      <contributor>
        <username>Jfrazierjr</username>
        <id>227</id>
      </contributor>
      <minor/>
      <comment>New page:  [[Category:Macro]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">
[[Category:Macro]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Intermediate</title>
    <ns>14</ns>
    <id>1391</id>
    <revision>
      <id>5550</id>
      <timestamp>2011-07-05T11:17:52Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Adding category explanation.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="69">Articles marked as focused on ''Intermediate'' knowledge level users.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Clarify</title>
    <ns>14</ns>
    <id>1392</id>
    <revision>
      <id>5667</id>
      <parentid>5658</parentid>
      <timestamp>2011-08-13T09:28:45Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Adding to Review category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="191">Articles needing clarification.  Stubs indicate that an article needs more work, but clarifications indicate that text, or part of it, needs rewriting or more information.
[[Category:Review]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Deprecated</title>
    <ns>14</ns>
    <id>1393</id>
    <revision>
      <id>5668</id>
      <parentid>5661</parentid>
      <timestamp>2011-08-13T09:29:32Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Adding to Review category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="57">Functions which have been deprecated.
[[Category:Review]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Stub</title>
    <ns>14</ns>
    <id>1394</id>
    <revision>
      <id>5669</id>
      <parentid>5664</parentid>
      <timestamp>2011-08-13T09:31:29Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Adding to Review category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="60">Articles lacking important informations.
[[Category:Review]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Proposed Change</title>
    <ns>14</ns>
    <id>1395</id>
    <revision>
      <id>5665</id>
      <timestamp>2011-08-13T09:26:21Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Page creation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="93">Proposed changes that has not been implemented in the main code base yet.
[[Category:Review]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Review</title>
    <ns>14</ns>
    <id>1396</id>
    <revision>
      <id>5666</id>
      <timestamp>2011-08-13T09:27:06Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Page creation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">Articles needing action.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getPropertyNamesRaw</title>
    <ns>0</ns>
    <id>1397</id>
    <revision>
      <id>6041</id>
      <parentid>5856</parentid>
      <timestamp>2012-11-20T19:00:06Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Adding to Property Function category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2131">{{MacroFunction |name=getPropertyNamesRaw |version=1.3b64
|description=
Returns a [[String List]] or [[JSON Array]] containing the names of the [[Token Property|Token Properties]] on a [[Token]]. The type of the value returned depends on the delimiter parameter.

The difference between this function and [[getPropertyNames|getPropertyNames()]] is that [[getPropertyNames|getPropertyNames()]] returns all the property names in lower case (see [http://forums.rptools.net/viewtopic.php?f=1&amp;t=12563&amp;p=148937&amp;hilit=getPropertyNamesRaw#p148937 this forum thread] to get the reason why it was created). 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPropertyNamesRaw()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPropertyNamesRaw(delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPropertyNamesRaw(delim, id)
&lt;/source&gt;
'''Parameters'''
{{param|delim|The delimiter used to separate the values in the [[String List]], defaults to {{code|&quot;,&quot;}}. Returns a [[JSON Array]] if set to {{code|&quot;json&quot;}}. }}
{{param|id|The token {{code|id}} of the token which has its property names returned, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
To display the names of all of the [[Token Property|properties]] on the current [[Token:token|token]] use.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getPropertyNamesRaw()]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

|changes=None.}}
===Notes===
When token properties are created during campaign, they are persistent in the MapTool campaign, regardless of whether they are editable in the ''Edit Token'' window. In other words, even though a property is removed from the campaign properties, it remains available in the MapTool code. [[getPropertyNamesRaw|getPropertyNamesRaw()]] will return ''all'' token properties that exist or have ever existed in the particular campaign, even if users cannot directly edit those properties (''i.e.'', they do not appear in the token's properties when you double click on a token). To get only properties that are currently visible and editable, use [[getAllPropertyNames|getAllPropertyNames()]].
[[Category:Token Function]][[Category:Property Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Show HTML</title>
    <ns>0</ns>
    <id>1398</id>
    <revision>
      <id>5695</id>
      <parentid>5694</parentid>
      <timestamp>2011-08-21T21:29:03Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <comment>/* Show HTML */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="740">
=How to show html code=
Sometimes you want to show html code in chat or in a frame. Sadly MapTool always interprets the html markup. This is sometimes unwanted, especially if you try to debug complex output.


Luckily its quite easy to trick MapTool to leave yout html as it is - you just have to break it. Replace all left brackets in the tags by the html entity for that bracket. The result isnt valid html anymore, so MapTool cannot format it - but it looks all the same to you. You can even copy it and use it as valid html code.


==Example==

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: output = &quot;&lt;h1&gt;This is a headline&lt;/h1&gt;&lt;p&gt;but &lt;em&gt;this&lt;/em&gt; is not&lt;/p&gt;&quot;]
[h: output = replace(output, &quot;&lt;&quot;, &quot;&amp;lt;&quot;)]
[r: output]
&lt;/source&gt;
[[Category:Cookbook]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Game Hosting/es</title>
    <ns>0</ns>
    <id>1399</id>
    <revision>
      <id>5755</id>
      <parentid>5739</parentid>
      <timestamp>2011-09-26T23:52:44Z</timestamp>
      <contributor>
        <username>Aspid</username>
        <id>274</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18282">{{Languages|Introduction to Game Hosting}}{{Beginner}}__TOC__

===La traducción está en proceso===

==Introducción==

Como habeís podido ver en [[Introduction_to_Mapping/es|Introduccion a la creacion de mapas]], MapTool te permite crear mapas virtuales y &quot;miniaturas&quot; (Conocidas en la jerga del MapTool como [[Introduction_to_Tokens/es|tokens]]) para usarlo en partidas de rol, de un modo muy similar a como tendrías estos en un tablero. Por esta razón el MapTool también es conocido como &quot;virtual tabletop,&quot; o &quot;VTT.&quot; En esta guía, veremos lo fundamental de como compartir un mapa con otras personas a través de internet.

'''Nota:''' MapTool no es solo para uso online - mucha gente lo usa para las particas cara a cara, porque puedes hacer cosas con un mapa virtual que no podrías con uno físico. En cualquier caso esta guía asumirá que estás jugando una partida online.

La itroducción al MapTool te enseña como descargar el programa, abrirlo, poner un mapa y tokens. También habla sobre como guardar campañas, como moverte y hacer zoom en el mapa, y como desplazar las miniaturas. Esto son cosas básicas que necesitas antes de seguir leyendo sobre el programa.

Como un juego sin personas conectadas a el no es divertido, la última parte del tutorial indica como conectarse a una partida. Deberás decirle a tus amigos como hacerlo así que asegurate de leer esa sección.

Finalmente, como este tutorial es sobre como hospedar juegos, siempre hará referencia a ti, el lector, como &quot;la persona que está llevando el server&quot;.

==Arquitectura==

Cuando usas el MaoTool para partidas online, el programa usa una arquitectura de ''client-server''. En otras palabras, hay una persona que está llevando el server (por lo normal el master, pero no siempre) y al resto se los conocerá como ''clients''. 

Una vez que el server se inica y todos están conectados, la información de la campaña, (mapas, objetos, etc.) es compartida con todos los jugadores, así todos ven el mismo mapa y pueden ver las mismas cosas interactuando a la vez. Además existe la ventana de chat para utilizar mientras jeugan, por la que se pueden comunicar todos.

==A Word About Networking Stuff==

One of the challenges in setting up a MapTool game (like many client-server applications, including many other Virtual Tabletop programs) is configuring your home network to permit your friends to connect to your MapTool server. 

There are several ways to set up your network to allow Maptool to be hosted over the internet. UPnP, port forwarding, or an external Virtual Private Networking software package. Depending on your computer, ISP, and hardware (such as cable/DSL modem and/or router), will determine which of these options will work for your setup - with the wide variation in home networks and networking hardware, it's not possible to give a single set of rules that will guarantee success.

===UPnP===

An alternative to port forwarding - if it's available on your router - is called ''UPnP'' (short for ''Universal Plug-and-Play''). This feature, instead of permanently saying &quot;Port XYZ traffic goes here!&quot;, will instead tell the router &quot;for a little while - while we're playing - I'm gonna have to go ahead and ask you to open up Port XYZ for us. That would be ''greeaaaat''.&quot; 

In other words, it makes the handling of ports and incoming and outgoing traffic a little more seamless and simple. Of course, the downside is that not everything supports UPnP, and you'll have to figure out whether your network can do it. However, if your network hardware supports UPnP, it is ''by far'' the easiest way to get your MapTool server up and running.

===Port Forwarding===

For home networks that use a router or physical firewall, you will probably need to configure ''port forwarding.'' This is a mechanism by which information coming ''to'' your network, and arriving on a specific ''port'', is sent to the right place ''inside'' your network. This is important for you as the MapTool server person, since your friends need to be sending information to the right place!

The specifics of configuring port forwarding will depend on your hardware, so you'll have to check your manual for that one. But the basic idea is that you indicate two things to the router/switch/firewall:

# Which port MapTool will use (more on MapTool ports later!) - this is telling the router &quot;information will be coming in on Port XYZ; pay attention!&quot;
# Which computer, inside the network, that information needs to go to - basically, &quot;and when you see information coming in on Port XYZ, send it ''here''&quot; 
## Incidentally, setting up port forwarding also tells the router where it can stick ''outgoing'' information, too. 

That is port forwarding in a nutshell, and the reason you need to set it up is that most routers (especially if they're configured securely and properly) are not going to just allow random incoming information to get through. 

===More and Better Networking Information===

I was all set to write an elaborate section on networking, when I realized that there is an excellent [http://forums.rptools.net/download/file.php?id=116 FAQ] written by Azhrei at the [http://forums.rptools.net MapTool Forums]. If you are unfamiliar with concepts like Port Forwarding, configuring your router, or how networks work (in general), please read the FAQ. 

If you are familiar with network configuration and managing your home network (especially if you can set up software to act as a server, or have set up port forwarding on your network for other applications), setting up MapTool to act as a server will be old hat: you'll basically need to configure port forwarding or UPnP on your router to permit MapTool network traffic to pass. 

If you need specific information on port forwarding configuration for your network hardware, check out [http://www.portforward.com Portforward.com] for an extensive collection of how-to documents for specific network hardware and specific software packages.

On the other hand, if all that stuff above made no sense to you: read the [http://forums.rptools.net/download/file.php?id=116 Networking FAQ]! All will be revealed!

Now, let's get on with it.

==Starting Up a MapTool Server==

===Assumptions===

From here on out, these instructions assume that you have configured your network to handle MapTool traffic (via port forwarding or UPnP, for example). If not, you'll have to figure out how to do that before it will be possible to start a server that your friends can use.

===The Start Server Dialog===

[[Image:mt-file-menu-startserv.jpg|thumb|Selecting ''Start Server'' from the File menu]]

[[Image:mt-start-server.jpg|thumb|The '''Start Server''' dialog]]

1. Go to '''File &gt; Start Server'''.

2. You will now see the '''Start Server''' dialog. There are a lot of options here.

===Server Options and Settings===

====Configuration Settings====

* '''Username''': this is the name that will appear in chat and in the Connections window; you can set it to be anything you like.
* '''Role''': this drop down box lets you tell MapTool what ''kind'' of user you are: are you the GM (and therefore in possession of Total Cosmic Power over all of the MapTool functions?) or are you a player, who lives at the GM's every whim (or, in other words, only has access to player functions)? Note that a game can have more than 1 GM! 
* '''Port''': A ''very'' important setting, this is where you tell MapTool what port you've configured your router to forward. If you give it the wrong port, MapTool traffic will be unable to enter or leave your network, and you will have no game!
* '''RPTools Alias''': this field allows you to set up an &quot;alias&quot; for your server to appear on the RPTools server registry. It basically lets you tell your players &quot;look for the server named Awesome Server and connect to it,&quot; instead of &quot;connect to the server at IP Address 123.45.678.9&quot;
* '''Passwords''': you can protect access to your server by configuring passwords. Setting a password on the server is optional; however, if you leave it blank, anyone who can find your server can connect to it as a player. There are two password categories:
** '''GM''': the GM password is used to provide someone with full access to the campaign remotely, though there are a small number of features which cannot be done remotely, such as loading a campaign. The GM password is typically used for a secondary GM so that GM duties may be shared, but can also be used in cases where the GM may not be able to get hosting set up properly and has one of his players host the session.
** '''Player''': people connecting to the server in the &quot;Player&quot; role will use this password to connect.

====Ownership, Vision, and Behavior====

* '''Strict Token Ownership''': MapTool uses a concept called &quot;token ownership&quot; to control who can select, move, or look at the [[Macros:Glossary#P|properties]] of a particular token. If you enable ''Strict Token Ownership'', only the ''owner'' of a particular token may perform any actions on it - everyone else is confined to looking at the token.
* '''Players can reveal vision''': MapTool has a vision and fog-of-war system (where you can configure how tokens &quot;see&quot; the map). With this option enabled, players can reveal the area that is &quot;visible&quot; to their token without GM intervention (in other words, an area hidden to the token is covered by Fog of War, and appears opaque on the screen; when you reveal it, the opaque overlay is cleared, and the map underneath becomes visible). Otherwise, the GM must do all reveals. 
* '''Use Individual Views''': in the vision system mentioned above, player tokens can either &quot;share&quot; their vision (''i.e.'', everyone sees what one player character sees) or they can have individualized views.
* '''Restricted Player Impersonation''': This means that players can only impersonate tokens that they have ownership (see above) of
* '''Players Receive Campaign Macros''': MapTool lets you write [[Macros:introduction|macros]], which are basically sequences of text, token, and dice rolling commands used to automate certain activities - basically, a short script that does ''something''. The GM can create &quot;Campaign Macros&quot; which become available to all players if this option is checked. 
* '''Use Tooltip for [] rolls''': Enabling this option makes any dice roll you enclose in square brackets show only the roll result, and display the full roll details if you hover your mouse over the result.

===Testing the Connection===

&lt;s&gt;Before you start your server, it is a good idea to hit the '''Test Connection''' button. This will send a message out to a server at RPTools.net asking that it attempt to connect to your computer - in other words, the RPTools connection testing server will find out if it can see your computer over the network! &lt;/s&gt;

&lt;s&gt;What you want to see is '''Success! I can see your computer!''' If you get that, you can be pretty sure that your server will be visible when you start it up.&lt;/s&gt; 

&lt;s&gt;If you do ''not'' see a message proclaiming a successful connection test, you will need to investigate port forwarding and your network configuration to make sure you have the right ports configured and everything properly arranged.&lt;/s&gt;&lt;sub&gt;This description is deprecated.&lt;/sub&gt;


'''Note:''' The test connection was frequently broken and has so caused lots of trouble. Thus it was removed in b76 (or so). The Start Server Dialog now has a button &quot;Networking Help&quot; that leads you to the Networking FAQ in the forums. This is really the place to go. Read it (yes, read it not skim it!) and follow all steps. If that doesnt help the community will very likely be able to help you out.

For a quick connection test you can use canyouseeme.org[http://canyouseeme.org/]

===Get your Connection Information and Tell Your Friends===

[[Image:mt-file-menu-cinfo.jpg|thumb|Opening ''Connection Information'' from the File menu]]

[[Image:connection-info.jpg|thumb|The '''Connection Information''' dialog]]

Assuming that you had a successful connection test, and you clicked '''OK''' to start the server, you can then check out your ''Connection Information'' to double-check the settings. These settings will need to be passed on to your friends so that they can connect to the server.

1. Go to '''File &gt; Connection Information'''. 

This will display what MapTool currently knows about your computer. Since you haven't started a server quite yet, you'll just see your computers internal and external IP addresses (this is useful info, though, especially if you haven't quite set up port forwarding!).

When a server is started, you will also see the name of the server (if you give it one), and the network port that server traffic will use.

2. Provide this information to your friends: tell them the ''Server Name'' (a.k.a. the RPTools Alias, if you set one), the ''external'' IP address, and the ''port''. They will need to put this into the '''Connect to Server''' dialog when they attempt to log in to your server.

&lt;br style=&quot;clear:both;&quot;/&gt;

==Connecting to a MapTool Server==

The steps leading up to this point walked you through setting up a MapTool server so that people can connect to it. Of course, if you don't have anyone connecting to your server, things are going to get pretty boring pretty quick. These steps are focused on your friends who will be connecting ''to'' the server you just created. 

===Assumptions===

The following information assumes that all of the following are true! Lacking any of these is going to make for a very short trip.

* You have friends
* You have a MapTool server running
* Your friends know the following:
** Either the server's ''Name'' OR the servers ''External Address'' is (or preferably, both!)
** What the appropriate ''password'' is (either GM or Player password)
** What ''Port'' the server is using
* '''VERY IMPORTANT: Your friends are using the same version of MapTool that you are using!'''

===Open the Connect to Server Dialog===

[[Image:mt-connect-to-server.jpg|thumb|The '''Connect to Server''' dialog]]

If the assumptions mentioned above are met, here's what you tell your friends:

1. Go to '''File &gt; Connect to Server''' to see the '''Connect to Server''' dialog.

2. Enter a ''User name''. This can be anything your friends wish. 

3. Enter the password (which you set when you started the server).

4. Choose your ''Role''. Your friends can connect as a GM, or as a Player. Make sure that they pick the right role for the password you're using!

&lt;br style=&quot;clear:both;&quot;/&gt;

===Choose how You will Connect===

The '''Connect to Server''' dialog presents three ways to connect to a running server.

====RPTools.net====

[[Image:mt-connect-registry.jpg|thumb|The RPTools tab in '''Connect to Server''']]

This tab (which is shown by default) lists all of the servers listed at the RPTools.net ''Server Registry.'' When you set up the server, you had the option to give it an ''alias'', which is what appears in this list. The ''Server Registry'' stores the connection information for the server, so your friends can just select the server they want, and hit '''OK'''.

&lt;br style=&quot;clear:both;&quot;/&gt;

====LAN====

[[Image:mt-connect-lan.jpg|thumb|The '''LAN''' tab in '''Connect to Server''']]

This tab will show any servers that are currently running on the ''local'' network. This is for when you want to have a MapTool LAN Party, or when all your friends are inside the same network (like if everyone bringes their laptop to your house for game night). 

&lt;br style=&quot;clear:both;&quot;/&gt;

====Direct====

[[Image:mt-connect-direct.jpg|thumb|The '''Direct''' tab in '''Connect to Server''']]

A direct connection is just that - your friends bypass the friendly RPTools.net tab, and simply type the External Address and port number for the server.

&lt;br style=&quot;clear:both;&quot;/&gt;

===Verifying Connections===

As your friends connect to your MapTool server, you will see notifications in the '''Chat Pane''' that people have connected to your server, which look like:

&lt;font color=&quot;blue&quot;&gt;''JQRandom has connected.''&lt;/font&gt;

You can also check the '''Connections Pane''' to see a list of everyone who is connected to your server. If you do not see the Connections Pane, go to '''Window &gt; Connections''' to have it pop into view.

==Tokens on your Map==

When you're running MapTool by yourself, you've got access to every token and every item on a map, because MapTool assumes that you're the GM (and, therefore, the All-Powerful God of the tiny world represented by the Map). However, when you start hosting a game, MapTool has different roles (mentioned previously) for the different people connecting. The '''GM''' role retains it's all-powerful status, able to select and manipulate anything on the map; however, the '''Player''' role has a much more restricted set of options, able to control only those items that the player has ''ownership'' of. 

Because of that, when you start a server, you will need to make sure that you give your players ownership of the Tokens they are supposed to control! This is a common oversight when starting up a new server - forgetting to set token ownership after your players have connected! 

Token Ownership is explained in more detail in [[Introduction to Tokens]], but for the purposes of this tutorial, once you've started a server and you've got your friends connected as players, do the following for each player connected to the game:

# Double click on the token that player will be controlling as their Player Character (see Note, below).
# Set the token type to PC.
# Go to the '''Ownership''' Tab
# Check the box next to the ''player's'' name, granting them ownership of the token.
# Click '''OK''' to save the changes.

Once you do this, the players will be able to move and edit their own tokens. You can also grant ownership of a token to All Players, if everyone needs to manipulate it.

'''NOTE''': players can have ownership of NPC tokens if you wish (the process is the same, except you don't do Step #2); however, you'll at least need to make sure they own their own player token!

[[Category:MapTool]]
[[Category:Tutorial]]

{{Languages|Introduction to Game Hosting}}{{#customtitle:Introducción a Hospedaje de Juego(inacabado)|Introducción a Hospedaje de Juego(inacabado)}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Tokens/es</title>
    <ns>0</ns>
    <id>1400</id>
    <revision>
      <id>5760</id>
      <parentid>5759</parentid>
      <timestamp>2011-09-26T23:55:44Z</timestamp>
      <contributor>
        <username>Aspid</username>
        <id>274</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18162">{{Languages|Introduction to Tokens}}{{Beginner}}

===La traducción está en proceso===

==Introduction to MapTool Tokens==

As mentioned in the [[Introduction_to_Mapping| Introduction to Mapping]] guide, a [[Macros:Glossary#T|token]] is the MapTool jargon for a visual marker that is placed on a map within the MapTool software. The most intuitive use for tokens is to represent characters in the game - in other words, tokens take the place of miniatures on the virtual tabletop. 

===Assumptions===

This guide assumes that you have read the [[Introduction_to_Mapping|Introduction to Mapping]], and that you know how to:

* Add folders to your Resource Library, and update/add images to those folders so that they appear in your resource library
* Create a map in MapTool
* Place tokens on a map, and move them around
* Change token names, GM names, labels
* Change the token's size
* Change the token's image
* Move tokens from one layer to another

If you don't know how to do these things, please read the Introduction to Mapping guide - otherwise, the stuff below might not make much sense!

Finally, this guide will be written predominantly from the point of view of the GM -- someone who has complete control over all token settings and campaign properties. Players (that is, individuals who join a game in the role of &quot;Player&quot;) are restricted from changing many things in a particular campaign.

===MapTool's Layers===

Although most MapTool users use the term &quot;token&quot; to refer only to images representing characters and creatures on a map, in reality, the word &quot;token&quot; refers to ''any'' image item that is dropped onto a map in MapTool. The way a particular token is handled is dependent on the Map Layer onto which it is placed. These layers are explained below, because they are important in understanding how to work with tokens.

*Items dropped on the '''Token''' layer are what we most commonly consider &quot;tokens&quot; - these represent characters, monsters, NPCs - the people and creatures of the game. 
*Items dropped on the '''Object''' layer are most commonly images representing furniture, chests, and ''things'' in the game world - something that a person can manipulate or use. MapTool still considers them to be tokens, of course (everything is a token to MapTool - it's very singleminded) but for clarity's sake, most users call them ''Objects'' to distinguish them from tokens that represent ''characters''
*Items dropped on the '''Background''' layer are typically things that make up the map - walls, cliffs, dirt, grass. They might be unique, but are most often &quot;stamped&quot; onto the map over and over again, either in a pattern or because you're using several copies of the same image (for instance, using several copies of a wall image to make a complete room). Because of this, many users will call these images ''stamps''. 

====The Hidden Layer====

You'll note that I didn't discuss the '''Hidden''' layer in the above paragraph. That's because the Hidden Layer has a slightly different purpose. 

While the Token, Object, and Background layers have a fairly intuitive relationship in terms of how one might think of the world -- I'm a ''person or creature'', that item over there is an ''object'', and surrounding us is the ''background'' -- the Hidden Layer is the things you ''cannot see''. In MapTool, anything placed on the Hidden Layer is visible only to the GM until he or she decides to move it to one of the other layers.

Generally, you'll want to put characters and objects on this layer - there aren't many reasons to put a background stamp on the hidden layer, although I'm sure you can think of a couple. 

Suffice it to say, when you place a token on a MapTool map, it pays to be aware of which layer you placed it on!

==Creating a New Token==

Creating a token is as simple as dragging an image from the [[Macros:Glossary#R|Resource Library]] onto the Token Layer of a map. But how do you create an image in the first place? There are several options.

===Download an Image===

MapTool's user community has created a wealth of token images that are available for use. Visit the [http://gallery.rptools.net RPTools Gallery] to see the hundreds of token images already out there. 

===Create one Using TokenTool===

Another option is to create your own images using [http://www.rptools.net/index.php?page=tokentool TokenTool], a program built by the makers of MapTool to create token images quickly and easily. To create an image using TokenTool:

1. Download TokenTool and open it by double-clicking on the file with the extension '''.jar''' (this is a Java &quot;JAR file&quot; which will run a java program). 

2. Find an image you like (be cautious about copyright!) and drag it onto the left pane of the TokenTool window (this is the part with the small green ring and a black background). 

3. When the image appears, drag it around with the mouse until the portion you want for your token is inside the green ring. You'll see a preview of what the token will look like in the upper right side of the TokenTool window.
* '''Tip''': You can use the mouse wheel or the zoom buttons to adjust the image's size until it looks just right. 
* '''Tip''': You can change the look and color of the border, the final size of the token, and many other settings by using the drop-down menus on the right-hand side of the TokenTool window.

4. When you get it where you like it, go to '''File &gt; Save Token''', and save the newly created token in a directory that is either already in your Resource Library, or is one you plan to add to your resource library. Note that the file will be saved in PNG format (this is a good thing! it allows for transparency so your token isn't slopping outside the border!). 

5. Go back to MapTool and add or refresh your Resource Library, and there you'll see your new token! Drag it onto a map, and you're good to go. 

===Draw One Yourself===

You can create a token image of your own by using an art program and saving the file in PNG or JPG format, in a directory that is either in your Resource Library, or a directory you plan to add to your Resource Library. PNG format is the recommended format for MapTool tokens because it allows for transparency and, basically, looks the best. 

You can of course combine drawing your own image with using TokenTool to create handsome and neatly formed tokens.

==Editing a Token==

Editing a token means changing any of the token's characteristics, be that its image, its name(s), or its configured settings. Changing token names, image, and size are covered in [[Introduction_to_Mapping|Introduction to Mapping]].  

The following sections deal with the various options, tabs, and drop-down boxes in the '''Edit Token''' Dialog. 

===Token Type===

Tokens have 2 possible types in MapTool: NPC and PC. These will be familiar to players of roleplaying games because they stand for &quot;Player Character&quot; and &quot;Non-Player Character,&quot; and the most common use of this &quot;type&quot; setting is to distinguish between the two groups during actual play. 

In general, tokens belonging to your players should have the type &quot;PC.&quot; Tokens belonging to ''you'' should have the type &quot;NPC&quot;. 

[[Image:Edit-token.jpg|thumb|The '''Edit Token''' dialog]]

'''NOTE''': The ''type'' of a token does not have any bearing on who may manipulate that token or view it's properties - instead, that power is granted to the ''owner'' or ''owners'' of a token. As GM, you are considered to have ownership of all tokens on all maps in the campaign. See [[Introduction_to_Tokens#Ownership|Ownership]], below, for more details. 

To change the token type:

1. Double-click the token to open the '''Edit Token''' dialog.

2. In the upper-right corner, use the drop-down box to select PC or NPC. 

3. Click '''OK'''.

===Notes===

[[Image:Notes-tab.jpg|thumb|The Notes Tab of the '''Edit Token''' dialog]]

The Notes tab presents two areas where you can enter notes about the token. These fields support basic HTML tags, so you can format the note. 

The upper text field is there for notes that are available and visible to anyone who wishes to see. The lower field (titled '''GM Notes''') is for notes that only the GM(s) should see. 

Notes are a little tricky - MapTool has a way to display them in a nifty popup, but you have to do a couple things first. 

# Enter information in the notes field of a token.
# Place that token on the '''Object Layer''' or the '''Background Layer''' by right-clicking and selecting '''Change To &gt;'''
# Switch back to the '''Token Layer'''

Now, you'll notice that when you put your mouse cursor over the token, the cursor will change to a hand. If you double-click, instead of the normal '''Edit Token''' dialog, you'll see a small popup in the lower-left corner of the map, which will display the notes.

The major lesson is that -- while Token notes can be accessed in many ways -- one of the more common uses is to place notes and reminders on tokens and objects that will be on either the Object or Background layer.

===Properties===

[[Image:Properties-tab.jpg|thumb|The '''Properties''' tab]]

'''Properties''' are a topic that deserve their own guide, as they are '''heavily''' involved in the creation and use of token macros. This guide won't go into excruciating detail about properties, but will instead deal with only the most basic information about them. 

Every token dropped onto a map in MapTool automatically gains a set of '''properties''', which can basically be thought of as stats, characteristics, or traits (you know, the numbers on a character sheet). In effect, each token is carrying around it's own built-in character sheet. In programming terms, properties can thought of as variables that can be set to different values, and then used later by macros. 

* '''Note: although people frequently refer to &quot;token properties,&quot; the properties that are visible in the Edit Token dialog are only those properties that are set up for the specific campaign.

When you click on the '''Macros''' tab in the '''Edit Token''' dialog, you'll see a list of the properties that are currently set up for the '''Campaign''' you're using. If you've opened up a new campaign (or just started MapTool), you will see the ''default property set'', which looks like:

* Strength
* Dexterity
* Constitution
* Intelligence
* Wisdom
* Charisma
* HP
* AC
* Defense
* Movement
* Elevation
* Description

For the rest of this guide, examples using properties will use the list above. 

The property list you see is in a table (or spreadsheet) layout, with the property name on the left, and a blank space on the right. In the space on the right, you can enter the value you want to assign to that property. You can enter text, numbers, or in more advanced cases, macro statements as the value for a particular property.

Once you do that, and hit '''OK''', that property '''on that token''' will be assigned the value you enter. Later on, if you write macros, you can refer to those properties to make calculations or roll dice.

Since properties are such a major topic on their own, check out the [[Introduction to Properties]] guide for detailed information.

===State===

[[Image:State-tab.jpg|thumb|The '''State''' tab]]

[[Image:State-example.jpg|thumb|This token has a state applied - the small red image is the &quot;state image&quot; superimposed on the token image]]

'''States''' are visual markers that can be applied to a token (typically appearing as an image superimposed on the token) that can be used for any sort of reminder that you might need in a game. For instance, if you want a marker that a particular NPC token is &quot;dead&quot;, you can set the state &quot;Dead&quot; on the token, and whatever image you've selected to indicate &quot;Dead&quot; will appear on the token. 

The default states that load when MapTool starts are:

* Dead
* Disabled
* Hidden
* Prone
* Incapacitated
* Other
* Other 2
* Other 3
* Other 4

&lt;br style=&quot;clear:both;&quot;/&gt;

====Health Bar====

[[Image:Bar-example.jpg|thumb|This token has a ''bar'' applied, superimposed on the token. The bar can be set to reflect different quantities via macros]]

The State tab also contains the setting information for the '''bars''' that the token displays or can display. These bars are shown superimposed over the token (at the top, bottom, or sides), and can be used to track things like health (or ammunition, magic, or anything that can be lost or expended).

&lt;br style=&quot;clear:both;&quot;/&gt;

===Macros===

As of MapTool version 1.3.b54, the Macros tab is no longer enabled. This tab originally held the token macros, but as macro capabilities became more advanced, this tab became less and less useful, until finally, it was removed. It is present in earlier versions, though, if you want to take a look.

===Speech===

[[Image:Speech-tab.jpg|thumb|The '''Speech''' tab]]

This tab contains the token's '''speech''' list. You can use this tab to configure sayings, aphorisms, battlecries, and anything you might want your token to &quot;say&quot; in chat. There are two fields for each speech item: 

* '''ID''': This field is the short identifier you assign to a speech item; the ID is used in chat to refer to the full text of the speech. It can be alphanumeric, so you could use number, or letters, or a mix. It cannot have any spaces in it, though!
* '''Speech Text''': This is the actual text that will be displayed in the chat window. 

To use a speech item, do the following:

# Select the token you want to have &quot;say&quot; something
# In the chat window, enter '''/tsay (ID)''', where &quot;(ID)&quot; is replaced by the actual ID of the speech item. So if you wanted to howl your battlecry - which you've cleverly given the ID &quot;bcry&quot; - you would select your token, and enter '''/tsay cry''' in the chat window.

===Ownership===

[[Image:Ownership-tab.jpg|thumb|The '''Ownership''' tab]]

Token '''ownership''' determines who among the players [[Introduction_to_Game_Hosting|connected to the game]] is allowed to select, move, or view the details of a given token. 

If you are the owner of a token, you may select it, double-click on it to open and edit it, and move it around on the map. If you are ''not'' an owner of a particular token, you are limited to looking at it on the map -- you will not be able to select, move, or view its properties and configuration.

To set an owner, simply check the box next to that individual's name. The names shown in the box will be the names of each player (including the GM) connected to the game (so if you're looking at the Ownership tab when nobody else is connected, you'll see only your own name). If you want to give ownership to all players, just check '''All Players'''.

(Note that the selection of options when the server is started must include '''Strict token ownership''' if you want the functionality described above.  See [[Introduction to Game Hosting#Starting Up a MapTool Server]] for details on server options.)

===Config===

[[Image:Config-tab.jpg|thumb|The '''Config''' tab]]

This tab contains a number of settings that affect how the token looks, moves, and interacts with MapTool. 

====Shape====

Tokens can have three shapes in MapTool:

* '''Top Down''': top-down tokens are usually hand-drawn or rendered images of creatures, objects, and people as if you were looking down from an aerial view. Setting the token shape to '''Top-down''' tells MapTool to allow the token image to rotate when you right-click on the token and select '''Change Facing''' (that way, your top-down token can turn to face its enemies!)
* '''Circle''': circular tokens are like pogs or poker chips - round images that represent the creature or character. Because they are markers and not meant to be realistic &quot;top-down&quot; views of a creature, when you select Change Facing, instead of rotating the image - which would look bad - a small yellow arrow appears to indicate facing.
* '''Square''': square tokens work like circular tokens, except that they are...wait for it...square. 

====Size====

A token can be given a number of sizes, which scale the token image larger or smaller. 

The available size depend on the map grid used when [[Introduction_to_Mapping|setting up a map]]. If you set a map with a grid (hexagonal or square), you will have the ''Free Size'' option (which lets you scale the token as you need), or a number of sizes from &quot;Fine&quot; to &quot;Colossal&quot; (if you play D&amp;D, you'll probably recognize them). 

If you do not set a grid when you create the map, you will be able to scale the token along a number scale, from -11 to +20. 

====Properties====

This field allows you to indicate which of the available property sets in the campaign this token has. The designer of a campaign can set up different sets of properties to be used by different tokens (for instance, a set of properties for player character tokens, and a different set of properties for non-player character tokens). This field lets you pick which property set to use.

====Has Sight====

This field allows you to indicate what kind of [[Introduction to Lights and Sights|sight]] the token possesses. '''Sight''' settings allow the gamemaster to simulate darkness, light, hidden objects, and hiding enemies.

====Snap to Grid====

This checkbox simply indicates that the token snaps to the existing grid when it is moved. If unchecked, the token does not pay any heed to the grid when it is dragged around on the map.

====Visible to Players====

This checkbox lets you designate a particular token as invisible to players - when checked, no player connected to the game will be able to see the token or interact with it in any way.

====Layout, Portrait, and Handout====

There are three fields dealing with the token's visual appearance:

* '''Layout''': this shows how the token will look on the map
* '''Portrait''': this is a separate image that will appear in the lower left corner of the map screen when you hover over the token
* '''Handout''': this lets you designate an image to appear when you right-click on the token and select '''Show Handout'''

[[Category:MapTool]]
[[Category:Tutorial]]

{{Languages|Introduction to Tokens}}{{#customtitle:Introducción a tokens|Introducción a tokens}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Introduction to Properties/es</title>
    <ns>0</ns>
    <id>1401</id>
    <revision>
      <id>5753</id>
      <parentid>5749</parentid>
      <timestamp>2011-09-26T23:51:58Z</timestamp>
      <contributor>
        <username>Aspid</username>
        <id>274</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19879">{{Languages|Introduction to Properties}}{{Beginner}}

===La traducción está en proceso===

==Campaign Properties==

One of the most useful features in MapTool is the capability of [[Introduction_to_Tokens|tokens]] to carry around a set of '''Properties''', attached to that token, that can be manipulated by macros and can be used to create quick displays of information. Basically, token properties are like built-in character sheets.

However, because they are so useful, the MapTool developers have created many different ways to use them and manipulate them. This guide will address creating Campaign Property Sets, setting them to have default values, and using them to manipulate the Statsheet.

==The Sample Ruleset, or MTRPG==

In order to have useful examples as we move through this tutorial, several MapTool users and contributors developed the [[Sample Ruleset]] -- a simple roleplaying game system developed specifically to illustrate parts of MapTool. For this guide, we're going to call these rules the MapTool RPG - or MTRPG for short, and what we're going to do is create a new Campaign File and set up some ''campaign properties'' that correspond to attributes of the MTRPG.

==The Campaign Properties Window==

[[Image:Edit-campaign-props.png|thumb|The Edit Menu, showing the Campaign Properties option]]

To get started with Campaign Properties, the first thing you'll need to do is go to '''Edit &gt; Campaign Properties''', and open the Campaign Properties window. In this window, you'll see several tabs and a whole lot of information.

When you open up the '''Campaign Properties''' window, you'll see it has six tabs. Briefly, they are:

* '''Token Properties''': this houses all the property sets that a token in the current campaign may have
* '''Repositories''': this is where you can designate an online &quot;[[Introduction to Campaign Repositories |repository]]&quot; to hold campaign files, especially images, to improve load times and speed when you host or play an online game
* '''Sight''': this tab is where you configure the settings for vision in the current campaign
* '''Light''': this tab is where you configure light sources and auras for the current campaign
* '''States''': this tab lets you configure [[Token:state|token states]] for the current campaign
* '''Bars''': this is where you configure [[bar.name|token bars]] for the current campaign

This guide will only address the first tab, '''Token Properties'''.

==The Properties Tab==

[[Image:Camp-props.png|thumb|The '''Properties Tab''' in Campaign Properties]]

The first visible tab is the properties tab. This appears relatively uncomplicated, but it's home to some really nifty potential. There are 3 text fields in this tab:

* Name: this is the name of the property set you're currently viewing. When you open the campaign properties window, this is blank.
* Type: this column on the left side is not editable, but it will list the names of all the available property sets in the current campaign. If you have no campaign loaded, the only entry will be '''Basic'''
* A large text area where you enter the properties for the current campaign. It will be blank when first loaded, but if you select a property set from the '''Token Type''' list on the left side, you will see the names and default values of the properties in that set.

===Type===

In this field, you'll see the names of the different &quot;Property Types&quot; (you can think of them as property ''sets'') that are configured in the current campaign. If you have no campaign loaded, the default property set will be called ''Basic''. The '''Type''' field is not directly editable by the user.

===Name===

This is a simple text field where you can enter the name you want to give the property set. This name will, when you update the set, appear in the '''Type''' list to the left, and it becomes the name for that particular set of properties. Names can be anything you like; many users create sets called &quot;NPC&quot; for games where NPC stats and traits differ from those of player characters, for example.

===Properties===

This is where it gets funky. In this text area, you can create any and every property you can think of, which can reflect every possible number or statistic an RPG character might have (and many properties that they don't have -- lots of users create properties that are useful for when they write macros, but wouldn't appear on any character sheet!).

==Creating Properties==

===Properties with No Default Value===

[[Image:Basic-default-props.png|thumb|The default set of properties in the Basic property set]]

If you look at [[Sample_Ruleset#Primary_Attribute|MTRPG's Primary Attributes]], you will see that there are four separate attributes that are the basic attributes of a character: ''Strength'', ''Dexterity'', ''Intelligence'', and ''Endurance''. We're going to get rid of the default properties, and put new ones in their place. 

1. Go to '''Edit &gt; Campaign Properties'''. You'll see in the left side, under ''Token Type'', that the only entry is &quot;Basic.&quot; We're going to create a new property set.

2. In the '''Token Type''' list on the left, select ''Basic''. When you do this, you'll see a whole bunch of properties with all kinds of symbols like @, #, and so forth. 

3. In the text area with all the properties, use your mouse to highlight them all, and hit Delete on your keyboard. Go ahead - don't be shy!

4. Leave the '''Name''' field alone - MapTools must always have a ''Basic'' property set, so you can't change that name.

[[Image:Default-props-replaced.png|thumb|The default properties have been deleted, and replaced by the four Primary Attributes of MTRPG]]

5. In the text area below the '''Name''' field, enter the name of each of the four Primary Attributes in MTRPG, like so:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Strength&lt;br/&gt;
Dexterity&lt;br/&gt;
Intelligence&lt;br/&gt;
Endurance&lt;/tt&gt;&lt;/blockquote&gt;

When done, your properties window should look like the screenshot on the right. 

6. Once you've finished entering the properties you want, click the button labeled '''Update'''. Don't panic! The properties will disappear, but if you select the ''Basic'' list from the left, your properties will reappear in the main text area.

7. Click '''OK''' to confirm all of your changes and close the '''Campaign Properties''' window. 

8. Go to '''File &gt; Save Campaign As''' and save your campaign as '''MTRPG.cmpgn'''. You've now created a new campaign file, with a new set of campaign properties. 

When you create properties like this -- just listing the values one after the other -- and then open a token, you will see that these properties have no value. That does not mean that they are equal to zero, or equal to a blank line - they literally have ''no value''. This doesn't mean much for most purposes, but it is an important distinction in macro writing terms (in programming, there's a big difference between a blank string, and an actually ''empty'' variable!). 

Once properties are updated, all of the tokens on the map will be updated with the new properties, and any new tokens you drop on the map will &quot;inherit&quot; the properties you set up.

'''NOTE''': Property names cannot have spaces in them - so if you have a property called &quot;Hit Points&quot;, you would need to enter it as ''HitPoints''.

===Creating Properties with Default Values===

[[Image:Newprops-defvalues.png|thumb|The MTRPG properties now have default values]]

Now, in MTRPG, the minimum value an attribute can have is 1. So, it makes sense to set the ''default value'' of these properties to 1 (that way, every new token will at least have the minimum value an attribute can have). To do this:

1. Open the Campaign Properties window.

2. Select the ''Basic'' property set.

3. In the Basic Properties set, edit your properties so they now read (see the image, as well):

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
Strength:1&lt;br&gt;
Dexterity:1&lt;br&gt;
Intelligence:1&lt;br&gt;
Endurance:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

4. Click '''Update'''.

By placing a colon at the end of the name of each attribute, and putting the number 1 after the colon, you have instructed MapTool that the default value for those properties is 1 (in other words, whatever value you put after the colon becomes the ''default value'' for that property). You'll note that at the bottom of the Token Properties tab there is a key describing the various options you can set on a property.

Now, if you drag a new token onto the map and look at its properties (double-click on the token and go to the Properties Tab in the '''Edit Token''' dialog), you will see that the new token has the default values. 

By the way: don't worry about any tokens you may have already set the property values on - setting up or changing the default values will ''not'' override the properties you've already set. MapTool is smart enough to handle that.

===Displaying Properties in the Statsheet===

[[Image:Statsheet-props.png|thumb|The Statsheet showing the campaign properties you've set up. You'll see how to make these appear in this section]]

MapTool has a neat feature called the '''Statsheet''', which is briefly mentioned in the [[Introduction to Tokens]] - basically, it is an automatic popup that appears in the lower left corner of the map, when you hover over a token. 

You may be saying, &quot;Wait...when I hover over my token, there's no statsheet! Where is it?&quot; The reason you don't see it yet is that the Statsheet is governed by the Campaign Properties - it displays the token's properties (along with a larger version of the token's image) - but ''only'' when a couple requirements are met:

* The properties are set up to display on the statsheet; and
* The properties that are displayed actually have a value

====Setting Properties to Display====

[[Image:Newprops-visible.png|thumb|Note the asterisk in front of each property name, enabling that property to appear on the Statsheet]]

If you look at the bottom of the '''Token Properties''' tab in the '''Campaign Properties''' dialog, you'll see a key showing how to set up a property to display in the Statsheet. There are three display options, each of which is indicated by putting a symbol in front of the property name:

# '''&lt;nowiki&gt;*&lt;/nowiki&gt;''': an asterisk means &quot;show this property on the statsheet&quot;
# '''@''': means &quot;only show this property to the owner of the token (and the GM)&quot;
# '''&lt;nowiki&gt;#&lt;/nowiki&gt;''': means &quot;only show this property to the GM (not even the token owner can see it)&quot;

The asterisk is '''required''' for any stat to display at all - if you don't have an asterisk first, it won't show no matter what else you put on there. The @ and # symbols, on the other hand, are optional. 

So, for our new game, we're going to set all of the properties to be visible to everyone (by just using a star). To do this, open up your properties, and edit them to look like this:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

Now, when you hover over a token, you'll see the Statsheet pop up (see the screenshot, above) with the values in the Strength, Dexterity, Intelligence, and Endurance properties. Also, since even brand new tokens have a default value, the Statsheet will appear for all tokens.

====Short Names====

[[Image:Newprops-shortnames.png|thumb|The campaign properties now have Short Names established for each]]

Sometimes, property names can get pretty long (or look unfriendly - no spaces, and all that). MapTool lets you put a ''Short Name'' in for each property. To do that, you just enter the short name in parentheses after the property name, like so:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength(Str):1&lt;br&gt;
 *Dexterity(Dex):1&lt;br&gt;
 *Intelligence(Int):1&lt;br&gt;
 *Endurance(End):1&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

These short names are displayed in the Statsheet instead of the full name of the property

'''Short Names are for display purposes only - when referencing properties in macros, you must use the full property name.'''

===Creating Derived Properties===

[[Image:Newprops-derived.png|thumb|The properties ''HitPoints'' and ''Movement'' now have macro code instructing MapTool to derive them from other, existing properties]]

[[Image:Statsheet-with-allnewprops.png|thumb|The Statsheet showing all of the properties, including the derived ones]]

Okay, now let's do something pretty cool. In a lot of roleplaying games, there are character attributes that are derived from other stats - for instance, in the ''Savage Worlds'' rules, your &quot;Parry&quot; stat is based on your ''Fighting'' ability; likewise, in Dungeons &amp; Dragons, your &quot;Hit Points&quot; are derived partly from your &quot;Constitution&quot; score. 

Now, you could create these other derived attributes as separate properties and manually enter the values in when you make a new token - but how about we allow MapTool to calculate these derived values? That's right - MapTool's campaign properties can not only be numbers and text, but also calculations and equations based on other properties that the token has. 

In MTRPG, there are three ''derived'' stats: Hit Points, Armor, and Movement. These stats have the short names &quot;HP&quot;, &quot;AR,&quot; and &quot;MV.&quot; For this example, we're going to set up ''Hit Points'' and ''Movement'' to be calculated from existing properties. We'll leave Armor until later (it takes a bit more complex a calculation to figure out the armor value, and we're taking it slow). 

First, we need to add properties for these three derived values:

1. Open up the Basic property set. 

2. Beneath ''Endurance'', enter the following:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *HitPoints(HP)&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV)&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

You'll notice at this point, we've set no default values. Don't hit '''Update''' just yet - let's enter some macro code to create a derived value.

We can see from the [[Sample Ruleset|MTRPG]] rules that ''Hit Points'' is equal to the value of ''Endurance'' multiplied by 6. Replicating this calculation in the campaign properties is very simple. Edit the ''Hit Points'' property to read:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *HitPoints(HP):{Endurance * 6}&lt;/tt&gt;
&lt;/blockquote&gt;

What we've done here is enter a default value for the property (remember, default values are whatever comes after the colon), and used some [[Introduction to Macro Writing|macro code]] to instruct MapTool to perform a calculation in order to find the value for the properties. Two thing are happening here:

# We've enclosed the calculations in { }, which warns MapTool that the text enclosed inside the brackets is to be handled like a macro, and not just plain text
# Inside the brackets, we've said, &quot;Find the value of the ''Endurance'' property, multiply it by 6, and make that result the value of the ''Hit Points'' property&quot;

Now, to handle the ''Movement'' attribute, our job is even simpler: we need to instruct MapTool to get the value of the ''Dexterity'' property, and assign that same value to the ''Movement'' property. To do so, edit the Movement property to read:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Movement(MV):{Dexterity}&lt;/tt&gt;
&lt;/blockquote&gt;

When you are finished, your full property set should look like:

&lt;blockquote style=&quot;background-color:lightgray; width:30%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;
 *HitPoints(HP):{Endurance * 6}&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV):{Dexterity}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

And when you hover your mouse over a token, the Statsheet should look like the screenshot to the right. Remember, even though we've said that ''Armor'' should be displayed on the statsheet, the statsheet only shows properties that have a value - ''Armor'' is still empty, so it won't show up until you give it a value.

==Saving Your Campaign==

At this point, you've created a bunch of campaign properties, placed a token on the map, and messed around with manipulation of the properties you made. You should probably save your work in a [Campaign] file. This will save the tokens, properties you created, and all the information you put into the campaign so far. 

Also, this will let you work on the campaign further, trying tricks from the other MapTool tutorials.

To save your campaign:

# Go to '''File -&gt; Save Campaign As...'''
# In the dialog, enter a file name. Something like '''MTRPG.cmpgn''' is good!
# Click '''OK'''

Your campaign will now be saved, and you can open it up whenever you feel like it, and work on it some more!

Please note that campaigns saved in one version of MapTool will not open properly in an ''older'' version of MapTool; however most campaign files created in an older version can be opened in the newest version (this isn't guaranteed, though...MapTool is evolving at all times!)

==Some Technical Details==

A couple times in this guide and in other guides the token properties have been described as &quot;those properties that are ''visible''&quot; in this campaign, or the properties set up &quot;''for this campaign''.&quot; There's a reason for phrasing it like this. 

See, a token - if you cut one open and looked at its inner workings - is an XML file that contains a ''ton'' of information. It has information about its image, its size, its vision, light, and shape, and - of course - its properties. What's important to understand here is that the token will remember not only the properties from the MTRPG, but if it was ever saved as an '''.rptok''' file or brought in from another campaign file, it will remember the properties from that campaign too. They won't be visible, but they're stored in the token even so. 

So, in reality, a set of Campaign Properties really indicates those properties that:

* You can see if you open up a token by double-clicking on it, and
* You can directly edit by clicking in the cell next to them

This may sound like a recipe for disaster - what if you set up a property that was already set up but is hidden? Fortunately, MapTool will not, when running a macro, attempt to access any hidden properties unless you ''specifically'' instruct it to do so, using two special macro functions. So rest assured, you cannot accidentally access a property that's not set up in the Campaign Properties.

In summary, if a Property Type (such as the default ''Basic'' property type) has a property named '''HP''', it will be stored in the token under the XML name '''HP'''.  If another property type (such as a user-defined ''Pathfinder'' property type) also has a property named '''HP''', they will both be referencing the same data on the token.  Modifying the value of '''HP''' when the token is ''Basic'' and then changing the token ''Pathfinder'' will show the same value for '''HP'''.

==Moving On from Here==

MapTool supports very elaborate properties and derived properties, with a number of math functions and operations. A couple of the most common ones you might want to use are (the examples are not necessarily part of MTRPG; they're just examples):

* '''Basic math operators''': addition (+), subtraction (-), multiplication (*), and division (/)
** '''Example''': &lt;tt&gt;HitPoints: {Endurance * 6}&lt;/tt&gt;
* '''Rounding''': there are some ''functions'' to let you round numbers when you divide
** '''Floor''': the floor() function rounds ''down''. '''Example''': &lt;tt&gt;HitPoints:{floor(Constitution / 2)}&lt;/tt&gt; would divide Constitution by two, and round down
** '''Ceiling''': the ceil() function works like floor(), but rounds up. '''Example''': &lt;tt&gt;HitPoints:{ceil(Constitution/2)}&lt;/tt&gt;

[[Category:MapTool]]
[[Category:Tutorial]]

{{Languages|Introduction to Properties}}{{#customtitle:Inroducción a las propiedades(inacabado)|Inroducción a las propiedades(inacabado)}}</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Category:Event</title>
    <ns>14</ns>
    <id>1402</id>
    <revision>
      <id>5871</id>
      <parentid>5787</parentid>
      <timestamp>2012-02-13T12:35:49Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>This is a stub; typographical tweaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="539">{{stub}}
Events are ways to execute macros without direct user input. 

There are three kinds of events:

* '''Frame based events:''' these require a frame to be opened and are specified in the HTML header of that frame ([[onChangeSelection]], [[onChangeImpersonated]], [[onChangeToken]]).
* '''Real events:''' these are executed automatically ([[onCampaignLoad]], [[onTokenMove]], [[onMultipleTokensMove]]).
* '''Fake events:''' these are cunning workarounds to add events by macro that otherwise wouldn't be there ([[onMouseOverEvent]]).</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>onTokenMove</title>
    <ns>0</ns>
    <id>1403</id>
    <revision>
      <id>5876</id>
      <parentid>5769</parentid>
      <timestamp>2012-02-15T10:37:31Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>This is a stub; typographical tweaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="393">{{stub}}
This event is triggered whenever a token is moved. 

As a &quot;real&quot; macro event it is automatically called whenever a token is moved. To set this up you have to create a lib:token and place a macro on it called {{code|&quot;onTokensMove&quot;}}&quot;. 

'''Note:''' in a campaign should only be '''&lt;u&gt;one&lt;/u&gt;''' onTokenMove-macro.

For more information see [[Guide to onTokenMove]].

[[Category:Event]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>onMultipleTokensMove</title>
    <ns>0</ns>
    <id>1404</id>
    <revision>
      <id>5875</id>
      <parentid>5770</parentid>
      <timestamp>2012-02-15T09:35:12Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>This is a stub; typographical tweaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="433">{{stub}}
This event is triggered whenever multiple tokenss are moved at once. 

As a &quot;real&quot; macro event it is automatically called whenever multiple tokens are moved. To set this up you have to create a lib:token and place a macro on it called {{code|&quot;onMultipleTokensMove&quot;}}. 

'''Note:''' in a campaign there should only be &lt;u&gt;'''one'''&lt;/u&gt; onTokenMove-macro.

For more information see [[Guide to onTokenMove]].

[[Category:Event]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>onChangeSelection</title>
    <ns>0</ns>
    <id>1405</id>
    <revision>
      <id>5872</id>
      <parentid>5771</parentid>
      <timestamp>2012-02-13T13:09:27Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <comment>Clarifying usage and linking to Forms tutorial</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="582">This event is triggered whenever the user selects a token.

As a frame-based event, a frame containing the event code has to be opened.

== Set up ==
Create a frame that has this special html tag in it:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;link rel='onChangeSelection' type='macro' href='macroLink'&gt;
&lt;/source&gt;

Replace {{code|macroLink}} by an actual macroLinkText-call to a macro of your choice (the returned value of {{func|macroLinkText}}). A common practice is to call the frame opening macro itself to actualize the content.
== See Also ==
[[Forms tutorial#Events]]
[[Category:Event]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>onMouseOverEvent</title>
    <ns>0</ns>
    <id>1406</id>
    <revision>
      <id>5889</id>
      <parentid>5874</parentid>
      <timestamp>2012-03-27T10:27:31Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1424">'''This is a FAKE event'''. You will need to create a macro and turn on some settings in Maptool to emulate this.

This event can be simulated by turning on ''&quot;Show stat sheet on mouse over&quot;'' in the [[MapTool Preferences#Tokens|MapTool Preferences]]:
    menu--&gt; edit --&gt; preferences --&gt; Interactions --&gt; 'Tokens' box: at the bottom --&gt; check the checkbox
And then creating a macro as a [[Introduction to Properties|campaign property]] e.g.:
    *onMouseOverOnceVar:[macro(&quot;onMouseOver@lib:onMouseOver&quot;):currentToken()]
If you create a lib token {{code|lib:onMouseOver}} with the (self created) macro {{code|onMouseOver()}} then this macro will be called EVERY time you hover your mouse over a token. 

Note that this is extremely tricky and can result in system crashes or lock-ups if done incorrectly. The point is that the macro is called continuously when you hover over the token, so you have to take that into account when creating the macro.

You can download a drop-in here [http://forums.rptools.net/viewtopic.php?f=46&amp;t=18542] (if the link directs you to the 'forbidden' page then right mouse click on link and copy link location and paste that in the browser) that shows two methods that use this event. One method will run only once, this can be used e.g. to setup a token after you dragged it onto the map. The other method will run every time you hover over a token (but not continuously)


[[Category:Event]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>onMouseOver</title>
    <ns>0</ns>
    <id>1407</id>
    <redirect title="onMouseOverEvent" />
    <revision>
      <id>5794</id>
      <timestamp>2011-10-14T13:16:04Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <comment>#REDIRECT [[onMouseOverEvent]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[onMouseOverEvent]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setTokenDrawOrder</title>
    <ns>0</ns>
    <id>1408</id>
    <revision>
      <id>5841</id>
      <timestamp>2011-12-14T22:58:01Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <comment>New page: {{stub}} {{MacroFunction |name=setTokenDrawOrder |version=1.3b51 |description= Sets the draw order of a token.  |usage= &lt;source lang=&quot;mtmacro&quot; line&gt; setTokenDrawOrder(z) &lt;/source&gt; &lt;source ...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="443">{{stub}}
{{MacroFunction
|name=setTokenDrawOrder
|version=1.3b51
|description=
Sets the draw order of a token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenDrawOrder(z)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenDrawOrder(z, id)
&lt;/source&gt;
'''Parameters'''
* {{code|z}} - The Z coordinate to set the draw order to.
* {{code|id}} - The id of the token to set the draw order of, defaults to the current token.

}}
[[Category:Token Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Advanced Example Tooltip.jpg</title>
    <ns>6</ns>
    <id>1409</id>
    <revision>
      <id>5898</id>
      <timestamp>2012-06-04T08:33:30Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Debugging Tutorial</title>
    <ns>0</ns>
    <id>1410</id>
    <revision>
      <id>6368</id>
      <parentid>6367</parentid>
      <timestamp>2015-07-21T13:50:47Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <comment>/* The log file */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22170">[[Category:Tutorial]]

{{Advanced}}

= Debug Methods For Maptool Scripting =

''A tutorial to squash little critters from your MT code.''

== What is this about? ==

I've been working with MT for over 2 years now and I can still remember the initial struggle I had due to the lack of any debugger. As it turns out there are quite a few methods to debug your code but unfortunately they're not very obvious to find. So here is a short summary of available tools.

I've marked this article as 'advanced' as it does assume that you know the basics of MT script, like [[Library Token]], [[onCampaignLoad]] and [[defineFunction|User defined functions]].

== Notepad++ ==
The most basic form of debugging is using an editor that uses syntax highlights for your code. Np++ can help with that, especially in combination with [http://forums.rptools.net/viewtopic.php?f=8&amp;t=16770 rpedit] created by Aliasmask. You can find the install for np++ and syntax highlighting  (also by AM)[http://forums.rptools.net/viewtopic.php?f=8&amp;t=13690 here]. Once you've done that go to: Settings -&gt; Preferences -&gt; New Document/Default Directory to automatically convert ANSI files to UTF-8 without BOM on open (so both the radiobutton and the checkbox). This helps when copy pasting code straight from a website into np, sometimes ansi character creep in there with which MT cannot work giving errors like 'unknown character 0x0A'. 

== Pause ==
The most basic and I think most used method is the 'Pause' method as developed by zEal. The only way in MT to interrupt the flow of the code is with the use of {{func|input}}. zEal created some clever code around {{func|input}} to use for debugging. His full contribution can be found here: [http://forums.rptools.net/viewtopic.php?p=110935#p110935]. Its working is simple as shown in this example:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [h:strength = 5]
  [h:toughness = 10]
  [h:pause(&quot;strength&quot;, &quot;toughness&quot;)]
  [r:&quot;This text you'll see AFTER the pause&quot;]
&lt;/source&gt;
The running code will stop after the toughness=10 line, show the two variables both name and value and after you've clicked ok the code will continue. It is possible to just run:
&lt;source line lang=&quot;mtmacro&quot;&gt;
 [h: pause()]
&lt;/source&gt;
in several places in your code so you can check where it crashes. 

In order for pause to work in your campaign you will need a library token with an [[onCampaignLoad]] macro containing the following line:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [ defineFunction(&quot;pause&quot;, &quot;pause@this&quot;, 1, 0 ) ] 
&lt;/source&gt;
and you will also need a macro called {{code|pause}} on the same library token containing the following code:
&lt;source line lang=&quot;mtmacro&quot;&gt;
    [ toolkit.DebugVariableCount = argCount() ]
    [ toolkit.DebugInputParameter = &quot;.|&lt;html&gt;&quot; +
        &quot;&lt;table cellspacing='2' cellpadding='0' style='background-color:#595751'&gt;&quot; +
        &quot;&lt;tr&gt;&lt;td&gt;&quot; +
        &quot;&lt;table width='300px' cellspacing='0' cellpadding='2' style='background-color:#FAF9F5;'&gt;&quot; +
        &quot;%{toolkit.DebugVariableRows}&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/html&gt;&quot; +
        &quot;|Debugger|LABEL|SPAN=TRUE&quot;
    ]
    [ toolkit.DebugVariableRow = &quot;&lt;tr %{toolkit.DebugVariableRowStyle}&gt;&lt;td&gt;&quot; +
        &quot;&lt;b&gt;%{toolkit.DebugVariableName}&lt;/b&gt;&lt;/td&gt;&lt;td&gt;%{toolkit.DebugVariableContent}&quot; +
        &quot;&lt;/td&gt;&lt;/tr&gt;&quot;
    ]
    [ toolkit.DebugVariableRows = &quot;&lt;tr style='background-color:#E0DDD5; font-size:1.1em;'&gt;&lt;td&gt;&lt;b&gt;Variable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Value&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&quot; ]
    [ count( toolkit.DebugVariableCount ), code:
    {
        [ toolkit.DebugVariableRowStyle = &quot;&quot; ]
        [ toolkit.DebugVariableName = arg( roll.count ) ]
        [ toolkit.DebugVariableContent = eval( arg( roll.count ) ) ]
        [ if( floor( roll.count/2 ) == roll.count/2 ), code:
        {
            [ toolkit.DebugVariableRowStyle = &quot;style='background-color:#EDECE8;'&quot; ]
        } ]
        [ toolkit.DebugVariableRows = toolkit.DebugVariableRows +
            strformat( toolkit.DebugVariableRow )
        ]
    } ]
    [ if( toolkit.DebugVariableCount == 0 ), code:
    {
        [ toolkit.DebugVariableRows = &quot;&lt;tr&gt;&lt;td style='font-size: 1.4em' align='center'&gt;&lt;b&gt;Pause&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&quot; ]
    } ]

    [ toolkit.DebugBreak = input( strformat( toolkit.DebugInputParameter ) )]
    [ abort( toolkit.DebugBreak ) ]
&lt;/source&gt;

You can also find this code after the above link to zEal's post. 

'''Tip:''' if you want to copy-paste the above code or the code from the post, then FIRST paste it into a simple text editor and copy it from there and THEN paste it into the MT macro. This prevents from unintentional copying e.g. linefeeds (0x0A). Even better is using np++ in UTF-8 setting (see header here above).

=== Where pause goes wrong ===
A couple of useful things to know when you start using {{code|pause()}}. 
* if you use it at the top of your macro to e.g. check the values of the passed on arguments like this:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [tmp = macro.args]
  [pause(&quot;tmp&quot;)]
  [var1 = arg(0)]
  [var2 = arg(1)]
&lt;/source&gt;
then {{code|arg(0)}} will no longer exist!! The value that {{code|macro.args}} contain changes as soon as {{code|pause()}} has run as it has its own scope and redefines it. Usually this can lead to inexplicable errors so beware of this! It is better to use it like this:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [tmp = macro.args]
  [var1 = arg(0)]
  [var2 = arg(1)]
  [pause(&quot;tmp&quot;)]
&lt;/source&gt;
* {{code|pause()}} can only handle very simple HTML code, so if you want to debug a dynamic form which you have assigned to a variable, I would suggest you use a combination of the [[Show_HTML]] method and put a {{code|pause()}} right after that.

==The log file==
Going to a slightly more advanced method you can start using the log file.

First off, if MT crashes you can always check the {{code|log.txt}} file which is located in your {{code|.maptool}} directory. Its location varies per OS:
* For win7 it is {{code|C:[username]\.maptool}}.
* For MacOS it's {{code|/users/[username]/.maptool/}} aka {{code|~/.maptool/}}. Be aware that, because this directory's name begins with a dot, it's invisible in the Finder. So, either you use a utility like Onyx to make the Finder show invisible files, either you use the &quot;Go to &gt; Go to directory…&quot; Finder menu and type one of those path.

You should also find a {{code|logging.xml}} file in that directory. The XML file tells MapTool what to send to the {{code|log.txt}} file. Per default MT install, this will only log generated errors.

You can however also replace this file with the one that you can find in the MapTool install directory (the one you unzipped initially). In the directory {{code|Misc}} you find a {{code|macros-logging.xml}} file. You can replace the existing XML file in your {{code|.maptool}} directory with that one (don't forget to rename it to {{code|logging.xml}} !) and it will log ALL macro code. If your code crashes or generates weird errors, you can check the log file to see where it went wrong.

'''MAC Users''': upto b89 the {{code|.dmg}} does NOT contain these logging XML files. You will need to download the {{code|.zip}} file to get those.

This can render into a HUGE log file and slows down MT a bit, so be careful with it. In my case I have a PC and Laptop, the laptop I use for running the games, so no logging, the PC I use for coding so logging is always turned on on that PC.

BUILD 91 AND LATER

if your using b91 or later, there is a launcherxxxx.jar provided. When you run that you will have an advanced tab. There you see 'Macro Handling' checkbox. Check that. This will automatically replace the logging.xml file for the right one as described above. Don't forget to delete the log.txt file first, so its cleared.

if for some reason this does not work under b91 (as is with one of my PCs) you need to manually replace the logging.xml as described above AND you must start maptool WITHOUT the launcher, as the launcher will simple reset the logging.xml. Instead run maptool from a .bat file. To do this simply create a file called runMaptool.bat and edit it. Place in the .bat the line: 
  java -Xmx1024M -Xss4M -jar maptool-1.3.b91.jar run
Save it and run it.

==The Console==
The console is the real kicker. I found out about this after a year or so and since I'm aware of it it has made coding and debugging in MT SO MUCH SIMPLER!!

'''On Windows'''

To activate it you need to do 2 things:
* first you need to replace the {{code|logging.xml}} file with the {{code|macro-logging.xml}} (or check 'macro handling' in the launcher for b91+) as described here above. 
* second you need to edit your {{code|mt.cfg}} file (called {{code|Launch MapTool.sh}} on *nix based OS's). This file you will find in the install directory. The content will look like something like this:
  MAXMEM=1024
  MINMEM=64
  STACKSIZE=4
  JVM=C:\Program Files\Java\jre6\bin\javaw
  PROMPT=true
depending on your settings and OS. You need to remove only ONE letter: the {{code|w}} from {{code|javaw}}. So it becomes:
  JVM=[what it reads here differs per OS]java
Now you will have a console which shows the MT script real-time. Combine this with strategically placed {{code|pause()}}'s and debugging becomes a breeze. Here's my usual screen layout when I'm debugging:
[[image:Wolph42_Debugging_Screenshot.jpg]]

&lt;br /&gt;

'''On MacOS'''

You'll find the Console utility in {{code|/applications/Utilities/}}. Just launch it before you launch MapTool.

All applications' messages, including MapTool, will appear in the &quot;Console messages&quot; part.

If you want to focus on MapTool's messages you just have to open the {{code|log.txt}} described in the Log File section above with the Console app. Just do a right click on the {{code|log.txt}} file and choose &quot;Open with…&quot; from the contextual menu, and then of course Console. Don't try to open the file from the Console app with the &quot;File &gt; Open&quot; menu, as the directory is invisible and won't show.

You've got a convenient search field to filter out the messages. Don't forget it.

'''Notes:'''
* Text and comment is NOT ported to the console. So
&lt;source line lang=&quot;mtmacro&quot;&gt;
  Hello world
  &lt;!-- this is comment --&gt;
&lt;/source&gt;
won't show in the console nor in the log. However:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [r:'Hello world']
  [h:'&lt;!-- this is comment --&gt;']
&lt;/source&gt;
will show up! Note though the latter is slower than the former to execute (which becomes noticeable around 200 to 400 of these lines, so not much to worry about). 
* I personally find it very useful to quickly see at which macro I'm looking, so in the header of all my macros I add:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [h:'&lt;!-- ------------------------------------MACRO NAME ----------------------------------------&gt;']
&lt;/source&gt;
and sometimes I also add a:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [h:'&lt;!-- ------------------------------------/END MACRO NAME ----------------------------------------&gt;']
&lt;/source&gt;
at the bottom, e.g. for the {{code|pause()}} function!
* If you're running heavy macros, especially ones with lots of loops, then you will notice that the code runs a lot faster when the console is minimized. Keep this in mind!
* In Windows you can change the console settings. Especially for the MT log this is very useful as the default console settings are {{code|width: 80 characters}} and {{code|Height: 300 lines}}. This means that lines are likely wrapped making them hard to read, and with a history of 300 lines you won't come far. You can change this by right clicking on the top bar of the console, a context menu should pop-up with {{code|properties}}. Here you go to the {{code|layout}} tab and you can edit the {{code|Screen Buffer Size}}. My settings are {{code|Width:600}} and {{code|Height:2000}}. Fortunately the settings are remembered by Windows so you only need to do this once.

==Broadcast==
{{func|broadcast}} is a fairly new function to MT and is great for debugging purposes. The advantage of {{func|broadcast}} is that it ports the result to the chat IMMEDIATELY. Usually all text to chat whether it is {{code|'this text'}} or {{code|[r:&quot;this text&quot;]}} will be accumulated until all macros are done and THEN the text is ported to the chatbox. So in case of an {{func|abort}} or {{func|assert}} or a crash in the code you will find either the assertion message, a bug report or nothing at all. All the accumulated text is discarded. 

Two useful usages for {{func|broadcast}}:
===Using broadcast to track down a code crash===
Let's say you have an macro of a few 100 lines, you run it and... nothing or some vague message like {{code|double : found}}. If you want to pin point the crash you can simply put {{func|broadcast}} lines between the code and see how far it gets. From the output you can deduce the location of the crash. Here an example, lets say you have:
  [a block of code]
  [another block of code]
  [and yet more blocks of code]
  [and finally a last block of code]
If you want to find out where the code stops:
  [a block of code]
  [h:broadcast(&quot;1&quot;)]
  [another block of code]
  [h:broadcast(&quot;2&quot;)]
  [and yet more blocks of code]
  [h:broadcast(&quot;3&quot;)]
  [and finally a last block of code]
If the output to the chat is eg: 
  1
  2
Then you'll know that the error is somewhere inside {{code|[and yet more blocks of code]}}. 
===Using broadcast to track variable development===
I usually use {{code|pause()}} to check my variables. However if something goes wrong somewhere in a 500+ loop, you will be clicking {{code|ok}} a lot. In these instances it is much easier to add a:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [broadcast(&quot;variable_name: &quot;+variable_name+&quot;another_variable_name: &quot;+another_variable_name)]
&lt;/source&gt;
inside the loop. This way the code is not interrupted but you will get to see where the loop goes haywire.

Like with pause() there is also a more advanced debug macro created in maptool. This is bot_debugInfo() In principle it makes use of the broadcast method but it has a huge set of extra options to make more optimally use of this function and to easier track down issues. This function is part of the [http://forums.rptools.net/viewtopic.php?f=46&amp;t=16066 Bag of Tricks]. Note that pause() is also part of this bag, so if you install it you don't need to create it seperately.

==Bug tracking by elimination==
This is a very basic method and also a 'if all else fails'. When you've used all the other methods and are still stuck, its time to start debugging by elimination. 
Most common use is in a code:{} (or frame:{}, dialog:{}, etc.) block that has a bug inside the block but generates an error report on the 'code block' level, making the broadcast, pause, console methods useless. 

The method is very simple and can take different forms. The first is simply deleting large chunks of code and running the macro again until you've eliminated the bug. Then you start placing code back again and so you can narrow down to the line(s) where the code crashes. Usually in a large macro with a big code block that crashes, I start with deleting the entire body (that is everything between the { } ) to see if the block itself works. If that's the case I start putting back lines of code until the macro crashes. Its tedious, but VERY effective. 

Another more preferable approach (but not always possible) is to remove the code:{} block itself and run the code body with the required parameters. So e.g. run this:
  [foreach(element, elements), CODE:{
    [if(element == 1): bla]
    [bla]
  }]

as this
    [element = 1]
    [if(element == 1): bla]
    [bla]
this way the macro will crash on the specific line which allows you to use the console, pause, broadcasts methods again.

'Note' that in case of dialogs and frames, you can do the same thing. The generated HTML will be ported straight to the chat. This can however lead to a stack overflow (porting large portions of text straight from a macro to the chat will cause that), you can omit that by raising the stack to 20 (TEMPORARILY!, normally you should never go higher then 4 during a game).

==Typical Bugs==
Here I'll give a few examples of things that typically go wrong when coding. It is useful to check this once in a while as a reminder and I hope that others will add to this list so this accumulates in a FOB (frequently occurring bugs).
===My number one===
&lt;source line lang=&quot;mtmacro&quot;&gt;
can't
&lt;/source&gt;
or better recognized in
&lt;source line lang=&quot;mtmacro&quot;&gt;
&lt;!-- this you can't do in MT script --&gt;
&lt;/source&gt;
This is not the most occurring bug, but it certainly is the most annoying as it REALLY screws up your code and it is hell to debug. The issue is with the single quote. When strategically placed this can result in an entire section of code not being executed, picking it up later or dropping back to the parent macro altogether. IF you also close the quote (that is put a second one in the comment as well) then there will be no issue, also if you encapsulate it in a {{code|[h:&quot; &quot;]}} (and not {{code|[h:'  ']}}) it will run along nicely.

About the latter, although the MT script allows you to stuff like this
  He hits for [r:1d6+strength]
I find it bad practice (and generally the first step in hard to debug code) to NOT follow the sacred 'code' code, which is: 1. input 2. process 3. output

example
  &lt;!- input --&gt;
  [h:input(&quot;strength&quot;)]
  &lt;!- process --&gt;
  [h:textOut = &quot;He hits for 1d6 + &quot;+strength+&quot;: &quot;+1d6+strength]
  &lt;!- output --&gt;
  [r:textOut]

===THE number one===
It remains a guess but I think it is a safe assumption that two {{code|:}} in one line of code (with the exception of switch and code) is the most commonly made mistake. Fortunately MT generates clear debug info on this one the syntax is ALWAYS:
 [option , option , option : function]
===Stray semicolon ';' in the chat===
I think this one is in second place, not a bug per se, but annoying nonetheless. This occurs when you forget to include the ''false'' part in an {{code|if}} statement when using the code option, e.g.:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [if(statement), CODE:{apparently the statement is true}]
&lt;/source&gt;
will generate the following output:
  apparently the statement is true
  ;
this is easily prevented by adding {{code|';{}'}} :
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [if(statement), CODE:{apparently the statement is true};{}]
&lt;/source&gt;

===Stray comma ',' in the chat===
Another common 'bug' encountered regularly are stray comma's. Obviously there can be numerous reasons for this to happen but in most cases it is because of a loop like {{roll|foreach}} or {{roll|for}}. This for example:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [foreach(number, &quot;1,2,3,4&quot;), CODE:{[h:&quot;don't show this&quot;]}]
&lt;/source&gt;
will generate:
  ,,,
For this particular example this is simply solved by hiding the output altogether:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [h,foreach(number, &quot;1,2,3,4&quot;), CODE:{[&quot;don't show this&quot;]}]
&lt;/source&gt;
Note that when the outer loop is hidden, that the contents are hidden by default so the h: is not necessary. 
If you do wish to show the context BUT not the comma's, you need to define the delimiter e.g.:
* Seperate by nothing:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [r,foreach(number, &quot;1,2,3,4&quot;, &quot;&quot;), CODE:{[r:&quot;Hello World&quot;]}]
&lt;/source&gt;
* Seperate by space:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [r,foreach(number, &quot;1,2,3,4&quot;, &quot; &quot;), CODE:{[r:&quot;Hello World&quot;]}]
&lt;/source&gt;
* Seperate by break:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [r,foreach(number, &quot;1,2,3,4&quot;, &quot;&lt;br&gt;&quot;), CODE:{[r:&quot;Hello World&quot;]}]
&lt;/source&gt;
'''Tip''': To pin point the origin of a stray comma in a large chunk of code, you can put numbers (1,2,3,4,etc) between the code. These numbers will appear in the chat and the comma will be among them, making it easier to find it.

===Closing syntax characters===

A myriad of errors can be created by not closing off syntax characters: {{code|[ ] ( ) { } &quot; &quot; ' '}}

To help diagnose this, copy your macro into a text editor. [http://forums.rptools.net/viewtopic.php?t=13690| aliasmask's Notepad++ mod] is recommended as it has other uses for MapTool. Use the {{code|find/count}} function to count each of the characters, and the totals should equal for each pair.

Note, if you use strings which contain only one of the paired syntax characters e.g. {{code|&quot;1) This is the first point.&quot;}} you should ''close'' off the pair in a comment:

&lt;source line lang=&quot;mtmacro&quot;&gt;
  [h: '&lt;!-- This comment is to close off the bracket in the next line ( --&gt;']
  [h: broadcast (&quot;1) This is the first point.&quot;)]
&lt;/source&gt;

other issues can arise with stray 'single quotes' in words like {{code|it's, didn't, don't, etc}}. If these are not enclosed in &quot; &quot; or closed of by another ', you will get bogus output or syntax errors.

===Cheater you have been reported===
This ''functionality'' is embedded to prevent cheating… obviously. However this can also result in this error message (and only this error message) in your own code! This typically happens when {{func|broadcast}} the result of an {{func|evalMacro}} call, where the {{func|evalMacro}} result contains « guillemots »: . E.g. paste this into your chat:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [h:result = evalMacro(decode(&quot;4 The attack scoops out one of the target's eyes, inflicting &lt;b&gt;[Fat=1d5] level(s) of Fatigue&quot;))]
  [h:broadcast(result)]
&lt;/source&gt;
To debug this I store {{code|result}} in a [[Library_Token|lib:token]] property before I do the {{func|broadcast}}. From the text it is usually easy to find where the guillemots have entered. So:
&lt;source line lang=&quot;mtmacro&quot;&gt;
  [h:result = evalMacro(decode(&quot;4 The attack scoops out one of the target's eyes, inflicting &lt;b&gt;[Fat=1d5] level(s) of Fatigue&quot;))]
  [h:setLibProperty(&quot;debugOutput&quot;, result, &quot;lib:Token&quot;)]
  [h:broadcast(result)]
&lt;/source&gt;
Then after running the macro I can copy paste that property inside a text editor and track down the guillemots.

===The Switch Case===
Another really annoying little bug. If you ever get stuck with the use of {{roll|switch}} cause it keeps generating error reports and you REALLY can't find the issue, then likely you have used {{code|Case}} or {{code|CASE}} or any other variant with a capital letter in it. As it happens {{code|case}} is case-sensitive (yes it almost looks intentional...). Anyway {{roll|switch}} ONLY works with {{code|case}} (so lower case only!). 

--[[User:Wolph42|Wolph42]] 12:23, 7 June 2012 (UTC)</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Wolph42 Debugging Screenshot.jpg</title>
    <ns>6</ns>
    <id>1411</id>
    <revision>
      <id>5907</id>
      <parentid>5906</parentid>
      <timestamp>2012-06-07T08:29:33Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:Wolph42 Debugging Screenshot.jpg]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Calling macros</title>
    <ns>0</ns>
    <id>1412</id>
    <revision>
      <id>6012</id>
      <parentid>6011</parentid>
      <timestamp>2012-10-08T18:00:47Z</timestamp>
      <contributor>
        <username>JML</username>
        <id>586</id>
      </contributor>
      <minor/>
      <comment>Added to Tutorial category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8302">{{Advanced}}
= Calling Macros From another Macro =
Sometimes you want to call a macro from another macro. As a coder, you want this often, because it 
enables you to split your code in small, simple chunks that can be reused over and over again. This
handy technique also helps keep the stack size requirement low and mitigates the need for large 
code-level-nesting. 

When calling a macro from another macro, you will often want to transfer data from one to the other 
and vice versa. In addition, it is also important to know what happens with chat output. 

There are four different ways to call a macro - and they all behave a little bit differently. While 
reading this tutorial, please be sure to follow the wiki-links provided for any items you are not
familiar with, as they will not be covered.


==The Four Methods to Call a Macro==


===The Macro Roll Option ===
This is the most straight forward way to call a macro. When using the roll option {{roll|macro}}, 
you must specify the location of the macro being called and give a single argument. Note that this 
argument must always be specified, even if you do not need it. In such cases, it is common practice 
is to use an empty string &quot;&quot;.

This argument can be accessed inside the called macro via the special variable called [[macro.args]].

All of the called macro's output will be inserted into the calling macro at the point in the code
where the {{roll|macro}} roll option is placed. This output usually goes into the chat output. 
However, you can choose to instead assign the returned value to the variable [[macro.return]].

Once the called macro is processed, the [[macro.return]] variable can be used in the calling macro in a function call.

====Example====
Lets say you have a macro called {{code|attackRoll}} that can roll any number of dice. In another macro, you want to call {{code|attackRoll}}, have it roll three dice and then use the result of that roll.

Calling macro:

&lt;source lang=&quot;mtmacro&quot; line&gt; [h, macro(&quot;attackRoll@Lib:Token&quot;): 3]    
Attack roll: [r: macro.return] &lt;/source&gt;

Called macro (named {{code|attackRoll}} and placed on token {{code|Lib:Token}}):

&lt;source lang=&quot;mtmacro&quot; line&gt; [h: diceNr = macro.args]
[r: roll(diceNr, 6)]    &lt;/source&gt;

Note that you could write the called macro this way, too:
&lt;source lang=&quot;mtmacro&quot; line&gt; [h: diceNr = macro.args]
[h: macro.return = roll(diceNr, 6)]    &lt;/source&gt;
For this simple example, it really makes no difference.

===User Defined Function===
Often referred to as UDF in the forum, User Defined Functions are probably the most convenient way to do complex coding. A User Defined Function can be used just like a regular function. It can have arguments and it will be replaced by its resulting value when MapTool parses the calling macro. ''User defined'' means that you can specify the macro to be called when you create the function. 

Arguments are assigned to the UDF by writing them inside the parentheses (), separated by comas. The macro's complete chat output will be used as the resulting value and replace the function call, so you can easily assign it to a variableor use it as an argument for another function. It is important to note that HTML comments will be included in this output as well, even though they will not appear in the chat window. Also note that only the first macro in an execution chain will dump its output to chat.

In the called macro, the arguments are inside the [[macro.args]] variable, formatted as a JSON array. 
You can use {{func|argCount}} and {{func|arg}} for easy access.

To set up a UDF you have to call {{func|defineFunction}} on every client where the function will be used. 
This can be done automatically by placing all the {{func|defineFunction}} calls inside the special macro [[onCampaignLoad]] on a library token. This is the standard practice. It is executed whenever the campaign file is loaded by MT (whether from a server or from file).

====Example====
Lets rewrite the above example using a UDF.

{{code|onCampaignLoad}} on a token {{code|Lib:Token}}:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[defineFunction(&quot;attackRoll&quot;, &quot;attackRoll@Lib:Token&quot;)]
 &lt;/source&gt;


Calling macro:
&lt;source lang=&quot;mtmacro&quot; line&gt;
Attack roll: [r: attackRoll(3)]
&lt;/source&gt;

Called macro (named {{code|attackRoll}} and placed on token {{code|Lib:Token}}):
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: assert(argCount()&gt;0, &quot;attackRoll() expects one argument.&quot;)]
[h: diceNr = arg(0)]
[r: roll(diceNr, 6)]
&lt;/source&gt;

====Create UDFs Automatically====
You can write a macro that scans your [[Library_Token|Lib:token]] macros and converts them all into user defined functions. This is a nice, convenient little trick that's done here ([http://forums.rptools.net/viewtopic.php?f=20&amp;t=19856#p209019m see forum post]), in really elaborated way, by aliasmask.

===Macro Links===
When you want to call macros on user reaction, you can send out clickable links to chat or place them into frames. Also use them if you want to work with HTML forms or the fancier form-based events.

Since the macro is not executed immediately, there is a way to use the macro's result in the calling macro. Arguments, the token in context and where the output should be sent can all be specified precisely when you create the macro link.

See also {{func|macroLink}}, {{func|macroLinkText}}.

====Example====
This time, let us assume we want to send an attack roll to chat and then ask for a defense roll. We also want to send the Macro Link to everybody connected (because that is much easier) and don't care about the current token in context.

Calling macro:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: atk = roll(3,6)]
Attack roll: [r: atk]&lt;br&gt;
[r: macroLink(&quot;Do you want to defend?&quot;, &quot;defenceRoll@Lib:Token&quot;, &quot;all&quot;, atk)]
&lt;/source&gt;


Called macro (named {{code|defenceRoll}} and placed on token {{code|Lib:Token}}):
''Note that this macro will be executed whenever the link is clicked.''
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: atk = macro.args]
[h: def = roll(3,6)]

Defence roll: [r: def] [r, if(atk&lt;def): &quot;You defended successfully!&quot;; &quot;You are hit.&quot;]
&lt;/source&gt;

===Evaluate a Macro===
This does not directly call a macro stored somewhere, but rather evaluates some string you feed into the function as if it were macro code. This happens in place. It is not easy to retrieve the macro code from a stored macro, thus this is not a good way to call a macro stored in the usual way. This is most often used for small code snippets created dynamically or stored on token properties.

See also {{func|evalMacro}}, {{func|execMacro}}, {{func|json.evaluate}}, {{func|eval}}. Here, {{code|evalMacro}} and {{code|execMacro}} do exactly the same thing; they are just two different names with the same functionality.

====Example====
Lets say a RPG has a complex weapon damage system with formulas that follow no rule. The formula for the active would be stored in a token property called {{code|damageFormula}}.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: myFormula = getProperty(&quot;damageFormula&quot;)]
You made [r: evalMacro(myFormula)] damage.
&lt;/source&gt;

Content of the {{code|damageFormula}} property:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: &quot;&lt;!-- roll 1d3, weapon makes 3d6 dmg on 1 or 2 , 2d10 on a 3 --&gt;&quot;]
[h: firstRoll = 1d3]
[r, if(firstRoll==3): 2d10; 3d6]
&lt;/source&gt;
''Yeah, such a damage system would be horrible.''

One notable difference between {{code|eval}} and {{code|evalMacro}} is how you pass a parameter:&lt;br&gt;
For example -- the call ...
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:myFunction()]
&lt;/source&gt;

... can also be called as follows with the two methods:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:evalMacro(&quot;[r:myFunction()]&quot;]
&lt;/source&gt;

Which has the same result as:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:eval(&quot;myFunction()&quot;]
&lt;/source&gt;


Do you see how {{code|evalMacro()}} works with square brackets (roll options) and {{code|eval()}} just the function text?

==Variable Context (Scope)==
Usually, a new macro creates a new context (scope) for variables, thus locally defined variables in one macro are not defined in another.

By using {{func|defineFunction}}, you can call macros that operate in the same ''variable context (scope)'' as the calling macro -- when you want so.

The token context is usually transported along with the macro call. With macro links, you can specify the token context.
[[Category:Tutorial]]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isSnapToGrid</title>
    <ns>0</ns>
    <id>1413</id>
    <revision>
      <id>6917</id>
      <parentid>6916</parentid>
      <timestamp>2017-12-15T18:08:09Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="582">{{MacroFunction

|name=isSnapToGrid

|version=1.3b69

|description=

Returns {{true}} if a [[Token]] is snapped to grid or {{false}} if it is not.




|usage=

&lt;source lang=&quot;mtmacro&quot; line&gt;

isSnapToGrid()

&lt;/source&gt;

&lt;source lang=&quot;mtmacro&quot; line&gt;

isSnapToGrid(id)

&lt;/source&gt;

'''Parameter'''

{{param|id|The token {{code|id}} of the token which has its snapToGrid status checked, defaults to the [[Current Token]]. {{TrustedParameter}} }}



|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: snap=isSnapToGrid()]&lt;/source&gt;

|also=
{{func|setTokenSnapToGrid}}
}}

[[Category:Token Function]]</text>
      <sha1>3nnpmp618jx6rhgmq4gzf9ur9p3hfzs</sha1>
    </revision>
  </page>
  <page>
    <title>File:LABEL Picture.jpg</title>
    <ns>6</ns>
    <id>1414</id>
    <revision>
      <id>6046</id>
      <timestamp>2012-11-22T13:15:07Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:RADIO Picture.jpg</title>
    <ns>6</ns>
    <id>1415</id>
    <revision>
      <id>6047</id>
      <timestamp>2012-11-22T13:15:42Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>isGm</title>
    <ns>0</ns>
    <id>1416</id>
    <redirect title="isGM" />
    <revision>
      <id>6049</id>
      <timestamp>2012-12-02T08:25:44Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <comment>#REDIRECT [[isGM]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">#REDIRECT [[isGM]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Talk:setOwner</title>
    <ns>1</ns>
    <id>1417</id>
    <revision>
      <id>6052</id>
      <timestamp>2013-01-19T12:03:31Z</timestamp>
      <contributor>
        <username>Flynnkd</username>
        <id>112</id>
      </contributor>
      <comment>New page: I tried using a list from getAllPlayers() but it simply adds the string as a new player. Using json to generate the list works.  [setOwner(getAllPLayers())] adds a new player to the list, ...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="236">I tried using a list from getAllPlayers() but it simply adds the string as a new player. Using json to generate the list works.

[setOwner(getAllPLayers())] adds a new player to the list, but [setOwner(getAllPlayers(&quot;JSON&quot;))] will work.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>json.subset</title>
    <ns>0</ns>
    <id>1418</id>
    <redirect title="json.isSubset" />
    <revision>
      <id>6055</id>
      <timestamp>2013-01-19T14:17:44Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <comment>[[json.subset]] moved to [[json.isSubset]]: documentation here has *always* been wrong!</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[json.isSubset]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:lan1.png</title>
    <ns>6</ns>
    <id>1419</id>
    <revision>
      <id>6068</id>
      <timestamp>2013-03-21T08:21:29Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:lan2.png</title>
    <ns>6</ns>
    <id>1420</id>
    <revision>
      <id>6069</id>
      <timestamp>2013-03-21T08:23:58Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>Network Connection Problems and Solutions</title>
    <ns>0</ns>
    <id>1421</id>
    <revision>
      <id>6080</id>
      <parentid>6078</parentid>
      <timestamp>2013-03-21T09:08:59Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <comment>/* How to Find Network Information */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="50333">== Network Connection Problems and Solutions ==
this is an import from the Network FAQ PDF v1.7 from [http://forums.rptools.net/viewtopic.php?f=22&amp;t=3370]

=== Assumptions ===
MapTool will start via either WebStart or by executing the proper file for your operating system that resides in the ZIP archive or DMG image. If you do not get the MapTool splash screen or the default &quot;Grasslands&quot; background map when you start MapTool, this document will not help you.

=== Symptoms ===
When someone else attempts to connect to your server, their MapTool seems to pause for a long time with the Connecting message and then finally times out and gives up. The error message may say “Connection timeout” or it may be something more generic like “Could not load campaign” (which indicates an inability for the network to pass data back and forth).

The server running on the hosting computer is not seen by Internet connection testing tools such as CanYouSeeMe.org. These testing tools should be started after the MapTool server has been started via the '''File → Start Server...''' dialog. More discussion of these tools is covered after the next section on terminology and theory of operation.
=== Background Information ===
MapTool uses TCP/IP to make a connection from each client to the server. Without going into a lot of nitty-gritty detail about how TCP/IP works, I will provide a short (and amazingly accurate) analogy of TCP/IP using the phone system. The rest of this section can be skipped if you are confident of your knowledge in networking basics and already know the difference between a “switch” and a “router”. However, forum users will expect you to be familiar with the information in this section if you ask for help there. At a minimum you should be familiar with the terminology.

==== A simple network ====

The picture below depicts multiple computers on a local area network (LAN). Each computer is labeled with a hostname – a name used to uniquely refer to that particular computer. You can think of these names just like the names of your friends, your family, your employer, and so on: when you need to talk to one of these people, you look up their phone number in the phonebook and then pick up the phone and dial.

[[Image:lan1.png]]

In the picture, let's assume that PC1 is the server and PC2 and PC3 are clients. In order for the clients to contact the server, they need some way to locate PC1 on the network. This is the phonebook look up that was discussed in the last paragraph. One look up technique is called &quot;DNS&quot; (Domain Naming Service) and is very common on the Internet. The primary function of DNS is to convert hostnames into IP addresses very similar to the way you use a phonebook to convert a person's name into their phone number. However, if you dial the number of your best friend very often, are you going to have to look it up in the phonebook? Probably not! You probably have it memorized or stored in your local contact list. TCP/IP is the same way: if you know the IP address of a machine you can use that instead of the hostname.

MapTool provides a shortcut to DNS called the RPTools Registry. When you open the '''File → Connect to Server'''... window, you'll see a list of MapTool servers that have registered with RPTools.net. This allows a client to just double-click the correct entry in order to attempt a connection. The client will contact the RPTools.net web site and retrieve the IP address of the server. Once it has this information, the client will use the IP address of the server to make their connection. So the IP address is the &quot;phone number&quot; that you use to contact the server. The client now knows how to contact the server and send/receive data. However, the RPTools.net technique is only for connecting to MapTool servers outside your own LAN – on your LAN you should pick a server from the '''LAN''' tab. In fact, it's likely that using the RPTools registry will fail even if your server is working fine; this is discussed in more detail later.

Whenever the client wants to send a packet of data to the server, it prepends the IP address and puts it out onto the network. Each machine between the client and server forwards the packet to the next one in the link. In the picture above, there are no intermediate machines since all machines are connected to the same wire, but when communicating over the Internet there will be tens or hundreds of intermediate machines. An example of an intermediate machine is shown in the next picture.

When you call your family or friends, the phone number is all you need to make contact. But if they are at work, you may need to use more than a phone number – you may need an extension number as well. In the terms of TCP/IP, that extension number is the port number that the server allocates when it starts. This port number allows multiple applications on a single machine to be &quot;listening&quot; for incoming phone calls. The default port number for MapTool is '''51234'''. Other default port numbers include 80 for web servers and 25 for email servers. Port numbers less than 1024 are reserved for well-known server applications and those from 1024 to 5000 are reserved for local use, so if you change the MapTool port number, '''be sure to choose one larger than 5000'''. In summary, the IP address and the port number uniquely identify an application on the computer and are used to deliver packets between the two computers, the same way that a phone number and extension number uniquely identify a person or department in a company.

When a MapTool server starts it lets other machines on the same network know of its existence. This is evidenced by the clients being able to go to the '''LAN''' tab when they choose '''File → Connect to Server'''... and see the server appear in the list. This technique is similar to the phone company giving you a new phonebook that has been updated with new contact information every time someone in your nehgiborhood changes their phone number! In the real world that doesn't happen, but in the electronic world it's almost required because things can change so quickly. (It doesn't really work like this, but this is a functional description and not a treatise on the implementation :)).


==== Connecting outside your own network ====

When all of the computers, both server and client(s), are on the same network the situation is pretty simple as we discussed above. But what happens when the server is remote from the clients? In this situation, routing the client's phone call through a lot of other machines is required before the phone rings at the server's location. And if you've ever tried to contact the CEO of a company directly, you can be sure that their secretary is going to run interference!

[[Image:lan2.png]]

One of the jobs of the CEO's secretary is to filter incoming messages and decide which ones get to the executive and which ones don't. This is why it can be of more importance to have the secretary's ear than the CEO's! In comparison to a network, the router's job is the same as the secretary's.

I'm using the term router pretty loosely here. In this guide, I use the term router to mean any device between your computer and the Internet whose job is to filter network data. The primary goal of a router is to protect your computers from those on the Internet – it doesn't let them succeed in connecting to your computer. Secondary goals are to allow multiple IP addresses within your home while only allocating a single IP address on the Internet. But we're getting ahead of ourselves a little bit...

In the case of MapTool, when a client calls a server, it's possible that the server's router might block that incoming request. In that situation, the client hears a ring-ring on their end, but the MapTool server never knows that the call was even made because the router blocked it. This will be reported as “Connection Failed: timeout” or something similar. In the picture above, any time PC2 or PC3 tries to contact PC1, they have to get through the router first. Most commercial routers have firewall software built into them. Routers that cost thousands of dollars will have more sophisticated firewalls than the &quot;home use&quot; router you bought at the BigBox store, but the goal of filtering traffic remains the same. And that brings us to our next topic...
==== Port forwarding and UPnP ====

Most routers, just like most secretaries, can be told that some traffic is more important than other traffic and that it should be routed directly through. Can you imagine how much trouble the CEO would be in if he didn't take his wife's (or her husband's) call in a timely manner? A good secretary can actually figure some of this out on their own. For example, the CEO calls his wife and they chat for a few minutes. When the wife calls back in five or ten minutes, you can bet that the secretary will simply route it straight through. Computer firewalls can be told to do the same thing. This is called '''port forwarding'''.

Essentially, when a call to a certain IP address and port number is about to be blocked by the router, it will check its exception list. If the exception list says to go ahead and allow the call to proceed, the router forwards the call to the IP address and port number of the CEO's desk. This is what happens when you have a router sitting between your Internet connection (DSL, cable modem, satellite, dial-up, or any other type) and your home computer(s). The router will act as a firewall and not allow any incoming phone calls unless you've specified a list of exceptions. The actual technique for how to accomplish this varies from router to router, so the MapTool forums recommend that the home user visit [http://www.portforward.com/] and search for their particular router model for instructions.

Note that port forwarding can be turned on and left that way or it can be enabled on the router only when it is going to be used. For security purposes, it is best to only have it turned on when you need it and turn it off when you're done. Note that the router doesn't block outbound calls that the CEO makes; the CEO can pick up the phone and dial his wife without the secretary stopping the call. This is like running a browser and connecting to a web site – the router doesn't get in the way. But if the web site were to try contacting your browser directly, the request would be blocked.

This is a problem for us: we '''want''' to run a MapTool server and we '''want''' the router to let that traffic through! Because routers (and firewalls) are '''supposed''' to be blocking exactly that kind of traffic, we don't have any choice. We must visit that URL given above and figure out how to configure our routers. Unfortunately, not everyone relishes the idea of reprogramming their router the way I do! Yes, hard to believe, but not everyone is a geek. ''(Geek = cool and trendy computer person, Nerd = not-so-cool and trendy computer person, and Dork = totally un-cool computer-person-wannabe. You see? I told you there was a lot of terminology in this section!)''

So there's another technique that can be used: the CEO could explicitly tell the secretary something like, &quot;any calls that come in on extension 80 should be routed directly to my desk.&quot; Now the secretary can pass calls directly to the CEO and not worry about needing to filter them. Maybe the CEO is expecting a call from a certain individual and wants to take the call immediately. Or perhaps the CEO has a &quot;private line&quot; that the secretary monitors but allows calls to &quot;ring through&quot;. Having such an automated system for your router is called UPnP, short for Universal Plug-n-Play. (An alternative is called NAT-PMP, but they are functionally the same so the second won't be mentioned again.)

If you have turned on this feature on your router, then the MapTool 1.3.b23+ server, or any other program running on your network, can tell the router to allow certain ports through for a limited period of time. You will need to refer to your router manual for instructions on how to verify that this feature is enabled. {{Clarify|NEED A URL REFERENCE FOR THIS.}} If this feature is turned on in your router you can try enabling it in MapTool by checking the '''Use UPnP''' checkbox in the '''File → Start a Server'''... window.

'''You must not use both port forwarding and UpnP!''' If you try to use both at the same time, most secretaries will simply become confused and not know what to do at all when a call comes in – you don't want that do you?!

==== Network Address Translation (NAT) ====

Unfortunately, many companies don't have enough phone lines for each employee to be on the phone all at the same time. (Well, ''maybe'' that's unfortunate. I can think of a few situations where that's not such a bad thing!) When a customer calls the company, they use a single phone number. The switchboard operator for the company will convert the number the customer dialed into the internal number used by the company's phone system (sometimes called a PBX). 

The Internet requires such a feature. There are only a certain number of IP addresses that can be used, so ''network address translation'' was devised to help prevent them from being used up too quickly. For example, your author has a cable modem at home. Connected to the cable modem is a router. This router is assigned a ''public IP address'' by my ISP, but the rest of the computers in the house receive a randomly assigned ''private network address'' from the router. Most routers use random IP addresses in the range of '''192.168.0.2-192.168.0.100''' or something similar. The computers attached to the router don't realize that they are receiving random IP addresses – they just take what they get and are happy with it! You can use MapTool's '''File → Connection Information'''... menu option to determine what your private IP address is, as well as the external IP address of your router.

When my laptop makes an outbound connection, the router keeps track of my private IP address so that when the response comes back, it can send the response to my laptop and not to my wife's desktop or the TiVo or the laser printer.

===== Advanced NAT Scenario =====

One issue with this technique is that to any computer outside my home the IP address looks the same for every computer inside the house. This is why port forwarding is important. When a call comes in to the router for port '''51234''', the router forwards it to a preprogrammed private IP address. Using this scheme, can I run multiple MapTool servers on my home network and have different outside computers connect to them? It might appear that the answer is &quot;no&quot; because there's only one &quot;port 51234&quot;. However, if a different port number is assigned to each MapTool server, the router can be configured to forward each port to a different private IP address. For example, my laptop, my wife's desktop, and my TiVo are all on the same network (not really, but we can pretend they are for the sake of this example). I could forward port 80 on the router to the TiVo, then when I'm traveling I could find out which shows the TiVo has recorded by visiting port 80. I could forward port 55555 to my laptop (port 51234) and port 55556 to my wife's desktop (port 51234). Notice how the destination port is the same on both, but the outside port numbers are different? This would allow multiple MapTool servers on the internal network to be connected to by different outside computers. This is exactly like having a company with multiple outside extension numbers. When a customer calls the company, the secretary figures out who the call is for and sends it to the right person. The fact that there are two “John Smith” employees doesn't confuse the secretary because the port forwarding as a different extension number for each one.

The last example is probably pretty confusing and there's no shame in going back and reading the last few sentences two or three times. Go ahead... I'll wait.

Basically, that last example says that the router has two phone extensions configured (ports 55555 and 55556) and each one is sent to a different location inside the company. The first goes to my laptop, the other goes to my wife's desktop. But I don't want to have to change the port number in MapTool, so I just leave it 51234.

To use a configuration in which the MapTool port number doesn't change, I can't use UPnP. If I did, and I tried to run MapTool on both my laptop and my wife's machine at the same time, the router couldn't accommodate both of us – only one of us could have extension 51234. So I'd have to reprogram the port forwarding manually on the router. This is also not a good choice if you're going to use the RPTools Registry feature since the port number MapTool will give the MapTool registry is not the one your router will be configured for. Remember: when a player connects to your server, they will get the outside extension number. If you've manually set up port forwarding and used a different internal and external port number then the wrong number will be stored in the registry.

If I was willing to use different ports for MapTool, then I could use UPnP. Because UPnP doesn't require you to reprogram your router, this is the one I recommend. Especially when you consider that you could get a different private IP address every time you power up your computer! (Remember earlier when I said the router will give you a randomly assigned IP address? The truth is that you will probably get the same address, but to be safe you should treat it as though your machine gets a different address at each reboot.) This is a much better solution because if you fill in the '''RPTools.net Alias''' field on the '''File → Start Server'''... dialog, this port number is saved in the MapTool registry and is the port that other clients will attempt to connect to.

===== Two Routers and the “Double-NAT” Problem =====

The big issue with NAT is something called &quot;double-NAT&quot;. What if there are '''two''' routers between the outside computers and the inside server? It becomes impossible for UPnP to handle this and while the configuration of both routers is possible, often the home user doesn't have control over one of the routers. Sometimes the home user can put one router in “bridged” mode, which essentially turns off the firewall in that router and tells it to pass all connections straight through. This effectively eliminates it from the picture. This is a good choice in cases where your ISP has provided you with equipment and your control over that equipment is limited. In all other cases of double-NAT, running a MapTool server will require a VPN solution. Beyond mentioning the Hamachi program (which is popular on the MapTool forums), further discussion of VPNs is beyond the scope of this document. Be sure to ask on the forums if you have this issue. When enough interest is shown, this document will be updated. (It has happened. See FAQ#12 below for more information.)

==== It's a two-way street ====

The last thing to point out is that all communication must be two-way to be useful. Yet the secretary on the client end will always allow incoming data if the client initiated the request in the first place! We talked about this above, when we discussed the overall flow of the network traffic. We said that the secretary doesn't get in the way of outbound calls, only inbound calls. And only the server will have inbound calls so only the server needs to have port forwarding configured.

[[Image:lan3.png]]

For example, when you type a URL into a browser, the browser makes the outbound request and the router allows the response to come back in. The same thing will apply to MapTool; if the client sends a packet to the server, the client's router will allow the response to get through. This is one of the security issues in a router; it cannot block traffic that is a result of a request made by an internal source. (This is the primary issue with cross-site scripting attacks, which is when a script embedded on a web page makes a request that the user doesn't know about and then sends the information to another location, also without the user's knowledge or consent! Since the script is operating from inside the company's router, the router cannot know that it should block the traffic.)

In the following section, a series of common MapTool connection problems will be discussed, including the symptoms and possible solutions.


== Step-by-Step Problem Diagnosis ==

These next steps attempt to solve your network problem without resorting to the (sometimes slow) turn around time on the forums. If you head to the forums and don't have the answers to the questions asked by these steps, you'll be directed here and told to start at Step 1 and progress through them until a step fails. Some steps may not apply to your situation and you can skip them. For example, Step 5 discusses wireless clients not connecting while wired clients do; if you're not concerned about wireless clients, you can skip that step. Be prepared to identify which steps you skipped and why you skipped them when you post on the forum. There's a section later in the document (ref!) which describes what information you'll need to provide when you post on the forum. 
'''These steps ''must ''be done in the order presented here or the results are ''meaningless ''!'''

'''=== When I click the ''Test Connection ''button on the ''Start Server ''window, I get an error, &quot;unable to see your computer from the Internet.&quot; What causes this and how do I correct it? ==='''

The '''Test Connection''' button talks to a server on the Internet. (This button has been replaced with the ''Networking Help'' button in current builds of MapTool. If that's the case for you, check the last paragraph of this step for help.) Because you're making an outbound call, your secretary (er, router) will be making the actual call for you and is responsible for making sure that all data from you is sent to the other system. If this server out there on the Internet receives a call from your secretary, it will put the current conversation on hold and call you back using your secretary's IP address and the port number in the '''port number'''''' '''field. This is just like a MapTool client would do if you were the server for an online MapTool session. But what happens if your secretary doesn't allow that incoming call to go through? In that case, you'll get the error message referenced in the question, &quot;Unable to see your computer from the Internet.&quot;

To fix this problem, you either need to enable the UPnP option when you start your MapTool server (and configure your router to enable UPnP) or you need to enable port forwarding on your router and configure it to send all requests for extension number '''51234'''''' '''(or whatever port you're using for MapTool) to your computer on the LAN. '''Don't do both!'''''' '''Most routers will require that you give them a private IP address to identify your computer; see the section below, How to Find Network Information in order to determine that number.

Another possible solution is to put the machine that will be running the MapTool server into the router's ''de-militarized zone'' or DMZ. This essentially eliminates all protective services of the router and is not recommended for long-term use. However, if your MapTool server works while your computer is in the DMZ you have narrowed down the problem to an issue with the router.

It is also possible that your operating system has a firewall installed that blocks the network packets once they arrive at your machine. This will be handled in more detail in Step 6, but keep going through these steps one at a time.

Also note that if the '''Services.RPTools.net''' server is down or some point between you and that server doesn't forward your request, this test will appear to fail. If you think the problem is that the RPTools server might be down (check the '''Announcements '''forum at [http://forums.rptools.net/] for information), there's currently not another server available for you to try. You can use a public service though. For example, you could start a MapTool server (so that an application is listening on the port) and then test it by visiting [http://www.CanYouSeeMe.org/] using a web browser. You will be asked for the port number that you want to test and you should enter the same value as you gave MapTool. The web site will check to see if the secretary is allowing the call in and report either Error or Success.

===I have a server running, but if I start MapTool again in a separate window ''''''on the same machine ''''''it cannot connect as a client! Why not?===
There must be a firewall or antivirus setting on the machine that is not allowing connections to the port you used when you started the MapTool server. Unless you change it, the default port is '''51234'''. When connecting to a MapTool server on the same machine, you should be using '''127.0.0.1 '''as the IP address.

Linux: On some distributions we've seen comments in the forums that their machine had incorrect entries in the '''/etc/hosts '''file that caused MapTool to fail. You may want to check your file and ensure that it does not contain an entry for your hostname that points to '''127.0.0.1 '''or '''127.0.1.1'''. If it does, comment out that entry and copy the hostname to the end of the line that contains localhost.

=== I have a server running, but clients wired into my local network can't see my server on the &quot;LAN&quot; tab in the ''Connect to Server...'' window. Why not? ===

When a client selects the '''LAN '''tab, it sends out a request to on the LAN for servers to identify themselves. All servers on the LAN are supposed to respond so that they can be shown in the list of machines. Either the server machine is running software that blocks the request from getting to the MapTool application (firewall or virus protection software) or the client has software that is blocking the server's response so that the client never sees it (this is less likely, but if it is the problem it will be because of a firewall package on the client). 

Try turning off the firewall at one or both ends of the connection and try again. Once you isolate which machine is causing the problem, you can configure the software on that machine to allow traffic through on the specific port that MapTool is using and then turn the software back on again. DO NOT LEAVE YOUR FIREWALL TURNED OFF INDEFINATELY!

=== I have a server running and clients wired into my local network can see the server on the LAN tab, but they get errors when they try to connect! Why doesn't it work? ===

Different ports are used for locating servers than for connecting to servers. Locating servers is done with UDP (a networking protocol) and connecting to servers is done with TCP (another networking protocol). It's possible that a firewall on one of the machines is blocking TCP but not UDP. This is a rare occurrence though, so if turning off the firewall doesn't fix this problem, post on the '''RPTools.net '''forums for additional help. (Read the very last section at the end of this document for how to post to '''RPTools.net''') 

=== I have a server running and local wired clients can connect, but not those using the same router via wireless! Why not? ===
This is most likely caused by a router that refuses to send packets from the wireless portion of the network to the wired portion. Some routers may come configured this way to prevent wireless users from accessing your local network – they can only access the Internet in this configuration. You will need to check the manual for your router to determine if this is the case. You might find the information in the router manual under wireless bridging or LAN bridging or even just wireless connections to your LAN. You will need to reprogram your router before this step will succeed and you can continue to the next step.

=== I have a server running and both wired and wireless local clients can connect, but not clients that are on the Internet! Why not?===

There is likely a device blocking the request as it travels from the client to the server. Common sources for this would be your router or the routers of your ISP. These routers don't block traffic between two machines on the same LAN, which is why local computers can reach the server. This is especially common in university and corporate environments where the owner of the network isn't thrilled about have random packets entering their network from the outside. (Gee, I wonder why not!?)

You can check the port forwarding configuration of your router, but the problem may be with your network provider's router and I doubt they will let you modify those settings. This can be tested by removing your router from the network completely and plugging your Internet connection directly into your MapTool server machine. If this configuration works, your router was blocking the traffic. If this doesn't work, it was some other hop in the route that is blocking the packet. If you do this, you have removed the protective features of the router, so try to get your router back into place as soon as possible.

You should also check whether your problem is the “double-NAT” problem mentioned in the Background section at the beginning of the document.

=== Is it faster for remote clients to connect to my MapTool server using ''Direct ''or through ''RPTools.net''? ===

They are both the same. All three tabs on the '''File → Connect to Server... '''window simply offer different ways of identifying the public IP address of the server, but once the IP address has been found the client talks directly to the server. If the server was started with the '''RPTools.net Alias '''field filled in with a game name, the client can immediately see which version of MapTool they should be using and they can start the connection by simply double-clicking on the entry in the listbox. This makes it very simple for the client as they don't need to know the IP address or the port number. (They still need to enter a Player Name and a password, if necessary.)

=== Why does MapTool even have three tabs on the ''Connect to Server... ''window anyway? What are they for? ===

The '''File → Connect to Server''''''... '''window gives the client three ways to connect to the server. The '''LAN'''''' '''tab should only (and'''always''''''!''') be used by clients who are connected to the same network as the server, such as those wired to the same router as the server or those using a wireless connection to the same router as the server. Those clients will all have the same network subnet mask (this is like an &quot;area code&quot; in the telephone analogy, above) so packets can flow directly from the client to the server.

The '''RPTools.net'''tab shows only those MapTool servers that were told to register themselves when the server was started. There is a text field called '''RPTools.net Alias'''on the '''File → Start a Server... '''window that may be filled in or left empty. When empty, the server is private because its information is not sent to '''RPTools.net'''. This means clients can only connect if you give them your public IP address and port number (see the next paragraph). When filled in, your server's version number and public IP address (what shows up in the'''File → Connection Information... '''window as the “External IP Address”) is saved on the '''RPTools.net '''server. This allows a client to simply choose the server from a list instead of typing in an IP address - much simpler! And they can see which version of MapTool they need as well. (Note that the '''RPTools.net Alias '''probably will not work to connect from a client to a server when both are on the same LAN! Use the '''LAN'''tab instead. See the first paragraph of this step and read the Background section, “A simple network,” to learn why.)

The '''Direct'''tab is for those cases where the server is NOT registered on '''RPTools.net'''(so it's a private server as discussed in the previous paragraph) and yet the clients still need to connect somehow! The required information is the public IP address and the port number of the MapTool server.

=== I'm getting an exception in a popup window while executing MapTool. What does &quot;exception&quot; mean and how do I correct it? ===

An exception happens when the Java runtime environment detects an error condition that the program hasn't been written to specifically detect. As it turns out, Java requires the programmer to detect and handle some exceptions but not others. The &quot;other&quot; category includes what are called runtime exceptions. Runtime exceptions are things that are unlikely to happen so the programmer doesn't have to account for them, but they can only be detected when the program is executed, not when it's compiled. Examples are things like '''FileNotFoundException '''or '''IOException'''. Here are some of the common exceptions that can occur and things to check as possible problems. This list is not exhaustive; it's just the common ones:

# InvocationTargetException: This exception is the result of the program trying to convert a string of characters into an object that will be used internally. Examples include converting a hostname into an IP address and converting a dotted-decimal IP address into its internal format. If you see this exception, try to determine if some data that you provided to MapTool had a typo in it and fix the typo.
# ClassNotFoundException: This exception happens when a Java program tries to locate some code that it needs and can't find it. Common causes include a corrupted installation (try reinstalling Java) or an incorrect '''CLASSPATH '''setting. (The '''CLASSPATH '''tells the Java runtime environment where to look for pieces of compiled code. It is normally set automatically during the Java installation process.)
#3NullPointerException: This is a straight-up programming error. :) It represents the program trying to access data using an invalid variable. If you receive one of these, please cut and paste the block of text that corresponds to the exception into a posting at the RPTools.net forum for the developers to look at.



=== None of the above are problems for me, yet one specific network card for one particular computer doesn't work. Do you have any ideas? ===
There have been reports that many network cards might require that certain options be modified on Windows systems. There are no reports of OSX- or Linux-specific cases of this problem.

To do this, open the Windows Device Manager and open the properties for your network interface. In the Properties tab should be a drop-down list of various options for your hardware. The two that most frequently are problems are Hardware Checksumming (also called Checksum Offload and other names) and Jumbo Frames. The first one tries to do some math related to error checking on the network card instead of using your computer's CPU and while this is a good idea in general, sometimes the card doesn't get it right and network packets are considered corrupted by other computers when they really aren't. The second one is a similar issue where larger packets than normally allowed on a network are sent, confusing other machines on the network. If these features are turned on, turn them off and see if that helps, or vice versa. (You may need to reboot after changing these settings as some drivers only apply changes when they are initialized.)

Some users who have upgraded to Windows 7 have had problems with Atheros network cards. The problem appears as an inability for clients to connect – and stay connected – to the MapTool server, typically with an error on the client about “unable to load campaign”. This appears to happen with the Atheros cards that identify themselves as '''AR8121/AR8113/AR8114 PCI-E Ethernet Controller(NDIS6.20)'''. This is discussed more at [http://forums.rptools.net/viewtopic.php?f=3&amp;t=11916&amp;start=30] To correct the problem:

From network connection / adapter settings: Atheros network adapter properties → Advanced tab → Transmit Buffers property. My default value was 256. Changing value to 512 solved the problem.

=== What if MapTool chooses the wrong network interface? ===

You might find that the Local Address reported by MapTool is not the one that you think should be used. For example, you might know that your router hands out private IP addresses in the range of 192.168.1.x and yet MapTool is reporting a number such as 0.1.0.4 in the File → Connection Information... window. It might be that Windows has assigned an IP address to a device and MapTool is using that address and not the one for your actual network. Some web camera drivers do this under Windows or I wouldn't have bothered to mention it here. :)

If this is the situation for you, you can change which interfaces are searched first when an application runs by changing the Network Binding Order. Under Windows XP, go to the Control Panel and open the Network Connections window. Go to the Advanced Menu and then Advanced Settings. Under the Adapters and Bindings section, select the device with the bogus IP address and use the arrows to move it so that it appears below your normal network device (either your wired or wireless network). Click OK to save your changes and exit the window. (Thanks to Phergus@forums.rptools.net for this information.)

Other operating systems are not likely to have this problem, but searching Google for network binding order or interface binding order should help you find the documentation for your operating system.

=== Are there other network interface issues I need to know about? ===

One user on the RPTools forum has indicated that their modem hardware created a Network Connection and the Services tab had Static NAT configured. Clearing that option allowed the Test Connection feature of MapTool to work. Apparently, they were victim of the &quot;double-NAT&quot; discussed above.

Another issue that has been reported on the forum is that the Cisco VPN client needs to be disabled for the duration of the MapTool server session. This probably has something to do with the VPN software adding itself to the top of the Network Binding Order, as discussed in the previous question, but that has not been verified by this author. Other VPN software applications may require the same fix.

It's possible that the organization that provides your Internet access is blocking certain types of access. This is common on University campuses, for example. In this case, you may wish to try Hamachi as it can work around this issue. Essentially, the Hamachi folks provide a server on the Internet. All of the machines that need to be connected connect to the Hamachi server. This server gives you a &quot;private IP network&quot; that only applies to your collection of machines, and each machine in your private network is given a different virtual IP address. Now you can use MapTool with those virtual IP addresses and everything will work! You'll need to use the Direct tab when clients are connecting the server because the RPTools Registry will have the router's external IP address and not the Hamachi address. The reason this works is that each machine is connecting to the Hamachi server, so all connections are outbound connections – and outbound connections are rarely blocked because people wouldn't be able to reach web servers if they were! Hamachi provides a virtual private network amongst your group of machines. There are other techniques that can accomplish the same thing. OpenVPN is one competitor but it's meant for true enterprise-level networking and is not the simplest thing to configure. And regardless of which software package you use, you'll need at least one machine that is visible from the Internet to act as the VPN server – the folks at Hamachi provide that server for you.

Many users of MapTool also use a voice-over-IP solution as well. The most popular (based on the forums at RPTools.net) appear to be Ventrilo, TeamSpeak, and Skype. And lately, the Dolby Axon software has been getting good reviews, although there are no Mac nor Linux clients yet. Lately, Mumble and Oovoo have seen comments from satisfied users – Mumble (open source) can emulate the other programs, and Oovoo provides video feeds in addition to audio. They each have their pros and cons, so if you haven't tried any of them you may want to give each one a fair shake before settling on a particular package. And check the RPTools.net forum as comparison threads pop up regularly as each one leapfrogs the others in capabilities. At the time of this writing, Skype seems to have the highest cpu load and the least lag time, while Ventrilo and TeamSpeak scale to lots of users very well (although the free Ventrilo server only allows 8 connections and the TeamSpeak server isn't free). If you're going to be using Ventrilo and you have Mac or Linux users in your gaming group, be sure to configure the Ventrilo server to use the Speex audio codec, since it's the only non-proprietary one that's supported and hence, the only one available for the Mac and Linux.


== How to Find Network Information ==

There are times when you'll need your network information in order to configure your router or your computer. The important information is in the table below. You should locate that information (examples below) and fill in the third column, as you'll probably need it to configure port forwarding on your router.

{| class=&quot;wikitable&quot; border=&quot;1&quot;

! Information needed !! Comparison from from the telephone analogy !! Your specific value
|-
| IP Address || Your phone nzmber on the network ||
|-
| Gateway Address || The phone company you get your sercice from ||
|-
| Network (subnet) mask || similar to an area code ||
|}


'''IP Address''' – this is your &quot;phone number&quot; on the network. In a home network, it's typically a private IP Address in the range of 192.168.x.x or 10.x.x.x or even 172.12.x.x-172.16.x.x.

'''Gateway IP Address''' – this is the name of the secretary in your office. In other words, your router's private IP address. :) Your router also has an IP address used to connect to your ISP, but that one is called the WAN Address.

'''Network Mask''' (also called Subnet Mask) – this is the area code of the phone book that you are listed in. In simple networks, this number can be wrong and data might still be delivered properly, but if you're connected to the Internet, it's important that the subnet mask be correct.

For a home network it is very likely that IPv4 is being used. This is a relatively short sequence of four numbers with periods between the numbers. The Network Mask is also expressed using this format. Here is an example: 192.168.42.87, network mask 255.255.255.0

The best way to determine the IP information is to use MapTool itself. This is because your computer might have multiple IP addresses and you won't know which one MapTool is actually using. From the File menu, choose Connection Information... You'll get both your local address (your IP address on the LAN) as well as your external address (the address that Internet clients should use). Note that the local address is ONLY used by clients directly on your LAN such as those wired into the same router or those using a wireless connection to that router, while the external address is ONLY used by clients outside of your LAN. In some cases they may be the same value, but that doesn't change the previous sentence. :)

[[Image:lan4.png]]


In the example to the left, my LAN IP address is 10.4.15.176 and my external address is 12.48.201.241. If I had clients on my LAN (such as friends who were sitting around the table with me), I would have them use the LAN tab and they wouldn't need an address at all. Or I could give them the local address and they would use the Direct tab. If there were others who were logging in remotely, I would fill in the RPTools.net Alias field and let them use the RPTools tab, unless I didn't want my game listed in the registry. Then I'd give them the external address and they would use the Direct tab. (That example is from a recent hotel visit. Using UPnP, I have been able to host MapTool servers from both wired and wireless Internet connections while traveling.)

There is also a tool on the RPTools.net site: visit the [http://www.rptools.net/?page=troubleshooting Troubleshooting page] and read the description. The application is called SysInfo and it gathers statistics necessary for diagnosing network failures as well as verifying the Java version of your system. When using it to gather your machine's configuration, do not remove any information from what you report on the forum. People get freaked out for some reason over their external IP address being listed or their gateway address, but none of that is information that isn't already publicly available. And in fact, must be publicly available or your Internet connection wouldn't work in the first place!

On Windows, you can double-click on the network connection icon in the system tray and then click on the Support tab and the Details... button to see all of the details. Use this technique to obtain the gateway address and the network subnet mask. On the Mac, full details are available in the System Properties under the Network application.

=== When all else fails, here's what you need to post on RPTools.net for others to help you ===

First, you'll be asked if you went through the diagnostic steps above. If you haven't, no one may answer your post. However, if you've taken the time to go through those steps and you post the results of each step, you're likely to get an answer very quickly.

Second, you will likely be asked if there are any exception popup windows. This will be useful information for the community in helping you resolve your issue. If you get an exception, use copy/paste and include it in your forum post. If you miss the exception for some reason, they are also stored in a file called log.txt in a directory named .maptool – you can use your system's Search function to find the file (it'll be under whatever your operating system uses as your “home directory”).

When posting to the forum include the following information about your system. Most of this can be obtained using the troubleshooting tool referred to above under the How to Find Network Information heading:

# Version of Windows, Linux, or Mac OS X;
# Version of the Java Runtime Environment;
# contents of the Network Connections window (for Windows), or output of ifconfig on Linux and OS X;
# version of MapTool and whether you're using Java Web Start or a ZIP version;
# IP address reported as the Local Address in MapTool's Connection Information... window; and
# How far you've gotten in the list of FAQ steps as described above.

And if you have any comments or additions for this FAQ, please make them known! If something would help even one person, then we want to include it here. Thank you!

== Examples ==

This user was able to accomplish steps 1 through 4 and step 5 didn't apply to them. But step 6 failed. This scenario is based on server machine S and remote player P. Local machines inside the same home were able to connect to S, but the remote player cannot.

==== 1 - The packets from P are being blocked by the player's router as they leave his machine. ====

Very unlikely. Most home routers will automatically pass anything from the LAN to the WAN (from the local network to the Internet) without restriction.

==== 2 - The packets from P make it onto the Internet, but never get to your router. ====

Possible, but also unlikely. This would require that some router between your player and you is choosing to dump the packets in the bit bucket. While this is possible, the routers comprising that portion of the Internet are typically managed by experienced personnel and such an issue would be detected and corrected very quickly.

==== 3 - The packets make it to your router and are rejected. ====

This is quite likely because one of the primary purposes of a router is to blocked unknown or unexpected traffic from getting inside. That's why routers are capable of protecting your LAN in the first place!

Configuring the router to block most traffic but allow some traffic through is called port forwarding. You can configure this permanently on the router (this FAQ references http://www.portforward.com/ for model-specific instructions) or you can hope your router is new enough to support UPnP and has it enabled (it probably does) and you can enable that feature when you start the MapTool server.

==== 4 - The router is allowing the packet through, but machine S is blocking it. ====

It is not likely that S is blocking the traffic as other machines on the LAN have connected successfully (based on the background in the first paragraph). As I said above, some computer firewalls might be able to block non-local traffic, but these software firewalls are not typically installed on home machines.

==== 5 - Machine S is receiving the initial connection request, but its response is blocked by the router between S and the Internet. ====

This is possible, but also unlikely. As mentioned under #1 and #4, the router's job is to allow outbound traffic and block incoming traffic. It's unlikely your router is blocking the outbound response.

==== 6 - Same as #2. ====

Unlikely to be the problem for the same reasons as #2.

==== 7 - When the response gets to your player's router, it blocks the response from going in. ====

The response is marked as such: a response. The router will block such a packet if and only if the packet does not correspond to an outbound request. In this case, it does correspond to a request made by machine P. For example, player P wants to open a connection to IP address 1.2.3.4. His router passes the packet onto the Internet. The response comes back from IP address 4.3.2.1 (instead of 1.2.3.4). The router will ignore it and not deliver it to player P. The end result is a Connection Timeout error by player P.

There you have a sample of the troubleshooting process. More will be added over time.</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:lan3.png</title>
    <ns>6</ns>
    <id>1422</id>
    <revision>
      <id>6071</id>
      <timestamp>2013-03-21T08:35:19Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:lan4.png</title>
    <ns>6</ns>
    <id>1423</id>
    <revision>
      <id>6075</id>
      <timestamp>2013-03-21T09:02:04Z</timestamp>
      <contributor>
        <username>Coveredinfish</username>
        <id>153</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>drawVBL</title>
    <ns>0</ns>
    <id>1424</id>
    <revision>
      <id>7196</id>
      <parentid>6875</parentid>
      <timestamp>2019-03-06T07:50:22Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6046">{{MacroFunction
|name=drawVBL
|proposed=false
|trusted=true
|version=1.3b89
|description=
Draws Vision Blocking Layer (VBL) shapes.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
drawVBL(shapesList)
&lt;/source&gt;

This function works EXACTLY the same as {{func|eraseVBL}} with the ONLY difference that drawVBL draws the shapes on the vision blocking layer and {{func|eraseVBL}} erases them.


'''Parameters'''
{{param|shapesList|A [[JSON Array]] of [[JSON Object|JSON objects]], one of the latter for each VBL shape.}}
The shapes can be one of {{code|&quot;Rectangle&quot;}}, {{code|&quot;Circle&quot;}}, {{code|&quot;Polygon&quot;}} or {{code|&quot;Cross&quot;}}.


'''Shape - Rectangle and Cross'''&lt;br /&gt;
''Required arguments.''
{{param|&quot;x&quot;|Abscissa in pixels. (aka: X-Coordinate)}}
{{param|&quot;y&quot;|Ordinate in pixels. (aka: Y-Coordinate)}}
{{param|&quot;w&quot;|Width in pixels. Cannot be smaller than {{code|4}}.}}
{{param|&quot;h&quot;|Height in pixels. Cannot be smaller than {{code|4}}.}}
''Optional arguments''
{{param|&quot;r&quot;|Rotation on centre axis in degrees. Using default mathematical system: {{code|0}} is no rotation, {{code|+}} is clockwise, {{code|-}} is counterclockwise.}}
{{param|&quot;facing&quot;|Rotation on centre axis in degrees. Using the MT facing system: {{code|0}} will rotate the shape 90 degrees anticlockwise, {{code|+}} is counterclockwise, {{code|-}} is clockwise. When using both {{code|&quot;r&quot;}} and {{code|&quot;facing&quot;}}, then {{code|&quot;facing&quot;}} takes precedence.}}
{{param|&quot;rx&quot;|Rotation centre offset in pixels.}}
{{param|&quot;ry&quot;|Rotation centre offset in pixels. When used the centre over which the shape is rotated is positioned at the (rx,ry) coordinate. The centre defaults to the actual centre of the shape.}}
{{param|&quot;fill&quot;|If {{code|1}} fills rectangle, otherwise creates empty shape.}}
{{param|&quot;thickness&quot;|Line thickness from {{code|2}} to {{code|n}} pixels. Lower than {{code|2}} or empty defaults to {{code|2}}. Even numbers only (odd numbers get rounded down by one). Can't be bigger than width or height.}}
{{param|&quot;scale&quot;|If provided number not {{code|0}}, will scale rectangle by {{code|x}}, ie scale: {{code|2}} is double, scale: {{code|0.5}} is half.}}&lt;br /&gt;
'''Note''' These two shapes (cross and rectangle) are created such that the shape INCLUDING the thickness of the line is always conform to the {{code|&quot;x&quot;}}, {{code|&quot;y&quot;}}, {{code|&quot;w&quot;}} and {{code|&quot;h&quot;}} parameters. E.g. a 100x100px rectangle with {{code|thickness}} 20 will result in a 100x100px rectangle. These are the ONLY shapes for which this check is made! Without the check the rectangle would cover an area of 110x110px (10 on the inside and 10 on the outside of the shape). This correction is also the reason why shapes cannot be smaller than 4px and the {{code|thickness}} is always even.&lt;br /&gt;
''Example:''&lt;source lang=&quot;mtmacro&quot;&gt;
[h:rectangle = &quot;{'shape':'rectangle','x':50,'y':50,'w':100,'h':200,'r':45,'fill':1,'thickness':1,'scale':0}&quot;]
[h:cross = &quot;{'shape':'cross','x':-50,'y':-50,'w':50,'h':100,'r':30,'fill':1,'thickness':1,'scale':2}&quot;]
&lt;/source&gt;&lt;br /&gt;


'''Shape - Circle'''&lt;br /&gt;
''Required arguments''
{{param|&quot;x&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;y&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;radius&quot;|This is the distance in pixels between the centre of the circle to its furthest point (is one of its vertices).}}
{{param|&quot;sides&quot;|Specifies how many sides the polygon will have to approximate a circle, from {{code|3}} to {{code|100}}.}}
''Optional arguments''
{{param|&quot;r&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;facing&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;rx&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;ry&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;fill&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;thickness&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;scale&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}&lt;br /&gt;&lt;br /&gt;
''Example:''&lt;source lang=&quot;mtmacro&quot;&gt;
[h:circle = &quot;{'shape':'circle', 'X':50, 'Y':100, 'radius':200, 'thickness':3, 'fill':0, 'sides':12,'r':45}&quot;]&lt;/source&gt;&lt;br /&gt;
Note that this shape can be used to easily create regular polygons, e.g. a triangle:&lt;source lang=&quot;mtmacro&quot;&gt;
{&quot;shape&quot;:&quot;circle&quot;, &quot;X&quot;:50, &quot;Y&quot;:100, &quot;radius&quot;:200, &quot;sides&quot;:3, &quot;thickness&quot;:3, &quot;fill&quot;:0, &quot;r&quot;:30}&lt;/source&gt;&lt;br /&gt;
and a square (note that this square does ''not'' have the dimensions 200x200 but ~105x105 !):&lt;source lang=&quot;mtmacro&quot;&gt;
{&quot;shape&quot;:&quot;circle&quot;, &quot;X&quot;:50, &quot;Y&quot;:100, &quot;radius&quot;:200, &quot;thickness&quot;:3, &quot;fill&quot;:0, &quot;sides&quot;:4,&quot;r&quot;:45}&lt;/source&gt;
… or hexagons.&lt;br /&gt;&lt;br /&gt;

'''Shape - Polygon'''&lt;br /&gt;
''Required arguments''
{{param|&quot;points&quot;|[[JSON Array]] of 2 or more {{code|&quot;x&quot;}}, {{code|&quot;y&quot;}} coordinates.}}&lt;br /&gt;
''Optional arguments''
{{param|&quot;close&quot;| If {{code|1}} then it will close the polygon otherwise it will leave it open.}}
{{param|&quot;r&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;facing&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;rx&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;ry&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;fill&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}
{{param|&quot;thickness&quot;|see {{code|&quot;shape&quot;:&quot;rectangle&quot;}}.}}&lt;br /&gt;&lt;br /&gt;
''Example:''&lt;source lang=&quot;mtmacro&quot;&gt;
[h:polygon = &quot;{'shape':'polygon','r':0,'close':1,'thickness':10,'points':[{'x':0,'y':0},{'x':200,'y':200},{'x':150,'y':10}]}&quot;] &lt;/source&gt;&lt;br /&gt;


|example=
This example builds an array of the object from the above examples and then feeds that array into the drawVBL function
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:rectangle	= &quot;{'shape':'rectangle','x':50,'y':50,'w':100,'h':200,'r':45,'fill':1,'thickness':1,'scale':0}&quot;]
[h:cross	= &quot;{'shape':'cross','x':-50,'y':-50,'w':50,'h':100,'r':30,'fill':1,'thickness':1,'scale':2}&quot;]
[h:circle	= &quot;{'shape':'circle', 'X':50, 'Y':100, 'radius':200, 'thickness':3, 'fill':0, 'sides':12,'r':45}&quot;]
[h:polygon	= &quot;{'shape':'polygon','r':0,'close':1,'thickness':10,'points':[{'x':0,'y':0},{'x':200,'y':200},{'x':150,'y':10}]}&quot;] 
[h:objectArrary	= json.append('',rectangle, cross, circle, polygon)]
[h:drawVBL(objectArrary)]
&lt;/source&gt;
results in:&lt;br/&gt;
[[Image:VBL_Shapes.jpg]]


|also=
[[Introduction to Vision Blocking ]], {{func|eraseVBL}}
}}
[[Category:Miscellaneous Function]]
[[Category:VBL Function]]</text>
      <sha1>2uffrp3efoil6wty8gesno6z6qcdx4w</sha1>
    </revision>
  </page>
  <page>
    <title>eraseVBL</title>
    <ns>0</ns>
    <id>1425</id>
    <revision>
      <id>7198</id>
      <parentid>6876</parentid>
      <timestamp>2019-03-06T07:53:11Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="884">{{MacroFunction
|name=eraseVBL
|proposed=false
|trusted=true
|version=1.3b89
|description=
Erases Vision Blocking Layer (VBL) shapes.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
eraseVBL(shapesList)
&lt;/source&gt;

This function works EXACTLY the same as {{func|drawVBL}} with the ONLY difference that {{func|drawVBL}} draws the shapes on the vision blocking layer and eraseVBL erases them. For descriptions on parameters and more examples goto the {{func|drawVBL}} page. 

|example=
This example erases a (solid) block of VBL of 200x200 pixels, centered on the origin of the map
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:rectangle	= &quot;{'shape':'rectangle','x':0,'y':0,'w':200,'h':200, 'fill':1}&quot;]
[h:objectArrary	= json.append('',rectangle)]
[h:eraseVBL(objectArrary)]
&lt;/source&gt;
[[Category:VBL Function]]

|also=
[[Introduction to Vision Blocking]], {{func|drawVBL}}
}}
[[Category:Miscellaneous Function]]</text>
      <sha1>fyrjl3quqvxssyael543sasish1k19c</sha1>
    </revision>
  </page>
  <page>
    <title>getTokenShape</title>
    <ns>0</ns>
    <id>1426</id>
    <revision>
      <id>7208</id>
      <parentid>6109</parentid>
      <timestamp>2019-03-06T21:44:46Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="816">{{stub|No examples yet.}}
{{MacroFunction
|name=getTokenShape
|proposed=false
|trusted=false
|version=1.3b89
|description=
Retrieves the token's shape (top-down, circle, square).

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenShape()
getTokenShape(id)
&lt;/source&gt;

'''Parameters'''
{{param|id|The token id of the token to check for the shape, defaults to the [[Current Token]].}}{{TrustedParameter}}
'''Result'''&lt;br /&gt;
The function returns the token's shape as a string value: {{code|&quot;TOP-DOWN&quot;}}, {{code|&quot;CIRCLE&quot;}}, {{code|&quot;SQUARE&quot;}}.
|example=
This example doesn't really do anything.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: exampleVariable = &quot;a,b,c&quot;]
[r: exampleFunction(exampleVariable, reverse)]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
c,b,a
&lt;/source&gt;

|also=
{{func|setTokenShape}}
}}
[[Category:Token Function]]</text>
      <sha1>7iio9wpimel0gwku3epfserief9vf7m</sha1>
    </revision>
  </page>
  <page>
    <title>setTokenShape</title>
    <ns>0</ns>
    <id>1427</id>
    <revision>
      <id>7231</id>
      <parentid>6993</parentid>
      <timestamp>2019-03-07T04:49:54Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1119">{{stub|No examples yet.}}
{{MacroFunction
|name=setTokenShape
|proposed=false
|trusted=false
|version=1.3b89
|description=
Sets the token's shape (top down, circle, square, figure).

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenShape(shape)
setTokenShape(shape, id)
&lt;/source&gt;
'''Parameters'''
{{param|shape|String value: {{code|&quot;TOP DOWN&quot;}}, {{code|&quot;CIRCLE&quot;}}, {{code|&quot;SQUARE&quot;}}, {{code|&quot;FIGURE&quot;}}.}}
{{param|id|The token id of the token to set to a new shape, defaults to the [[Current Token]].}}{{TrustedParameter}}

'''Result'''&lt;br /&gt;
The function returns the token's shape as a string value: {{code|&quot;TOP DOWN&quot;}}, {{code|&quot;CIRCLE&quot;}}, {{code|&quot;SQUARE&quot;}}, {{code|&quot;FIGURE&quot;}}.

|example=
On current token.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: newShape = &quot;CIRCLE&quot;]
[r: setTokenShape(newShape)]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
Circle
&lt;/source&gt;
With Token ID.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: newShape = &quot;TOP DOWN&quot;]
[h: tokenName = &quot;Some Token&quot;]
[r: setTokenShape(newShape,tokenName)]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
Top down
&lt;/source&gt;

|also=
{{func|getTokenShape}}
}}
[[Category:Token Function]]</text>
      <sha1>3vximcw5hktzqg9h148xhjku9uazrb3</sha1>
    </revision>
  </page>
  <page>
    <title>getTokenWidth</title>
    <ns>0</ns>
    <id>1428</id>
    <revision>
      <id>7320</id>
      <parentid>7209</parentid>
      <timestamp>2019-03-23T22:31:14Z</timestamp>
      <contributor>
        <username>Naciron</username>
        <id>664</id>
      </contributor>
      <comment>add native size functions</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="777">{{MacroFunction
|name=getTokenWidth
|proposed=false
|trusted=false
|version=1.3b89
|description=
Retrieves the token's image width in pixels (boundary size).

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenWidth()
getTokenWidth(id)
&lt;/source&gt;

'''Parameters'''
{{param|id|The token id of the token to check for its width, defaults to the [[Current Token]].}}{{TrustedParameter}}

'''Result'''&lt;br /&gt;
The token's boundary (image) width in pixels.
|example=
Assuming a token called {{code|&quot;Dragon&quot;}}, medium size, on a 50px square grid, then:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: getTokenWidth(&quot;Dragon&quot;)]
&lt;/source&gt;
returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
50
&lt;/source&gt;

|also=
{{func|getTokenHeight}}
{{func|getTokenNativeHeight}}
{{func|getTokenNativeWidth}}
}}
[[Category:Token Function]]</text>
      <sha1>il15tr52xlk2cw79hjqj7l808dvu2uv</sha1>
    </revision>
  </page>
  <page>
    <title>getTokenHeight</title>
    <ns>0</ns>
    <id>1429</id>
    <revision>
      <id>7319</id>
      <parentid>7204</parentid>
      <timestamp>2019-03-23T22:28:25Z</timestamp>
      <contributor>
        <username>Naciron</username>
        <id>664</id>
      </contributor>
      <comment>add native size functions</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="762">{{MacroFunction
|name=getTokenHeight
|proposed=false
|trusted=false
|version=1.3b89
|description=
Retrieves the token's image height in pixels (boundary size).

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenHeight()
getTokenHeight(id)
&lt;/source&gt;

'''Parameter'''
{{param|id|The token id of the token to check for its height, defaults to the [[Current Token]].}}

'''Result'''&lt;br /&gt;
The token's boundary (image) height in pixels.
|example=
Assuming a token called {{code|&quot;Dragon&quot;}}, medium size, on a 50px square grid, then:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: getTokenHeight(&quot;Dragon&quot;)]
&lt;/source&gt;
returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
50
&lt;/source&gt;

|also=
{{func|getTokenNativeHeight}}
{{func|getTokenWidth}}
{{func|getTokenNativeWidth}}
}}
[[Category:Token Function]]</text>
      <sha1>swgrnqjz5lkpkabs9j5ushmd5c99c4c</sha1>
    </revision>
  </page>
  <page>
    <title>File:VBL Shapes.jpg</title>
    <ns>6</ns>
    <id>1430</id>
    <revision>
      <id>6128</id>
      <timestamp>2013-04-10T11:28:04Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <comment>Show an example of the result drawVBL</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">Show an example of the result drawVBL</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getVBL</title>
    <ns>0</ns>
    <id>1431</id>
    <revision>
      <id>7210</id>
      <parentid>6877</parentid>
      <timestamp>2019-03-06T21:49:04Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="877">{{stub}}
{{MacroFunction
|name=getVBL
|proposed=false
|trusted=true
|version=1.3b90
|description=
Saves Vision Blocking Layer (VBL) shapes.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
drawVBL(shape,format)
&lt;/source&gt;

This function retrieves the found shape in the given shape.

'''Parameters'''
{{param|shape|A JSON object as described in {{func|drawVBL}}.}}
{{param|format|Boolean. Returns a JSON object if {{false}}, or an JSON array of coordinates if {{true}}.  In either case, the returned shape covers the VBL found in the area.}}


''Example:''&lt;source lang=&quot;mtmacro&quot;&gt;
[h:rectangle = &quot;{'shape':'rectangle','x':50,'y':50,'w':100,'h':200,'r':45,'fill':1,'thickness':1,'scale':0}&quot;]
[r:vblData   = getVBL(rectangle , 0)]
&lt;/source&gt;&lt;br /&gt;

|also=
[[Introduction to Vision Blocking]], {{func|eraseVBL}}, {{func|drawVBL}}
}}
[[Category:Miscellaneous Function]]
[[Category:VBL Function]]</text>
      <sha1>0jyhu5b0s183v7qqodgkemnad0t6xne</sha1>
    </revision>
  </page>
  <page>
    <title>File:Example Message.jpg</title>
    <ns>6</ns>
    <id>1432</id>
    <revision>
      <id>6237</id>
      <timestamp>2013-12-15T15:13:56Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:Example Message2.jpg</title>
    <ns>6</ns>
    <id>1433</id>
    <revision>
      <id>6248</id>
      <timestamp>2013-12-15T19:20:37Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:getsetpropertiesTime.jpg</title>
    <ns>6</ns>
    <id>1434</id>
    <revision>
      <id>6267</id>
      <parentid>6266</parentid>
      <timestamp>2014-01-27T13:16:36Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <comment>uploaded a new version of &quot;[[Image:getsetpropertiesTime.jpg]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1/>
    </revision>
  </page>
  <page>
    <title>mod</title>
    <ns>0</ns>
    <id>1435</id>
    <revision>
      <id>6305</id>
      <parentid>6302</parentid>
      <timestamp>2014-10-29T19:53:05Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="676">THIS FUNCTION DOES NOT EXIST IN MAPTOOL.

{{MacroFunction
|name=mod
|description=Returns the result of the modulo operation between the two numbers, which represents the remainder after a division operation.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: val = mod(dividend,divisor)]
&lt;/source&gt;

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: mod(14,6)]
&lt;/source&gt;
Returns 2.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: mod(10,5)]
&lt;/source&gt;
Returns 0.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: mod(-13,4)]
&lt;/source&gt;
Returns 3.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: mod(16.4,7)]
&lt;/source&gt;
Returns 2.4.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: mod(16,7.5)]
&lt;/source&gt;
Returns 1.0.
}}
[[Category:Mathematical Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>File:DHFWOverviewScreenshot.jpg</title>
    <ns>6</ns>
    <id>1436</id>
    <revision>
      <id>6326</id>
      <timestamp>2015-02-02T08:24:44Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <comment>Maptool summarized in one picture</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">Maptool summarized in one picture</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setZoom</title>
    <ns>0</ns>
    <id>1437</id>
    <revision>
      <id>6349</id>
      <parentid>6347</parentid>
      <timestamp>2015-05-03T21:16:34Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="934">{{MacroFunction
|name=setZoom
|version=1.4
|description=
Sets the zoom level of the viewport in percentages, where 1 (=100%) is the default.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setZoom(z)
&lt;/source&gt;

'''Parameters'''
* {{code|z}} - The zoom level of the viewport (the current zoom level can be seen at the bottom of the maptool screen. You can also use {{func|getZoom}}. Note that this value is given in the numerical representation of %. E.g. to set zoom to 50% you give 0.5 as parameter.

|examples=
Zoom in by a factor 2
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: z = getZoom()]
[h: setZoom(2*z)]
&lt;/source&gt;
Zoom in by one 10%
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: z = getZoom()]
[h: setZoom(z+0.1)]
&lt;/source&gt;
Zoom out by 10%
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: z = getZoom()]
[h: setZoom(z-0.1)]
&lt;/source&gt;

|also=
{{func|moveToken}}, 
{{func|getTokenY}},
{{func|goto}},
{{func|setViewArea}},
{{func|getZoom}}.
}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>getZoom</title>
    <ns>0</ns>
    <id>1438</id>
    <revision>
      <id>6348</id>
      <parentid>6344</parentid>
      <timestamp>2015-04-30T09:28:00Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="731">{{MacroFunction
|name=getZoom
|version=1.4
|description=
Returns the current zoom level of the viewport in percentage, where 1 (=100%) is the default. This is the same number as what you find at the bottom of the Maptool window.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getZoom()
&lt;/source&gt;

'''Parameters'''
None.

|examples=
Zoom in by a factor 2
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: z = getZoom()]
[h: setZoom(2*z)]
&lt;/source&gt;
Zoom in by one 10%
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: z = getZoom()]
[h: setZoom(z+0.1)]
&lt;/source&gt;
Zoom out by 10%
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: z = getZoom()]
[h: setZoom(z-0.1)]
&lt;/source&gt;

|also=
{{func|setZoom}},
{{func|getTokenX}},
{{func|getTokenY}},
{{func|goto}}

}}
[[Category:Miscellaneous Function]]</text>
      <sha1/>
    </revision>
  </page>
  <page>
    <title>setViewArea</title>
    <ns>0</ns>
    <id>1439</id>
    <revision>
      <id>7280</id>
      <parentid>7279</parentid>
      <timestamp>2019-03-17T13:41:44Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1864">{{MacroFunction
|name=setViewArea
|version=1.5
|description=
Sets the currently viewed screen area, set by two sets of cell coordinates, so that the two cells are at the edge of the screen. If the map is &quot;gridless&quot;, the coordinates will be pixel coordinates. A final optional parameter causes the view of any connected players to be set the same. Only GMs or trusted macros can trigger the view of all players to change.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setViewArea(startX, startY, endX, endY [, pixels [, allPlayers]])
&lt;/source&gt;

'''Parameters'''
* {{code|startX}} - the x coordinate of the cell that will mark the upper left corner of the displayed area.
* {{code|startY}} - the y coordinate of the cell that will mark the upper left corner of the displayed area.
* {{code|endX}} - the x coordinate of the cell that will mark the lower right corner of the displayed area.
* {{code|endY}} - the x coordinate of the cell that will mark the lower right corner of the displayed area
* {{code|pixels}} - an optional parameter that if set to true (1) means the coordinates are measured in pixels. If set to false (0) the coordinates are measured in map cells. Defaults to true (1).
* {{code|allPlayers}} - Optional: If set to true (1) and called from a trusted macro, all players views will be set. Defaults to 0


|examples=
Set the viewport of the current client such that it at least sees the corners of the area with the following CELL coordinates:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:setViewArea(0,0,30,20, 0)]
&lt;/source&gt;

When the GM runs the macro change the viewport in PIXEL coordinates on ALL clients, else only on the current client:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:setViewArea(0, 0, 300, 200, 1, isGM())]
&lt;/source&gt;


|also=
{{func|getViewArea}}, {{func|getTokenY}}, {{func|goto}}, {{func|setZoom}}, {{func|getZoom}}.

}}
[[Category:Miscellaneous Function]]</text>
      <sha1>c2913nrhh82ywaru3kyl0ykjkjodwbk</sha1>
    </revision>
  </page>
  <page>
    <title>Introduction to Macro Writing/it</title>
    <ns>0</ns>
    <id>1440</id>
    <revision>
      <id>6393</id>
      <parentid>6379</parentid>
      <timestamp>2015-10-16T11:50:38Z</timestamp>
      <contributor>
        <username>Vinnie</username>
        <id>222</id>
      </contributor>
      <minor/>
      <comment>/* Miglioriamo i nostri giochi= */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="55969">{{Languages|Introduction to Macro Writing}}{{Translation}}
[[Category:MapTool]][[Category:Tutorial]]{{Beginner}}

==L'unità PIÙ importante che dovresti conoscere!! (sintassi del codice) ==
Se non hai mai creato codice prima probabilmente la parte seguente NON avrà senso (ma ''continuate'' a leggere). Tutt'ora ciò che riguarda le macro in Maptool è l'unità più importante da conoscere. Quindi quando raggiungete la fine di questo (lungo) articolo, tornate indietro e leggete di nuovo, quando avrete creato il vostro primo codice, tornate indietro e leggete ancora. Comincerà ad avere senso e converrete &quot;ahhhhh ok, finalmente ha senso&quot; e vorrete capire perché questa sia la parte più importante. Felice lettura.

Se avete già familiarità con il codice allora ciò che segue avrà molto più senso e capirete perché sia così importante.

E come per tutto il codice, c'è una sintassi che vi serve sopportare. ''TUTTE le linee di codice/script di Maptool consistono in 0 o più opzioni e 1 funzione'' (con una accezione: {{roll|code}}). 

Una '''opzione''' è qualcosa che influenza quello che viene mostrato al termine nella chat. Per esempio
*l'opzione {{roll|h}} nasconderà i risultati, 
*l'opzione {{roll|r}} mostrerà solo i risultati e 
*l'opzione {{roll|if}}; mostrerà solamente uno o l'altro (dipendentemente se vero o falso).
* se non date nessuna opzione l'intera esecuzione della funzione mostrata nella chat
nota che ci sono molte [http://lmwcs.com/rptools/wiki/Category:Roll_Option Roll Opzioni]


Una '''funzione''' è qualcosa che RESTITUISCE un valore risultato, quindi avete un valore iniziale e usate una funzione SU di esso e quello che viene restituito è il risultato di questa funzione su quel valore. Esempio:
*la funzione {{func|abs}} restituirà un valore positivo (rimuove il - da ogni valore), quindi {{code|abs(-3)}} restituirà 3. Il valore iniziale è -3 e quello risultante è 3. 
*la funzione {{func|if}} (in realtà esiste sia ''l'opzione'' {{roll|if}} che la ''funzione'' {{func|if}}) restituirà il primo parametro se il valore è true (=1) e il secondo parametro se il valore è falso (=0).  Quindi {{code|if(0,&quot;Black&quot;, &quot;White&quot;)}} restituirà &quot;White&quot;. Nota che perché questa è una funzione, entrambe le istruzioni vera e falsa verranno eseguite (ma solo il risultato di una delle due sarà restituito).
Ecco una panoramica di tutte le [http://lmwcs.com/rptools/wiki/Category:Macro_Function Funzioni]

'''Da questo momento voi avete SEMPRE:'''

  [opzione, opzione, ...: risultato = funzione(valore, parametri)] 
Nota così che tutto il codice/script inizia con &quot;[&quot; e finisce con &quot;]&quot; e se c'è un'opzione si separa da una funzione con un &quot;:&quot;, se avete più opzioni le separate con un &quot;,&quot;. Non ci sono &lt;b title=&quot;Per i pignoli: si ci sono eccezioni come lo switch, l'opzione code roll e le stringhe.&quot;&gt;MAI&lt;/b&gt; più di UNO di questi tre elementi in una istruzione di uno script. E quindi tutto quello FUORI le &quot;[&quot; &quot;]&quot; NON è codice ma solo testo (html) semplice (indipendentemente dal contenuto). Questo 'testo (html)' apparirà &lt;b title=&quot;Per i pignoli: si ci sono eccezioni come ignorare l'output in UDF e usare abort(0) che ignorerà tutto l'output.&quot;&gt;SEMPRE&lt;/b&gt; nella chat com'è e non sarà influenzato dal codice in nessun modo.

Come ho detto, questo per ora non avrà senso, ma annotatelo su un foglio di carta e attaccatelo alla vostra scrivania rileggendolo spesso, comincerà ad avere senso.

Se siete arrivati qui attraverso il link 'leggete questo' ora potete smettere di leggere perché la parte soprastante è quella considerata ''da leggere''. Se siete principianti, per piacere leggete questo.

==Cosa è una Macro?==

Come menzionato nella pagina dei Token Macro, una macro è semplicemente un modo per automatizzare un compito in MapTool. Essenzialmente, una macro è uno script che viene letto da un ''parser'', che la interpreta e si assicura che la parte giusta sia processata nel modo corretto (ad esempio assicurandosi che un comando per sommare due numeri sia processato come un comando macro e non semplicemente come testo da inviare alla finestra di chat).  

In MapToll le macro hanno avuto una timida introduzione ma ora il linguaggio è diventato un vero insieme completo di comandi e funzioni che possono compiere quasi ogni cosa operazione tu possa immaginare! 

==Cosa dovresti già conoscere==

Le Macro sono l'argomento dove noi scaviamo nelle più potenti - e più complicate - caratteristiche e capacità di MapTool.  Mentre questa guida cerca di essere semplice da seguire per ogni nuovo utente, ci sono alcune cosa che io presumerò voi abbiate già letto e conosciate come fare:

# Presumo che abbiate letto [[Introduction to Mapping]] così che siate familiari con l'interfaccia di MapTool e su come creare una mappa, salvare una campagna e inserire token sulla mappa.
# Presumo abbiate letto anche [[Introduction to Tokens]], così che abbiate una idea di base su come manipolare i token, guardare le loro proprietà e via dicendo.
# E infine, siccome le macro sono usualmente intinamente connesse con le ''proprietà'' dei token, presumo che abbiate letto e seguito i passi in [[Introduction to Properties]] e creato un nuovo file di campagna basato su [[Sample Ruleset|Sample RPG ruleset]] scritto per aiutare i nuovi utenti ad imparare MapTool. Se non avete letto questa guida, per piacere fatelo - farà si che alcuni degli esempi seguenti avranno ''più'' senso!

==Una importante configurazione delle preferenze==

Una delle cose importanti presunte in questa guida sulle macro è che voi abbiate una preferenza abilitata chiamata ''Use Tooltips for Inline Rolls.'' Lasciatemi spiegare:

In modo predefinito, quando l'output di una macro viene mostrato, ciò che viene visualizzato è un analisi completa di come il risultato inviato alla chat sia stato ottenuto. Questo non è l'ideale per piccole macro - somiglierà a questo:

:'''Attack Roll''': &lt;font color=&quot;blue&quot;&gt;« roll + bonus = 18 + 9 = 27 »&lt;/font&gt; vs. AC

Un po' brutto anche se non terribile. D'altra parte, con qualcosa di più complesso esso somiglierà a questo:

:'''Toxic Cloud''' vs: &lt;font color=&quot;blue&quot;&gt;« attack = 1d20+attackBonus = attack = (4 + 7) = 11 » « damage = 1d6 + 2 = damage = (5 + 2) = 7 »&lt;/font&gt; Target 0: Attack 11; &lt;font color=&quot;blue&quot;&gt;« damage = 7 » damage. « attack = 1d20+attackBonus = attack = (14 + 7) = 21 » « damage = 1d6 + 2 = damage = (3 + 2) = 5 »&lt;/font&gt; Target 1: Attack 21; &lt;font color=&quot;blue&quot;&gt;« damage = 5 » damage. « attack = 1d20+attackBonus = attack = (6 + 7) = 13 » « damage = 1d6 + 2 = damage = (1 + 2) = 3 »&lt;/font&gt; Target 2: Attack 13; &lt;font color=&quot;blue&quot;&gt;« damage = 3 »&lt;/font&gt; damage. &lt;font color=&quot;blue&quot;&gt;« attack = 1d20+attackBonus = attack = (17 + 7) = 24 » « damage = 1d6 + 2 = damage = (2 + 2) = 4 »&lt;/font&gt; Target 3: Attack 24; &lt;font color=&quot;blue&quot;&gt;« damage = 4 »&lt;/font&gt; damage.

Che è davvero poco leggibile.

Per evitare di vedere questi dettagli del processo di ottenimento dell'output di una macro avrete bisogno si impostare MapTool per mostrare questi calcoli in tooltip (suggerimenti visibili quando posizionate il puntatore sopra il risultato in chat) piuttosto che nella finestra di chat. Per farlo:

# Andate nel menu '''Modifica'''.
# Selezionate '''Preferenze'''
# Nel lato destro della scheda '''Interactions''', nell'area &quot;Chat&quot;, assicuratevi di aver '''spuntato''' ''Use ToolTips for Inline Rolls''.
# Cliccate sul bottone '''OK'''. 

Seguendo questi passi i dettagli del processo saranno mostrati su un tooltip disponibile quando puntate il valore stampato in chat invece che mostrati direttamente nella finestra di chat.

==Convenzioni per questa guida==

Cercherò di fare del mio meglio per mantenere il mio linguaggio e terminologia consistenti. In questa guida:

* '''Macro''' si riferirà a collezioni di comandi raggruppate insieme per automatizzare un compito
* '''Macro command''' si riferirà ad un particolare comando o funzione ''individuale'' che potete vedere ''dentro'' una macro
* '''Macro language''' significherà l'intera collezioni di comandi, funzioni e operazioni che potete usare ogni volta che scrivete una macro. Potete vedere una lunga lista di funzioni in [[:Category:Macro Function|List of Macro Functions]].

Inoltre, benché sia possibile per una macro attivarne un altra (chiamato &quot;chiamare&quot; un'altra macro), per questa guida, le uniche macro di cui parleremo saranno attivate cliccando un bottone sull'appropriato Macro Panel e avranno effetto solamente sul token su cui sono state avviate ''sopra''.

==Perché dovrei usarle?==

Non c'è niente che richieda specificatamente l'utilizzo di macro quando usate MapToll. Ricordate, lo scopo principale di MapTool è di condividere una mappa con gli amici e giocare (leggete [[Introduction to Mapping]] e [[Introduction to Game Hosting]] per sapere come condividere con il vostro gruppo di gioco), e MapTool vi offre tutto quello che serve per farlo: mappe, token, e sistema di chat che permette di parlare impersonando o meno il personaggio, lancio di dadi e di prendere il ruolo di qualsiasi carattere voi stiate giocando. 

Tuttavia, ci sono molte altre cose che si possono fare con MapTool, se siete interessati a imparare un po di più sulle capacità delle macro. Per esempio, se volete cliccare su un bottone per lanciare automaticamente 1d20 e aggiungere automaticamente un modificatore ad esso, è possibile creare una macro apposita. Se volete cambiare i vostri punti ferita dopo essere stati colpiti, potete scrivere una macro per farlo. E questo tutorial vi mostrerà come.

==Dove risiedono queste cosiddette &quot;Macro&quot;?==

Le macro sono associate a varie parti dell'interfaccia MapTool e gli oggetti che contengono. Ci sono tre posti in cui una macro può &quot;risiedere&quot;:

===Token Macros===

Il primo e più comune posto di residenza di una macro è in un [[Introduction to Tokens|token]]. Le macro dei token sono associati al token su cui sono state create e lo accompagneranno finché gliele lascerete.

Le macro dei token sono accessibili direttamente solo dalle persone proprietarie del token, se il token non vi appartiene non potrete cliccare (e neanche vedere!) il bottone di una macro. 

===Macro della Campagna===

Le macro della campagna sono macro che non sono collegate un token specifico ma a tutta la campagna. Queste macro funzionano molto similmente a quelle dei token, eccetto per:

# Non dovete selezionare un token per vedere le macro
# Chiunque può accedere e avviarle

Le macro delle campagne sono molto utili per i GM e per i giocatori per gestire le funzioni comuni, infatti se voi settate una operazione comune come una macro di campagna avrete bisogno di farne una sola copia (invece di doverne fare una per ogni token che ne necessita). 

===Global Macros===

Le macro globali non sono collegati a un token o una campagna, sono invece collegati alla vostra copia di MapTool. Queste macro ''non'' sono visibili a tutti quelli che si connettono al tuo gioco.

Questo è un buon posto dove inserire macro per operazioni che voi ''non'' volete che le altre persone vedano, come informazioni che volete vengano mostrate ai giocatori solo quando ''voi'' lo decidete; od operazioni sui vostri PNG che non volete che i vostri PG possano fare.

==Il pannello delle macro==

[[Image:Macro-panels.jpg|thumb|I quattro pannelli delle macro]] [[Image:Tabbed-panels.jpg|thumb| I quattro pannelli uniti assieme, selezionabili con le schede in basso (alcuni utenti li uniscono per risparmiare spazio)]]

Con tutto quanto detto sulle macro e le locazioni voi probabilmente vi starete chiedendo dove sono questi bottoni Voi troverete i bottoni delle macro in uno dei 4 '''pannelli delle macro''' che appaiono in MapTool. Se non vedete nessuno dei pannelli andate in nel '''Finestra''' e assicuratevi che queste quattro finestre siano contrassegnate:

* Selezionato
* Impersonato
* Campagna
* Globali

Dovreste vedere queste finestre apparire in MapTool se non sono già li. Se guardate lo screenshoot a destra dovreste vedere che il pannello Global è popolato da diversi bottoni. Ognuno di questi bottoni eseguirà una macro; il bottone apparirà quando voi creerete una nuova macro. 

'''Per piacere notate''', tuttavia, che il pannello Global contiene macro che sono specifiche del ''tuo'' computer e della ''tua'' installazione di MapTool. I bottoni che vedete nello screenshoot del Pannello Global sono le ''mie'' macro globali; le vostre... beh, dovrete scriverne alcune!

===Pannelli Selezionato e Impersonifica===

Ci sono due pannelli che hanno a che fare con le macro dei token: Selezionato e impersonifica. 

Il pannello '''Selezionato''' mostrerà i bottoni per tutte le macro che sono attualmente localizzate sul token che avete selezionato (potete selezionare il token cliccando su di esso con il mouse). Ognuno di questi bottoni avvierà un particolare gruppo di comandi macro.

Il pannello '''Impersonifica''' mostra i bottoni per le macro del token che state ''impersonificando''. Impersonare un token è un modo per &quot;assumere la persone del token&quot;, quando voi chattate il testo apparirà come se fosse il token a parlare, e così via.  È possibile impersonare un token e selezionarne un altro, quindi fate attenzione al pannello che state guardando!

===Pannello Campagna===

Questo pannello mostra tutte le macro impostate per la campagna corrente. Ricordate, queste sono visibili a tutti.

===Pannello Globale===

Questo pannello contiene le macro globali che avete impostato. Ricordate, queste potete ''vederle solo voi''.

==Prima di proseguire: le basi==

Prima di procedere, ci sono alcuni elementi ''essenziali'' nella sintassi delle macro che voi dovreste capire, o cose imprevedibili accadranno. Le macro sono state create come modo per scriptare una breve sezione di testo o dei lanci di dado utili inviati alla finestra di chat. Quindi, se voi volete mostrare un grido di battaglia ma non volete riscriverlo ogni volta, potreste scrivere una &quot;macro&quot; per inviare questo grido di battaglia alla finestra di chat. Similmente, se volete lanciare 2d6 per fare un attacco, potreste voler scrivere una macro per generare questo output invece che riscrivere ogni volta {{code|/roll 2d6}}.

Da qui a crescere, i comandi macro diventano sempre più complessi fino a diventare simili ad un linguaggio di programmazione; ma sono semplicemente del testo passato ad un ''parser'' chhe gestirà tutti i comandi nella macro e genererà i risultati. 

Quindi una delle cose importanti da ricordare è questa:

'''IMPORTANTE: Le macro sono sequenze di testo contenente sia testo che volete mostrare in chat CHE comandi speciali che fanno cose come lanciare dadi'''.

===Il token corrente===

Prima di iniziare a scrivere macro, per piacere consultate i concetti nella pagina [[Current Token]]. Quando scrivete macro, usualmente (ammenoché la macro non sia veramente minimale) state manipolando [[Token Property|Token Properties]]. Per poter manipolare ''correttamente'' le proprietà con le vostre macro è cruciale capire il concetto di [[Current Token]]. 

'''IMPORTANTE: Una macro si riferisce''' '''''sempre''''' '''al token corrente ammenoché non abbiate specificatamente istruito la funzione/operazione di questa macro per indirizzarsi ad un altro token diverso da quello corrente. '''

===Quadre e Graffe===

Ora, poiché abbiamo testo semplice, abbiamo bisogno di un metodo per distinguere le parti che sono solo testo da inviare in chat e le parti che sono &quot;comandi di programmazione&quot;. MapTool gestisce questo raccogliendo i comandi in parentesi quadre {{code|[ ]}} o graffe {{code|{ } }}. 

'''IMPORTANTE: Qualsiasi cosa trovata dentro parentesi quadre o graffe non viene gestita come testo ma come comando e parsata per ottenere qualcosa. Similmente, se''' '''''non''''' '''è fra parentesi quadre o graffe, viene inviato alla finestra di chat come testo.'''

Quindi qualcosa come:

&lt;source lang=&quot;mtmacro&quot;&gt;
[1d20]
&lt;/source&gt;

oppure

&lt;source lang=&quot;mtmacro&quot;&gt;
{1d20}
&lt;/source&gt;

Non dice a MapTool di inviare il testo &lt;nowiki&gt;[1d20]&lt;/nowiki&gt; o &lt;nowiki&gt;{1d20}&lt;/nowiki&gt; alla chat; invece dice &quot;genera un numero random fra 1 e 20 e invia ''questo'' alla finestra di chat.&quot; Le quadre e le graffe (anche se le graffe sono più consigliate per via di complicazioni che causano alle funzioni di looping e branching) indicano a MapTool che le informazioni ''in'' esse sono comandi macro o variabili e non semplicemente testo. Quindi, come vedrete in seguito, potete mischiare testo e comandi macro:

&lt;source lang=&quot;mtmacro&quot;&gt;
I roll [1d20+4] for initiative.
&lt;/source&gt;

Nella macro sostituiremo &lt;nowiki&gt;[1d20+4]&lt;/nowiki&gt; con il risultato dell'espressione del dado, e quindi stamperemo l'intera frase nella chat, che assomiglierà a:

&lt;source lang=&quot;mtmacro&quot;&gt;
I roll 16 for initiative.
&lt;/source&gt;

===Opzioni di Lancio===

Le opzioni di lancio sono un altra caratteristica speciale del linguaggio delle macro. Il loro nome ha vecchie origini, dal momento che la maggior parte di macro erano lanci di dado (come l'appena menzionato &lt;nowiki&gt;[1d20+4]&lt;/nowiki&gt;) c'era bisogno di avere modi diversi per mostrarli (o non mostrarli affatto). Dal momento che queste opzioni erano usate per cambiare come i lanci apparivano, allora sono sto stati chiamati opzioni di lancio, e così sono rimaste. In realtà questo è ancora vero anche se le opzioni non gestiscono solamente come vengono mostrate le cose. 

Le opzioni di lancio sono una cosa critica da capire nella scrittura delle macro. Ci sono un paio di regole. La prima, il formato genera di ogni comando di macro in MapTool è quesot:

&lt;source lang=&quot;mtmacro&quot;&gt;
[(comma-list-of-options): operation(s)]
&lt;/source&gt;

Ora per spiegare: una opzione di lancio ha le seguenti regole:

# Va sempre all'inizio di una istruzione macro (per i nostri scopi, una istruzione è una qualsiasi linea di macro fra parentesi quadre). 
# È sempre seguita dai due punti.
# Può essere combinata con altre opzioni di lancio; in questo caso dovete separare ogni opzione con una virgola e alla fine della comma-separated list, dovete inserire i due punti.
# deve apparire una sola volta in una data istruzione macro perché venga applicata all'operazione che contiene. Questo potrebbe diventare complesso usando iniziate a usare la roll option CODE, dal momento che potrete nidificare intere istruzioni assestanti, ma questo verrà spiegato nella sezione di branching e looping.  

Un semplice esempio di una opzione di lancio è:

&lt;source lang=&quot;mtmacro&quot;&gt;
[r:1d20+4]
&lt;/source&gt;

Questa usa l'opzione &quot;regular output&quot; per mostrare il risultato di 1d20+4 come testo semplice (senza evidenziamenti o tooltips). Un esempio complesso potrebbe essere questo:

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20): output = &quot;Critical Hit&quot;; output = &quot;Not a Critical Hit&quot;]
&lt;/source&gt;

Questo combina le opzioni di lancio [h: ] (che significa, &quot;nascondi dalla finestra di chat&quot;) e [if(): ] che effettua una operazione se-allora. Nota però che le opzioni di lancio appaiano solo all'inizio di una istruzione di macro dove si applicano. 

Un esempio ''veramente'' complesso potrebbe coinvolgere l'uso della opzione di lancio [CODE: ] (ne saprete di più in [Introduction to Macro Branching]) per permettere di nidificare intere istruzioni macro dentro blocchi da eseguire come se fossero singole istruzioni. Per esempio:

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20),CODE:
{
    [damageAmount = 16]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
};
{
    [damageAmount = 1d10+6]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
}]
&lt;/source&gt;

Questa è una istruzione complessa, ma le opzioni di lancio per il comando complessivo (le parentesi quadre più esterne) sono all'inizio, separate da virgole e seguite da un due punti. L'istruzione interna è ''nidificata''.

===Virgolette e Apostrofi===

In molte circostanze le macro conterranno apostrofi che funzioneranno correttamente, essi sono semplicemente testo e quindi verranno inviati alla finestra di chat senza problemi. Tuttavia, in alcune situazioni singoli apostrofi spaiati faranno pensare a MapTool che voi abbiate creato na ''stringa non terminata''.  Quando questo accade il testo della macro (tutti i comandi ecc. ecc.) saranno solitamente ricopiati nella chat ottenendo come risultato un grosso blocco di brutto output.

Per evitare questo ricordate questa regola: se avete testo che volete appaia in chat contenuto fra parentesi graffe, un singolo apostrofo o virgoletta causerà. Quindi modificate l'esempio seguente: 

&lt;source lang=&quot;mtmacro&quot;&gt;
[h,if(d20roll == 20),CODE:
{
    [damageAmount = 16]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
    The target's HP is now [r:TargetHP].
};
{
    [damageAmount = 1d10+6]
    [damageType = &quot;acid&quot;]
    [TargetHP = TargetHP - damageAmount]
}]
&lt;/source&gt;

Il singolo apostrofo nella riga {{code|The target's HP is now [r:TargetHP]}} causerà errore. Ci sono due strade per evitare questo: 

# Non usare apostrofi. Questo potrebbe essere un po' un disagio.
# Sostituite l'apostrofo con il codice HTML per l'apostrofo: '''{{code|&amp;amp;#39;}}'''

===Commenti===

'''NON CI SONO MECCANISMI DI COMMENTO NEL CODICE DELLE MACRO. TUTTI I COMANDI CORRETTAMENTE SCRITTI IN UNA MACRO''' '''''SARANNO ESEGUITI.'''''

Il linguaggio di macro spedirà tutto il contenuto della macro al parser integrato che cerca testo da stampare in chat e commandi da eseguire. È possibile nascondere l'output dalla finestra di chat un paio di modi fashion ma non è possibile evitare l'esecuzione di comandi macro correttamente scritti. In altre parole, '''non potete commentare il codice.'''

Ci sono due modi di nascondere l'output: l' opzione di lancio {{roll|h}} e il formato di commento dell'HTML. Avete già visto l'opzione di lancio nascosto ma se non siete familiari con l'HTML, i commenti hanno questo aspetto:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--This is an HTML comment--&gt;
&lt;/source&gt;

In una pagina HTML tutto quello che sta fra &lt;nowiki&gt;&lt;!--&lt;/nowiki&gt; e &lt;nowiki&gt;--&gt;&lt;/nowiki&gt; viene completamente ignorato. In contrasto nel linguaggio macro di MapTool, tutto quello che è fra i tag di commento è ''nascosto'' dalla chat ma se inserite comandi macro al loro interno esse ''verranno'' eseguite. In altre parole, se in una macro avete queste righe:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--In this part of the macro I roll some dice--&gt;
&lt;/source&gt;

Essere verranno nascoste dalla chat e agiranno come commenti. Tuttavia se nella riga è scritto:

&lt;source lang=&quot;html4strict&quot;&gt;
&lt;!--In this part of the macro I roll some dice using the format [r:1d20+9]--&gt;
&lt;/source&gt;

il parser nasconderà tutto dalla chat ma ''eseguirà'' la macro, che lo vogliate oppure no.

La lezione da imparare qui è: '''Non potete commentare il vostro codice macro.'''

===Scrivere Macro===

[[Image:Camp-panel-nomacros.png|thumb|Il '''Pannello Campagna'''. Come potete vedere non ci sono ancora macro qui]]

[[Image:Camp-panel-rcaddnew.png|thumb|Click destro sul Pannello Campagna per aggiungere una nuova macro.]]

La creazione di macro è una procedura di tre passi (sebbene essi possano contenere moltitudini!):

1. Clic destro sul pannello dove volete che la macro appaia (uno dei due pannelli dei token, un pannello della campagna o quello globale) e selezionate '''Aggiungi Nuova Macro'''.  Un bottone grigio con l'etichetta '''(new)''' apparira.

2. Tasto destro sul bottone e seleziona '''Modifica'''.

3. Inserisci il tuo codice di macro, dagli un nome e clicca su '''OK'''. Finalmente! Avete creato una macro!

Ma aspetta...cosa significa &quot;macro code?&quot; 

Come avevo detto, questi tre passi possono contenere un ''grande'' ammontare di dettagli, passi, consigli, trucchi, vittorie, fallimenti, frustrazioni e a volte, grida e digrignazioni di denti. Quindi, facciamo un passo indietro e guardiamo alcune semplici macro in stile passo-passo. Se volete vedere come possono sembrare macro avanzate, ci sono tanti tutorial e how-to su questo wiki da leggere. Per ora, tuttavia, scriveremo alcune semplici ma utili macro.

===Lancio d'iniziativa===

[[Image:Camp-panel-newbutton.png|thumb|Dopo aver selezionato &quot;Aggiungi Nuova Macro&quot; un bottone '''(new)''' apparirà nel pannello campagna.]]

[[Image:Camp-panel-rceditbutton.png|thumb|Clic destro sul bottone apre l'editor delle macro.]]

[[Image:Macro-editor-examplestring.png|thumb|Inserire una etichetta e i comandi per la macro]]

[[Image:Camp-panel-exbutton.png|thumb|Il '''Pannello Campagna''' con la tua nuova macro creata]]

La macro più semplice non è altro che testo, che viene mostrato nella finestra di chat. In effetti una macro contenente testo (praticamente tutte le macro) inviano semplicemente una stringa di comandi alla finestra di chat dove vengono leggi e interpretati. Molti linguaggi di programmazione iniziano con il classico programma &quot;Ciao Mondo!&quot;, ma ''non'' questa guida. Invece faremo qualcosa di più GDR: creiamo il temuto messaggoi &quot;Lanciate per l'iniziativa!&quot;

1. Selezionate il pannello Campagna.

2. Clic destro su di esso e selezionate '''Aggiungi Nuova Macro'''.

3. Clic destro sul nuovo bottone new e clic su '''Modifica'''.

4. Nel campo '''Etichetta''' inserite &quot;Lanciate per l'iniziativa!&quot;

5. Lasciate il '''Gruppo''' e '''Sort Prefix''' in bianco.

6. Nel campo '''Comandi''' scrivete 

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;Roll for Initiative!&lt;/tt&gt;&lt;/blockquote&gt;

7. Cliccate '''OK'''. 

8. Quando avete finito, dovreste vedere che il bottone è cambiato, ora si chiama '''Lanciate per l'iniziativa!''' e quando lo cliccate, ecco che il testo &quot;Lanciate per l'iniziativa!&quot; appare nella finestra di chat.

Questa è la base della scrittura delle macro: voi inserite del testo nella macro e questo testo viene letto dal parser e inviato alla finestra di chat quando voi premete il bottone. 

===Qualcosa di più interessante===

&quot;Lanciate per l'iniziativa&quot; benché sia spaventoso quando pronunciato dal DM non è una macro molto ''interessante'' come macro. Probabilmente penserete &quot;perché non posso scriverlo semplicemente in chat?&quot; Ed infatti la risposta è &quot;probabilmente lo vorreste&quot;. E quindi facciamo qualcosa di più interessante e più in linea con il motivo principale per cui usiamo MapTool (dopo tutto non siamo qui per scrivere programmi ma per giocare): aggiungeremo alcuni ''comandi macro'' alla macro in aggiunta del testo semplice. I comandi macro sono speciali istruzioni che, quando letti dal parser, gli dicono di fare qualcosa in più della semplice stampa di testo nella finestra di chat, come lanciare alcuni dadi o calcolare dei valori.

I comandi macro devono essere ''sempre'' racchiusi in parentesi quadre (es. [''macro command'']) o graffe (es. {''macro command''}). Racchiuderle in questo modo è quello che suggerisce al parser che un comando è in arrivo, altrimenti esso tratterebbe il comando come un qualsiasi altro testo e lo stamperebbe in chat. 

====Lanciare dei dadi====

[[Image:Macro-editor-rolldice.png|thumb|Una macro con testo e un lancio di dado 1d20+7]]

Questa è una semplice macro che automatizza alcuni lanci e ci aggiunge un modificatore prima di mostrare il tutto nella finestra di chat. 

1. Create una nuova macro (createla dove volete, su un toke, nella campagna, in global) e aprite la finestra di modifica (ricordate, lo potete fare con il tasto destro sul bottone '''(new)'''). 

2. Nel campo '''Etichetta''', chiamate la macro con qualcosa simile a &quot;Lancio d'Attacco&quot; o &quot;Lancio Dado&quot;

3. Nel area '''Comandi''' inserite:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll is [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

4. Cliccate '''OK'''. Dovreste vedere un bottone chiamato come avete scelto nel precedente passo 2. Quando cliccate su di esso dovreste vedere qualcosa di simile a questo apparire in chat:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;Chris: My attack roll is &lt;font style=&quot;background-color:lightgray;&quot;&gt;8&lt;/font&gt;!&lt;/blockquote&gt;

Quello che è successo è che MapTool legge nel contenuto della macro e quando arriva alla sezione '''[1d20+7]''' sa di dover:

# Tirare un dado a 20 facce (o, in realtà, scegliere un numero casuale fra 1 e 20) e
# Aggiungere 7 al risultato, e
# Mostrare il risultato nella finestra di chat inserendolo nel testo nel posto giusto

Potete vedere che il numero 8 ha uno sfondo grigio. Se puntate sul numero un &quot;tooltip&quot; apparirà mostrando come questo numero sia stato ottenuto. In questo caso ho ottenuto 1 dal lancio 1d20 (fiasco!  un colpo maldestro!) Se non vedete questo tooltip guardate nelle vostre impostazioni di [[MapTool Preferences#Chat]] in '''Use ToolTips for Inline Rolls'''.

Inoltre, probabilmente voi non vedrete il nome &quot;Chris&quot; ammenoché non vi chiamiate così. Questa parte dell'output di chat indica semplicemente chi sta ''dicendo'' quel particolare pezzo di testo; se è un token apparirà la sua immagine e nome invece del noioso &quot;Chris&quot;.

====Più che solo numeri====

I comandi macro possono funzionare con numeri e test, potete manipolare ''stringhe'' (questo sono, collezioni di caratteri alfanumerici) usando il linguaggio macro di MapTool. Per un istante diciamo che volete lanciare il vostro attacco ma volete inserire il nome del vostro obiettivo così che venga mostrato in chat.

[[Image:Macro-editor-basiccommands.png|thumb|Una macro con comandi di dado base e una variabile chiamata ''target'']]

[[Image:Prompt-undeclared-variable.png|thumb|Un prompt per una &quot;variabile non dichiarata&quot;]]

Quello che dovete fare è modificare la vostra macro di attacco in questo modo:

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

Quando avvierete questa macro una finestra apparirà improvvisamente chiedendovi un &quot;Value For target&quot;. Cosa è successo?

Bene, quando MapTool guarda queste macro, vede un comando macro che recita semplicemente '''[target]'''. MapTool assume che qualsiasi parola ''dentro'' un comando macro che ''non'' sia racchiuso da apostrofi o virgolette sia il nome di una ''variabile'' (in altre parole un valore che può cambiare). 

MapTool nota anche che in nessun posto della macro a ''cosa'' la variabile ''target'' equivale. I linguaggi di programmazione chiamano questa sorta di situazione ''variabile non dichiarata'' (in altre parole voi non avete mai dichiarato il suo valore). Siccome MapTool non ha nessun modo per sapere cosa sia ''target'' allora ve lo chiede! Se scrivete un nome, un numero o qualsiasi altra cosa in questa finestra, MaoTool prenderà questa informazione, l'assegnerà in una variabile ''target'' e finirà la macro. 

Andate avanti e scrivete &quot;Orchi Cattivi&quot; (senza le virgolette) nella finestra e premete '''OK'''. Dovreste vedere qualcosa di simile a questo nella finestra di chat:

&lt;blockquote style=&quot;border:1px solid gray;&quot; width:50%;&gt;Chris: My attack roll against &lt;font style=&quot;background-color:lightgray;&quot;&gt;Nasty Orcses&lt;/font&gt; is &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt;!&lt;/blockquote&gt;

Un altra volta, il parser legge nel testo del comandi macro che hai inserito nella macro e nei posti dove è indicato un comando macro indicati (dalle quadre), MapTool sostituisce le informazioni appropriate.

==Usare Variabili in una Macro==

Noi abbiamo visto in un paio di esempi come usare una variabile (come nel precedente {{code|target}}) in una macro ma non abbiamo approfondito ancora il processo. Tuttavia, le variabili e il loro uso sono veramente il cuore della scrittura di macro, quindi da parte mia sarebbe una negligenza saltarlo.

===Cosa è una Variabile?===

Se avete dimestichezza con la programmazione lo sapete già ma se vi state appena inserendo in questi argomenti la semplice definizione di ''variabile'' in termini del linguaggio macro è:

:'''Una variabile è un valore che può cambiare (o variare) in base ad una proprietà del token, ad un calcolo o a un altro comando macro'''

Visto che il valore di una variabile potrebbe cambiare, noi dobbiamo dargli un nome (cioè ''dichiarare'' una variabile, dichiarate che &quot;questa variabile esiste!&quot;) per poterci riferire a lei. Allora, ogniqualvolta che ci servirà usare un qualsiasi valore che la variabile ha ''in quel momento'', dobbiamo semplicemente inserire il suo nome nel comando macro e MapToll lo sostituirà con l'appropriato valore attuale. 

Pensate in questo modo: se il valore di un lancio di dado può essere qualsiasi cosa fra 1 e 20, per esempio, non potete semplicemente inserire 19 dove avete bisogno di usare quel lancio, potrebbe essre 19 o 2 o 7 o altro. Invece voi volete &quot;qualsiasi sia il lancio di dado, inserisci quel numero qui&quot;.

:'''Nota''': questo non significa che MapToll sostituirà il vlalore ''corretto'' con i ''vostri'' bisogni: questo significa che sostituirà il valore corrispondente a quella variabile in quel dato momento. Quindi se il vostro programma contiene uno sbagli in essa, il valore finale sarà sbagliato - ma MapToll non capisce &quot;sbagliato&quot; ma solo &quot;questo è ciò che è stato detto adesso&quot;. 

===Assegnamento delle variabili===

Quando volete dare un valore a una variabile state facendo un &quot;assegnamento&quot; di un valore ad una variabile. L' &quot;operatore di assegnamento&quot; in MapToll è il segno di uguaglianza ( = ). Questo suona stravagante ma significa che voi state un segno di uguale per dire a MapToll che una particolare variabile ha un particolare valore.  Un esempio di un un assegnamento di variabile è 

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:myHP = 30]
&lt;/source&gt;
&lt;/blockquote&gt;

Come potete vedere quello che fa questa riga è prima ''dichiarare'' una variabile chiamata {{code|myHP}} e in seguito ''assegnargli'' il valore {{code|30}}. Questa è l'assegnazione di variabili alla radice, ;;alcune variabili'' equivalgono ad ''alcuni valori''. La '''h''': con i due punti dice a maptools di &quot;nascondere&quot; l'output. Non è necessaria ma se non volete che tutti i numeri delle vostre variabili siano inviati alla finestra di chat dovreste inserire un '''h''': all'inizio del vostro assegnamento.

Ricorderete dall'esempio dove veniva richiesto il nome per target che potete usare una variabile senza assegnarli nessun valore. Se lo fate state dichiarando che la variabile esiste ma senza nessun valore assegnato, quindi MapToll vi chiederà (o lo chiederà a chiunque avii lo script) un valore. La lezione imparata è che una variabile ha bisogno di avere un valore assegnato perché la macro possa concludersi, ma non dovete sempre inserirlo prima del tempo, alle volte potreste voler ottenere l' ''input'' dall'utente.

L'assegnamento di variabili è l'unico modo per impostare o cambiare il valore di una variabile; le variabili non sono modificabili sul posto. Se state usando una funzione per cambiare il valore di una variabile la funzione ritornerà il contenuto della variabile modificata che dovrà essere assegnata alla variabile esistente o ad un altra nuova.

===Quando fate un assegnamento===

MapTool processa ogni comando macro in una macro in ordine, partendo dall'alto. Quindi, se volete che MapTool mostri una finestra che chiede input all'utente, dovete assegnare un valore a una variabile ''prima'' di usarlo! Per esempio, nel comando di macro:

{{code|The hit does [damage] [damageType] damage, leaving you with [remainingHP] hit points!}}

A meno che non vogliate che MapTool richieda all'utente le variabili {{code|damage}}, {{code|damageType}} e {{code|remainingHP}}, dovrete assicurarvi di dargli dei valori ''prima'' di arrivare a quella riga. Probababilmente con qualcosa di questo tipo:

&lt;blockquote style=&quot;background-color:lightgray;&quot;&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:damage = 1d6+4]
[h:damageType = &quot;fire&quot;]
[h:remainingHP = 30 - damage]
The hit does [damage] [damageType] damage, leaving you with [remainingHP] hit points!
&lt;/source&gt;
&lt;/blockquote&gt;

Come potete vedere abbiamo fatto tre assegnazioni ''prima'' che le variabili siano usate nella linea riguardante il colpo. Abbiamo assegnato il valore di un lancio di dado 1d6+4 alla variabile {{code|damage}}, {{code|&quot;fire&quot;}} alla variabile {{code|damageType}} e il valore dell'operazione {{code|30 - damage}} alla variabile {{code|remainingHP}}. 

Se guardate attentamente, vedrete che abbiamo usato una variabile per l'assegnamento di un valore a un altra variabile: il valore della variabile {{code|damage}} è usato quando assegniamo un valore a {{code|remainingHP}}, così le variabili possono essere utilizzate per impostare e manipolare altre variabili. 

===Regole per le Variabili===

Ci sono due regole da ricordare quando create una variabile:

# Niente spazi: nomi di variabile non possono contenere spazi, non potete usare la variabile {{code|Hit Points}} - deve essere {{code|HitPoints}}. 
# Variabili speciali: ci sono alcune &quot;variabili speciali&quot; che MapTool si riserva, quest osignifica che non potete usarle per altri scopi che quelli per cui MapTool se le è riservate. Solitamente potete riconoscere una variabile speciale perché ha un punto nel suo nome, come {{code|[[roll.count]]}} o {{code|[[macro.args]]}}.  Le introdurremo in seguito ma per ora sappiate che non potete creare una variabile con lo stesso nome di quelle presenti nella pagina [[:Category:Special Variable|Special Variables]].

==Miglioriamo i nostri giochi==

Gli esempi fin ora mostrano un uso veramente base delle macro: stampare testo sulla finestra di chat quando cliccate sul bottone; fare un semplice lancio di dadi dentro una macro; ottenere un semplice input dall'utente per poter completare una macro.

ora, facciamo un passo avanti: giochiamo con alcune opzioni di formattazione, cambiamo proprietà del token e diamo uno sguardo di base ai loop (ripetere la stessa più volte) e al branching (fare diverse cose sulla base di diverse condizioni o situazioni). 

===Opzioni di Formattazione===

L'output delle macro (come ogni output della chat) può essere formattato usando tag HTML base, come anche alcune opzioni integrate in MapTool. Vediamo prima brevemente l'HTML, e poi un paio di [[:Category:Display Roll Option|Display Roll Options]].

====Tiri Estesi====

In MapTool 1.3.b54 il modo predefinito di mostrare il risultato di un lancio di dadi o un calcolo è quello di stampare il totale o valore finale. Se quindi lanciate 1d20+7 quello che apparirà in chat sarà giusto il risultato finale, con il tooltip (quando puntate il mouse sopra il numero) che mostra l'analisi matematica. 

Se volete potete istruire MapTool per stampare anche tutto il calcolo matematico di un lancio, utilizzando le opzioni di formattazione dei lanci, nello specifico l' '''Expanded Roll'''.

Pensate a una opzione di formattazione come uno interruttore che dice a MapTool come trattare il risultato di un lancio. Per ottenere la forma espansa editate la macro del vostro attacco in questo modo:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [e:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

Quindi, quando la lanciate, otterrete una cosa simile nella chat:

&lt;blockquote style=&quot;border:1px solid gray;width:50%;&quot;&gt;My attack roll against &lt;font style=&quot;background-color:lightgray; &quot;&gt;Nasty Orcses&lt;/font&gt; is &lt;font style=&quot;background-color:lightgray; color:blue;&quot;&gt;« 1d20+7 = 1 + 7 = 8 »&lt;/font&gt;&lt;/blockquote&gt;

Ora potete vedere l'analisi completa del vostro lancio. 

====Tiri solo risultato====

Ma se ''non'' volete che nessuno sia in gradi di vedere il calcolo? Fin ora entrambe le opzioni consentivano ancora a chiunque di vedere il lancio effettivo. Per farlo usate l'opzione '''Result Roll'''. Editate la vostra macro per assomigliare a questo:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [target] is [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

E il vostro output assomiglierà a questo:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;My attack roll against &lt;font style=&quot;background-color:lightgray&quot;&gt;Nasty Orcses&lt;/font&gt; is 11!&lt;/blockquote&gt;

Notate che non c'è nessuno sfondo grigio dietro il numero 11 e che non ottenete un tooltip se lo puntate. L'opzione Result Roll rimuove la formattazione extra restituendo solo testo semplice. Se volete sbarazzarvi dell'evidenziazione dietro le parole &quot;Nasty Orcses&quot; potete semplicemente cambiare la macro in:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;My attack roll against [r:target] is [r:1d20+7]!&lt;/tt&gt;&lt;/blockquote&gt;

E il nome del target verrà mostrato senza nessuna speciale sottolineatura. 

====Tiri Nascosti====

Alle volte non volete vedere nessun output dalla macro, forse volete mostrare solo del testo ed effettuare i calcoli nelle quinte senza rivelare niente. In questi casi vorrete sostituire &quot;r:&quot; o &quot;e:&quot; dei vecchi esempi con &quot;h:&quot; come nel precedente esempio.

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
[h:myHP = 30]&lt;br/&gt;
[h:Bloodied = myHP / 2]&lt;br/&gt;
My bloodied value is [Bloodied].&lt;/tt&gt;&lt;/blockquote&gt;

L'esempio sovrastante è una illustrazione semplice di come '''hidden roll''' sia utile. In questa macro stiamo facendo queste tre cose:

# Impostando il valore della variabile ''myHP'' a 30 ma dicendo a MapTool di nascondere questo calcolo
# Impostando il valore della variabile ''Bloodied'' alla metà di ''myHP'' ma dicendo a MapTool di nascondere anche questo calcolo
# Mostrando del testo ed inserendo il valore di ''Bloodied'' alla fine dell'output.

Se avviate questa macro l'output avrà queste sembianze:
&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
My bloodied value is &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;
&lt;/blockquote&gt;

Tuttavia se ''non'' usate l'opzione '''hidden roll''', l'output avrà queste sembianze:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
&lt;font style=&quot;background-color:lightgray;&quot;&gt;30&lt;/font&gt; &lt;font style=&quot;background-color:lightgray&quot;&gt;15&lt;/font&gt; My bloodied value is &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;
&lt;/blockquote&gt;

I numeri extra provengono dai due calcoli ''precedenti'' la linea di testo. Non avete bisogno di vederli, quindi, convenientemente, potete nasconderli!

====Formattazione HTML====

Le macro di MapTool supportano la formattazione usando tag HTML di base. Diciamo che volete mettere il nome del vostro targht su una linea, il lancio dell'attacco su un altra e nella terza aggiungere un lancio per il danno. Potete modificare la vostra macro di attacco in questo modo:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;I make an attack roll!&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Target&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attack&lt;/b&gt;: [1d20+7]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Damage&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;
&lt;/tt&gt;&lt;/blockquote&gt;

Quando avvierete questa macro il risultato nella chat sarà questo:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br/&gt;
'''Target''': Nasty Orcses&lt;br/&gt;
'''Attack''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;15&lt;/font&gt;&lt;br/&gt;
'''Damage''': &lt;font style=&quot;background-color:lightgray;&quot;&gt;7&lt;/font&gt;&lt;br/&gt;
&lt;/blockquote&gt;

Questo è semplicemente la formattazione, potete mettere l'output in una tabella, cambiare il font e il colore di sfondo, cambiare la dimensione... molte opzioni sono disponibili!

'''NOTA''': se siete pratici con l'HTML, tenete presente che MapTool supporta l'HTML3.2, alcune cose come il tag &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt; ''non'' vanno chiuse, è &lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;, non &lt;nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt;. In aggiunta MapTool supporta un sottoinsieme del CSS 1 nello stile in linea, e in certi casi anche i fogli di stile. Altre informazioni sui tag CSS supportati possono essere trovati ad [[Supported CSS Styles]].

===Usare proprietà del token===

Fin ora abbiamo manipolato alcune variabili che sono state inserite in anticipo o che MapTool vi chiedeva quando avviavate la macro. Abbiamo una macro di attacco formattata che elenca un target, un attacco e i danni. Tuttavia abbiamo ancora i valori delle macro ''hardcoded'' o abbiamo l'utente che li inserisce da solo ogni volta che serve. Visto che i personaggi dei GDR non sono tutti uguali, dobbiamo pensare ad un modo per automatizzare alcuni numeri, così noi possiamo:

# Fare una macro che molte persone o personaggi possono usare
# Minimizzare il quantitativo di scrittura richiesta!

Come discusso in [[Introduction to Tokens]], ogni token trasporta con se una ''scheda'' personale sottoforma di ''proprietà''. Queste proprietà possono essere ''riferite'' da una macro, quindi potete per esempio scrivere una macro che ''Lancia 1d20 e aggiunge la destrezza del mio personaggio al lancio&quot;. Sono sicuro che vi accorgete di come questo sia utile.

====Impostare alcune proprietà d'esempio====

Naturalmente per far si che le proprietà funzionino, dobbiamo averle settate. È buona cosa che voi leggiate [[Introduction to Properties]] e creiate un file di campagna per il MapTool RPG [[Sample Ruleset]]!

Il primo passo è aprire il file '''MTRPG.cmpgn''' (o qualsiasi altro nome con cui l'abbiate chiamato) e trascinare un token sulla mappa (se non ne avete già uno). Se non avete idea di cosa questo significhi, controllate [[Introduction to Mapping]] per imaprare cose in proposito della creazione di mappe e inserimento dei token sopra di esse. Ora seguite questi passi:

1. Doppio cliccate sul token per aprire la finestra '''Edit Token'''.

2. Andate nella scheda chiamata '''Properties'''.

3. Dovreste vedere una lista simile ad un foglio di calcolo di tutte le proprietà nel tochen che potete editare direttamente (i token hanno altre proprietà che si possono editare solamente con le macro ma per ora  non ci preoccupiano di queste!). Dovreste vedere (se state usando il file MTRPG.cmpgn che abbiamo impostato in [[Introduction to Properties]]):

&lt;blockquote style=&quot;background-color:lightgray; width:50%;&quot;&gt;&lt;tt&gt;
 *Strength:1&lt;br&gt;
 *Dexterity:1&lt;br&gt;
 *Intelligence:1&lt;br&gt;
 *Endurance:1&lt;br&gt;
 *HitPoints(HP):{Endurance * 6}&lt;br&gt;
 *Armor(AR)&lt;br&gt;
 *Movement(MV):{Dexterity}&lt;br&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

4. Cliccate nella cella seguente alla Strength. Un cursore apparirà mostrandovi che potete scrivere in questa cella. Inserite un numero in questa cella come valore di Strength dela token. Io userò il 6. 

5. Ripetere lo step 4 per la Dexterity, Intelligence, e Endurance, scegliendo il numero che preferite (io userò rispettivamente 3, 2 e 6). Ricordate che ''HitPoints'' e ''Movement'' vengono calcolati automaticamente!

6. Cliccate '''OK'''. Avete aggiornato manualmente le proprietà del token. Se cliccate due volte sul token e guardate queste proprietà ancora, vedrete che i numeri inseriti sono stati memorizzati. 

Dovreste anche vedere che ora, quando puntate il mouse sopra il token, una piccola finestrella apparirà nell'angolo in basso a destra della mappa mostrando i valori per le proprietà che avete inserito. Questa finestrella è chiamata '''Statsheet''' ed è un modo veloce per vedere le proprietà del token, è fondamentalmente un veloce riferimento alla &quot;scheda&quot;.

====Far riferimento ad una proprietà del token in una macro====

Ora che avete configurato alcune proprietà, usiamole in una macro. Per la nostra prima macro lanceremo 1d20 e invece di aggingere 7 ci aggiungeremo la '''Strength''' del token. 

1. Aprite la vostra macro di attacco.

2. Nella parte in basso a destra assicuratevi che sia sputanto '''Applica al token selezionato''' (in alternativa la macro non saprà quale Strength del token utilizzare!)

3. Editate la vostra macro per assomigliare a questo:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
&lt;nowiki&gt;I make an attack roll!&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Target&lt;/b&gt;: [r:target]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Attack&lt;/b&gt;: [1d20+Strength]&lt;br&gt;&lt;/nowiki&gt;&lt;br&gt;
&lt;nowiki&gt;&lt;b&gt;Damage&lt;/b&gt;: [1d8+5]&lt;/nowiki&gt;&lt;/tt&gt;
&lt;/blockquote&gt;

Notate che ho sostituito il 7 con la parola &quot;Strength&quot; Visto che &quot;Strength&quot; non è fra virgolette o apici singoli, MapTool saprà che voi intendente sia una variabile e quindi controlla nel ''token corrente'' (che è il token selezionato) per una proprietà chiamata ''Strength''. Se non la trova (o se la proprietà non è stata impostata), vi chiederà d iinserirla (proprio come lo richiede per il valore ''target''). Se lo ''trova'', MapToll userà il valore di ''Strength'' nella macro eseguita. 

4. Selezionate il vostro token e avviate la macro cliccando il bottone. L'output assomiglerà a questo:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
I make an attack roll!&lt;br&gt;
Target: Nasty Orcses&lt;br&gt;
Attack: &lt;font style=&quot;background-color:lightgray;&quot;&gt;27&lt;/font&gt;&lt;br&gt;
Damage: &lt;font style=&quot;background-color:lightgray;&quot;&gt;6&lt;/font&gt;
&lt;/blockquote&gt;

La cosa importante da notare è che se voi posizionate il mouse sopra il risultato del lancio, il tooltip ora mostrerà qualcosa come ''&amp;laquo; 1d20 + Strength = 17 + 10 &amp;raquo;'' indicando che il valore inserito nel lancio di dadi è la proprietà ''Strength''. 

====Cambiare una Proprietà con una Macro====

Le proprietà di un token possono essere cambiate usando una macro. Supponiamo di voler ridurre gli hit pint dopo che un nemico ha colpito il personaggio. Potete editare manualmente il token per cambiare il valore della proprietà ''HP'' oppure potete creare una macro che sottragga l'ammontare di danni dal suo valore di ''HP''. Ecco come:

1. Create una nuova macro nel pannello '''Campagna'''.

2. Nel campo '''Etichetta''' inserite &quot;Danno&quot;.

3. Nel campo '''Comandi''' inserite:

&lt;blockquote style=&quot;background-color:lightgray; border=1px solid gray; width:50%;&quot;&gt;&lt;tt&gt;
Aarrgh! I'm hit! I have [HitPoints = HitPoints - damage] hit points left. &lt;/tt&gt;
&lt;/blockquote&gt;

4. Spuntate la casella '''Applica al token selezionato''' (nell'angolo in basso a sinistra).

5. Cliccate '''OK'''. Quando voi avviate la macro vi verrà mostrato il valore da inserire nella variabile &quot;damage&quot;. Io ho inserito il numero 7. L'output mostrerà qualcosa di simile:

&lt;blockquote style=&quot;border:1px solid gray; width:50%;&quot;&gt;
Aarrgh! I'm hit! I have &lt;font style=&quot;background-color:lightgray;&quot;&gt;23&lt;/font&gt; hit points left
&lt;/blockquote&gt;

E se doppiocliccate su token, vedrete che la proprietà ''HP'' è ora a 23. Cosa ha fatto la macro:

# Richiesto l'inserimeto di ''damage'' all'utente (in questo esempio io ho inserito 7)
# Recuperato il valore di ''HitPoints'' dal token (in questo esempio il valore è 30 perché è uguale ad Endurance * 6)
# Sottratto il valore di ''damage'' dal valore di ''HitPoints'' (30-7 risulta 23)
# Impostato il valore di ''HitPoints'' (originariamente 30) al nuovo totale calcolato (23)
# Stampato il testo e il nuovo valore di ''HitPoints'' nella chat

===Concatenazione stringhe===

Un'abilità essenziale da possedere quando si scrive macro è quella di assemblare ''stringhe'', che sono collezioni di caratteri alfanumerici che possono essere manipolate o mandate inviate alla chat. Frequentemente vorrete costruire una stinga da questi testi che è sempre la stessa (testo &quot;hardcoded&quot;) e testo che cambia (testo che è il valore di una variabile, in altre parole). la costruzione di una stringa è spesso chiamata &quot;concatenazione&quot; ma vuol dire semplicemente &quot;costruire una stringa lunga da pezzi più corti&quot;.

Ci sono due modi per fare questo in una macro, fuori o dentro il comando di macro.

====Fuori dal comando====

Il modo base funziona così:

# Parsare tutta la macro e seprarare i comandi macro dal testo semplice
# Il parser dirotta questi comandi macro nel luogo predisposto al loro processamento (quindi i numeri sono addizionati, i dadi lanciati ...)
# I comandi processati vengono rispediti ''indietro'' al parser che sostituisce i ''risultati''' di questi comandi nei posti dove ognuno di essi deve andare.
# L'intera pasticcio, testo semplice e risultato dei comandi (ora collocati al posto del comandi originali) vengono spediti alla finestra di chat. 

Quindi quando volete mostrare il risultato di un comando insieme a del testo (per esempio, volete stampare la parola &quot;Attacco:&quot; e quindi fargli seguire il risultato di un lancio 1d20) in una macro, il modo più semplice è quello di inserire semplicemente un comando nella posizione giusta nel vostro testo, in questo modo:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
Attack: [1d20]
&lt;/source&gt;
&lt;/blockquote&gt;

Il parser leggerà il tutto, spedirà il comando {{code|[1d20]}} per farlo processare e quindi otterrà il risultato, lo rimpiazzerà al posto del comando e lo invierà alla chat. Il risultato sarà qualcosa come &quot;Attacco: 17&quot;. 

Questo è il modo più diretto per inviare testo alla chat, semplicemente inserire le variabili che volete mostrare nel giusto posto nel testo e queste verranno mostrate nella finestra di chat.

====Dentro un comando macro====

Alle volte però vi servirà usare stringhe ''all'interno'' delle parentesi quadre. In questo caso unire tutto assieme sarà un po' diverso. Prima di tutto, all'interno delle parentesi quadre, avete bisogno di usare virgolette o apostrofi per attorniare quello che vi occorre essere trattato come una stringa. Diversamente MapTool penserà che voi vogliate che ogni parola sia una variabile! Per esempio:

'''Correct String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = &quot;This is a string&quot;]
&lt;/source&gt;
&lt;/blockquote&gt;

'''Incorrect String'''
&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot;&gt;
[string = This is a string]
&lt;/source&gt;
&lt;/blockquote&gt;

Ricordate, fuori dalle quadre non servono apici. Dentro? APICI.

Quindi cosa ci serve per costruire una stringa dinamicamente? Cioè, ciò che ci occorre è creare una stringa in parte &quot;hardcoded&quot; e in parte basata sull'input dell'utente? Non potete indovinare ciò che l'utente inserirà e quindi non potete scrivere questa parte in anticipo. Quello che ''potete'' fare è ''concatenare'' l'input dell'utente dentro la stringa hardcoded. Il modo per farlo e usare il segno d'addizione ('''+'''), che, quando usato fra ''stringhe'', le unirà insieme in un'unica più lunga. 

Ecco un esempio: supponiamo di voler che l'utente inserisca il nome di una abilità e che quindi noi vogliamo inserire questo nome in una stringa hardcoded preesistente che sarà memorizzata in un'altra variabile. Quello che dobbiamo fare sarà:

&lt;blockquote&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:existingString = &quot;The skill name you entered is &quot;]
[h:concatString = existingString+skill+&quot;.&quot;]
[r:concatString]
&lt;/source&gt;
&lt;/blockquote&gt;

E quello che accadrà sarà:

* La linea 1 imposterà la parte &quot;hardcoded&quot; dell'output
* La linea 2 imposterà la stringa concatenata, {{code|concatString}} al valore di {{code|existingString}} ''più'' il valore di {{code|skill}} (che MapTool stramperà) Tuttavia in questo caso, visto che MapTool sa già che {{code|existingString}} è una stringa, non proverà a fare la somma matematica ma appenderà semplicemente il valore di {{code|skill}} dopo il valore di {{code|existingString}}. Per essere grammaticamente corretti, noi concateniamo un'altra piccola stringa alla fine, questa volta, del periodo. Ricordate, le stringhe dentro alle parentesi quadre hanno bisogno di essere protette da apici (ma ovviamente non i nomi delle variabili!)
* La linea 3 mostra il valore finale di {{code|concatString}} dopo che {{code|skill}} gli sia stato appeso. L'output assomiglerà a questo:

&lt;blockquote&gt;
The skill name you entered is Archery.
&lt;/blockquote&gt;

Questo è un esempio molto semplice ma illustra l'essenza della costruzione di stringhe, potete &quot;sommarle&quot; insieme con un segno di addizione.

==Come proseguire?==

Questa guida colora a malapena la superficie di tutte le potenzialità del linguaggio di macro in MapTool. Tuttavia, usando semplicemente queste tecniche base qui mostrate, potrete creare un sacco di utili macro per giocare più facilmente in modo più divertente ai vostri giochi. Le guide successive tratteranno comandi macro e tecniche più avanzate.
{{Languages|Introduction to Macro Writing}}</text>
      <sha1>gmtq6e144ljqaqgz3nqr4jktbuirl91</sha1>
    </revision>
  </page>
  <page>
    <title>User:Matt09858039</title>
    <ns>2</ns>
    <id>1441</id>
    <revision>
      <id>6394</id>
      <timestamp>2015-10-18T21:43:25Z</timestamp>
      <contributor>
        <username>Matt09858039</username>
        <id>632</id>
      </contributor>
      <comment>Created page with &quot;I'm Matt and I live in a seaside city in northern Italy, Caslino D'erba. I'm 21 and I'm will soon finish my study at Gender and Women's Studies.&lt;br&gt;&lt;br&gt;my web site :: [http://...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="315">I'm Matt and I live in a seaside city in northern Italy, Caslino D'erba. I'm 21 and I'm will soon finish my study at Gender and Women's Studies.&lt;br&gt;&lt;br&gt;my web site :: [http://marketing.rapidcrushreview.xyz/index.php/2015/09/20/advanced-facebook-marketing-how-we-get-traffic-leads-and-sales/ visit the next document]</text>
      <sha1>szbncjz6598oh207wgbajykz4zconfo</sha1>
    </revision>
  </page>
  <page>
    <title>Uncomplicated marketing Methods - The Options</title>
    <ns>0</ns>
    <id>1442</id>
    <revision>
      <id>7346</id>
      <parentid>6395</parentid>
      <timestamp>2019-03-31T01:32:10Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Replaced content with &quot;spam&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4">spam</text>
      <sha1>q14liof4rdu0uhzconsihpcyttqeszj</sha1>
    </revision>
  </page>
  <page>
    <title>User:LanConti8655</title>
    <ns>2</ns>
    <id>1443</id>
    <revision>
      <id>6396</id>
      <timestamp>2015-10-18T22:04:04Z</timestamp>
      <contributor>
        <username>LanConti8655</username>
        <id>633</id>
      </contributor>
      <comment>Created page with &quot;20 yrs old Goat Farmer Ryan from Provost, has many passions that include matchstick modeling, Billet Disney Pas Cher and brewing beer. Loves to travel and was motivated after...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="321">20 yrs old Goat Farmer Ryan from Provost, has many passions that include matchstick modeling, Billet Disney Pas Cher and brewing beer. Loves to travel and was motivated after creating a journey to National Archeological Park of Tierradentro.&lt;br&gt;&lt;br&gt;Also visit my page ... [http://lastbillet.com http://www.lastbillet.com]</text>
      <sha1>re5vtwyqzr1o7ghtfvbapdpdtplky0e</sha1>
    </revision>
  </page>
  <page>
    <title>User:ReginaJustice5</title>
    <ns>2</ns>
    <id>1449</id>
    <revision>
      <id>6402</id>
      <timestamp>2015-10-18T23:15:58Z</timestamp>
      <contributor>
        <username>ReginaJustice5</username>
        <id>638</id>
      </contributor>
      <comment>Created page with &quot;Intelligence Officer Royal from Delta, has lots of interests including beach, Erectile Dysfunction (ED) Rememdium and aerobics. Finds motivation through travel and just spent...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="314">Intelligence Officer Royal from Delta, has lots of interests including beach, Erectile Dysfunction (ED) Rememdium and aerobics. Finds motivation through travel and just spent 2 weeks at  Hili.&lt;br&gt;&lt;br&gt;Feel free to visit my website; [http://www.dailymotion.com/video/x39r7ww Erectile Dysfunction (ED) Rememdium book]</text>
      <sha1>bepsrk9789oi36yzy9s9i4ne9eelr1u</sha1>
    </revision>
  </page>
  <page>
    <title>User:DomingaBacon643</title>
    <ns>2</ns>
    <id>1450</id>
    <revision>
      <id>6403</id>
      <timestamp>2015-10-18T23:33:39Z</timestamp>
      <contributor>
        <username>DomingaBacon643</username>
        <id>639</id>
      </contributor>
      <comment>Created page with &quot;Sportspersons  Blake Leclere from Ashern, has interests for instance acting, [http://boombeachhackguide.com/ Boom Beach Hack] and aquariums. Finds travel an incredible experie...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="216">Sportspersons  Blake Leclere from Ashern, has interests for instance acting, [http://boombeachhackguide.com/ Boom Beach Hack] and aquariums. Finds travel an incredible experience after  likely to  Episcopal Ensemble.</text>
      <sha1>dm2vi0xq6yfuqouzl3d12fbiu74x295</sha1>
    </revision>
  </page>
  <page>
    <title>User:SanoraBower55</title>
    <ns>2</ns>
    <id>1452</id>
    <revision>
      <id>6405</id>
      <timestamp>2015-10-19T01:07:48Z</timestamp>
      <contributor>
        <username>SanoraBower55</username>
        <id>641</id>
      </contributor>
      <comment>Created page with &quot;We Wholesale Jerseys Offer Your The Best Quality.&lt;br&gt;My site : [http://www.whlsale.com/ wholesale jerseys]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="106">We Wholesale Jerseys Offer Your The Best Quality.&lt;br&gt;My site : [http://www.whlsale.com/ wholesale jerseys]</text>
      <sha1>q331d516of65mz0ldlxlhkhqwpqv736</sha1>
    </revision>
  </page>
  <page>
    <title>User:UlyssesWade2</title>
    <ns>2</ns>
    <id>1453</id>
    <revision>
      <id>6406</id>
      <timestamp>2015-10-19T01:21:58Z</timestamp>
      <contributor>
        <username>UlyssesWade2</username>
        <id>642</id>
      </contributor>
      <comment>Created page with &quot;30 yrs old Building Associate Rochon from Lac la Biche, has many hobbies and interests [http://pinterest.com/search/pins/?q=including%20playing including playing] team sports,...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1868">30 yrs old Building Associate Rochon from Lac la Biche, has many hobbies and interests [http://pinterest.com/search/pins/?q=including%20playing including playing] team sports, [http://fr.boombeachhackguide.com/ boom beach hack android free,boom beach hack tool 2015,telecharger boom beach hack android,Boom Beach Triche Gratuit,,triche boom beach gratuit android,boom beach hack iphone cydia,boom beach hack iphone no survey,boom beach triche apple,boom beach hack gratuit iphone,free download boom beach hack tool,boom beach hack iphone no jailbreak,boom beach hack android,boom beach hack android gratuit,boom beach hack ipad,boom beach hack ios,boom beach hack iphone jailbreak,download boom beach hack tool v3.19,telecharger boom beach hack tool for android/ios,telecharger boom beach hack,boom beach hack gratuit android,boom beach hack android&amp;ios,boom beach hack apk,boom beach triche app,boom beach diamants gratuits,boom beach cheats iphone no survey,triche boom beach gratuit iphone,boom beach hack ios no jailbreak,boom beach hack ios 8,triche boom beach gratuit,boom beach cheat app,boom beach hack android apk,Boom Beach Hack Android,,boom beach triche ipad,boom beach diamants illimités iphone,Boom Beach Diamants Illimite,,boom beach hack iphone gratuit,boom beach diamants illimités android,Boom Beach Gemmes Gratuit,,boom beach diamants illimité,boom beach diamants illimités android gratuit,boom beach apple cheat,boom beach hack gratuit sans offre,boom beach hack tool v 3.0.7,boom beach triche gratuit,boom beach hack ios ifunbox,telecharger boom beach hack apk,boom beach hack tool download,boom beach hack iphone ifunbox,download boom beach hack no survey,boom beach hack ios gratuit] Beach Hack, and [http://statigr.am/tag/collecting%20artwork collecting artwork]. Has travelled since childhood and has  visited many locales, like Himeji-jo.</text>
      <sha1>cznm54tsrktij0fw4nl3jees5xmtesh</sha1>
    </revision>
  </page>
  <page>
    <title>User:KeiraHlz4667</title>
    <ns>2</ns>
    <id>1471</id>
    <revision>
      <id>6816</id>
      <parentid>6815</parentid>
      <timestamp>2016-05-12T20:10:27Z</timestamp>
      <contributor>
        <username>KeiraHlz4667</username>
        <id>655</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="96">Hi there! :) My name is Tilly, I'm a student studying Neuroscience from Middelburg, Netherlands.</text>
      <sha1>0tx264ae0n9abg8jg7c7wrxegj6gqq4</sha1>
    </revision>
  </page>
  <page>
    <title>Reasons Why Not To Drink .</title>
    <ns>0</ns>
    <id>1478</id>
    <revision>
      <id>6908</id>
      <parentid>6453</parentid>
      <timestamp>2017-11-01T10:39:52Z</timestamp>
      <contributor>
        <username>Bubblobill</username>
        <id>150</id>
      </contributor>
      <comment>Deleted spam page content</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Japanese And German Automakers Dominate Safest Car List In U.</title>
    <ns>0</ns>
    <id>1482</id>
    <revision>
      <id>7344</id>
      <parentid>6469</parentid>
      <timestamp>2019-03-31T01:30:44Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Replaced content with &quot;spam&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4">spam</text>
      <sha1>q14liof4rdu0uhzconsihpcyttqeszj</sha1>
    </revision>
  </page>
  <page>
    <title>The 5 Most Reasonably priced Gasoline Environment friendly Automobiles Of.</title>
    <ns>0</ns>
    <id>1486</id>
    <revision>
      <id>7345</id>
      <parentid>6480</parentid>
      <timestamp>2019-03-31T01:31:34Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Replaced content with &quot;spam&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4">spam</text>
      <sha1>q14liof4rdu0uhzconsihpcyttqeszj</sha1>
    </revision>
  </page>
  <page>
    <title>User:Jagged</title>
    <ns>2</ns>
    <id>1505</id>
    <revision>
      <id>7359</id>
      <parentid>6965</parentid>
      <timestamp>2019-04-11T11:52:11Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <comment>/* Stuff I've Created */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="199">==Basics==

Known as &quot;Jagged&quot; on the [http://forums.rptools.net RPTools Forums]. 

==Stuff I've Created==

* The Draw Explorer
* Drawing related script functions
* Isometric Grid Type
* Figure Tokens</text>
      <sha1>cc2gxwwglcyauu6a7yreynh2e7m0vou</sha1>
    </revision>
  </page>
  <page>
    <title>getTableNames</title>
    <ns>0</ns>
    <id>1506</id>
    <revision>
      <id>6656</id>
      <parentid>6655</parentid>
      <timestamp>2016-05-02T20:14:48Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="912">{{MacroFunction
|name=getTableNames
|version=1.4.0.1
|description=Returns a list containing the names of the tables in the campaign. The type of the value returned depends on the delimiter parameter. The function can be used by players or from a non-trusted macro, but it will only return player-visible tables. When used by a GM or a trusted macro it returns all tables.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTableNames()
getTableNames(delim)
&lt;/source&gt;

If {{code|delim}} is specified then it is used to separate the values in the list; if it is not specified then it defaults to &quot;{{code|,}}&quot;.  When {{code|delim}} is the string &quot;{{code|json}}&quot; the return value will be in the form of a [[JSON Array]].
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:getTableNames()]
[r:getTableNames(&quot;&lt;br&gt;&quot;)]
[r:getTableNames(&quot;json&quot;)]
&lt;/source&gt;
|also=
[[Table|Table]], [[table (function)|table()]]
}}
[[Category:Table Function]]</text>
      <sha1>3i4bpplyzeq9uo3h7kcz3ie9fweft1n</sha1>
    </revision>
  </page>
  <page>
    <title>createTable</title>
    <ns>0</ns>
    <id>1507</id>
    <revision>
      <id>6730</id>
      <parentid>6714</parentid>
      <timestamp>2016-05-03T17:28:56Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1023">{{MacroFunction
|name=createTable
|version=1.4.0.1
|trusted=true
|description=
Creates an empty table, specifying its access levels and optional image.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
createTable(tableName, visible, accessible)
createTable(tableName, visible, accessible, imageId)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the Table.}}
{{param|visible|Whether or not the table can be seen by players in the Table Window, {{true}} or {{false}}.}}
{{param|accessible|Whether or not the table can be used by players to lookup values, {{true}} or {{false}}.}}
{{param|imageId|Optional and is the asset id of an image that will be used for the table in the Table Window. If an invalid or missing asset id is used, the table will display a red &quot;X&quot;.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:createTable(&quot;tableX&quot;,1,1)]
[r:createTable(&quot;tableY&quot;,1,1,getTableImage(&quot;tableZ&quot;))]

&lt;/source&gt;
|also=
{{func|addTableEntry}} {{func|setTableRoll}} {{func|deleteTable}}
}}
[[Category:Table Function]]</text>
      <sha1>d3silnemvb3wj89kazrrfhdboxui7hd</sha1>
    </revision>
  </page>
  <page>
    <title>deleteTable</title>
    <ns>0</ns>
    <id>1508</id>
    <revision>
      <id>6729</id>
      <parentid>6704</parentid>
      <timestamp>2016-05-03T17:28:26Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="349">{{MacroFunction
|name=deleteTable
|version=1.4.0.1
|trusted=true
|description=Removes the specified table from the campaign.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
deleteTable(tableName)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the table to be deleted.}}

|also=
{{func|createTable}}
}}
[[Category:Table Function]]</text>
      <sha1>pr8s02ev0gb344pw27c7cmab6x9g0q5</sha1>
    </revision>
  </page>
  <page>
    <title>addTableEntry</title>
    <ns>0</ns>
    <id>1509</id>
    <revision>
      <id>6727</id>
      <parentid>6717</parentid>
      <timestamp>2016-05-03T17:06:13Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1239">{{MacroFunction
|name=addTableEntry
|version=1.4.0.1
|trusted=true
|description=
Adds a new row to the specified table.

'''Note:''' adding a row to a table will not automatically change the table row value, so this should be updated to avoid possible errors (See {{func|setTableRoll}} function).
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
addTableEntry(tableName,rangeStart,rangeEnd,result)
addTableEntry(tableName,rangeStart,rangeEnd,result,imageId)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the Table.}}
{{param|rangeStart|An integer indicating the lowest value that will return this row.}}
{{param|rangeEnd|An integer indicating the highest value that will return this row.}}
{{param|result|A string containing the result returned by the '''table()''' function.}}
{{param|imageId|Optional and is the asset id of an image that will be returned by the '''tableImage()''' function.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:addTableEntry(&quot;test&quot;,1,3,&quot;bert&quot;)]
[r:addTableEntry(&quot;test&quot;,4,4,&quot;fred&quot;)]
[r:addTableEntry(&quot;test&quot;,5,5,&quot;alf&quot;, getTokenImage())]
[r:setTableRoll(&quot;test&quot;,&quot;&quot;)]
&lt;/source&gt;
|also=
{{func|setTableRoll}} {{func|table}} {{func|tableImage}} {{func|deleteTableEntry}}
}}
[[Category:Table Function]]</text>
      <sha1>srcln83qhtx5i9v9f0zb1yjghholl67</sha1>
    </revision>
  </page>
  <page>
    <title>deleteTableEntry</title>
    <ns>0</ns>
    <id>1510</id>
    <revision>
      <id>6731</id>
      <parentid>6728</parentid>
      <timestamp>2016-05-03T17:29:58Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="777">{{MacroFunction
|name=deleteTableEntry
|version=1.4.0.1
|trusted=true
|description=
Removes a row from the specified table.

'''Note:''' deleting a row from a table will not automatically change the table row value, so this should be updated to avoid possible errors.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
deleteTableEntry(tableName,roll)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string specifying the table from which the row will be removed.}}
{{param|roll|An integer and the value that specifies the row to be removed.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:addTableEntry(&quot;test&quot;,1,3,&quot;bert&quot;)]
[r:deleteTableEntry(&quot;test&quot;,2)]
[r:setTableRoll(&quot;test&quot;,&quot;&quot;)]
&lt;/source&gt;
|also=
{{func|clearTable}} {{func|addTableEntry}} {{func|setTableRoll}}
}}
[[Category:Table Function]]</text>
      <sha1>b7ggpz9nmtw38sjxw9hkfjww3vignmg</sha1>
    </revision>
  </page>
  <page>
    <title>getTableRoll</title>
    <ns>0</ns>
    <id>1511</id>
    <revision>
      <id>6725</id>
      <parentid>6706</parentid>
      <timestamp>2016-05-03T17:04:03Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="343">{{MacroFunction
|name=getTableRoll
|version=1.4.0.1
|trusted=true
|description=
Returns the roll expression for the specified table.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTableRoll(tableName)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the Table.}}
|also=
{{func|setTableRoll}}
}}
[[Category:Table Function]]</text>
      <sha1>77rx88jbejlvt91v31492amrzh92glf</sha1>
    </revision>
  </page>
  <page>
    <title>setTableRoll</title>
    <ns>0</ns>
    <id>1512</id>
    <revision>
      <id>6726</id>
      <parentid>6709</parentid>
      <timestamp>2016-05-03T17:04:18Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="618">{{MacroFunction
|name=setTableRoll
|version=1.4.0.1
|trusted=true
|description=
Sets the roll expression for the specified table.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTableRoll(tableName, roll)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the Table.}}
{{param|roll|A string containing the new roll expression. If the value is &quot;&quot; the roll will be set to a default expression that should cover all table entries.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:setTableRoll(&quot;test&quot;,&quot;&quot;)]
[r:setTableRoll(&quot;test&quot;,&quot;1d6+1&quot;)]
&lt;/source&gt;
|also=
{{func|getTableRoll}}
}}
[[Category:Table Function]]</text>
      <sha1>8dh1x0vd1unn07svyuw8voftft3y7yz</sha1>
    </revision>
  </page>
  <page>
    <title>clearTable</title>
    <ns>0</ns>
    <id>1513</id>
    <revision>
      <id>6732</id>
      <parentid>6702</parentid>
      <timestamp>2016-05-03T17:30:48Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="354">{{MacroFunction
|name=clearTable
|version=1.4.0.1
|trusted=true
|description=
Removes all rows from the specified table.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
clearTable(tableName)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the Table.}}
|also=
{{func|deleteTableEntry}} {{func|deleteTable}}
}}
[[Category:Table Function]]</text>
      <sha1>5ohgos7sxwrflpf8z5nrr4xjh2c3qm4</sha1>
    </revision>
  </page>
  <page>
    <title>getTableVisible</title>
    <ns>0</ns>
    <id>1514</id>
    <revision>
      <id>6721</id>
      <parentid>6674</parentid>
      <timestamp>2016-05-03T17:00:44Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="434">{{MacroFunction
|name=getTableVisible
|version=1.4.0.1
|description=
Returns either {{true}} or {{false}} depending upon whether or not the table is visible to players.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTableVisible (tableName)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the Table.}}
|also=
{{func|setTableVisible}} {{func|getTableAccess}} {{func|setTableAccess}}
}}
[[Category:Table Function]]</text>
      <sha1>rifq5xatuyitibskujf8680g4mqqqx0</sha1>
    </revision>
  </page>
  <page>
    <title>setTableVisible</title>
    <ns>0</ns>
    <id>1515</id>
    <revision>
      <id>6722</id>
      <parentid>6710</parentid>
      <timestamp>2016-05-03T17:01:35Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="620">{{MacroFunction
|name=setTableVisible
|version=1.4.0.1
|trusted=true
|description=
Sets whether or not the specified table is visible to players.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTableVisible(tableName, visible)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the Table.}}
{{param|visible|Whether or not the table can be seen by players in the Table Window, {{true}} or {{false}}.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:setTableVisible(&quot;randomMonsters&quot;, 0)]
&lt;/source&gt;
|also=
{{func|getTableVisible}} {{func|getTableAccess}} {{func|setTableAccess}}
}}
[[Category:Table Function]]</text>
      <sha1>2eacis18so5dhar12r6dkn3j1oitgnl</sha1>
    </revision>
  </page>
  <page>
    <title>getTableAccess</title>
    <ns>0</ns>
    <id>1516</id>
    <revision>
      <id>6723</id>
      <parentid>6676</parentid>
      <timestamp>2016-05-03T17:02:23Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="437">{{MacroFunction
|name=getTableAccess
|version=1.4.0.1
|description=
Returns either {{true}} or {{false}} depending upon whether or not the table may be accessed by players.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTableAccess(tableName)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the Table.}}
|also=
{{func|setTableAccess}} {{func|getTableVisible}} {{func|setTableVisible}}
}}
[[Category:Table Function]]</text>
      <sha1>ltp6jz3sgte37i48iqcimpourpjbv30</sha1>
    </revision>
  </page>
  <page>
    <title>setTableAccess</title>
    <ns>0</ns>
    <id>1517</id>
    <revision>
      <id>6724</id>
      <parentid>6707</parentid>
      <timestamp>2016-05-03T17:03:03Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="631">{{MacroFunction
|name=setTableAccess
|version=1.4.0.1
|trusted=true
|description=
Sets whether or not the specified table is accessible to players.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTableAccess(tableName, accessible)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the Table.}}
{{param|accessible|Whether or not the table can be accessed by players in the Table Window, {{true}} or {{false}}.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:setTableAccess(&quot;randomMonsters&quot;, 0)]
&lt;/source&gt;
|also=
{{func|getTableAccess}} {{func|getTableVisible}} {{func|setTableVisible}}
}}
[[Category:Table Function]]</text>
      <sha1>bnk479wbrb3qnyql3dcnh5x2hgs0jg4</sha1>
    </revision>
  </page>
  <page>
    <title>setTableEntry</title>
    <ns>0</ns>
    <id>1518</id>
    <revision>
      <id>7168</id>
      <parentid>7167</parentid>
      <timestamp>2019-03-04T10:11:44Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="729">{{MacroFunction
|name=setTableEntry
|version=1.4.0.1
|trusted=true
|description=
Sets the result for a specified roll value. Returns {{true}} if update successful and {{false}} if not. 
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTableEntry(tableName, roll, result)
setTableEntry(tableName, roll, result, imageId)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the Table.}}
{{param|roll|A value to select the desired table entry.}}
{{param|result|A string containing the result returned by the '''table()''' function.}}
{{param|imageId|Optional and is the asset id of an image that will be returned by the '''tableImage()''' function.}}
|also=
[[table (function)|table()]]
}}
[[Category:Table Function]]</text>
      <sha1>0nxy6mu08kn7kjg2fcx8hjb6x1i2yvm</sha1>
    </revision>
  </page>
  <page>
    <title>getMapVisible</title>
    <ns>0</ns>
    <id>1519</id>
    <revision>
      <id>6693</id>
      <parentid>6683</parentid>
      <timestamp>2016-05-03T11:42:28Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="511">{{MacroFunction
|name=getMapVisible
|version=1.4.0.1
|description=
Returns {{true}} or {{false}} indicating whether the specified map is visible to players. If no map is specified the current map is selected.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMapVisible()
getMapVisible(mapName)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|Optional. A string containing the name of the Map.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:getMapVisible()]
[r:getMapVisible(&quot;Grasslands&quot;)]
&lt;/source&gt;
}}
[[Category:Map Function]]</text>
      <sha1>a0ngf5zjgdevv185zaqisf50iwa4ac1</sha1>
    </revision>
  </page>
  <page>
    <title>setMapVisible</title>
    <ns>0</ns>
    <id>1520</id>
    <revision>
      <id>6700</id>
      <parentid>6692</parentid>
      <timestamp>2016-05-03T12:17:50Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="593">{{MacroFunction
|name=setMapVisible
|version=1.4.0.1
|trusted=true
|description=
Sets a maps visibility to players to {{true}} or {{false}}. If no map is specified the current map is selected.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMapVisible(visible)
setMapVisible(visible, mapName)
&lt;/source&gt;
'''Parameters'''
{{param|visible|Whether or not the map can be seen by players, {{true}} or {{false}}.}}
{{param|mapName|A string containing the name of the Map.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:setMapVisible(1)]
[r:setMapVisible(1, &quot;Grasslands&quot;)]
&lt;/source&gt;
}}
[[Category:Map Function]]</text>
      <sha1>4cahinz9tbscd2zelnc9uwtw3barq24</sha1>
    </revision>
  </page>
  <page>
    <title>setMapName</title>
    <ns>0</ns>
    <id>1521</id>
    <revision>
      <id>6699</id>
      <parentid>6691</parentid>
      <timestamp>2016-05-03T12:17:23Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="495">{{MacroFunction
|name=setMapName
|version=1.4.0.1
|trusted=true
|description=
Changes the name of a specified map.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMapName(oldMapName, newMapName)
&lt;/source&gt;
'''Parameters'''
{{param|oldMapName|String specifying the current name of the map you wish to rename.}}
{{param|newMapName|A string containing the name to which you want it changed.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:setMapName(&quot;Grasslands&quot;,&quot;Map1&quot;)]
&lt;/source&gt;
}}
[[Category:Map Function]]</text>
      <sha1>9h73faiqlrg5b56gpf61xn91te45chv</sha1>
    </revision>
  </page>
  <page>
    <title>copyMap</title>
    <ns>0</ns>
    <id>1522</id>
    <revision>
      <id>7195</id>
      <parentid>6698</parentid>
      <timestamp>2019-03-06T07:50:04Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="546">{{MacroFunction
|name=copyMap
|version=1.4.0.1
|trusted=true
|description=
Creates a copy of an specified map, with the new map name. Returns the name of the new map.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
copyMap(existingMapName, newMapName)
&lt;/source&gt;
'''Parameters'''
{{param|existingMapName|The name of the existing map you wish to copy.}}
{{param|newMapName|A string containing the name of the new copy.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:copyMap(&quot;BaseMap&quot;,&quot;Tower&quot;)]
[h:setMapVisible(1,&quot;Tower&quot;)]
&lt;/source&gt;
}}
[[Category:Map Function]]</text>
      <sha1>q1mubt4hw26p8klfxspus7jhqe5kh87</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Map Function</title>
    <ns>14</ns>
    <id>1523</id>
    <revision>
      <id>6689</id>
      <timestamp>2016-05-03T11:38:49Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <comment>Created page with &quot;[[Category:Macro Function]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1>jit4cp7ulz99kgahs8mkw0dj7f3rbom</sha1>
    </revision>
  </page>
  <page>
    <title>User:RPTroll</title>
    <ns>2</ns>
    <id>1524</id>
    <revision>
      <id>6770</id>
      <timestamp>2016-05-06T17:21:00Z</timestamp>
      <contributor>
        <username>RPTroll</username>
        <id>16</id>
      </contributor>
      <comment>Created page with &quot;RPTroll is the RPTools Bard, covering social media and the main rptools.net website.&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="84">RPTroll is the RPTools Bard, covering social media and the main rptools.net website.</text>
      <sha1>30fbnkyoc6k5krbvh54i0cno4j2mqm3</sha1>
    </revision>
  </page>
  <page>
    <title>setTokenWidth</title>
    <ns>0</ns>
    <id>1525</id>
    <revision>
      <id>7232</id>
      <parentid>6828</parentid>
      <timestamp>2019-03-07T04:51:39Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="654">{{MacroFunction
|name=setTokenWidth
|proposed=false
|trusted=false
|version=1.3b91
|description=
Sets the token's image width in pixels (boundary size).

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenWidth(size)
setTokenWidth(size, id)
&lt;/source&gt;

'''Parameters'''
{{param|size|grid size of the token}}
{{param|id|The token {{code|id}} of the token to set its width.  Defaults to the [[Current token]].}}{{TrustedParameter}}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: setTokenWidth(300, &quot;Dragon&quot;)]
[r: setTokenHeight(150, &quot;Dragon&quot;)]
&lt;/source&gt;


|also=
{{func|setTokenHeight}}, {{func|getTokenHeight}}, {{func|getTokenWidth}}
}}
[[Category:Token Function]]</text>
      <sha1>0d5da4y4ddrxw863v6zj1vb9w7ouuv9</sha1>
    </revision>
  </page>
  <page>
    <title>setTokenHeight</title>
    <ns>0</ns>
    <id>1526</id>
    <revision>
      <id>7234</id>
      <parentid>7233</parentid>
      <timestamp>2019-03-07T04:52:37Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="637">{{MacroFunction
|name=setTokenHeight
|proposed=false
|trusted=false
|version=1.3b91
|description=
Sets the token's image height in pixels (boundary size).

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenHeight(size, id)
&lt;/source&gt;

'''Parameters'''
{{param|size|grid size of the token}}
{{param|id|The token {{code|id}} of the token to set its height.  Defaults to the [[Current Token]].}}{{TrustedParameter}}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: setTokenHeight(300, &quot;Dragon&quot;)]
[r: setTokenHeight(150, &quot;Dragon&quot;)]
&lt;/source&gt;

|also=
{{func|setTokenWidth}}, {{func|getTokenHeight}}, {{func|getTokenWidth}}
}}
[[Category:Token Function]]</text>
      <sha1>ff2fuiliakmeikhf5egpffmjab1d9s9</sha1>
    </revision>
  </page>
  <page>
    <title>getMaxRecursionDepth</title>
    <ns>0</ns>
    <id>1527</id>
    <revision>
      <id>7074</id>
      <parentid>7071</parentid>
      <timestamp>2019-02-16T22:33:17Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>Azhrei moved page [[getMaxRecusionDepth]] to [[getMaxRecursionDepth]] without leaving a redirect: fix typo in function name</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="666">{{MacroFunction
|name=getMaxRecursionDepth
|version=1.4.0.2
|description=
Returns the max amount of recursive calls that are allowed. However The recursion depth of the parser is not quite straight forward, there are actually two different recursion depths that track two different types of recursive calls, you can have up to 150 of each, the getRecursionDepth() will return the greater of the two levels.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMaxRecursionDepth()
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: getMaxRecursionDepth()]
&lt;/source&gt;

|also=
{{func|getRecursionDepth}}, 
{{func|setMaxRecursionDepth}}.

}}
[[Category:Loop and Recursion limits]]</text>
      <sha1>94hle8t9g8f80w1clrmc2xd6bxxb23u</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Loop and Recursion limits</title>
    <ns>14</ns>
    <id>1528</id>
    <revision>
      <id>6831</id>
      <timestamp>2016-07-20T07:44:46Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <comment>Created page with &quot;[[Category:Macro Function]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1>jit4cp7ulz99kgahs8mkw0dj7f3rbom</sha1>
    </revision>
  </page>
  <page>
    <title>getRecursionDepth</title>
    <ns>0</ns>
    <id>1529</id>
    <revision>
      <id>6843</id>
      <parentid>6836</parentid>
      <timestamp>2016-07-20T08:18:54Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="386">{{MacroFunction
|name=getRecursionDepth
|version=1.4.0.2
|description=
Returns the current amount of recursive calls that are used.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getRecursionDepth()
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: getRecursionDepth()]
&lt;/source&gt;

|also=
{{func|setMaxRecusionDepth}},
{{func|getMaxRecusionDepth}}.


}}
[[Category:Loop and Recursion limits]]</text>
      <sha1>emr1lb6ion0q6ckoyb0mtdq5knky98n</sha1>
    </revision>
  </page>
  <page>
    <title>setMaxRecursionDepth</title>
    <ns>0</ns>
    <id>1530</id>
    <revision>
      <id>7075</id>
      <parentid>7072</parentid>
      <timestamp>2019-02-16T22:34:35Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>Azhrei moved page [[setMaxRecusionDepth]] to [[setMaxRecursionDepth]] without leaving a redirect: fix typo in function name</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="750">{{MacroFunction
|name=setMaxRecursionDepth
|version=1.4.0.2
|description=
Returns the current amount of recursive calls that are used.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMaxRecursionDepth(depth)
&lt;/source&gt;
Where 
* ''depth'' is the new maximum allowed recursive calls. Note that the depth can never be lower then the default depth, which is 150, setting it lower will result in a depth of 150. Setting this value higher is obviously at your own risk as this has a serious impact on the stack. Note that this settings lasts only for the current session. 

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setMaxRecursionDepth(200)]
&lt;/source&gt;

|also=
{{func|getRecursionDepth}},
{{func|getMaxRecursionDepth}}.


}}
[[Category:Loop and Recursion limits]]</text>
      <sha1>59yxhfrbptkxqzvp3u78q8eko8v28sy</sha1>
    </revision>
  </page>
  <page>
    <title>getMaxLoopIterations</title>
    <ns>0</ns>
    <id>1531</id>
    <revision>
      <id>6845</id>
      <parentid>6838</parentid>
      <timestamp>2016-07-20T08:18:58Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="422">{{MacroFunction
|name=getMaxLoopIterations
|version=1.4.0.2
|description=
Returns the max amount of loops (in {{roll|count}}, {{roll|foreach}}, {{roll|for}}, {{roll|while}}) that are allowed.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMaxLoopIterations()
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: getMaxLoopIterations()]
&lt;/source&gt;

|also=
{{func|setMaxLoopIterations}}.

}}
[[Category:Loop and Recursion limits]]</text>
      <sha1>ripdyci8s9mwwu4i1yobfaex3jfbvmc</sha1>
    </revision>
  </page>
  <page>
    <title>setMaxLoopIterations</title>
    <ns>0</ns>
    <id>1532</id>
    <revision>
      <id>6842</id>
      <parentid>6839</parentid>
      <timestamp>2016-07-20T08:18:52Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="652">{{MacroFunction
|name=setMaxLoopIterations
|version=1.4.0.2
|description=
Sets the max amount of loops (in {{roll|count}}, {{roll|foreach}}, {{roll|for}}, {{roll|while}}) that are allowed. The current allowed max is 10,000 and this is also the minimum. Note that this settings lasts only for the current session. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setMaxLoopIterations(numLoops)
&lt;/source&gt;
Where 
* ''numLoops'' is the new maximum allowed iterations, this value cannot be lower than 10,000

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: setMaxLoopIterations()]
&lt;/source&gt;

|also=
{{func|getMaxLoopIterations}}.

}}
[[Category:Loop and Recursion limits]]</text>
      <sha1>ti09eb6du98bcwlm7wvcg5pesh6y08o</sha1>
    </revision>
  </page>
  <page>
    <title>getMacroContext</title>
    <ns>0</ns>
    <id>1533</id>
    <revision>
      <id>6847</id>
      <parentid>6846</parentid>
      <timestamp>2016-07-20T09:45:08Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="465">{{MacroFunction
|name=getMacroContext
|version=1.4.0.2
|description=
Returns information about the source, name, index of the button of the macro being executed as a JSON object.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getMacroContext()
&lt;/source&gt;

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: getMacroContext()]
&lt;/source&gt;

Returns for example:
 {&quot;stackSize&quot;:1,&quot;trusted&quot;:true,&quot;name&quot;:&quot;aMacroName&quot;,&quot;buttonIndex&quot;:127,&quot;source&quot;:&quot;lib:Test&quot;}

}}
[[Category:Metamacro Function]]</text>
      <sha1>4i1pu1m9udvrwyxxc9oejxv2n3a0c8w</sha1>
    </revision>
  </page>
  <page>
    <title>json.rolls</title>
    <ns>0</ns>
    <id>1534</id>
    <revision>
      <id>7127</id>
      <parentid>6989</parentid>
      <timestamp>2019-03-01T03:45:53Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1096">{{MacroFunction
|name=json.rolls
|proposed=false
|trusted=false
|version=1.4.0.5
|description=
Rolls the dice expression the requested number of times and returns a JSON Array with the result.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.rolls(roll, dim1)
json.rolls(roll, dim1, dim2)
&lt;/source&gt;

'''Parameters'''
{{param|roll|A string containing a dice roll expression.}}
{{param|dim1|The dimension of the returned array.}}
{{param|dim2|Optional: The second dimension for a two dimensional array.}}

This function takes 2 or 3 parameters and returns a json array
json.rolls(roll, dim1, dim2) =&gt; returns a json array with the rolls performed

''Example:''&lt;source lang=&quot;mtmacro&quot; line&gt;
{json.rolls(&quot;3d6&quot;, 6)} =&gt; [ 11, 7, 15, 8, 10, 13 ]
&lt;/source&gt;

''Example:''
The three parameter version returns a two dimensional array
&lt;source lang=&quot;mtmacro&quot; line&gt;
{json.rolls(&quot;3d6&quot;, 6, 4)} =&gt; [ [ 11, 13, 11, 13 ], [ 8, 11, 17, 10 ], [ 8, 11, 14, 11 ], [ 6, 8, 13, 6 ], [ 6, 11, 8, 10 ], [ 10, 7, 17, 11 ] ]
&lt;/source&gt;

|also=
[[Introduction to JSON Datatypes ]], {{func|json.objrolls}}
[[Category:JSON Function]]
}}</text>
      <sha1>qn305jao5mw262e86i1e06art71up8g</sha1>
    </revision>
  </page>
  <page>
    <title>json.objrolls</title>
    <ns>0</ns>
    <id>1535</id>
    <revision>
      <id>7124</id>
      <parentid>6988</parentid>
      <timestamp>2019-03-01T03:38:52Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2018">{{MacroFunction
|name=json.objrolls
|proposed=false
|trusted=false
|version=1.4.0.5
|description=
Is similar to {{func|json.rolls}} but returns a JSON object.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.objrolls(names, stat, rolls)
&lt;/source&gt;

'''Parameters'''
{{param|names|A JSON array containing the names to be used for each group.}}
{{param|stat|A JSON array with the stat names.}}
{{param|rolls|Either a single string containing a dice roll expression  or a JSON array of dice roll expressions.}}

This will generate rolls for each stat in a group for each &quot;name&quot;. Rolls is either a single string with a roll expression in which case every stat will use same roll expression, or a json array with a roll expression for each stat (so must be same size as stat).

''Example:''&lt;source lang=&quot;mtmacro&quot; line&gt;
{json.indent(json.objrolls(&quot;['henchman1', 'henchman2', 'henchman3']&quot;,
        &quot;['Str', 'Dex', 'Con', 'Int', 'Wis', 'Chr']&quot;,
        &quot;3d6&quot;),2)}
&lt;/source&gt;

&lt;pre&gt;code:{  &quot;henchman1&quot;:   {
    &quot;Str&quot;: 10,
    &quot;Dex&quot;: 12,
    &quot;Con&quot;: 10,
    &quot;Int&quot;: 10,
    &quot;Wis&quot;: 8,
    &quot;Chr&quot;: 12
  },
       &quot;henchman2&quot;:   {
    &quot;Str&quot;: 11,
    &quot;Dex&quot;: 10,
    &quot;Con&quot;: 7,
    &quot;Int&quot;: 13,
    &quot;Wis&quot;: 9,
    &quot;Chr&quot;: 7
  },
       &quot;henchman3&quot;:   {
    &quot;Str&quot;: 10,
    &quot;Dex&quot;: 10,
    &quot;Con&quot;: 10,
    &quot;Int&quot;: 12,
    &quot;Wis&quot;: 15,
    &quot;Chr&quot;: 13
  }}&lt;/pre&gt;

''Example:''&lt;source lang=&quot;mtmacro&quot; line&gt;
{json.indent(json.objrolls(&quot;['henchman1', 'henchman2', 'henchman3']&quot;,
        &quot;['Str', 'Dex', 'Con', 'Int', 'Wis', 'Chr']&quot;,
        &quot;['3d6+1', '3d6', '3d6', '3d6-2', '3d6', '2d6']&quot;),2)}
&lt;/source&gt;

&lt;pre&gt;code:{  &quot;henchman1&quot;:   {
    &quot;Str&quot;: 11,
    &quot;Dex&quot;: 12,
    &quot;Con&quot;: 13,
    &quot;Int&quot;: 8,
    &quot;Wis&quot;: 10,
    &quot;Chr&quot;: 11
  },
        &quot;henchman2&quot;:   {
    &quot;Str&quot;: 12,
    &quot;Dex&quot;: 11,
    &quot;Con&quot;: 12,
    &quot;Int&quot;: 8,
    &quot;Wis&quot;: 12,
    &quot;Chr&quot;: 3
  },
        &quot;henchman3&quot;:   {
    &quot;Str&quot;: 12,
    &quot;Dex&quot;: 13,
    &quot;Con&quot;: 9,
    &quot;Int&quot;: 8,
    &quot;Wis&quot;: 13,
    &quot;Chr&quot;: 7
  }}&lt;/pre&gt;

|also=
[[Introduction to JSON Datatypes ]], {{func|json.rolls}}
[[Category:JSON Function]]
}}</text>
      <sha1>q2t24sdb4x31lg6dmhddgjlzhcyf0li</sha1>
    </revision>
  </page>
  <page>
    <title>setAlwaysVisible</title>
    <ns>0</ns>
    <id>1536</id>
    <revision>
      <id>7227</id>
      <parentid>6872</parentid>
      <timestamp>2019-03-07T04:45:24Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="705">{{MacroFunction
|name=setAlwaysVisible
|version=1.4.2.0
|description=
Turns the corresponding setting for the token on or off.  '''Always Visible''' is a VBL setting which can be found in the '''Edit...''' menu of the token under the VBL tab. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setAlwaysVisible(value, [id])
&lt;/source&gt;

'''Parameters'''
{{param|value|The value of the setting to set, {{true}} or {{false}}.}}
{{param|id|OPTIONAL: The token {{code|id}} of the token for which you want to set this setting, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setAlwaysVisible(1)]
[h: setAlwaysVisible(0, &quot;Dragon&quot;)]
&lt;/source&gt;
}}
[[Category:VBL Function]]</text>
      <sha1>mllsv5xbav13ktlt16hirerghebn6qo</sha1>
    </revision>
  </page>
  <page>
    <title>getAlwaysVisible</title>
    <ns>0</ns>
    <id>1537</id>
    <revision>
      <id>7202</id>
      <parentid>6873</parentid>
      <timestamp>2019-03-06T21:32:40Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="820">{{MacroFunction
|name=getAlwaysVisible
|version=1.4.2.0
|description=
Returns the value of the corresponding setting for the token. '''Always Visible''' is a VBL setting which can be found in the '''Edit...''' menu of the token under the VBL tab. 

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getAlwaysVisible([id])
&lt;/source&gt;

'''Parameters'''
{{param|value|The value of the setting to set, {{code|true}}({{code|1}}) or {{code|false}}({{code|0}}).}}
{{param|id|OPTIONAL: The token {{code|id}} of the token for which you want to set this setting, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
The Always Visible setting for Dragon is currently set to: [r: getAlwaysVisible(&quot;Dragon&quot;)]
[h, token(&quot;Dragon&quot;): isVisible = getAlwaysVisible()]
&lt;/source&gt;
}}
[[Category:VBL Function]]</text>
      <sha1>jykg19gxj1dx9cp4zeyl63dbarx1xja</sha1>
    </revision>
  </page>
  <page>
    <title>Category:VBL Function</title>
    <ns>14</ns>
    <id>1538</id>
    <revision>
      <id>6874</id>
      <timestamp>2017-08-10T20:45:20Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <comment>Created page with &quot;[[Category:Macro Function]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1>jit4cp7ulz99kgahs8mkw0dj7f3rbom</sha1>
    </revision>
  </page>
  <page>
    <title>getTokenOpacity</title>
    <ns>0</ns>
    <id>1539</id>
    <revision>
      <id>7207</id>
      <parentid>7205</parentid>
      <timestamp>2019-03-06T21:44:04Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="566">{{MacroFunction
|name=getTokenOpacity
|version=1.4.2.0
|description=
Returns the opacity value of the corresponding token.  

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenOpacity([id])
&lt;/source&gt;

'''Parameters'''
{{param|id|OPTIONAL: The token {{code|id}} of the token for which you want to retrieve the opacity, defaults to the [[Current Token]].}}{{TrustedParameter}}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
The opacity for the Dragon token is: [r: getTokenOpacity(&quot;Dragon&quot;)]
[h, token(&quot;Dragon&quot;): opacity = getTokenOpacity()]
&lt;/source&gt;
}}
[[Category:VBL Function]]</text>
      <sha1>bpe1u618h7iwfkopgfo8fzn0kneaebr</sha1>
    </revision>
  </page>
  <page>
    <title>setTokenOpacity</title>
    <ns>0</ns>
    <id>1540</id>
    <revision>
      <id>6882</id>
      <parentid>6881</parentid>
      <timestamp>2017-08-10T21:09:48Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="625">{{MacroFunction
|name=setTokenOpacity
|version=1.4.2.0
|description=sets the opacity value of the corresponding token.  

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenOpacity(value,[id])
&lt;/source&gt;

'''Parameters'''
{{param|value|The value of the opacity to set, ranging from 0 (completely transparent) to 100 (completely opaque).}}
{{param|id|OPTIONAL: The token {{code|id}} of the token for which you want to retrieve the opacity, defaults to the [[Current Token]]. }}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setTokenOpacity(50, &quot;Dragon&quot;)]
[h, token(&quot;Dragon&quot;): setTokenOpacity(75)]
&lt;/source&gt;
}}
[[Category:VBL Function]]</text>
      <sha1>ggjg2xnos75yddn0luedwpmm0tuy1xe</sha1>
    </revision>
  </page>
  <page>
    <title>transferVBL</title>
    <ns>0</ns>
    <id>1541</id>
    <revision>
      <id>7324</id>
      <parentid>7236</parentid>
      <timestamp>2019-03-23T22:44:43Z</timestamp>
      <contributor>
        <username>Naciron</username>
        <id>664</id>
      </contributor>
      <comment>update to reflect new delete parameter</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1850">{{MacroFunction
|name=transferVBL
|proposed=false
|trusted=true
|version=1.4.2.0
|description=
Directly transfers VBL from token to the VBL layer if true; otherwise, it transfers from the VBL layer to the token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
transferVBL(value)
transferVBL(value, delete)
transferVBL(value, id)
transferVBL(value, delete, id)
&lt;/source&gt;

This function can be used to transfer TOKEN VBL to NORMAL VBL or vice versa. Token VBL moves with the token, can be set under the VBL tab on the token '''Edit...''' menu, and is colored YELLOW.  Normal VBL is static, can be created with the VBL drawing tools, or with the use of VBL functions and is colored BLUE.

'''Parameters'''
{{param|value|The value of the setting to set:
** {{code|0}} transfer normal (blue) VBL to token (yellow) VBL}}
** {{code|1}} transfer token (yellow) VBL to normal (blue) VBL
{{param|value|Defines if the transfered VBL is actually deleted from the source.}}
{{param|id|OPTIONAL: The token {{code|id}} of the token for which you want to set this setting, defaults to the [[Current Token]].}}

|examples=
''Example: Transfer VBL from Token to Map''
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:transferVBL(1, &quot;Dragon&quot;)]
[h:transferVBL(0)]
&lt;/source&gt;

''Example: Transfer VBL from Map to current Token''
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:transferVBL(0)]
&lt;/source&gt;

''Example: Clear VBL from Token after transfer since 1.5.1''
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:transferVBL(1, 1)]
&lt;/source&gt;

''Example: Clear VBL from Token after transfer before 1.5.1''
&lt;source lang=&quot;mtmacro&quot;&gt;
[h:transferVBL(1)]
[h: finalVblData = &quot;{'shape':'none'}&quot;]
[h: setTokenVBL(finalVblData)] 
&lt;/source&gt;

|changes=
{{change|1.5.0|new delete parameter}}

|also=
[[Introduction to Vision Blocking ]], {{func|eraseVBL}}, {{func|drawVBL}}, {{func|setTokenVBL}}
}}
[[Category:Miscellaneous Function]]
[[Category:VBL Function]]</text>
      <sha1>i2pl25vjysrbvl1fu5u470sy7y1aj6s</sha1>
    </revision>
  </page>
  <page>
    <title>setOwnedByAll</title>
    <ns>0</ns>
    <id>1542</id>
    <revision>
      <id>7229</id>
      <parentid>7228</parentid>
      <timestamp>2019-03-07T04:47:51Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="655">{{MacroFunction
|name=setOwnedByAll
|version=1.4.2.0
|description=
Allows changing the '''ownedByAll''' value of a token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setOwnedByAll(owned)
setOwnedByAll(owned, id)
&lt;/source&gt;
'''Parameter'''
{{param|owned|The value of the setting to set, {{true}} or {{false}}.}}
{{param|id|The token {{code|id}} of the token which has its [[Owned by All]] status set, defaults to the [[Current Token]]. {{TrustedParameter}} }}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setOwnedByAll(1)]
[h: setOwnedByAll(0, &quot;Dragon&quot;)]
&lt;/source&gt;

|also=
{{func|getOwners}}, {{func|isOwner}}, {{func|isOwnedByAll}}

}}
[[Category:Token Function]]</text>
      <sha1>0pmfl7fr10q0knrphif1jeorchlksj2</sha1>
    </revision>
  </page>
  <page>
    <title>User:Wolph42</title>
    <ns>2</ns>
    <id>1543</id>
    <revision>
      <id>6892</id>
      <parentid>6891</parentid>
      <timestamp>2017-08-14T14:41:37Z</timestamp>
      <contributor>
        <username>Wolph42</username>
        <id>138</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="495">==Basics==

Known as &quot;Wolph42&quot; on the [http://forums.rptools.net RPTools Forums]. 

==Stuff I've Created==

* [http://forums.rptools.net/viewtopic.php?f=46&amp;t=16066 Bag of Tricks]
* [http://forums.rptools.net/viewtopic.php?p=228580 W40KRPG Campaign File]
* [https://www.youtube.com/channel/UCrIbltFM-nuRzBvsPVqXkvg My Youtube channel]  with mainly tutorials concerning the above two topics
* A dung heap of other stuff, check my signature on the forum for more links;
* A dung heap of wiki pages.</text>
      <sha1>an8frc5air0vvppai7qqfiq3meecvaj</sha1>
    </revision>
  </page>
  <page>
    <title>math</title>
    <ns>0</ns>
    <id>1544</id>
    <revision>
      <id>7132</id>
      <parentid>6903</parentid>
      <timestamp>2019-03-01T03:58:34Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1873">{{MacroFunction
|name=math
|version=1.4.0.5
|description=
This is NOT a single MapTool function but a collection of math functions in MapTool. 
'''Important Note''': All of these functions return a floating-point number (e.g.: `3.0`).

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
Numbers:
[r:val = math.pi()]
[r:val = math.e()]

Trigonomotry:
[r:val = math.acos(degrees)]
[r:val = math.acos_r(radians)]
[r:val = math.asin(degrees)]
[r:val = math.asin_r(radians)]
[r:val = math.atan(degrees)]
[r:val = math.atan_r(radians)]
[r:val = math.atan2(degrees)]
[r:val = math.atan2_r(radians)]
[r:val = math.cos(degrees)]
[r:val = math.cos_r(num)]
[r:val = math.sin(degrees)]
[r:val = math.sin_r(num)]
[r:val = math.tan(degrees)]
[r:val = math.tan_r(num)]
[r:val = math.toDegrees(num)]
[r:val = math.toRadians(degrees)]

Power and root:
[r:val = math.sqrt(num)]
[r:val = math.squareroot(num)]
[r:val = math.cbrt(num)]
[r:val = math.cuberoot(num)]
[r:val = math.pow(num1,num2)]

Logarithmic
[r:val = math.log(num)] (this is loge())
[r:val = math.log10(num)]

Pythagorean:
[r:val = math.hypot(num1,num2)]
[r:val = math.hypotenuse(num1,num2)]

Simple operations
[r:val = math.abs(num)]
[r:val = math.ceil(num)]
[r:val = math.floor(num)]
[r:val = math.isEven(num)]
[r:val = math.isInt(num)]
[r:val = math.isOdd(num)]
[r:val = math.max(num1, num2, num2, etc.)]
[r:val = math.min(num1, num2, num2, etc.)]
[r:val = math.mod(num1,num2)] 

&lt;/source&gt;

|examples=
====abs====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:val =  math.abs(-3)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;3.0&lt;/source&gt;

====mod====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:val =  math.mod(6,3)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;0&lt;/source&gt;

====pow====
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:val =  math.pow(2,3)]
&lt;/source&gt;
Returns:&lt;source lang=&quot;mtmacro&quot; line start=2&gt;8.0&lt;/source&gt;

}}
[[Category:Mathematical Function]]</text>
      <sha1>kgus2y4triqgs1p7vzp6q2mhu9lb9eu</sha1>
    </revision>
  </page>
  <page>
    <title>Phergus</title>
    <ns>0</ns>
    <id>1545</id>
    <revision>
      <id>6909</id>
      <timestamp>2017-12-15T17:05:08Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Phergus' page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="114">This is my page.  Created so that I could figure out how to make a page.

Nothing useful here yet and maybe never.</text>
      <sha1>jkr5mtebzyqzqub55aibm03fdbqhcqt</sha1>
    </revision>
  </page>
  <page>
    <title>setTokenSnapToGrid</title>
    <ns>0</ns>
    <id>1546</id>
    <revision>
      <id>6913</id>
      <parentid>6912</parentid>
      <timestamp>2017-12-15T18:05:22Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="549">{{MacroFunction
|name=setTokenSnapToGrid
|version=1.4
|description=
Sets the &quot;snap to&quot; behaviour for the [[Current Token]] or a specified token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenSnapToGrid(snap)
setTokenSnapToGrid(snap, id)
&lt;/source&gt;

'''Parameters'''
{{param|snap|A value {{true}} or {{false}}.}}
{{param|id|The id of the token to set its snap behaviour.}}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: setTokenSnapToGrid(0)]
[h: setTokenSnapToGrid(1, currentToken())]&lt;/source&gt;
|also=
{{func|isSnapToGrid}}
}}
[[Category:Token Function]]</text>
      <sha1>f7phqcugzftslhpiglyffi7q72k9l7c</sha1>
    </revision>
  </page>
  <page>
    <title>getDrawingLayer</title>
    <ns>0</ns>
    <id>1547</id>
    <revision>
      <id>7042</id>
      <parentid>6927</parentid>
      <timestamp>2019-02-13T16:43:50Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="636">{{MacroFunction
|name=getDrawingLayer
|version=1.5.0
|trusted=true
|description=
For a specified drawing, returns the layer to which the drawing belongs.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDrawingLayer(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:getDrawingLayer(&quot;Grasslands&quot;, &quot;0000000074836E675D00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|setDrawingLayer}}
}}
[[Category:Draw Function]]</text>
      <sha1>4wmy91uhvtktvupbbff9lisc5cr2qcr</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Draw Function</title>
    <ns>14</ns>
    <id>1548</id>
    <revision>
      <id>6922</id>
      <parentid>6920</parentid>
      <timestamp>2018-02-05T19:42:32Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1>jit4cp7ulz99kgahs8mkw0dj7f3rbom</sha1>
    </revision>
  </page>
  <page>
    <title>setDrawingLayer</title>
    <ns>0</ns>
    <id>1549</id>
    <revision>
      <id>7163</id>
      <parentid>6944</parentid>
      <timestamp>2019-03-02T23:35:58Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="929">{{MacroFunction
|name=setDrawingLayer
|version=1.4.1.7
|trusted=true
|description=
For a specified drawing, set the layer of the map to which the drawing belongs.

The [[Map Layer]] is one of:
* {{code|TOKEN}}
* {{code|GM}} also known as Hidden
* {{code|OBJECT}}
* {{code|BACKGROUND}}
&amp;nbsp;

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setDrawingLayer(mapName, drawingId, layer)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
{{param|layer|The layer to move the drawing to.}}
|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:setDrawingLayer(&quot;Grasslands&quot;, &quot;0000000074836E675D00000000000000&quot;,&quot;GM&quot;)]
[h:refreshDrawing(&quot;Grasslands&quot;, &quot;0000000074836E675D00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|getDrawingLayer}} {{func|refreshDrawing}}
}}
[[Category:Draw Function]]</text>
      <sha1>enx6f1wg458bih95ie30sa79z7vj42e</sha1>
    </revision>
  </page>
  <page>
    <title>bringDrawingToFront</title>
    <ns>0</ns>
    <id>1550</id>
    <revision>
      <id>6926</id>
      <parentid>6923</parentid>
      <timestamp>2018-02-05T19:50:47Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="675">{{MacroFunction
|name=bringDrawingToFront
|version=1.4.1.7
|trusted=true
|description=
For a specified drawing, moves the drawing to in front of all other drawings on the same layer.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
bringDrawingToFront(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:bringDrawingToFront(&quot;Grasslands&quot;, &quot;0000000074836E675D00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|sendDrawingToBack}}
}}
[[Category:Draw Function]]</text>
      <sha1>pwprzc58rbhnywt81yeo4qd4dh7qnkh</sha1>
    </revision>
  </page>
  <page>
    <title>sendDrawingToBack</title>
    <ns>0</ns>
    <id>1551</id>
    <revision>
      <id>7225</id>
      <parentid>6925</parentid>
      <timestamp>2019-03-07T04:43:28Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="663">{{MacroFunction
|name=sendDrawingToBack
|version=1.4.1.7
|trusted=true
|description=
Moves the specified drawing to be behind of all other drawings on the same layer.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
sendDrawingToBack(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover drawing ids is via the '''Draw Explorer''' interface.}}

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:sendDrawingToBack(&quot;Grasslands&quot;, &quot;0000000074836E675D00000000000000&quot;)]
&lt;/source&gt;

|also=
{{func|bringDrawingToFront}}
}}
[[Category:Draw Function]]</text>
      <sha1>45fef4j8jm2uemyunqxgsxyxznekyq7</sha1>
    </revision>
  </page>
  <page>
    <title>getDrawingOpacity</title>
    <ns>0</ns>
    <id>1552</id>
    <revision>
      <id>7043</id>
      <parentid>6931</parentid>
      <timestamp>2019-02-13T16:44:10Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="663">{{MacroFunction
|name=getDrawingOpacity
|version=1.5.0
|trusted=true
|description=
Returns a value between 1 and 0 representing the transparency value of a specified drawing.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDrawingOpacity(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:getDrawingOpacity(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|setDrawingOpacity}}
}}
[[Category:Draw Function]]</text>
      <sha1>n528v9ynxfafxo3huq8o8qomztvjvun</sha1>
    </revision>
  </page>
  <page>
    <title>setDrawingOpacity</title>
    <ns>0</ns>
    <id>1553</id>
    <revision>
      <id>7051</id>
      <parentid>6946</parentid>
      <timestamp>2019-02-13T16:47:43Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="818">{{MacroFunction
|name=setDrawingOpacity
|version=1.5.0
|trusted=true
|description=
Sets the transparency value of a specified drawing.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setDrawingOpacity(mapName, drawingId, opacity)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
{{param|opacity|A number between 1 and 0 representing the transparency of the drawing.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:setDrawingOpacity(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;,0.5)]
[h:refreshDrawing(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|getDrawingOpacity}} {{func|refreshDrawing}}
}}
[[Category:Draw Function]]</text>
      <sha1>hsxl0uqjty3uhfkrpvk4e3wwvqk5y7s</sha1>
    </revision>
  </page>
  <page>
    <title>getPenColor</title>
    <ns>0</ns>
    <id>1554</id>
    <revision>
      <id>7047</id>
      <parentid>6936</parentid>
      <timestamp>2019-02-13T16:45:40Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="804">{{MacroFunction
|name=getPenColor
|version=1.5.0
|trusted=true
|description=
Returns a string representing the colour or texture of the pen for a specified drawing.
A colour will be returned in the hex format (i.e. &quot;#000000&quot; for black) while a texture will be returned as the asset url (i.e. &quot;asset://ffff0fe019c241c7456b0ec0b347ef37&quot;)
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPenColor(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[getPenColor(&quot;Grasslands&quot;, &quot;0000000074836E675D00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|setPenColor}}
}}
[[Category:Draw Function]]</text>
      <sha1>e76vt7r5g2ilyqry169lcvt3v8od643</sha1>
    </revision>
  </page>
  <page>
    <title>setPenColor</title>
    <ns>0</ns>
    <id>1555</id>
    <revision>
      <id>7055</id>
      <parentid>6935</parentid>
      <timestamp>2019-02-13T16:49:26Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="880">{{MacroFunction
|name=setPenColor
|version=1.5.0
|trusted=true
|description=
Sets the colour or texture of the pen for a specified drawing.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setPenColor(mapName, drawingId, paint)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
{{param|paint|A string representing the colour or texture of the pen.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:setPenColor(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;,&quot;red&quot;)]
[r:setPenColor(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;,&quot;#ff0000&quot;)]
[r:setPenColor(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;,&quot;asset://ffff0fe019c241c7456b0ec0b347ef37&quot;)]
&lt;/source&gt;
|also=
{{func|getPenColor}}
}}
[[Category:Draw Function]]</text>
      <sha1>cte9y4t9e1725x7nffodulufm59cq7r</sha1>
    </revision>
  </page>
  <page>
    <title>getFillColor</title>
    <ns>0</ns>
    <id>1556</id>
    <revision>
      <id>7045</id>
      <parentid>6937</parentid>
      <timestamp>2019-02-13T16:44:51Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="810">{{MacroFunction
|name=getFillColor
|version=1.5.0
|trusted=true
|description=
Returns a string representing the colour or texture of the pen for a specified drawing.
A colour will be returned in the hex format (i.e. &quot;#000000&quot; for black) while a texture will be returned as the asset url (i.e. &quot;asset://ffff0fe019c241c7456b0ec0b347ef37&quot;)
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getFillColor(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:getFillColor(&quot;Grasslands&quot;, &quot;0000000074836E675D00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|setFillColor}}
}}
[[Category:Draw Function]]</text>
      <sha1>dxcrz1x1hguqrxqkyaa6evyfedi75z7</sha1>
    </revision>
  </page>
  <page>
    <title>setFillColor</title>
    <ns>0</ns>
    <id>1557</id>
    <revision>
      <id>7053</id>
      <parentid>6948</parentid>
      <timestamp>2019-02-13T16:48:41Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1046">{{MacroFunction
|name=setFillColor
|version=1.5.0
|trusted=true
|description=
Sets the colour or texture of the pen for a specified drawing.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setFillColor(mapName, drawingId, paint)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
{{param|paint|A string representing the fill colour or fill texture.}}
|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:setFillColor(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;,&quot;red&quot;)]
[h:setFillColor(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;,&quot;#ff0000&quot;)]
[h:refreshDrawing(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;)]
[h:setFillColor(&quot;Grasslands&quot;, &quot;00000000CCF6B567CC00000000000000&quot;,&quot;asset://ffff0fe019c241c7456b0ec0b347ef37&quot;)]
[h:refreshDrawing(&quot;Grasslands&quot;, &quot;00000000CCF6B567CC00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|getFillColor}} {{func|refreshDrawing}}
}}
[[Category:Draw Function]]</text>
      <sha1>rc5oc8usakfko1ig04nasmp1y6v6ddb</sha1>
    </revision>
  </page>
  <page>
    <title>getDrawingEraser</title>
    <ns>0</ns>
    <id>1558</id>
    <revision>
      <id>7041</id>
      <parentid>6939</parentid>
      <timestamp>2019-02-13T16:43:00Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="786">{{MacroFunction
|name=getDrawingEraser
|version=1.5.0
|trusted=true
|description=
Returns a value corresponding to the eraser setting of the drawing. A normal visible drawing will return {{code|false}}({{code|0}}), while a drawing that cuts the drawing below it will return {{code|true}}({{code|1}}).
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDrawingEraser(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:getDrawingEraser(&quot;Grasslands&quot;, &quot;0000000074836E675D00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|setDrawingEraser}}
}}
[[Category:Draw Function]]</text>
      <sha1>k01v3kas6mn9xyvcvelov1ch3ra25tr</sha1>
    </revision>
  </page>
  <page>
    <title>setDrawingEraser</title>
    <ns>0</ns>
    <id>1559</id>
    <revision>
      <id>7050</id>
      <parentid>6960</parentid>
      <timestamp>2019-02-13T16:47:20Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1154">{{MacroFunction
|name=setDrawingEraser
|version=1.5.0
|trusted=true
|description=
Sets the eraser setting of the drawing that corresponds to the map and drawing id. If Set to {{code|false}}({{code|0}}) the drawing will be displayed normally, but if set to {{code|true}}({{code|1}}) the drawing will erase all below.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setDrawingEraser(mapName, drawingId, boolean)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
{{param|boolean|The value of the setting to set, {{code|true}}({{code|1}}) or {{code|false}}({{code|0}}).}}
|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:setDrawingEraser(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;,0)]
[h:refreshDrawing(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;)]
[h:setDrawingEraser(&quot;Grasslands&quot;, &quot;00000000CCF6B567CC00000000000000&quot;,1)]
[h:refreshDrawing(&quot;Grasslands&quot;, &quot;00000000CCF6B567CC00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|getDrawingEraser}} {{func|refreshDrawing}}
}}
[[Category:Draw Function]]</text>
      <sha1>1zdm3os73e97cixlhuzsyzvwdci3a3k</sha1>
    </revision>
  </page>
  <page>
    <title>refreshDrawing</title>
    <ns>0</ns>
    <id>1560</id>
    <revision>
      <id>7226</id>
      <parentid>7223</parentid>
      <timestamp>2019-03-07T04:43:49Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="838">{{MacroFunction
|name=refreshDrawing
|version=1.5.0
|trusted=true
|description=
Causes the specified drawing to be updated on all of the clients connected to the server. If this function is not invoked for each drawing updated by via script, then the client maps will get out of sync.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
refreshDrawing(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover drawing ids is via the '''Draw Explorer''' interface.}}
|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:setFillColor(&quot;Grasslands&quot;, &quot;00000000CCF6B567CC00000000000000&quot;,&quot;blue&quot;)]
[h:refreshDrawing(&quot;Grasslands&quot;, &quot;00000000CCF6B567CC00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|setFillColor}}
}}
[[Category:Draw Function]]</text>
      <sha1>0mkcm81q5g15ysam34oj6dvijza2us5</sha1>
    </revision>
  </page>
  <page>
    <title>findDrawings</title>
    <ns>0</ns>
    <id>1561</id>
    <revision>
      <id>7040</id>
      <parentid>6958</parentid>
      <timestamp>2019-02-13T16:42:26Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="924">{{MacroFunction
|name=findDrawings
|version=1.5.0
|trusted=true
|description=
Returns the id or ids of any drawing on the specified map that match the name parameter.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
findDrawings(mapName, name)
findDrawings(mapName, name, delim)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|name|A string containing name of the searched for drawings. The only way to name a drawing is via the Draw Explorer interface.}}
{{param|delim|Optional separator. If not specified the default value {{code|&quot;,&quot;}} is used.  If {{code|&quot;json&quot;}} is specified, a JSON array is returned instead of a String List.}}
|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:id=findDrawings(&quot;Grasslands&quot;, &quot;block&quot;)]
[h:setFillColor(&quot;Grasslands&quot;, id,&quot;#000000&quot;)]
[h:refreshDrawing(&quot;Grasslands&quot;, id)]
&lt;/source&gt;
|also=
{{func|setFillColor}} {{func|refreshDrawing}}
}}
[[Category:Draw Function]]</text>
      <sha1>geqifv89zodz0xydo7nz7tphqqa2ac1</sha1>
    </revision>
  </page>
  <page>
    <title>getDrawingProperties</title>
    <ns>0</ns>
    <id>1562</id>
    <revision>
      <id>7044</id>
      <parentid>6953</parentid>
      <timestamp>2019-02-13T16:44:29Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="851">{{MacroFunction
|name=getDrawingProperties
|version=1.5.0
|trusted=true
|description=
Returns the properties for a specified drawing. Currently this can only be used to set the properties of another drawing.
It cannot be stored in a script variable.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDrawingProperties(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:fromId=&quot;0000000074836E675D00000000000000&quot;]
[h:toId=&quot;0000000095C36B437D00000000000000&quot;]
[h:setDrawingProperties(&quot;Grasslands&quot;, toId, getDrawingProperties(&quot;Grasslands&quot;, fromId))]
&lt;/source&gt;
|also=
{{func|setDrawingProperties}}
}}
[[Category:Draw Function]]</text>
      <sha1>8f5s31zjgd28gnawdhrlvbvz4dcavnf</sha1>
    </revision>
  </page>
  <page>
    <title>setDrawingProperties</title>
    <ns>0</ns>
    <id>1563</id>
    <revision>
      <id>7052</id>
      <parentid>6954</parentid>
      <timestamp>2019-02-13T16:48:05Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="962">{{MacroFunction
|name=setDrawingProperties
|version=1.5.0
|trusted=true
|description=
Sets the properties for a specified drawing. Currently this can only be used in conjunction with the getDrawingProperties function.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setDrawingProperties(mapName, drawingId, properties)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
{{param|properties|The properties of another drawing. Currently this can only be delivered via the getDrawingProperties function}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:fromId=&quot;0000000074836E675D00000000000000&quot;]
[h:toId=&quot;0000000095C36B437D00000000000000&quot;]
[h:setDrawingProperties(&quot;Grasslands&quot;, toId, getDrawingProperties(&quot;Grasslands&quot;, fromId))]
&lt;/source&gt;
|also=
{{func|getDrawingProperties}}
}}
[[Category:Draw Function]]</text>
      <sha1>23uhlemrncttlrtcvqobg47ugtxdx1k</sha1>
    </revision>
  </page>
  <page>
    <title>getPenWidth</title>
    <ns>0</ns>
    <id>1564</id>
    <revision>
      <id>7048</id>
      <parentid>6955</parentid>
      <timestamp>2019-02-13T16:46:00Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="711">{{MacroFunction
|name=getPenWidth
|version=1.5.0
|trusted=true
|description=
Returns the line width for the specified drawing.
A drawing will have a line width, even if the line itself is not displayed. See setPenColor.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getPenWidth(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:getPenWidth(&quot;Grasslands&quot;, &quot;0000000074836E675D00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|setPenWidth}} {{func|setPenColor}}
}}
[[Category:Draw Function]]</text>
      <sha1>gdirmtl037yful9qm7hvsx208nk0amg</sha1>
    </revision>
  </page>
  <page>
    <title>setPenWidth</title>
    <ns>0</ns>
    <id>1565</id>
    <revision>
      <id>7056</id>
      <parentid>6957</parentid>
      <timestamp>2019-02-13T16:49:50Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="850">{{MacroFunction
|name=setPenWidth
|version=1.5.0
|trusted=true
|description=
Sets the line width for a specified drawing.
Regardless of the set width, a line will only be visible if it has a visible colour. See setPenColor.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setPenWidth(mapName, drawingId, width)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
{{param|width|A number for the desired line thickness.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:setPenWidth(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;,10)]
[h:setPenWidth(&quot;Grasslands&quot;, &quot;0000000087318B505800000000000000&quot;,3)]
&lt;/source&gt;
|also=
{{func|getPenWidth}} {{func|setPenColor}}
}}
[[Category:Draw Function]]</text>
      <sha1>8za49mxi50cv5bslvb4konynk0cfo34</sha1>
    </revision>
  </page>
  <page>
    <title>getLineCap</title>
    <ns>0</ns>
    <id>1566</id>
    <revision>
      <id>7046</id>
      <parentid>6961</parentid>
      <timestamp>2019-02-13T16:45:17Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="846">{{MacroFunction
|name=getLineCap
|version=1.5.0
|trusted=true
|description=
Returns a value corresponding to the line type setting of the drawing. A line with round ends will return {{code|round}}({{code|0}}), while a line with square ends will return {{code|square}}({{code|1}}). This function will return a value regardless of whether or not the drawing line is visible.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDrawingEraser(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r:getLineCap(&quot;Grasslands&quot;, &quot;0000000074836E675D00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|setLineCap}}
}}
[[Category:Draw Function]]</text>
      <sha1>6s5t58zoc1py5xjzvjjheer0ug9ffry</sha1>
    </revision>
  </page>
  <page>
    <title>setLineCap</title>
    <ns>0</ns>
    <id>1567</id>
    <revision>
      <id>7054</id>
      <parentid>6964</parentid>
      <timestamp>2019-02-13T16:49:08Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1165">{{MacroFunction
|name=setLineCap
|version=1.5.0
|trusted=true
|description=
Sets the line cap setting of the drawing that corresponds to the map and drawing id. If Set to {{code|round}}({{code|0}}) the drawing will display with round line ends, but if set to {{code|square}}({{code|1}}) the drawing display with square line ends and angled corners.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLineCap(mapName, drawingId, capType)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
{{param|capType|The value of the setting to set, {{code|round}}({{code|0}}) or {{code|square}}({{code|1}}).}}
|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h:setLineCap(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;,0)]
[h:refreshDrawing(&quot;Grasslands&quot;, &quot;0000000094218C675800000000000000&quot;)]
[h:setLineCap(&quot;Grasslands&quot;, &quot;00000000CCF6B567CC00000000000000&quot;,1)]
[h:refreshDrawing(&quot;Grasslands&quot;, &quot;00000000CCF6B567CC00000000000000&quot;)]
&lt;/source&gt;
|also=
{{func|getLineCap}} {{func|refreshDrawing}}
}}
[[Category:Draw Function]]</text>
      <sha1>katdri5kn0sesp8t3xz9sujvoi2lc88</sha1>
    </revision>
  </page>
  <page>
    <title>getTokenVBL</title>
    <ns>0</ns>
    <id>1568</id>
    <revision>
      <id>6978</id>
      <parentid>6977</parentid>
      <timestamp>2018-08-20T21:11:24Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Correct text in Parameters left over from page it was copied from.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1127">{{MacroFunction
|name=getTokenVBL
|proposed=false
|trusted=true
|version=1.4.1.6
|description=Gets the VBL attached to a token as a JSON object.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenVBL(id)
&lt;/source&gt;

This macro function is used used to get a JSON object describing the TOKEN VBL attached to a token.  The returned JSON object can then be used with {{func|setTokenVBL}}, {{func|drawVBL}}or {{func|eraseVBL}}.

Token VBL is attached to and moves with the token.  It can  be set (or cleared) under the VBL tab on the Edit Token dialog and is colored YELLOW. Normal VBL is static, can be created with the VBL drawing tools or with the use of VBL functions and is colored BLUE.

'''Parameters'''
{{param|id|OPTIONAL: The token {{code|id}} of the token for which you want to get the VBL. Defaults to the [[Current Token]]. }}

''Example:''&lt;source lang=&quot;mtmacro&quot;&gt;
[h: vbl = getTokenVBL(&quot;Door, Steel&quot;)]
[h: setTokenVBL(vbl, &quot;Door, Wood&quot;)]
&lt;/source&gt;&lt;br /&gt;

|also=
[[Introduction to Vision Blocking ]], {{func|setTokenVBL}}, {{func|drawVBL}} or {{func|eraseVBL}}
}}
[[Category:Miscellaneous Function]]
[[Category:VBL Function]]</text>
      <sha1>7i97smqs5rxkdddjah47cy9zb7ml8i0</sha1>
    </revision>
  </page>
  <page>
    <title>setTokenVBL</title>
    <ns>0</ns>
    <id>1569</id>
    <revision>
      <id>7009</id>
      <parentid>6979</parentid>
      <timestamp>2019-02-03T16:29:50Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Added example that clears VBL from token.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1466">{{MacroFunction
|name=setTokenVBL
|proposed=false
|trusted=true
|version=1.4.1.6
|description=Sets the VBL of a token to that given in the JSON object parameter.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTokenVBL(vbl, id)
&lt;/source&gt;

This function is used to attach the TOKEN VBL passed in as a JSON object to a token.  The JSON object may be be created by calling {{func|getTokenVBL}} on a different token and may also be used with {{func|drawVBL}} or {{func|eraseVBL}}.

Token VBL moves with the token, can be set under the VBL tab on the token edit menu and is colored YELLOW. Normal VBL is static, can be created with the VBL drawing tools or with the use of VBL functions and is colored BLUE.

'''Parameters'''
{{param|vbl|A JSON object containing the {{code|vbl}} to be added to the token.  Use {{func|getTokenVBL}} to get VBL from another token. }}
{{param|id|OPTIONAL: The token {{code|id}} of the token for which you want to set this setting, defaults to the [[Current Token]]. }}

''Example: Transfer VBL from one Token to another''&lt;source lang=&quot;mtmacro&quot;&gt;
[h: vbl = getTokenVBL(&quot;Door, Steel&quot;)]
[h: setTokenVBL(vbl, &quot;Door, Wood&quot;)]
&lt;/source&gt;&lt;br /&gt;

''Example: Erase VBL from Token''&lt;source lang=&quot;mtmacro&quot;&gt;
[r: finalVblData = &quot;{'shape':'none'}&quot;]
[r: setTokenVBL(finalVblData)]
&lt;/source&gt;&lt;br /&gt;

|also=
[[Introduction to Vision Blocking ]], {{func|getTokenVBL}}, {{func|drawVBL}}, {{func|eraseVBL}}
}}
[[Category:Miscellaneous Function]]
[[Category:VBL Function]]</text>
      <sha1>aty21rkrn3xtgi1gyn58asiqldvpk5i</sha1>
    </revision>
  </page>
  <page>
    <title>restoreFoW</title>
    <ns>0</ns>
    <id>1570</id>
    <revision>
      <id>7224</id>
      <parentid>6983</parentid>
      <timestamp>2019-03-07T04:42:23Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="643">{{MacroFunction
|name=restoreFoW
|proposed=false
|trusted=true
|version=1.4.1.3
|description=
Resets all fog of war (FoW) for the map.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
restoreFoW()
&lt;/source&gt;

This function resets all FoW for the current map. Duplicates the FoW reset available through '''Map Menu''' -&gt; '''Restore Fog-of-War''' or when you import a new map sans dialog.

'''Parameters'''
{{param|none|This function has no parameters.}}

''Example:''&lt;source lang=&quot;mtmacro&quot;&gt;
[h:restoreFoW()]
&lt;/source&gt;&lt;br /&gt;

|also=
[[Introduction_to_Lights_and_Sights#Fog_of_War]], {{func|toggleFoW}}
}}
[[Category:Miscellaneous Function]]
[[Category:FoW]]</text>
      <sha1>fyly0ly92mwezcd9cfsikwrrbvb4yod</sha1>
    </revision>
  </page>
  <page>
    <title>toggleFoW</title>
    <ns>0</ns>
    <id>1571</id>
    <revision>
      <id>7235</id>
      <parentid>6982</parentid>
      <timestamp>2019-03-07T04:53:58Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="655">{{MacroFunction
|name=toggleFoW
|proposed=false
|trusted=true
|version=1.4.1.3
|description=
Toggles the state of Fog of War (FoW) on the current map.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
toggleFoW()
&lt;/source&gt;

This function toggles the state of Fog of War (FoW) on the current map either off or on. This functions identically to the menu option '''Map''' -&gt; '''Fog-of-War''' or the hotkey '''Meta-W'''.

'''Parameters'''
{{param|none|Has no parameters.}}

''Example:''&lt;source lang=&quot;mtmacro&quot;&gt;
[h: toggleFoW()]
&lt;/source&gt;

|also=
[[Introduction_to_Lights_and_Sights#Fog_of_War ]], {{func|restoreFoW}}
}}
[[Category:Miscellaneous Function]]
[[Category:FoW]]</text>
      <sha1>dk5gshk2knnpknacejpx99tw4vjzpv9</sha1>
    </revision>
  </page>
  <page>
    <title>Category:FoW</title>
    <ns>14</ns>
    <id>1572</id>
    <revision>
      <id>6981</id>
      <timestamp>2018-08-20T21:47:58Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Created page with &quot;[[Category:FoW]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16">[[Category:FoW]]</text>
      <sha1>r2jbfo3g0chqa80ismp6kd6s0kx0peu</sha1>
    </revision>
  </page>
  <page>
    <title>json.removeFirst</title>
    <ns>0</ns>
    <id>1573</id>
    <revision>
      <id>7135</id>
      <parentid>7126</parentid>
      <timestamp>2019-03-01T14:12:47Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <minor/>
      <comment>Fixing the formatting of the example output.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1053">{{MacroFunction
|name=json.removeFirst
|proposed=false
|trusted=false
|version=1.4.0.3
|description=
Is similar to {{func|json.difference}} but will only remove the first occurrence of a match.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
json.removeFirst(array1, array2)
&lt;/source&gt;

'''Parameters'''
{{param|array1|A JSON array.}}
{{param|array2|A JSON array.}}

Compares the two arrays and removes the first element from the first array matching an element in the second.

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[json.removeFirst('[2,2,4,5,6,6,4]', '[2,6]')]
&lt;/source&gt;
'''Outputs:'''
&lt;pre&gt;  [2,4,5,6,4]&lt;/pre&gt;
Difference between {{func|json.removeFirst}} and {{func|json.difference}}.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: a1 = '[1,2,2,2,3,3,4,5,6,6]']
[h: a2 = '[2,4,6]']
[r: json.difference(a1,a2)]
&lt;!-- a1 has been modified - reset --&gt;
[h: a1 = '[1,2,2,2,3,3,4,5,6,6]']
[r: json.removeFirst(a1,a2)]
&lt;/source&gt;
'''Outputs:'''
&lt;pre&gt;  [1,3,5]
  [1,2,2,3,3,5,6]&lt;/pre&gt;
|also=
[[Introduction to JSON Datatypes ]], {{func|json.difference}}
[[Category:JSON Function]]
}}</text>
      <sha1>gsl4mgpv8rfszuatju1gn86wrig8xqf</sha1>
    </revision>
  </page>
  <page>
    <title>Caution</title>
    <ns>0</ns>
    <id>1574</id>
    <revision>
      <id>6996</id>
      <parentid>6995</parentid>
      <timestamp>2018-09-30T13:02:42Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Blanked the page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Caution</title>
    <ns>10</ns>
    <id>1575</id>
    <revision>
      <id>7094</id>
      <parentid>6997</parentid>
      <timestamp>2019-02-20T04:53:59Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="442">&lt;noinclude&gt;This template is used to put cautionary text into a page so as to draw attention to a particularly important limitation or other bit of information.&lt;/noinclude&gt;&lt;noinclude&gt;[[Category:Templates]]&lt;/noinclude&gt;&lt;includeonly&gt;[[Category:Caution]]&lt;/includeonly&gt;
&lt;div class=&quot;template_caution&quot;&gt;
&lt;p style=&quot;border-color:yellow; background-color:lightgrey; border-width:2; border-style:solid; padding:5px&quot;&gt;
'''Caution:'''&lt;br&gt;
{{{1}}}
&lt;/p&gt;
&lt;/div&gt;</text>
      <sha1>hj56kmubp5hzp8oml21m2igu1a5ny6j</sha1>
    </revision>
  </page>
  <page>
    <title>Command Line Options</title>
    <ns>0</ns>
    <id>1576</id>
    <revision>
      <id>7015</id>
      <parentid>7014</parentid>
      <timestamp>2019-02-11T18:16:02Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1705">MapTool Version: 1.5+

The following command line options are available when launching MapTool from a shell or command prompt.  ''These are for advanced users or developers.''

The full option name may be used or just the first letter.

=== Options ===
The following options have no parameters and take the form of:
 ''javaw -jar maptool-x.x.x.x.jar -option''

 d/debug - Turn on System.out enhanced debug output
 m/macros - Output list of defined macro functions
 r/reset - Reset startup options to defaults
 f/fullscreen - Maximize MapTool window

The following options require a single parameter and take the form of:
 ''javaw -jar maptool-x.x.x.x.jar -option=value''

 v/version - Override MapTool version
 m/monitor - Sets which monitor to use beginning with 0.

These options require the monitor option be specified on the same command line.
 ''javaw -jar maptool-x.x.x.x.jar -monitor -option=value''

 w/width - Override MapTool window width
 h/height - Override MapTool window height
 x/xpos - Override MapTool window starting x coordinate
 y/ypos - Override MapTool window starting y coordinate

=== Examples === 
 javaw -Xmx2048M -Xss1M -jar maptool-1.5.0.0.jar -version=1.5.6.7
 javaw -Xmx2048M -Xss1M -jar maptool-1.5.0.0.jar -v=1.5.6.7
 javaw -Xmx2048M -Xss1M -jar maptool-1.5.0.0.jar -fullscreen
 javaw -Xmx2048M -Xss1M -jar maptool-1.5.0.0.jar -f
 javaw -Xmx2048M -Xss1M -jar maptool-1.5.0.0.jar -monitor=0 -width=800 -height=800
 javaw -Xmx2048M -Xss1M -jar maptool-1.5.0.0.jar -monitor=0 -xpos=20 -ypos=20
 javaw -Xmx2048M -Xss1M -jar maptool-1.5.0.0.jar -monitor=0 -x=20 -y=20 -w=800 -h=1200
 javaw -Xmx2048M -Xss1M -jar maptool-1.5.0.0.jar -m=0 -xpos=150 -y=150 -width=1000 -height=1200</text>
      <sha1>o3waavrv4e8m12qslwhh390ag4etbgs</sha1>
    </revision>
  </page>
  <page>
    <title>Token Tool</title>
    <ns>0</ns>
    <id>1577</id>
    <revision>
      <id>7039</id>
      <parentid>7037</parentid>
      <timestamp>2019-02-12T23:23:42Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1259">{{stub}}

TokenTool is a image creation tool for producing ''tokens'' for use in Virtual TableTop(VTT) applications such as MapTool, Roll20, Fantasy Grounds and others.

[[File:TokenToolUIwithBackground.png|400px|Interface showing background image and portrait image.]]

== Features ==
* Make tokens from multiple image types (PNG, JPG, BMP, GIF, ...)
* Saves tokens in standard PNG format with transparency
* Load images directly from PDF files
* Screen capture to grab images for your tokens
* Drag'n'drop to the TokenTool window from your computer desktop or browser
* Save portrait option to save both your token and a portrait image
* 150+ token overlays/bases included in Hex, Round and Square styles
* Add your own token overlays in PNG or Photoshop .psd formats
* Choose background color or add a separate background image for portrait images that are partially transparent
* Add bases to top-down token images.

== Interface ==

=== Menus ===

; File
: Open PDF
: Manage Overlay
: Save As
: Exit
; Edit
: Capture Screen
: Copy Image
: Paste Image
; Help
: Reset Settings
: About TokenTool

=== Canvas Panel ===


=== Token Preview ===


=== Options Panels ===

=== PDF Window ===

Drag from images to canvas.

Left/Right click for Portrait/Background</text>
      <sha1>0hxs7rx0ubvjbzp2o20xuse5sxvf676</sha1>
    </revision>
  </page>
  <page>
    <title>File:TokenToolGUIBasic.png</title>
    <ns>6</ns>
    <id>1578</id>
    <revision>
      <id>7018</id>
      <timestamp>2019-02-11T19:38:48Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Labeled gui image</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">Labeled gui image</text>
      <sha1>g7jcvru0i7i3qgl3iji73uwl64vziql</sha1>
    </revision>
  </page>
  <page>
    <title>Token Tool QuickStart</title>
    <ns>0</ns>
    <id>1579</id>
    <revision>
      <id>7028</id>
      <parentid>7024</parentid>
      <timestamp>2019-02-11T21:24:14Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Screwed up title.  Redirect to correct page.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">See [[TokenTool_QuickStart]]</text>
      <sha1>nhshjun0fe4tg0bmj4q8c2rt5uzwh6u</sha1>
    </revision>
  </page>
  <page>
    <title>File:TokenToolOrcPrincessExample.png</title>
    <ns>6</ns>
    <id>1580</id>
    <revision>
      <id>7020</id>
      <timestamp>2019-02-11T19:54:38Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>File:ExampleToken.png</title>
    <ns>6</ns>
    <id>1581</id>
    <revision>
      <id>7022</id>
      <timestamp>2019-02-11T20:39:23Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Example token for TokenTool QuickStart Guide.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="45">Example token for TokenTool QuickStart Guide.</text>
      <sha1>4unfynxz112gcbuvyqdzpx8zobwdpqv</sha1>
    </revision>
  </page>
  <page>
    <title>TokenTool QuickStart</title>
    <ns>0</ns>
    <id>1582</id>
    <revision>
      <id>7350</id>
      <parentid>7031</parentid>
      <timestamp>2019-04-01T12:42:16Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Updated link to TokenTool product page.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2581">This is the Quick Start Guide to using TokenTool v2.1.  The premiere token creation tool for Virtual TableTop programs

You can get TokenTool 2.1 [https://www.rptools.net/toolbox/token-tool/ here].

== User Interface ==
;Canvas Panel
:In the Canvas panel of the UI you position and size your desired image in relation to the Token Ring or Overlay with your mouse. Left-click and drag to position. Use mouse-wheel to size image.
;Token Preview
:In the upper right you can see what the resulting token image will look like when you save it.
;Overlay Selection
:In the lower right you can choose your Token Overlay from the list of different types and styles.  The pixel dimensions of the selected Overlay are displayed below the name.
;Token Size
:The image size of the resulting token is shown in the bottom right.  You should set the token size to be the same or smaller than that of the selected Overlay.

[[File:TokenToolGUIBasic.png|400px|TokenTool GUI]]

If you want to follow along with the next steps, go ahead and click on Overlay Option then locate a token overlay that you want to use. Once you select it, the overlay will appear on the Canvas.

== Creating a Token ==
Say I need to create a token for an Orc warrior princess. In my web browser I go to [https://images.google.com Google Image Search] and enter ''orc warrior princess'' as my search terms.  I like the 3rd one that comes up by [https://oksanadiada.artstation.com/projects/vda2O Oksana Diada].  I click on the entry in the search list and then right-click on the image to ''Copy Image''.  Back in TokenTool, I hit Ctrl-V (or use the Edit menu) to paste my orc princess into the Canvas.  You can also drag-n-drop an image from your computer onto the Canvas area.

The image I have chosen is quite large but that's okay.  Using the mouse-wheel I can quickly resize it to fit within the token overlay I've chosen.  I get something like this:

[[File:TokenToolOrcPrincessExample.png|400px|Orc Princess Token Example]]

== Saving a Token ==
With my token complete, I need only left-click on the Token Preview to drag the token image from the Token Preview area to my computer or directly into MapTool.  I can also save it from the File menu to my computer.

[[File:ExampleToken.png|256px|Example Token]]

My Orc Warrior Princess is ready!

== Further Reading ==
This QuickStart Guide only touched upon the basics of using TokenTool.  You should experiment with the various options available to get a feel for what else it can do.

A TokenTool User Guide is being prepared to more fully describe the capabilities.</text>
      <sha1>t6ipidaz3um60owdaguc9jaoad0gcm5</sha1>
    </revision>
  </page>
  <page>
    <title>File:TokenToolUIwithBackground.png</title>
    <ns>6</ns>
    <id>1583</id>
    <revision>
      <id>7038</id>
      <timestamp>2019-02-12T22:17:56Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>TokenTool UI showing background image and portrait image.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="57">TokenTool UI showing background image and portrait image.</text>
      <sha1>4sgzwvagu9nvfj32q2hqn1se04li1fp</sha1>
    </revision>
  </page>
  <page>
    <title>copyTable</title>
    <ns>0</ns>
    <id>1584</id>
    <revision>
      <id>7057</id>
      <timestamp>2019-02-16T02:57:13Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <comment>Created page with &quot;{{stub|Examples of usage.}} {{MacroFunction |name=copyTable |version=1.5.0 |trusted=true |description=Copies a MapTool table to a new name.  |usage= &lt;source lang=&quot;mtmacro&quot; lin...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="459">{{stub|Examples of usage.}}
{{MacroFunction
|name=copyTable
|version=1.5.0
|trusted=true
|description=Copies a MapTool table to a new name.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
copyTable(old name, newname)
&lt;/source&gt;
'''Parameter'''
{{param|oldname|The name of the existing table.  It's an error if the table doesn't exist.}}
{{param|newname|The name of the new table to be created.  It's an error if the table already exists.}}
}}
[[Category:Table Function]]</text>
      <sha1>hhgqs9hzoco0hvfraa9msvlw4yih1po</sha1>
    </revision>
  </page>
  <page>
    <title>exportData</title>
    <ns>0</ns>
    <id>1585</id>
    <revision>
      <id>7058</id>
      <timestamp>2019-02-16T03:39:39Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <comment>Created page with &quot;{{stub|Examples of usage.}} {{MacroFunction |name=exportData |trusted=true |version=1.5.0 |description= Allows the storage of string data into an external file.  {{Caution|Thi...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2814">{{stub|Examples of usage.}}
{{MacroFunction
|name=exportData
|trusted=true
|version=1.5.0
|description=
Allows the storage of string data into an external file.

{{Caution|This function is considered experimental and its implementation and parameters may change.}}

The &lt;b&gt;Allow External Macro Access&lt;/b&gt; option in MapTool's Preferences must be enabled or this macro aborts with an error.

If MapTool is started with a particular character encoding in force, it will write the {{code|data}} using that encoding.  If an existing file was created with a different encoding and is being appended to, the results when an application later attempts to read the file are undefined.  (This is an artifact of how character encoding works, not something that MapTool can control.)

Due to the use of a pathname, this function is inherently system and platform-specific.  There is no way to determine whether the pathname used refers a directory that doesn't exist or for which the proper permissions are not available.  The only test that can be done is to attempt to access a file with {{code|append}} turned off and see if it fails.  This would indicate that the directory path cannot be accessed (doesn't exist or incorrect permissions), but if it succeeds there is now a file at the pathname given.

It's recommended that pathnames NOT use backslashes ({{code|\}}), but use forward slashes ({{code|/}}) as the directory separator character.  While forward slashes will work on Windows, Linux, and other Unix systems, backslashes will work only on Windows.  In addition, it may be troublesome to use characters which the filesystem could interpret incorrectly (such as {{code|C:\topdir\mydir\filename}} interpreting the {{code|\t}} as a tab character and the {{code|\f}} as a form feed.  Hence, our recommendation to use forward slashes for all filenames on all platforms.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
exportData(pathname, data, append)
&lt;/source&gt;
'''Parameter'''
{{param|pathname|A string representing the pathname that {{code|data}} will be written to; this file will be created if it doesn't already exist.}}
{{param|data|The string written to the file.  MapTool does not impose an arbitrary limit on the length of this string, but the operating system might.  Occurrences of {{code|\r}} inside the string will be interpreted as line breaks, and {{code|\t}} will be replaced by the tab character (Unicode/ASCII character code 9).  (Note that in order to put a {{code|\}} into the string, two backslashes are needed, i.e. {{code|\r}} must be represented as {{code|\\r}}.)}}
{{param|append|This boolean value indicates whether the file is opened in append mode.  If {{code|append}} is {{false}}, any existing contents of the file will be overwritten.}}

|examples=

|also=
}}
[[Category:Miscellaneous Function]]</text>
      <sha1>2cj3q8ayk1k6n0dpnx8iw8cnax578gt</sha1>
    </revision>
  </page>
  <page>
    <title>exposeAllOwnedAreas</title>
    <ns>0</ns>
    <id>1586</id>
    <revision>
      <id>7083</id>
      <parentid>7063</parentid>
      <timestamp>2019-02-17T04:59:07Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="749">{{MacroFunction
|name=exposeAllOwnedArea
|trusted=true
|version=1.5.0
|description=
Exposes all areas visible to tokens owned by the current player that have vision turned on in the token editor.  The actual area exposed depends on server settings (like '''Individual Views''') and various MapTool Preferences.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
exposeAllOwnedArea(mapName)
&lt;/source&gt;
'''Parameter'''
{{param|mapName|The name of an existing map within the campaign.  This map does not need to be the one currently visible.  If the map holds no tokens with vision owned by the current player, no additional fog-of-war is exposed, but fog already exposed is not reset.}}

|examples=

|also=
{{func|exposeFOW}}, {{func|toggleFoW}}
}}
[[Category:FoW]]</text>
      <sha1>7h6jv29ng6l8703hk6h1gsq1n3q5qv8</sha1>
    </revision>
  </page>
  <page>
    <title>exposeFogAtWaypoints</title>
    <ns>0</ns>
    <id>1587</id>
    <revision>
      <id>7171</id>
      <parentid>7170</parentid>
      <timestamp>2019-03-05T14:19:30Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="939">{{MacroFunction
|name= exposeFogAtWaypoints
|trusted=true
|version=1.4.1.8
|description=
Returns a string {{code|(Enabled/Disabled)}} indicating whether the '''Expose Fog At Waypoints''' option is set in the MapTool Map menu. This menu option toggles the setting for the currently displayed map.

This setting affects when automatic exposure of Fog of War (FoW) will be performed after a token has been moved.  With it enabled, FoW will only be exposed at any waypoints set by the user along the tokens path plus the stopping point.  If not enabled, FoW will be exposed from every cell along the token's path.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
exposeFogAtWaypoints()
&lt;/source&gt;
'''Parameters'''
None.

|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: empty = exposeFogAtWaypoints()]
&lt;/source&gt;

'''Returns:'''  
* Disabled - Option is disabled.
* Enabled - Option is enabled.

|also=
{{func|exposeFOW}}, {{func|toggleFoW}}
}}
[[Category:FoW]]</text>
      <sha1>i9mm57gb79z3bi6n8ltnmlsw4aevvis</sha1>
    </revision>
  </page>
  <page>
    <title>getEnvironmentVariable</title>
    <ns>0</ns>
    <id>1588</id>
    <revision>
      <id>7084</id>
      <parentid>7065</parentid>
      <timestamp>2019-02-18T14:41:41Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1487">{{MacroFunction
|name= getEnvironmentVariable
|trusted=true
|version=1.5.0
|description=Retrieves an operating system environment variable as a string.

This function is useful for situations where the script may wish to interact with the environment outside of MapTool, such as using the {{func|exportData}} function to write a string to an external file.

{{Caution|This function is considered experimental and its implementation and parameters may change.}}

The '''Allow External Macro Access''' option on the Application tab of MapTool's Preferences must be enabled or this macro aborts with an error.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getEnvironmentVariable(varname)
&lt;/source&gt;

The value of {{code|varname}} specifies which environment variable is queried.  On most operating systems, environment variables are all uppercase letters, but this is a naming convention and not required.  Note that no way exists to query what all of the environment variables are, so the script writer must know which variable they want to retrieve.

|example=
You can use the following code to print the value of the PATH environment variable (which exists on most systems).  Knowing the list of directories where an operating system searches for compiled executables could be considered a security vulnerability.  See the above note about the '''Allow External Macro Access''' option.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[getEnvironmentVariable(&quot;PATH&quot;)]
&lt;/source&gt;
}}
[[Category:Miscellaneous Function]]</text>
      <sha1>qmmmxpf5z8u16all3mx9b1moakpykgb</sha1>
    </revision>
  </page>
  <page>
    <title>getLibPropertyNames</title>
    <ns>0</ns>
    <id>1589</id>
    <revision>
      <id>7087</id>
      <parentid>7086</parentid>
      <timestamp>2019-02-18T14:45:05Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1929">{{MacroFunction
|name= getLibPropertyNames
|version=1.5.0
|description=
Returns a [[String List]] or [[JSON Array]] containing the names of the [[Token Property|Token Properties]] on a [[Library Token]]. The type of the value returned depends on the delimiter parameter.

{{note|
When token properties are created during campaign, they are persistent in the MapTool campaign, regardless of whether they are editable in the Edit Token window. In other words, even though a property is removed from the campaign properties, it remains available to macros.  '''getLibPropertyNames''' will return ''all'' token properties that exist or have ever existed in the particular campaign, even if users cannot directly edit those properties (''i.e.'', they do not appear in the token's properties when you double click on a token). To get only properties that are currently visible and editable, use {{func|getAllPropertyNames}}.
}}

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLibPropertyNames()
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLibPropertyNames(delim)
&lt;/source&gt;
&lt;source lang=&quot;mtmacro&quot; line&gt;
getLibPropertyNames(id, delim)
&lt;/source&gt;
'''Parameters'''
{{param|delim|The delimiter used to separate the values in the [[String List]], defaults to {{code|&quot;,&quot;}}. Returns a [[JSON Array]] if set to {{code|&quot;json&quot;}}. }}
{{param|id|The token {{code|id}} of the token which has its property names returned, defaults to the [[Current Token]].  This parameter may be {{code|*}} or {{code|this}} to indicate the current Lib token that this macro is executing on. {{TrustedParameter}} }}

|example=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getLibPropertyNames()]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: names = getLibPropertyNames(&quot;Lib:some_lib_token&quot;)]
[foreach(name, names, &quot;&lt;br&gt;&quot;): name]
&lt;/source&gt;

|changes=

}}
[[Category:Token Function]][[Category:Token Library Function]][[Category:Property Function]]</text>
      <sha1>706h36kscuoem9mn1xgbaeub975bh46</sha1>
    </revision>
  </page>
  <page>
    <title>getTableImage</title>
    <ns>0</ns>
    <id>1591</id>
    <revision>
      <id>7077</id>
      <parentid>7076</parentid>
      <timestamp>2019-02-16T22:47:52Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="561">{{stub|examples.}}
{{MacroFunction
|name= getTableImage
|version=1.5.0
|trusted=true
|description=
Gets the [[Asset ID|asset id]] for the image of the current row for the given table.  See {{func|setTableRoll}} to learn how to set the current row.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTableImage(table)
&lt;/source&gt;
'''Parameters'''
* {{code|table}} - The name of the table for the row which has its image asset returned.  If the given table doesn't exist or is inaccessible in the current context, the script aborts.

|example=

}}
[[Category:Table Function]]</text>
      <sha1>ktaxd1v5lt1z2tggun9fzjd8ma7qmq7</sha1>
    </revision>
  </page>
  <page>
    <title>getTokenRotation</title>
    <ns>0</ns>
    <id>1592</id>
    <revision>
      <id>7206</id>
      <parentid>7078</parentid>
      <timestamp>2019-03-06T21:43:31Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="831">{{stub|No examples yet.}}
{{MacroFunction
|name= getTokenRotation
|proposed=false
|trusted=false
|version=1.5.0
|description=
Retrieves the token's rotation angle in degrees.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenRotation()
getTokenRotation(id)
&lt;/source&gt;

'''Parameters'''
{{param|id|The token id of the token to retrieve the rotation angle.  Defaults to the [[Current Token]].}}{{TrustedParameter}}
'''Result'''&lt;br /&gt;
The function returns the token's rotation as a numeric value measured in degrees.
|example=
Needs real example showing possible return values.  I recall there was some discussion about whether the return value went from -90 to +270 or from 0 to 360.  It calls '''Token.getFacingInDegrees()'''.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: getTokenRotation()]
&lt;/source&gt;
Returns:

|also=
}}
[[Category:Token Function]]</text>
      <sha1>27gh0qtoa6xx5q976vr4dgzwwgvu0pt</sha1>
    </revision>
  </page>
  <page>
    <title>getViewArea</title>
    <ns>0</ns>
    <id>1593</id>
    <revision>
      <id>7285</id>
      <parentid>7284</parentid>
      <timestamp>2019-03-17T15:27:41Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>The output area is for showing the actual macro output.   The line #'s correspond with those of the macro code.  Undo revision 7284 by [[Special:Contributions/Naciron|Naciron]] ([[User talk:Naciron|talk]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2002">{{MacroFunction
|name= getViewArea
|version=1.5.0
|description=
Returns the limits of the visible area of the map window, given in either pixels or cell coordinates depending on the first parameter. The result is in a &quot;;&quot; delimited String as default or can be configured by setting the delimiter or using Json.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getViewArea()
getViewArea(pixels)
getViewArea(pixels, delim)
&lt;/source&gt;

'''Parameters'''
* {{code|pixels}} - if set to true (1) means the returned coordinates are measured in pixels. If set to false (0) the returned coordinates are measured in map cells. Defaults to {{code|true}}.
* {{code|delim}} - if set to &quot;json&quot; means the returned coordinates are defined in JSON style. Otherwise a String property list is returning using {{code|delim}} as a delimiter. Defaults to {{code|;}}.

|examples=
Get the viewport dimensions of the current client:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: getViewArea()] &lt;!-- Default pixels --&gt;
[r: getViewArea(0)] &lt;!-- in Grid Cells --&gt;
[r: getViewArea(1)] &lt;!-- in Pixels --&gt;
[r: getViewArea(0, &quot;json&quot;)] &lt;!-- Cells as JSON --&gt;
[r: getViewArea(1, &quot;json&quot;)] &lt;!-- Pixels as JSON --&gt;
[r: getViewArea(0, &quot;,&quot;)] &lt;!-- Cells as &quot;,&quot; separated String properties: --&gt;
[r: getViewArea(1, &quot;;&quot;)] &lt;!-- Pixels as &quot;;&quot; separated String properties: --&gt;
&lt;/source&gt;

Output:
&lt;source lang=&quot;mtmacro&quot; line&gt;
offsetX=0; offsetY=0; width=886; height=616 
offsetX=0; offsetY=0; width=17; height=12 
offsetX=0; offsetY=0; width=886; height=616 
{&quot;offsetX&quot;:0,&quot;offsetY&quot;:0,&quot;width&quot;:886,&quot;height&quot;:616} 
{&quot;offsetX&quot;:0,&quot;offsetY&quot;:0,&quot;width&quot;:886,&quot;height&quot;:616} 
offsetX=0, offsetY=0, width=886, height=616 
offsetX=0; offsetY=0; width=886; height=616
&lt;/source&gt;

|also=
{{func|setViewArea}}, {{func|goto}}, {{func|setZoom}}, {{func|getZoom}}. 

|change=
{{change|1.5.1|fix the output of the function as it was incorrectly formatted, now the pixels parameter correctly defaults to true, you can use a delimiter to define output format}}

}}
[[Category:Miscellaneous Function]]</text>
      <sha1>7bkv32d4al7qul5itr7rx4sjbi6sqq8</sha1>
    </revision>
  </page>
  <page>
    <title>isExternalMacroAccessAllowed</title>
    <ns>0</ns>
    <id>1594</id>
    <revision>
      <id>7080</id>
      <timestamp>2019-02-16T23:17:20Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <comment>Created page with &quot;{{MacroFunction |name= isExternalMacroAccessAllowed |version=1.5.0 |description= Returns {{true}} if the client is configured to allow external macro access (see '''Allow Exte...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="667">{{MacroFunction
|name= isExternalMacroAccessAllowed
|version=1.5.0
|description=
Returns {{true}} if the client is configured to allow external macro access (see '''Allow External Macro Access''' in MapTool Preferences).  When enabled, this allows the use of other macro functions such as {{func|exportData}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
isExternalMacroAccessAllowed()
&lt;/source&gt;

|examples=
'''1. Test to see if the current client can access external resources from macros.'''

&lt;source lang=&quot;mtmacro&quot; line&gt;
This client has external access [r,if(isExternalMacroAccessAllowed()): &quot;Enabled&quot;; &quot;Disabled&quot;]
&lt;/source&gt;

|changes=
}}
[[Category:Permission Function]]</text>
      <sha1>c3viunybyfyc3v40pi0if9v6vn81qwg</sha1>
    </revision>
  </page>
  <page>
    <title>setTableImage</title>
    <ns>0</ns>
    <id>1595</id>
    <revision>
      <id>7169</id>
      <parentid>7081</parentid>
      <timestamp>2019-03-04T10:13:37Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="474">{{MacroFunction
|name= setTableImage
|version=1.4.0.1
|trusted=true
|description=
Sets the image for a specified image table. Returns {{true}} if update successful and {{false}} if not. 
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
setTableEntry(tableName, asset)
&lt;/source&gt;
'''Parameters'''
{{param|tableName|A string containing the name of the table.}}
{{param|asset|An asset id represented as a string.}}
|also=
{{func|getTableImage}} {{func|table}}
}}
[[Category:Table Function]]</text>
      <sha1>nt25509wyvs48g4fa19tku4jbwhez8i</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Hero Lab Function</title>
    <ns>14</ns>
    <id>1596</id>
    <revision>
      <id>7180</id>
      <parentid>7172</parentid>
      <timestamp>2019-03-05T17:59:18Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="77">Functions for accessing Hero Lab character files.
[[Category:Macro Function]]</text>
      <sha1>oue58vsgreortjcni9tn7w8wflwdb07</sha1>
    </revision>
  </page>
  <page>
    <title>herolab.getImage</title>
    <ns>0</ns>
    <id>1597</id>
    <revision>
      <id>7175</id>
      <parentid>7174</parentid>
      <timestamp>2019-03-05T15:50:13Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1022">{{MacroFunction
|name=herolab.getImage
|trusted=true
|version=1.5
|description=
Returns the asset id of the image retrieved from a Hero Lab file for a Token.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
herolab.getImage(index)
herolab.getImage(index, id)
&lt;/source&gt;

'''Parameters'''
{{param|index|The index of the image you wish to retrieve.}}
{{param|id|The token id of the token to name, defaults to the Current Token.}}

Hero Lab can store 0 to n images for a given character. The index is the order Hero Lab stores the images (not the display order in Hero lab). Index always starts at 0.

|example=
Get an image asset ID from an image in a Hero Lab file and use that to set a token portrait image.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[portraitImage = herolab.getImage(0)]
[setTokenImage(portraitImage)]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
Asset ID of requested image.
&lt;/source&gt;

|also=
[[Hero Lab Integration|Hero Lab Integration]]

|changes=
* '''1.5''' - Added to main MapTool build.
}}
[[Category:Hero Lab Function]]</text>
      <sha1>esxc6fk344ltxggno2clwbew8trpw7c</sha1>
    </revision>
  </page>
  <page>
    <title>herolab.getInfo</title>
    <ns>0</ns>
    <id>1598</id>
    <revision>
      <id>7176</id>
      <timestamp>2019-03-05T16:11:55Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Created page with &quot;{{MacroFunction |name=herolab.getInfo |trusted=true |version=1.5 |description= Get basic information about the Hero Lab data associated with this token. Returns a JSON object...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1654">{{MacroFunction
|name=herolab.getInfo
|trusted=true
|version=1.5
|description=
Get basic information about the Hero Lab data associated with this token. Returns a JSON object containing various metadata about the character.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
herolab.getInfo(id)
herolab.getInfo(id,field)
&lt;/source&gt;

'''Parameters'''
{{param|id|The token id of the token to name, defaults to the Current Token.}}
{{param|field|A particular field from the metadata.}}

|example=
Get the Hero Lab data associated with the current token.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[herolab.getInfo()]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;javascript&quot; line&gt;
{
	&quot;summary&quot;: &quot;Young red dragon - CE Large dragon&quot;,
	&quot;masterIndex&quot;: null,
	&quot;isAlly&quot;: false,
	&quot;images&quot;: [&quot;asset://8799bd3b26bc614cf0a0f33675f5e77d&quot;, &quot;asset://80b3ea5b47f5f1c7aec06a28219cde47&quot;],
	&quot;portfolioPath&quot;: &quot;C:\\Users\\John\\Documents\\Pathfinder\\Giantslayer\\Episode 5 tokens\\&quot;,
	&quot;playerName&quot;: &quot;Joe&quot;,
	&quot;isMinion&quot;: false,
	&quot;portfolioFile&quot;: &quot;C:\\Users\\John\\Documents\\Pathfinder\\Giantslayer\\Episode 5 tokens\\Part 3 GS 5.por&quot;,
	&quot;gameSystem&quot;: &quot;Pathfinder Roleplaying Game&quot;,
	&quot;heroLabIndex&quot;: &quot;11&quot;,
	&quot;isDirty&quot;: true,
	&quot;name&quot;: &quot;Young Red Dragon #3&quot;,
	&quot;lastModified&quot;: &quot;Fri Nov 02 16:28:33 CDT 2018&quot;,
	&quot;masterName&quot;: &quot;&quot;
}&lt;/source&gt;
Get the status of the {{code|isMinion}} field from the Hero Lab data for the token named ''Orc 23''.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: isMinion = herolab.getInfo(&quot;Orc 23&quot;,&quot;isMinion&quot;)]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
1
&lt;/source&gt;

|also=
[[Hero Lab Integration|Hero Lab Integration]]

|changes=
* '''1.5''' - Added to main MapTool build.
}}
[[Category:Hero Lab Function]]</text>
      <sha1>ro35j0zt3gqzwfk88gz4ek4rkfgp65x</sha1>
    </revision>
  </page>
  <page>
    <title>herolab.getMasterName</title>
    <ns>0</ns>
    <id>1599</id>
    <revision>
      <id>7177</id>
      <timestamp>2019-03-05T16:32:01Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Created page with &quot;{{MacroFunction |name=herolab.getMasterName |trusted=true |version=1.5 |description= Get basic information about the Hero Lab data associated with this token. Returns a JSON o...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="876">{{MacroFunction
|name=herolab.getMasterName
|trusted=true
|version=1.5
|description=
Get basic information about the Hero Lab data associated with this token. Returns a JSON object containing various metadata about the character.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
herolab.getMasterName()
herolab.getMasterName(id)
&lt;/source&gt;

'''Parameters'''
{{param|id|The token id of the token to name, defaults to the Current Token.}}

|example=
Get the Hero Lab Master character name associated with the character represented by the current token.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: myMaster = herolab.getMasterName()]
[r: out = &quot;My master's name is: &quot; + myMaster]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;text&quot; line&gt;
My master's name is: Fred
&lt;/source&gt;

|also=
[[Hero Lab Integration|Hero Lab Integration]]

|changes=
* '''1.5''' - Added to main MapTool build.
}}
[[Category:Hero Lab Function]]</text>
      <sha1>ti8xwn0wxhy3fpsrqc7ymqsqpecy8bm</sha1>
    </revision>
  </page>
  <page>
    <title>herolab.getStatBlock</title>
    <ns>0</ns>
    <id>1600</id>
    <revision>
      <id>7178</id>
      <timestamp>2019-03-05T17:45:18Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Created page with &quot;{{MacroFunction |name=herolab.getStatBlock |trusted=true |version=1.5 |description= Returns associated statblock for the token as a string. Currently, Hero Lab stores three ty...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1227">{{MacroFunction
|name=herolab.getStatBlock
|trusted=true
|version=1.5
|description=
Returns associated statblock for the token as a string. Currently, Hero Lab stores three types of statblocks: Text, HTML, &amp; XML.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
herolab.getStatBlock(type)
herolab.getStatBlock(type,id)
&lt;/source&gt;
Note: The different formats may or may not contain the same information but it does reflects what is stored in the portfolio. If you find missing information, in the XML statblock for instance, you will need to report that to [[http://www.wolflair.com/index.php?context=hero_lab&amp;page=support Wolf Lair]].

'''Parameters'''
{{param|type|A string containing either &quot;text&quot;, &quot;html&quot;, or &quot;xml&quot;}}
{{param|id|The ID of the token. Defaults to the Current Token.}}

Returns ''HeroLab data does not exist for this token'' if no data exists for the token and aborts the macro.

|example=
Get the Hero Lab Master character name associated with the current token.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[herolab.getStatBlock(&quot;text&quot;)]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;/source&gt;

|also=
[[Hero Lab Integration|Hero Lab Integration]]

|changes=
* '''1.5''' - Added to main MapTool build.
}}
[[Category:Hero Lab Function]]</text>
      <sha1>46c2tl871gjsm59d4vf4w5frv0so8fc</sha1>
    </revision>
  </page>
  <page>
    <title>herolab.hasChanged</title>
    <ns>0</ns>
    <id>1601</id>
    <revision>
      <id>7182</id>
      <parentid>7181</parentid>
      <timestamp>2019-03-05T18:01:08Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="821">{{MacroFunction
|name=herolab.hasChanged
|trusted=true
|version=1.5
|description=
Returns a boolean value of true if the portfolio file has been modified compared to the current stored data on the token, otherwise returns false.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
herolab.hasChanged()
herolab.hasChanged(id)
&lt;/source&gt;
See {{func|herolab.refresh}} to update the token's portfolio information.

'''Parameters'''
{{param|id|The id of the token. Defaults to the Current Token.}}

|example=
Determine if the associated Hero Lab portfolio has changed.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: isDirty = herolab.hasChanged()]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
0 or 1
&lt;/source&gt;

|also=
[[Hero Lab Integration|Hero Lab Integration]]

|changes=
* '''1.5''' - Added to main MapTool build.
}}

[[Category:Hero Lab Function]]</text>
      <sha1>8bunj8zct2f70258ulxv1fc6slabxbu</sha1>
    </revision>
  </page>
  <page>
    <title>herolab.isMinion</title>
    <ns>0</ns>
    <id>1602</id>
    <revision>
      <id>7184</id>
      <parentid>7183</parentid>
      <timestamp>2019-03-05T18:12:31Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="977">{{MacroFunction
|name=herolab.isMinion
|trusted=true
|version=1.5
|description=
Returns true if token is a Hero Lab ''minion'' character, such as an Eidolon or Familiar. Otherwise it returns false.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
herolab.isMinion()
herolab.isMinion(id)
&lt;/source&gt;

'''Parameters'''
{{param|id|The id of the token. Defaults to the Current Token.}}

|example=
Get the boolean value of the isMinion flag in the Hero Lab data.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: isMinion = herolab.isMinion()]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
0 or 1
&lt;/source&gt;
This is the same as using the {{func|getInfo}} function and reading the {{code|isMinion}} field.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: info = herolab.getInfo()]
[r: isMinion = json.get(info,&quot;isMinion&quot;)]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
0 or 1
&lt;/source&gt;
|also=
[[Hero Lab Integration|Hero Lab Integration]]

|changes=
* '''1.5''' - Added to main MapTool build.
}}
[[Category:Hero Lab Function]]</text>
      <sha1>ieef4ldck7scm85t7rcu9um6c0l9onq</sha1>
    </revision>
  </page>
  <page>
    <title>herolab.refresh</title>
    <ns>0</ns>
    <id>1603</id>
    <revision>
      <id>7186</id>
      <parentid>7185</parentid>
      <timestamp>2019-03-05T18:37:51Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1027">{{MacroFunction
|name=herolab.refresh
|trusted=true
|version=1.5
|description=
Refresh the Hero Lab data associated with this token. This will update the statblock and stored images.  

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
herolab.refresh()
herolab.refresh(id)
&lt;/source&gt;
This function will also refresh the token's images (just like when the token is created). The token's base Image from the first image in Hero Lab, the token's Portrait from the second image in Hero Lab, and the tokens' Handout image from the 3rd image in Hero Lab.

'''Parameters'''
{{param|id|The id of the token. Defaults to the Current Token.}}

It will return a 1 if successful, otherwise it will return a 0.

|example=
Get the boolean value of the refresh flag in the Hero Lab data.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: success = herolab.refresh()]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
0 or 1
&lt;/source&gt;

|also=
[[Hero Lab Integration|Hero Lab Integration]]

|changes=
* '''1.5''' - Added to main MapTool build.
}}
[[Category:Hero Lab Function]]</text>
      <sha1>5pad5u1v8sbeayshn1toesgubw7mzbd</sha1>
    </revision>
  </page>
  <page>
    <title>herolab.XPath</title>
    <ns>0</ns>
    <id>1604</id>
    <revision>
      <id>7214</id>
      <parentid>7213</parentid>
      <timestamp>2019-03-06T21:56:32Z</timestamp>
      <contributor>
        <username>Azhrei</username>
        <id>4</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1091">{{MacroFunction
|name=herolab.XPath
|trusted=true
|version=1.5.0
|description=
Returns data results based on the passed in XPath expression from the XML statblock. This is a reliable and easier way to get stat data from a character than using regular expression parsing of Text stat blocks.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
herolab.XPath(XPath)
herolab.XPath(XPath, id)
&lt;/source&gt;

'''Parameters'''
{{param|XPath|The XPath expression to evaluate against the XML statblock.}}
{{param|id|The id of the token. Defaults to the Current Token.}}

Returns the requested data.

|example=
Get various values from Hero Lab data (which is in XML).
&lt;source lang=&quot;mtmacro&quot; line&gt;
[race = herolab.XPath('/document/public/character/race/@name')]
[alignment = herolab.XPath('/document/public/character/alignment/@name')]
[improvedInit = herolab.XPath('boolean(/document/public/character/feats/feat[starts-with(@name,&quot;Improved Initiative&quot;)])')]
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot;&gt;
Human Neutral Good 1
&lt;/source&gt;

|also=
[[Hero Lab Integration|Hero Lab Integration]]
}}
[[Category:Hero Lab Function]]</text>
      <sha1>8xyujtxscvl2b6k8pqn92ae162spv0i</sha1>
    </revision>
  </page>
  <page>
    <title>User talk:TestUser</title>
    <ns>3</ns>
    <id>1608</id>
    <revision>
      <id>7241</id>
      <parentid>7240</parentid>
      <timestamp>2019-03-10T07:38:25Z</timestamp>
      <contributor>
        <username>TestUser</username>
        <id>663</id>
      </contributor>
      <comment>Blanked the page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>macro.catchAbort</title>
    <ns>0</ns>
    <id>1609</id>
    <revision>
      <id>7289</id>
      <parentid>7288</parentid>
      <timestamp>2019-03-17T16:04:26Z</timestamp>
      <contributor>
        <username>Aliasmask</username>
        <id>182</id>
      </contributor>
      <comment>/* See also */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3432">Introduced in version 1.5.0. The variable {{code|macro.catchAbort}} can be used to override the behavior of the default {{func|abort}} function to continue execution instead of halting.

Whenever you set {{code|macro.catchAbort}} to {{code|1}}, any use of {{func|abort}} in a subsequently called macro will not abort, but will trigger a return from the macro instead.

The variable {{code|macro.catchAbort}} must be in the variable scope where the abort should be caught. It is not a general flag to turn off abort behavior, just temporarily in the macro or variable scope where it's set.

==Usage==

Set this variable to {{code|0}} (default abort behavior) or {{code|1}} (catch aborts).

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: macro.catchAbort = 0]
[h: macro.catchAbort = 1]
&lt;/source&gt;

==Examples==

When a macro is called by another macro, the called macro may use {{func|abort}} to cancel execution. Usually all macro execution would stop, so the calling macro would not continue. We can now override that default behavior by ''catching'' the abort.

===Default behaviour===

The macro below will not have any output because the default behavior is that any call to {{func|abort}} will stop the overall macro execution. Whatever code is defined after the call to {{func|abort}} is not executed.

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
|-
!Default abort Macro
|-
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: resultText = &quot;defaultValue&quot;]
[h: resultText = abort(0)]
[r: resultText]
&lt;/source&gt;
|}

===Catching the abort===

The macro below will output {{code|defaultValue}} as the {{code|macro.catchAbort}} set to {{code|1}} prevents the call to {{func|abort}} from actually terminating execution. The example shows how to set a default value for any return value of a function/macro that has an {{func|abort}} call in it. The macro then re-enables the normal function of {{func|abort}} again by setting {{code|macro.catchAbort}} to {{code|0}}. As each macro has its own variable scope, this only affects calls to {{func|abort}} within the current macro or calls to other macros from the current macro. The exception is if the called macro shares the scope with the calling macro, in which case the {{func|abort}} is ignored.

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
|-
!Catching abort
|-
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: macro.catchAbort = 1]
[h: resultText = &quot;defaultValue&quot;]
[h: resultText = abort(0)]
[r: resultText]
[h: macro.catchAbort = 0]
&lt;/source&gt;
|}

===Catching the abort with nested macro calls===

Same as in the above example, the calling macro below will output {{code|defaultValue}} because we activate catching aborts (in anything that this macro will call afterwards) with {{code|macro.catchAbort}} set to {{code|1}} . 

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
|-
!Called macro using an abort as function doSomething()
!Calling macro catching an abort
|-
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: &quot;this macro will do something and then abort&quot;]
[h: &quot;... doing something&quot;]
[h: abort(0)]
&lt;/source&gt;
|&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: macro.catchAbort= 1]
[h: resultText = &quot;defaultValue&quot;]
[h: resultText = doSomething()]
[r: resultText]
[h: macro.catchAbort= 0]
&lt;/source&gt;
|}

===See also===
[[ abort|abort()]]
[[ assert|assert()]]

===Version changes===
{{change|1.5.0|introduced macro.abortCatch}}

[[Category:Special Variable]]</text>
      <sha1>5u9pzea7wnpfzy6guwzd714d1d4bjvo</sha1>
    </revision>
  </page>
  <page>
    <title>return</title>
    <ns>0</ns>
    <id>1611</id>
    <revision>
      <id>7245</id>
      <timestamp>2019-03-10T12:52:25Z</timestamp>
      <contributor>
        <username>Naciron</username>
        <id>664</id>
      </contributor>
      <comment>Add return function</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2400">{{MacroFunction
|name=return
|version=1.5.0
|description=

Is used to conditionally return from the execution of a macro like an abort, but not stopping further macro execution. Optionally also returning a value by automatically assigning [[macro.return|macro.return]]. If the first argument to {{code|return()}} is 0 then the return is happening. If the first argument to {{code|return()}} is non zero then the macro continues. The optional second argument of {{code|return()}} defines if there is a value that should be returned to a calling macro. Any other output is discarded when using {{code|return()}}.

Common uses for this function are 
* Ending a macro with or without a return value to stop the further execution of the following lines in the current macro.
* The macro has conditions and based on these you want to return different values and not continue further in the current macro.

If you prefer to display an error message when exiting the macro see the [[assert | {{code|assert()}}]] function or if you want to abort the flow of overall macro execution (e.g. in case of an error) see the [[abort| {{code|abort()}}]] function.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
return(continue, returnValue)
&lt;/source&gt;

'''Parameters'''
{{param|continue| {{code|0}} if the return function should end the current macro, nonzero if it should not. So consistent to what the abort function is doing.}}
{{param|returnValue| Optional. Any value passed in here will automatically be used as a return value (set to macro.return) and passed to the calling macro.}}


|examples=

The following example is about a called macro using the [[return|return()]] function to return a result to the calling macro. The calling macro could also be in a user defined function and then just used as a function in the caller macro.

====Calling Macro====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- Call the testReturn library macro --&gt;
[MACRO(&quot;testReturn@Lib:test&quot;): &quot;&quot;]
Response is [r:macro.return].
&lt;/source&gt;

====Called Macro====
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;!-- testReturn macro in Lib:test token --&gt;
[h: return(0, &quot;hello world&quot;)]
[h: &quot;this will not be executed anymore&quot;]
[h: macro.return = &quot;this will not be set&quot;]
&lt;/source&gt;

====Results====
TokenName: Response is hello world.


|changes=
{{change|1.5.0|introduced return function}}

|also=
[[ assert|assert()]]
[[ abort|abort()]]

}}

[[Category:Miscellaneous Function]]</text>
      <sha1>o4s8amz4ksznmx0r2pl0w2j33w24jok</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:Editor</title>
    <ns>1</ns>
    <id>1612</id>
    <revision>
      <id>7246</id>
      <timestamp>2019-03-10T13:03:51Z</timestamp>
      <contributor>
        <ip>37.115.221.141</ip>
      </contributor>
      <comment>Stress, connecting embarrasses acquired, crucially, smell.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="204">http://theprettyguineapig.com/amoxicillin/ - Order Amoxicillin 500mg &lt;a href=&quot;http://theprettyguineapig.com/amoxicillin/&quot;&gt;Amoxicillin 500mg Capsules For Sale&lt;/a&gt; http://theprettyguineapig.com/amoxicillin/</text>
      <sha1>2ydep5qth4psborhjr3yec8buhgpn3w</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:Main Page</title>
    <ns>1</ns>
    <id>1614</id>
    <revision>
      <id>7337</id>
      <parentid>7248</parentid>
      <timestamp>2019-03-30T15:55:33Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Blanked the page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:Command Line Options</title>
    <ns>1</ns>
    <id>1615</id>
    <revision>
      <id>7336</id>
      <parentid>7249</parentid>
      <timestamp>2019-03-30T15:54:57Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Blanked the page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:Introduction to Lights and Sights</title>
    <ns>1</ns>
    <id>1616</id>
    <revision>
      <id>7349</id>
      <parentid>7250</parentid>
      <timestamp>2019-03-31T12:32:32Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Frakking spammers.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:Frameworks</title>
    <ns>1</ns>
    <id>1617</id>
    <revision>
      <id>7256</id>
      <timestamp>2019-03-13T03:17:08Z</timestamp>
      <contributor>
        <ip>31.184.238.190</ip>
      </contributor>
      <comment>Carrie Underwood Tour Dates</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="738">Carrie Underwood is my favourite US contry singer. She is young, beautiful and charming woman in her 30s. Her voice takes me away from all issues of this planet and I can enjoy my life and listen songs created by her voice. Now she is on a Cry Pretty 360 Tour started in May of 2019. The concerts scheduled for the whole 2019, up to the 31st of October. Ticket prices are moderate and available for all men and women with different income. If you love country music as mush as I, then you must visit at least one Carrie's concert. All tour dates are available at the [url=https://carrieunderwoodtour.com]Carrie Underwood tour Buffalo[/url]. Visit the website and make yourself familiar with all powerful Carrie Underwood concerts in 2019!</text>
      <sha1>bfcanxcwt2p2l2rz8tkaenr2b3elhve</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:MapTool ChangeLog (by build version)</title>
    <ns>1</ns>
    <id>1618</id>
    <revision>
      <id>7257</id>
      <timestamp>2019-03-14T07:04:44Z</timestamp>
      <contributor>
        <ip>5.188.44.20</ip>
      </contributor>
      <comment>Canine Cephalexin 500 Mg KelNoirty</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="147">Propecia Usos  [url=http://brandcial.com]canadian cialis[/url] Are Canadian Viagra Sold Online Safe? Cialis Ayuda Daily Cialis Without Prescription</text>
      <sha1>0redwbhqma01uknodi757sa0j73b5z4</sha1>
    </revision>
  </page>
  <page>
    <title>Category:RESTful Function</title>
    <ns>14</ns>
    <id>1619</id>
    <revision>
      <id>7259</id>
      <parentid>7258</parentid>
      <timestamp>2019-03-16T03:20:40Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="79">Macro functions for performing RESTful operations.

[[Category:Macro Function]]</text>
      <sha1>g32gbhe97b0ekuyboagoekg560vjttw</sha1>
    </revision>
  </page>
  <page>
    <title>REST.get</title>
    <ns>0</ns>
    <id>1620</id>
    <revision>
      <id>7305</id>
      <parentid>7300</parentid>
      <timestamp>2019-03-18T00:45:19Z</timestamp>
      <contributor>
        <ip>35.138.212.53</ip>
      </contributor>
      <comment>Removed &quot;changes&quot; since it's for... well, changes; modified MT version to 1.5.0 from 1.5</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2118">{{MacroFunction
|name=REST.get
|trusted=true
|version=1.5.0
|description=
Perform an HTTP get request to the specified URL to retrieve a resource or information.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
REST.get(url, getFullResponse)
&lt;/source&gt;

'''Parameters'''
{{param|url|String containing the URL to the resource or collection of resources.}}
{{param|getFullResponse|Boolean (0:1). True(1) to get full response.}}
'''Returns'''

HTTP response as JSON (if full response) or server response, usually JSON but can be XML, HTML, or other formats.

|example=
Get the specified user.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: baseURL = &quot;https://reqres.in&quot;]
[h: path = &quot;/api/users/2&quot;]

[h: response = REST.get(baseURL + path, 0)]

&lt;br&gt;
Response: [r: baseURL + path]
&lt;pre&gt;
[r: json.indent(response, 2)]
&lt;/pre&gt;

&lt;br&gt;&lt;br&gt;

[h: response = REST.get(baseURL + path, 1)]

&lt;br&gt;
Full Response: [r: baseURL + path]
&lt;pre&gt;
[r: json.indent(response, 2)]
&lt;/pre&gt;
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;

Response: https://reqres.in/api/users/2 
{&quot;data&quot;: {
  &quot;id&quot;: 2,
  &quot;first_name&quot;: &quot;Janet&quot;,
  &quot;last_name&quot;: &quot;Weaver&quot;,
  &quot;avatar&quot;: &quot;https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg&quot;
}}


Full Response: https://reqres.in/api/users/2 
{
  &quot;status&quot;: 200,
  &quot;headers&quot;:   {
    &quot;access-control-allow-origin&quot;: [&quot;*&quot;],
    &quot;cf-ray&quot;: [&quot;4b9244475b1b5432-LAX&quot;],
    &quot;content-type&quot;: [&quot;application/json; charset=utf-8&quot;],
    &quot;date&quot;: [&quot;Sun, 17 Mar 2019 22:05:09 GMT&quot;],
    &quot;etag&quot;: [&quot;W/\&quot;89-bSBFK27ZbQL+K8fMuJn/jZrcUuk\&quot;&quot;],
    &quot;expect-ct&quot;: [&quot;max-age=604800, report-uri=\&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\&quot;&quot;],
    &quot;server&quot;: [&quot;cloudflare&quot;],
    &quot;set-cookie&quot;: [&quot;__cfduid=d5f84a1d88f4b568cd9547d6f76b1712b1552860309; expires=Mon, 16-Mar-20 22:05:09 GMT; path=/; domain=.reqres.in; HttpOnly&quot;],
    &quot;x-powered-by&quot;: [&quot;Express&quot;]
  },
  &quot;body&quot;: {&quot;data&quot;:   {
    &quot;id&quot;: 2,
    &quot;first_name&quot;: &quot;Janet&quot;,
    &quot;last_name&quot;: &quot;Weaver&quot;,
    &quot;avatar&quot;: &quot;https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg&quot;
  }}
}&lt;/source&gt;

|also=
[[RESTful Functions Overview|RESTful Functions Overview]]
}}
[[Category:RESTful Function]]</text>
      <sha1>5juzoztkefxkcyja34nneov7yq036b7</sha1>
    </revision>
  </page>
  <page>
    <title>REST.post</title>
    <ns>0</ns>
    <id>1621</id>
    <revision>
      <id>7310</id>
      <parentid>7308</parentid>
      <timestamp>2019-03-18T01:43:35Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2426">{{MacroFunction
|name=REST.post
|trusted=true
|version=1.5.0
|description=
Perform an HTTP post request to the specified URL to create a resource.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
REST.post(url, payload, mediaType, getFullResponse)
REST.post(url, payload, mediaType, headers, getFullResponse)
&lt;/source&gt;

'''Parameters'''
{{param|url|String containing the URL to the resource or collection of resources.}}
{{param|payload|JSON object containing the key:value pairs.}}
{{param|mediaType|String containing a MIME type and charset. See example, but note that any character encoding other than {{code|UTF-8}} will be extremely difficult to produce in MapTool.}}
{{param|headers|JSON object containing header key:value pairs.}}
{{param|getFullResponse|Boolean (0:1). True(1) to get full response.}}
'''Returns'''

HTTP response as JSON (if full response) or server response, usually JSON but can be XML, HTML, or other formats.

'''Note:''' If a post fails with {{code|getFullResponse}} set to false, an error will be produced with a Status Code of 400.  Set {{code|getFullResponse}} to true(1) for more detail.

|example=
Create a user with a post request.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: baseurl = &quot;https://reqres.in&quot;]
[h: path = &quot;/api/users&quot;]
[h: mediaType = &quot;application/json; charset=utf-8&quot;]
[h: getFullResponse = 1]

[h: payload = '{ &quot;name&quot;: &quot;morpheus&quot;, &quot;job&quot;: &quot;leader&quot; }']

[h: response = REST.post(baseurl + path, payload, mediaType, getFullResponse)]

&lt;br&gt;
&lt;pre&gt;
[r: json.indent(response, 2)]
&lt;/pre&gt;
&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
{
  &quot;status&quot;: 201,
  &quot;headers&quot;:   {
    &quot;access-control-allow-origin&quot;: [&quot;*&quot;],
    &quot;cf-ray&quot;: [&quot;4b92503c1f49772a-LAX&quot;],
    &quot;content-length&quot;: [&quot;84&quot;],
    &quot;content-type&quot;: [&quot;application/json; charset=utf-8&quot;],
    &quot;date&quot;: [&quot;Sun, 17 Mar 2019 22:13:19 GMT&quot;],
    &quot;etag&quot;: [&quot;W/\&quot;54-Iq8tAhIi7JekRXqEAyUkl9PsnwI\&quot;&quot;],
    &quot;expect-ct&quot;: [&quot;max-age=604800, report-uri=\&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\&quot;&quot;],
    &quot;server&quot;: [&quot;cloudflare&quot;],
    &quot;set-cookie&quot;: [&quot;__cfduid=dd8f9e69613d9ab995b4365e36bcc2e181552860799; expires=Mon, 16-Mar-20 22:13:19 GMT; path=/; domain=.reqres.in; HttpOnly&quot;],
    &quot;x-powered-by&quot;: [&quot;Express&quot;]
  },
  &quot;body&quot;:   {
    &quot;name&quot;: &quot;morpheus&quot;,
    &quot;job&quot;: &quot;leader&quot;,
    &quot;id&quot;: &quot;996&quot;,
    &quot;createdAt&quot;: &quot;2019-03-17T22:17:50.616Z&quot;
  }
}
&lt;/source&gt;

|also=
[[RESTful Functions Overview|RESTful Functions Overview]]
}}
[[Category:RESTful Function]]</text>
      <sha1>1c8t2nixurutgsj9wgeu40vc3jsjg8q</sha1>
    </revision>
  </page>
  <page>
    <title>REST.put</title>
    <ns>0</ns>
    <id>1622</id>
    <revision>
      <id>7309</id>
      <parentid>7302</parentid>
      <timestamp>2019-03-18T00:55:37Z</timestamp>
      <contributor>
        <ip>35.138.212.53</ip>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1477">{{MacroFunction
|name=REST.put
|trusted=true
|version=1.5.0
|description=
Perform an HTTP put request to the specified URL to update an existing resource.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
REST.put(url, payload, mediaType, getFullResponse)
REST.put(url, payload, mediaType, headers, getFullResponse)
&lt;/source&gt;

'''Parameters'''
{{param|url|String containing the URL to the resource or collection of resources.}}
{{param|payload|JSON object containing the key:value pairs.}}
{{param|mediaType|String containing a MIME type and charset. See example.}}
{{param|headers|JSON object containing header key:value pairs.}}
{{param|getFullResponse|Boolean (0:1). Use true(1) to get full response.}}
'''Returns'''

HTTP response as JSON (if full response) or server response, usually JSON but can be XML, HTML, or other formats.

|example=
Update a user with a put request.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: baseURL = &quot;https://reqres.in&quot;]
[h: path = &quot;/api/users/2&quot;]
[h: mediaType = &quot;application/json; charset=utf-8&quot;]
[h: getFullResponse = 0]

[h: payload = '{ &quot;name&quot;: &quot;morpheus&quot;, &quot;job&quot;: &quot;zion resident&quot; }']

[h: response = REST.put(baseURL + path, payload, mediaType, getFullResponse)]

&lt;br&gt;
&lt;pre&gt;
[r: json.indent(response, 2)]
&lt;/pre&gt;&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
{
  &quot;name&quot;: &quot;morpheus&quot;,
  &quot;job&quot;: &quot;zion resident&quot;,
  &quot;updatedAt&quot;: &quot;2019-03-17T22:49:52.188Z&quot;
}
&lt;/source&gt;

|also=
[[RESTful Functions Overview|RESTful Functions Overview]]
}}
[[Category:RESTful Function]]</text>
      <sha1>ij0ei2wx38oivlwgl5l77fcwjmrl05g</sha1>
    </revision>
  </page>
  <page>
    <title>REST.patch</title>
    <ns>0</ns>
    <id>1623</id>
    <revision>
      <id>7311</id>
      <parentid>7303</parentid>
      <timestamp>2019-03-18T01:44:45Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2145">{{MacroFunction
|name=REST.patch
|trusted=true
|version=1.5.0
|description=
Perform an HTTP patch request, to the specified URL, to make a partial update to the specified resource.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
REST.patch(url, payload, mediaType, getFullResponse)
REST.patch(url, payload, mediaType, headers, getFullResponse)
&lt;/source&gt;

'''Parameters'''
{{param|url|String containing the URL to the resource or collection of resources.}}
{{param|payload|JSON object containing the key:value pairs.}}
{{param|mediaType|String containing a MIME type and charset. See example.}}
{{param|headers|JSON object containing header key:value pairs.}}
{{param|getFullResponse|Boolean (0:1). Use true(1) to get full response.}}
'''Returns'''

HTTP response as JSON (if full response) or server response, usually JSON but can be XML, HTML, or other formats.

|example=
Update user data with contents of payload.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: baseURL = &quot;https://reqres.in&quot;]
[h: path = &quot;/api/users/2&quot;]
[h: mediaType = &quot;application/json; charset=utf-8&quot;]
[h: getFullResponse = 1]

[h: payload = '{ &quot;name&quot;: &quot;morpheus&quot;, &quot;job&quot;: &quot;zion resident&quot; }']

[h: response = REST.patch(baseURL + path, payload, mediaType, getFullResponse)]

&lt;br&gt;
&lt;pre&gt;
[r: json.indent(response, 2)]
&lt;/pre&gt;&lt;/source&gt;
Returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
{
  &quot;status&quot;: 200,
  &quot;headers&quot;:   {
    &quot;access-control-allow-origin&quot;: [&quot;*&quot;],
    &quot;cf-ray&quot;: [&quot;4b927aa4ea915414-LAX&quot;],
    &quot;content-type&quot;: [&quot;application/json; charset=utf-8&quot;],
    &quot;date&quot;: [&quot;Sun, 17 Mar 2019 22:42:16 GMT&quot;],
    &quot;etag&quot;: [&quot;W/\&quot;50-xvMYBAeY4FNOMM/22NyIcimiIYc\&quot;&quot;],
    &quot;expect-ct&quot;: [&quot;max-age=604800, report-uri=\&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\&quot;&quot;],
    &quot;server&quot;: [&quot;cloudflare&quot;],
    &quot;set-cookie&quot;: [&quot;__cfduid=d97966d3e9434720192d81096687475ff1552862536; expires=Mon, 16-Mar-20 22:42:16 GMT; path=/; domain=.reqres.in; HttpOnly&quot;],
    &quot;x-powered-by&quot;: [&quot;Express&quot;]
  },
  &quot;body&quot;:   {
    &quot;name&quot;: &quot;morpheus&quot;,
    &quot;job&quot;: &quot;zion resident&quot;,
    &quot;updatedAt&quot;: &quot;2019-03-17T22:46:47.729Z&quot;
  }
}&lt;/source&gt;

|also=
[[RESTful Functions Overview|RESTful Functions Overview]]

}}
[[Category:RESTful Function]]</text>
      <sha1>pl3nwesy28czwxxcj81873t7qloj6xr</sha1>
    </revision>
  </page>
  <page>
    <title>REST.delete</title>
    <ns>0</ns>
    <id>1624</id>
    <revision>
      <id>7313</id>
      <parentid>7312</parentid>
      <timestamp>2019-03-18T04:15:26Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1817">{{MacroFunction
|name=REST.delete
|trusted=true
|version=1.5.0
|description=
Perform an HTTP delete request to the specified URL to delete the specified resource.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
REST.delete(url, getFullResponse)
REST.delete(url, headers, getFullResponse)
&lt;/source&gt;

'''Parameters'''
{{param|url|String containing the URL to the resource or collection of resources.}}
{{param|headers|JSON object containing header key:value pairs.}}
{{param|getFullResponse|Boolean (0:1). True(1) to get full response.}}
'''Returns'''

HTTP response as JSON (if full response) or server response, usually JSON but can be XML, HTML, or other formats.

'''Note:''' The delete request returns an empty string for status 204 if the full response is not requested.

|example=
Delete the indicated resource.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: baseURL = &quot;https://reqres.in&quot;]
[h: path = &quot;/api/users/2&quot;]

[r: response = REST.delete(baseURL + path, 1)]
&lt;/source&gt;
Returns:
Note the 204 - No Content status and thus no &quot;body&quot; element in the JSON. If the second parameter had been 0, an empty string would have been returned.
&lt;source lang=&quot;mtmacro&quot; line&gt;
Full Response: {
  &quot;status&quot;: 204,
  &quot;headers&quot;:   {
    &quot;access-control-allow-origin&quot;: [&quot;*&quot;],
    &quot;cf-ray&quot;: [&quot;4b928693e9805414-LAX&quot;],
    &quot;date&quot;: [&quot;Sun, 17 Mar 2019 22:50:25 GMT&quot;],
    &quot;etag&quot;: [&quot;W/\&quot;2-vyGp6PvFo4RvsFtPoIWeCReyIC8\&quot;&quot;],
    &quot;expect-ct&quot;: [&quot;max-age=604800, report-uri=\&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\&quot;&quot;],
    &quot;server&quot;: [&quot;cloudflare&quot;],
    &quot;set-cookie&quot;: [&quot;__cfduid=dc5a1bd174f8f46cb9721f3a3338cff631552863025; expires=Mon, 16-Mar-20 22:50:25 GMT; path=/; domain=.reqres.in; HttpOnly&quot;],
    &quot;x-powered-by&quot;: [&quot;Express&quot;]
  }
}
&lt;/source&gt;

|also=
[[RESTful Functions Overview|RESTful Functions Overview]]

}}
[[Category:RESTful Function]]</text>
      <sha1>bjoy6mw2b0firlpyo7o0nwokb9cowa6</sha1>
    </revision>
  </page>
  <page>
    <title>macro.catchAssert</title>
    <ns>0</ns>
    <id>1625</id>
    <revision>
      <id>7287</id>
      <parentid>7271</parentid>
      <timestamp>2019-03-17T16:03:04Z</timestamp>
      <contributor>
        <username>Aliasmask</username>
        <id>182</id>
      </contributor>
      <comment>/* Catching the assert */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3625">Introduced in version 1.5.0. The variable {{code|macro.catchAssert}} can be used to override the behavior of the default {{func|assert}} function to continue execution instead of halting.

Whenever you set {{code|macro.catchAssert}} to {{code|1}}, any use of {{func|assert}} in a subsequently called macro will not assert, but will trigger a return from the macro instead.

The variable {{code|macro.catchAssert}} must be in the variable scope where the assert should be caught. It is not a general flag to turn off assert behavior, just temporarily in the macro or variable scope where it's set.

==Usage==

Set this variable to {{code|0}} (default assert behavior) or {{code|1}} (catch asserts).

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: macro.catchAssert = 0]
[h: macro.catchAssert = 1]
&lt;/source&gt;

==Examples==

When a macro is called by another macro, the called macro may use {{func|assert}} to cancel execution and show an error message. Usually all macro execution would stop, so the calling macro would not continue. We can now override that default behavior by ''catching'' the assert (it will still show the error message).

===Default behaviour===

The macro below will only have &quot;error occured&quot; as output because the default behavior is that any call to {{func|assert}} will stop the overall macro execution. Whatever code is defined after the call to {{func|assert}} is not executed.

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
|-
!Default assert Macro
|-
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: resultText = &quot;defaultValue&quot;]
[h: resultText = assert(0, &quot;error occured&quot;)]
[r: resultText]
&lt;/source&gt;
|}

===Catching the assert===

The macro below will output &quot;error occured&quot; and {{code|defaultValue}} as the {{code|macro.catchAssert}} set to {{code|1}} prevents the call to {{func|assert}} from actually terminating execution. The example shows how to set a default value for any return value of a function/macro that has an {{func|assert}} call in it. The macro then re-enables the normal function of {{func|assert}} again by setting {{code|macro.catchAssert}} to {{code|0}}. As each macro has its own variable scope, this only affects calls to {{func|assert}} within the current macro or calls to other macros from the current macro. The exception is if the called macro shares the scope with the calling macro, in which case the {{func|assert}} is ignored.

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
|-
!Catching assert
|-
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: macro.catchAssert = 1]
[h: resultText = &quot;defaultValue&quot;]
[h: resultText = assert(0, &quot;error occured&quot;)]
[r: resultText]
[h: macro.catchAssert = 0]
&lt;/source&gt;
|}

===Catching the assert with nested macro calls===

Same as in the above example, the calling macro below will output &quot;error occured&quot; and {{code|defaultValue}} because we activate deferred asserts (in anything that this macro will call afterwards) with {{code|macro.catchAssert}} set to {{code|1}} . 

{| class=&quot;wikitable&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;
|-
!Called macro using an assert as function doSomething()
!Calling macro catching an assert
|-
|valign=&quot;top&quot;|&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: &quot;this macro will do something and then assert&quot;]
[h: &quot;... doing something&quot;]
[h: assert(0, &quot;error occured&quot;)]
&lt;/source&gt;
|&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: macro.catchAssert= 1]
[h: resultText = &quot;defaultValue&quot;]
[h: resultText = doSomething()]
[r: resultText]
[h: macro.catchAssert= 0]
&lt;/source&gt;
|}

===See also===
[[ assert|assert()]]

===Version changes===
{{change|1.5.0|introduced macro.assertCatch}}

[[Category:Special Variable]]</text>
      <sha1>fi4n6w38dfcgqak8odlvasd6xvgo5a5</sha1>
    </revision>
  </page>
  <page>
    <title>RESTful Functions Overview</title>
    <ns>0</ns>
    <id>1626</id>
    <revision>
      <id>7307</id>
      <parentid>7304</parentid>
      <timestamp>2019-03-18T00:54:02Z</timestamp>
      <contributor>
        <ip>35.138.212.53</ip>
      </contributor>
      <comment>Clarification re: processing XML using the herolab.XPath function</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1394">The RESTful macro functions in MapTool are for advanced users.  This is merely an overview of the MapTool implementation of RESTful functions and not a tutorial covering REST and REST APIs.  Those can be readily found on the web such as [https://restfulapi.net/ REST API Tutorial].

== What is REST? ==

REST is acronym for REpresentational State Transfer. It is an architectural style for distributed hypermedia systems and was first presented by Roy Fielding in 2000 in his [https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm famous dissertation].

(''Definition from tutorial linked above.'')

== MapTool REST Operations ==

MapTool supports the following REST requests:
* Get - {{func|REST.get}}
* Post - {{func|REST.post}}
* Put - {{func|REST.put}}
* Patch - {{func|REST.patch}}
* Delete - {{func|REST.delete}}

See the entry for each macro function for details about their use.

== REST Status Codes ==

Each request can return the server response or a full response with data typically in a XML or JSON format.  Note that XML data can be more easily processed using {{func|herolab.XPath}} (the prefix is {{code|herolab}} but it's a general purpose function).

The full response will include a status code.  A partial list of status codes:

{|class=&quot;wikitable&quot;
|200||OK
|-
|201||Created
|-
|202||Accepted
|-
|204||No Content
|-
|400||Bad Request
|-
|404||Not Found
|}</text>
      <sha1>qgfcn4fhwkny9h8p1l72d9qlvd9a79b</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:Stack Size</title>
    <ns>1</ns>
    <id>1627</id>
    <revision>
      <id>7314</id>
      <timestamp>2019-03-22T04:28:19Z</timestamp>
      <contributor>
        <ip>31.184.238.9</ip>
      </contributor>
      <comment>фиксатор для межкомнатных дверей</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="748">металлические двери беларусь 
пвх наличник на дверь купить 
http://dveri-zamok-dom.icu 
смотреть установка межкомнатных дверей видео 
пятна на межкомнатных дверях 
http://glazok-zasovzavesa.icu 
недорогие двери спб 
межкомнатные двери цвета 
http://zamokdomdveri.icu 
межкомнатные двери недорого в москве 
входные двери металлопластик 
http://home-room-door.icu 
обивка металлических дверей винилискожей 
срочная установка входных дверей 
http://dverjzavesifurnitura.icu</text>
      <sha1>1xx2tj5ip9qtsdk5f6ae0g969ibko3k</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:json.indexOf</title>
    <ns>1</ns>
    <id>1628</id>
    <revision>
      <id>7315</id>
      <timestamp>2019-03-22T11:10:13Z</timestamp>
      <contributor>
        <ip>88.202.178.104</ip>
      </contributor>
      <comment>christmas music radio stations 2014 chicago</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="165">Done by GSA Content Generator Demoversion!
 
Visit site: http://v.ht/yKLc 
 
http://v.ht/pj1I 
http://v.ht/xDab 
http://v.ht/fUL0 
http://v.ht/RmvB 
http://v.ht/CDcy</text>
      <sha1>cya2pm4qme0xarwiz1herpwsmo1qt4p</sha1>
    </revision>
  </page>
  <page>
    <title>getTokenNativeHeight</title>
    <ns>0</ns>
    <id>1629</id>
    <revision>
      <id>7323</id>
      <parentid>7318</parentid>
      <timestamp>2019-03-23T22:33:09Z</timestamp>
      <contributor>
        <username>Naciron</username>
        <id>664</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="815">{{MacroFunction
|name=getTokenNativeHeight
|proposed=false
|trusted=false
|version=1.5.1
|description=
Retrieves the token's native image height in pixels (native size).

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenNativeHeight()
getTokenNativeHeight(id)
&lt;/source&gt;

'''Parameter'''
{{param|id|The token id of the token to check for its height, defaults to the [[Current Token]].}}

'''Result'''&lt;br /&gt;
The token's native(image) height in pixels.
|example=
Assuming a token called {{code|&quot;Dragon&quot;}}, with 120px native image height, medium size, on a 50px square grid , then:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: getTokenNativeHeight(&quot;Dragon&quot;)]
&lt;/source&gt;
returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
120
&lt;/source&gt;

|also=
{{func|getTokenHeight}}
{{func|getTokenWidth}}
{{func|getTokenNativeWidth}}
}}
[[Category:Token Function]]</text>
      <sha1>govjr125x0gtdib079332qxqun29xa7</sha1>
    </revision>
  </page>
  <page>
    <title>getTokenNativeWidth</title>
    <ns>0</ns>
    <id>1630</id>
    <revision>
      <id>7322</id>
      <parentid>7321</parentid>
      <timestamp>2019-03-23T22:32:42Z</timestamp>
      <contributor>
        <username>Naciron</username>
        <id>664</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="818">{{MacroFunction
|name=getTokenWidth
|proposed=false
|trusted=false
|version=1.5.1
|description=
Retrieves the token's native image width in pixels (native size).

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getTokenNativeWidth()
getTokenNativeWidth(id)
&lt;/source&gt;

'''Parameters'''
{{param|id|The token id of the token to check for its width, defaults to the [[Current Token]].}}{{TrustedParameter}}

'''Result'''&lt;br /&gt;
The token's native (image) width in pixels.
|example=
Assuming a token called {{code|&quot;Dragon&quot;}}, with 120px native image width, medium size, on a 50px square grid , then:
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: getTokenWidth(&quot;Dragon&quot;)]
&lt;/source&gt;
returns:
&lt;source lang=&quot;mtmacro&quot; line&gt;
120
&lt;/source&gt;

|also=
{{func|getTokenWidth}}
{{func|getTokenHeight}}
{{func|getTokenNativeHeight}}
}}
[[Category:Token Function]]</text>
      <sha1>1vt4iiujmn13ptf6y2gvydwg9ro2qql</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:token (roll option)</title>
    <ns>1</ns>
    <id>1631</id>
    <revision>
      <id>7348</id>
      <parentid>7325</parentid>
      <timestamp>2019-03-31T12:30:56Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Frakking spammers.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:Introduction to Properties</title>
    <ns>1</ns>
    <id>1632</id>
    <revision>
      <id>7335</id>
      <parentid>7334</parentid>
      <timestamp>2019-03-30T15:53:26Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Blanked the page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>getDrawingInfo</title>
    <ns>0</ns>
    <id>1633</id>
    <revision>
      <id>7353</id>
      <parentid>7352</parentid>
      <timestamp>2019-04-02T13:15:33Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1583">{{MacroFunction
|name=getDrawingInfo
|version=1.5.2
|trusted=true
|description=
Returns extensive information about the specified drawing.  The information is returned as a [[Introduction_to_JSON_Datatypes|JSON]] object.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDrawingInfo(mapName, drawingId)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: id = findDrawings(getCurrentMapName(),&quot;Funky Shape&quot;)]
[h: dinfo = getDrawingInfo(getCurrentMapName(), id)]
&lt;pre&gt;[r: json.indent(dinfo,2)]&lt;/pre&gt;
&lt;/source&gt;
'''Returns'''
&lt;source lang=&quot;css&quot; line&gt;
{
  &quot;fillColor&quot;: &quot;#ffffff&quot;,
  &quot;path&quot;:   [
        {
      &quot;x&quot;: 250,
      &quot;y&quot;: 200
    },
        {
      &quot;x&quot;: 250,
      &quot;y&quot;: 400
    },
        {
      &quot;x&quot;: 500,
      &quot;y&quot;: 400
    },
        {
      &quot;x&quot;: 500,
      &quot;y&quot;: 200
    },
        {
      &quot;x&quot;: 400,
      &quot;y&quot;: 200
    },
        {
      &quot;x&quot;: 400,
      &quot;y&quot;: 300
    },
        {
      &quot;x&quot;: 350,
      &quot;y&quot;: 300
    },
        {
      &quot;x&quot;: 350,
      &quot;y&quot;: 200
    },
        {
      &quot;x&quot;: 250,
      &quot;y&quot;: 200
    }
  ],
  &quot;penWidth&quot;: 3,
  &quot;name&quot;: &quot;Funky Shape&quot;,
  &quot;bounds&quot;:   {
    &quot;x&quot;: 250,
    &quot;width&quot;: 250,
    &quot;y&quot;: 200,
    &quot;height&quot;: 200
  },
  &quot;penColor&quot;: &quot;#000000&quot;,
  &quot;id&quot;: &quot;B7041D43935D4BDCA330E431D892DEAB&quot;,
  &quot;type&quot;: &quot;Polygon&quot;,
  &quot;opacity&quot;: 1,
  &quot;isEraser&quot;: 0,
  &quot;layer&quot;: &quot;TOKEN&quot;
}
&lt;/source&gt;
|also=
{{func|getDrawingProperties}}
}}
[[Category:Draw Function]]</text>
      <sha1>jrqeyxv5bmq2q67xfn2gy95w0afjzet</sha1>
    </revision>
  </page>
  <page>
    <title>movedOverDrawing</title>
    <ns>0</ns>
    <id>1634</id>
    <revision>
      <id>7383</id>
      <parentid>7358</parentid>
      <timestamp>2019-04-19T18:25:02Z</timestamp>
      <contributor>
        <username>Jagged</username>
        <id>631</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="926">{{MacroFunction
|name=movedOverDrawing
|version=1.5.2
|trusted=true
|description=
Use to check if a given path has crossed through a specified drawing.

Returns a JSON array with coordinates of all cells in the path that overlap with the area defined by the given drawing.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getDrawingInfo(mapName, drawingId, path)
&lt;/source&gt;
'''Parameters'''
{{param|mapName|A string containing the name of the map.}}
{{param|drawingId|A string containing the id of the drawing. The easiest way to discover a drawing's Id is via the Draw Explorer interface.}}
{{param|path|JSON array of X/Y coordinate such as that returned by {{func|getLastPath}}}}
|examples=
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: lp = getLastPath()]
[h: id = findDrawings(getCurrentMapName(),&quot;fig1&quot;)] 
[r: movedOverDrawing(getCurrentMapName(),id,lp)]
&lt;/source&gt;

|also=
{{func|getDrawingInfo}} {{func|getLastPath}}
}}
[[Category:Draw Function]]</text>
      <sha1>5kn5gev8eypsmuty9xbph52ebzaqd3a</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Log Function</title>
    <ns>14</ns>
    <id>1635</id>
    <revision>
      <id>7382</id>
      <parentid>7360</parentid>
      <timestamp>2019-04-19T18:15:14Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Macro Function]]</text>
      <sha1>jit4cp7ulz99kgahs8mkw0dj7f3rbom</sha1>
    </revision>
  </page>
  <page>
    <title>log.getLoggers</title>
    <ns>0</ns>
    <id>1636</id>
    <revision>
      <id>7376</id>
      <parentid>7363</parentid>
      <timestamp>2019-04-19T15:53:01Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="810">{{MacroFunction
|name=exampleFunction
|trusted=true
|version=1.5.2
|description=
Returns a JSON array of available loggers and the current logging level for each.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
log.getLoggers()
&lt;/source&gt;
'''Parameters'''
None.

|example=
Get a list of available loggers and format the JSON result.
&lt;source lang=&quot;mtmacro&quot; line&gt;
&lt;pre&gt;[r: json.indent(log.getLoggers())]&lt;/pre&gt;
&lt;/source&gt;
Returns:
&lt;source lang=&quot;javascript&quot; line&gt;

[
        {
        &quot;name&quot;: &quot;macro-logger&quot;,
        &quot;level&quot;: &quot;ERROR&quot;
    },
        {
        &quot;name&quot;: &quot;net.rptools.lib.io.PackedFile&quot;,
        &quot;level&quot;: &quot;ERROR&quot;
    },
        {
        &quot;name&quot;: &quot;net.rptools.maptool.client.swing.AbeillePanel&quot;,
        &quot;level&quot;: &quot;ERROR&quot;
    },
    ...
]
&lt;/source&gt;

|also=
[[log.setLevel|log.setLevel]]

}}
[[Category:Log Function]]</text>
      <sha1>9aamrcpwbo61v34ahhmqxms7eeldh2f</sha1>
    </revision>
  </page>
  <page>
    <title>log.setLevel</title>
    <ns>0</ns>
    <id>1637</id>
    <revision>
      <id>7402</id>
      <parentid>7381</parentid>
      <timestamp>2019-04-20T21:58:29Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1634">{{MacroFunction
|name=log.setLevel
|trusted=true
|version=1.5.2
|description=
Set the logging level for the specified logger.

&lt;br&gt;The log file will be found in your user directory under {{code|.maptool-rptools/logs}}.
|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
log.setLevel(logger, loglevel)
&lt;/source&gt;
'''Parameters'''
{{param|logger|String containing a logger name.}}
{{param|loglevel|String containing a log level: DEBUG,INFO,WARN,ERROR,FATAL}}

The default level for all loggers is ERROR which means that only messages at ERROR or FATAL log level will be output.  The levels noted above are in verbosity order from most(DEBUG) to least(FATAL).

|example=
Set the logging level for the MapToolLineParser to '''WARN'''.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: log.setLevel(&quot;net.rptools.maptool.client.MapToolLineParser&quot;,&quot;WARN&quot;)]
&lt;/source&gt;
'''Returns:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
WARN
&lt;/source&gt;

Get a list of loggers and then, using {{func|input}}, select a logging level for it.
&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: loggers = json.sort(log.getLoggers(),&quot;a&quot;,&quot;name&quot;)]
[h: loggerList = &quot;&quot;]
[h, FOREACH(logger, loggers), CODE: {
    [h: loggerList = listAppend(loggerList,json.get(logger,&quot;name&quot;))]
}]
[h:status=input(
    &quot;junkVar|Select a Logger and Level||LABEL|SPAN=TRUE&quot;,
    &quot;lname|&quot;+loggerList+&quot;|Logger|LIST|VALUE=STRING&quot;,
    &quot;level|DEBUG,INFO,WARN,ERROR,FATAL|Level|LIST|VALUE=STRING&quot;)]
[h:abort(status)]
[r: &quot;Setting &lt;i&gt;&lt;b&gt;&quot; + lname + &quot;&lt;/b&gt;&lt;/i&gt; to &lt;b&gt;&quot; + level + &quot;&lt;/b&gt;.&quot;]
[h: log.setLevel(lname,level)]
&lt;/source&gt;
&lt;br/&gt;
[[File:SelectLoggerLevel.png]]

|also=
{{func|log.getLoggers}}  &amp;nbsp;[[Available Loggers]]
}}
[[Category:Log Function]]</text>
      <sha1>j28whx28kaqtrdc9wr0nl9c0cavpz0r</sha1>
    </revision>
  </page>
  <page>
    <title>log.error</title>
    <ns>0</ns>
    <id>1638</id>
    <revision>
      <id>7398</id>
      <parentid>7397</parentid>
      <timestamp>2019-04-20T21:43:04Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="812">{{MacroFunction
|name=log.error
|trusted=true
|version=1.5.2
|description=
Writes a message to the log file at the ERROR logging level. Use {{func|log.setLevel}} to set the appropriate level for the {{code|macro-logger}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
log.error(message)
&lt;/source&gt;
'''Parameters'''
{{param|message|A string containing the message to be logged.}}

|example=
Output a message to the {{code|macro-logger}} at the ERROR level.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: log.error(getPlayerName() + &quot; chose poorly&quot;)]
&lt;/source&gt;
'''Returns:'''

Empty string to calling macro.  Output is to log file.
&lt;source lang=&quot;mtmacro&quot; line&gt;
1989-05-24 08:13:32.911 [AWT-EventQueue-0] ERROR macro-logger - Bob chose poorly.
&lt;/source&gt;
|also=
{{func|log.getLoggers}}  {{func|log.setLevel}}

}}
[[Category:Log Function]]</text>
      <sha1>c0xas0ytdlt0c4o5l8l0pkf6zkjpgok</sha1>
    </revision>
  </page>
  <page>
    <title>log.debug</title>
    <ns>0</ns>
    <id>1639</id>
    <revision>
      <id>7396</id>
      <parentid>7373</parentid>
      <timestamp>2019-04-20T21:41:52Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="827">{{MacroFunction
|name=log.debug
|trusted=true
|version=1.5.2
|description=
Writes a message to the log at the DEBUG logging level. Use {{func|log.setLevel}} to set the appropriate level for the {{code|macro-logger}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
log.debug(message)
&lt;/source&gt;
'''Parameters'''
{{param|message|A string containing the message to be logged.}}

|example=
Output a message to the {{code|macro-logger}} at the DEBUG level.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: log.debug(&quot;Switched to map &quot; + getCurrentMapName())]
&lt;/source&gt;
'''Returns:'''

Empty string to calling macro.  Output is in log file.
&lt;source lang=&quot;mtmacro&quot; line&gt;
1987-09-25 08:52:18.853 [AWT-EventQueue-0] DEBUG macro-logger - Switched to map Pit of Despair
&lt;/source&gt;
|also=
{{func|log.getLoggers}}  {{func|log.setLevel}}

}}
[[Category:Log Function]]</text>
      <sha1>5ud892nywujiruacmclengapvh8jeoy</sha1>
    </revision>
  </page>
  <page>
    <title>log.warn</title>
    <ns>0</ns>
    <id>1640</id>
    <revision>
      <id>7401</id>
      <parentid>7375</parentid>
      <timestamp>2019-04-20T21:46:46Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="845">{{MacroFunction
|name=log.warn
|trusted=true
|version=1.5.2
|description=
Writes a message to the log file at the WARN logging level. Use {{func|log.setLevel}} to set the appropriate level for the {{code|macro-logger}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
log.warn(message)
&lt;/source&gt;
'''Parameters'''
{{param|message|A string containing the message to be logged.}}

|example=
Output a message to the {{code|macro-logger}} at the WARN level.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: log.warn(&quot;Go away or I shall taunt you a second time!&quot;)]
&lt;/source&gt;
'''Returns:'''

Empty string to calling macro.  Output is in log file.
&lt;source lang=&quot;mtmacro&quot; line&gt;
1975-03-14 08:59:39.211 [AWT-EventQueue-0] WARN  macro-logger - Go away or I shall taunt you a second time!
&lt;/source&gt;
|also=
{{func|log.getLoggers}}  {{func|log.setLevel}}

}}
[[Category:Log Function]]</text>
      <sha1>p38jmmau5aefp0gdagypijt5h5t0gch</sha1>
    </revision>
  </page>
  <page>
    <title>log.info</title>
    <ns>0</ns>
    <id>1641</id>
    <revision>
      <id>7400</id>
      <parentid>7371</parentid>
      <timestamp>2019-04-20T21:45:38Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="813">{{MacroFunction
|name=log.info
|trusted=true
|version=1.5.2
|description=
Writes a message to the log file at the INFO logging level. Use {{func|log.setLevel}} to set the appropriate level for the {{code|macro-logger}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
log.info(message)
&lt;/source&gt;
'''Parameters'''
{{param|message|A string containing the message to be logged.}}

|example=
Output a message to the {{code|macro-logger}} at the INFO level.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: log.info(&quot;There's no place like home.&quot;)]
&lt;/source&gt;
'''Returns:'''

Empty string to calling macro.  Output is in log file.
&lt;source lang=&quot;mtmacro&quot; line&gt;
1939-08-25 09:19:22.844 [AWT-EventQueue-0] INFO  macro-logger - There's no place like home.
&lt;/source&gt;
|also=
{{func|log.getLoggers}}  {{func|log.setLevel}}

}}
[[Category:Log Function]]</text>
      <sha1>3xj7bgxdig0z3x2nhlnazx85c9j5hwm</sha1>
    </revision>
  </page>
  <page>
    <title>log.fatal</title>
    <ns>0</ns>
    <id>1642</id>
    <revision>
      <id>7399</id>
      <parentid>7372</parentid>
      <timestamp>2019-04-20T21:43:37Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="940">{{MacroFunction
|name=log.fatal
|trusted=true
|version=1.5.2
|description=
Writes a message to the log at the FATAL logging level. Use {{func|log.setLevel}} to set the appropriate level for the {{code|macro-logger}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
log.fatal(message)
&lt;/source&gt;
'''Parameters'''
{{param|message|A string containing the message to be logged.}}

|example=
Output a message to the {{code|macro-logger}} at the FATAL level.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[h: log.fatal(&quot;Well I'd say she certainly had marvelous judgement, Albert, if not particularly good taste.&quot;)]
&lt;/source&gt;
'''Returns:'''

Empty string to calling macro.  Output is in log file.
&lt;source lang=&quot;mtmacro&quot; line&gt;
1975-03-15 09:19:22.846 [AWT-EventQueue-0] FATAL macro-logger - Well I'd say she certainly had marvelous judgement, Albert, if not particularly good taste.&lt;/source&gt;
|also=
{{func|log.getLoggers}}  {{func|log.setLevel}}

}}
[[Category:Log Function]]</text>
      <sha1>9tou7pjrrcu7bl8pfw22lsrg7dzjp0m</sha1>
    </revision>
  </page>
  <page>
    <title>Available Loggers</title>
    <ns>0</ns>
    <id>1643</id>
    <revision>
      <id>7378</id>
      <parentid>7377</parentid>
      <timestamp>2019-04-19T16:04:40Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3223">List of available loggers for use with {{func|log.setLevel}} or the log message functions such as {{func|log.warn}} or {{func|log.debug}}.  The list of available loggers, along with the current logging level, can be retrieved via the macro function {{func|log.getLoggers}}.

== Loggers ==

* macro-logger - For the log.* message functions.
* net.rptools.clientserver.simple.server.ServerConnection
* net.rptools.lib.FileUtil
* net.rptools.lib.io.PackedFile
* net.rptools.maptool.client.AppActions
* net.rptools.maptool.client.AppPreferences
* net.rptools.maptool.client.AppSetup
* net.rptools.maptool.client.AppState
* net.rptools.maptool.client.AppUpdate
* net.rptools.maptool.client.AppUtil
* net.rptools.maptool.client.AssetURLStreamHandler
* net.rptools.maptool.client.AutoSaveManager
* net.rptools.maptool.client.ChatAutoSave
* net.rptools.maptool.client.MapTool
* net.rptools.maptool.client.MapToolLineParser
* net.rptools.maptool.client.MapToolVariableResolver
* net.rptools.maptool.client.TransferableHelper
* net.rptools.maptool.client.functions.Base64Functions
* net.rptools.maptool.client.functions.LogFunctions
* net.rptools.maptool.client.functions.MacroLinkFunction
* net.rptools.maptool.client.functions.TokenMoveFunctions
* net.rptools.maptool.client.macro.MacroManager
* net.rptools.maptool.client.swing.AbeillePanel
* net.rptools.maptool.client.swing.AppHomeDiskSpaceStatusBar
* net.rptools.maptool.client.swing.AssetCacheStatusBar
* net.rptools.maptool.client.swing.ImageCacheStatusBar
* net.rptools.maptool.client.swing.ImageLoaderCache
* net.rptools.maptool.client.swing.MapToolEventQueue
* net.rptools.maptool.client.tool.PointerTool
* net.rptools.maptool.client.tool.drawing.UndoPerZone
* net.rptools.maptool.client.ui.MapToolDockListener
* net.rptools.maptool.client.ui.MapToolFrame
* net.rptools.maptool.client.ui.assetpanel.ImageFileImagePanelModel
* net.rptools.maptool.client.ui.chat.RegularExpressionTranslationRule
* net.rptools.maptool.client.ui.chat.SmileyChatTranslationRuleGroup
* net.rptools.maptool.client.ui.lookuptable.LookupTableImagePanelModel
* net.rptools.maptool.client.ui.macrobuttons.panels.SelectionPanel
* net.rptools.maptool.client.ui.syntax.MapToolScriptAutoComplete
* net.rptools.maptool.client.ui.syntax.MapToolScriptSyntax
* net.rptools.maptool.client.ui.token.BarTokenOverlay
* net.rptools.maptool.client.ui.token.ImageAssetPanel
* net.rptools.maptool.client.ui.tokenpanel.InitiativeTransferHandler
* net.rptools.maptool.client.ui.zone.FogUtil
* net.rptools.maptool.client.ui.zone.PartitionedDrawableRenderer
* net.rptools.maptool.client.ui.zone.ZoneRenderer
* net.rptools.maptool.client.ui.zone.ZoneView
* net.rptools.maptool.client.ui.zone.vbl.AreaTree
* net.rptools.maptool.language.I18N
* net.rptools.maptool.model.AssetLoader
* net.rptools.maptool.model.AssetManager
* net.rptools.maptool.model.Grid
* net.rptools.maptool.model.InitiativeList
* net.rptools.maptool.model.MacroButtonProperties
* net.rptools.maptool.model.Token
* net.rptools.maptool.model.Zone
* net.rptools.maptool.server.MapToolServer
* net.rptools.maptool.server.MapToolServerConnection
* net.rptools.maptool.util.ImageManager
* net.rptools.maptool.util.PersistenceUtil

[[Category:Log Function]]</text>
      <sha1>si26f93kdaa8zwrtd6u3h1qfblkbamo</sha1>
    </revision>
  </page>
  <page>
    <title>File:SelectLoggerLevel.png</title>
    <ns>6</ns>
    <id>1644</id>
    <revision>
      <id>7379</id>
      <timestamp>2019-04-19T17:19:57Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <comment>Example input() dialog for selecting logger and level.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="54">Example input() dialog for selecting logger and level.</text>
      <sha1>fdejj5junx4930ewqlvmuhllvy13s9v</sha1>
    </revision>
  </page>
  <page>
    <title>base64.encode</title>
    <ns>0</ns>
    <id>1645</id>
    <revision>
      <id>7393</id>
      <parentid>7384</parentid>
      <timestamp>2019-04-20T19:34:10Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="755">{{MacroFunction
|name=base64.encode
|trusted=false
|version=1.5.2
|description=
Takes the supplied text string and encodes it to [https://en.wikipedia.org/wiki/Base64 Base64].

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
base64.encode(string)
&lt;/source&gt;
'''Parameters'''
{{param|string|The text string to be encoded.}}

|example=
Encode a string and then decode it.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: txt = &quot;Four score and seven years ago...&quot;]&lt;br&gt;
[r: encTxt = base64.encode(txt)]&lt;br&gt;
[r: base64.decode(encTxt)]&lt;br&gt;&lt;/source&gt;
'''Returns:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
Four score and seven years ago... 
Rm91ciBzY29yZSBhbmQgc2V2ZW4geWVhcnMgYWdvLi4u 
Four score and seven years ago...
&lt;/source&gt;

|also=
{{func|base64.decode}}

}}
[[Category:Miscellaneous Function]]</text>
      <sha1>rumwpgk53i1bxcvl4ut4vnzf8an7cwc</sha1>
    </revision>
  </page>
  <page>
    <title>base64.decode</title>
    <ns>0</ns>
    <id>1646</id>
    <revision>
      <id>7394</id>
      <parentid>7386</parentid>
      <timestamp>2019-04-20T19:34:33Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="770">{{MacroFunction
|name=base64.decode
|trusted=false
|version=1.5.2
|description=
Accepts a [https://en.wikipedia.org/wiki/Base64 Base64] encoded string and decodes it to plain text.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
base64.decode(string)
&lt;/source&gt;
'''Parameters'''
{{param|string|The base64 encoded string to be decoded.}}

|example=
Encode a string and then decode it.

&lt;source lang=&quot;mtmacro&quot; line&gt;
[r: txt = &quot;Four score and seven years ago...&quot;]&lt;br&gt;
[r: encTxt = base64.encode(txt)]&lt;br&gt;
[r: base64.decode(encTxt)]&lt;br&gt;&lt;/source&gt;
'''Returns:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
Four score and seven years ago... 
Rm91ciBzY29yZSBhbmQgc2V2ZW4geWVhcnMgYWdvLi4u 
Four score and seven years ago...
&lt;/source&gt;

|also=
{{func|base64.encode}}

}}
[[Category:Miscellaneous Function]]</text>
      <sha1>97451qwv2ww7r3fr7bbhyi2as94th7n</sha1>
    </revision>
  </page>
  <page>
    <title>getRolled</title>
    <ns>0</ns>
    <id>1647</id>
    <revision>
      <id>7391</id>
      <parentid>7387</parentid>
      <timestamp>2019-04-20T19:32:59Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="776">{{MacroFunction
|name=getRolled
|trusted=false
|version=1.5.2
|description=
Returns an array of all the raw, i.e. unmodified, dice rolls that have occurred within the current macro context.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getRolled()
&lt;/source&gt;
'''Parameters'''
{{param|none|Takes no parameters.}}

|example=
Roll some dice and observe the unmodified rolls.

&lt;source lang=&quot;mtmacro&quot; line&gt;
Roll 1d10: [e: 1D10+2]&lt;br&gt;
Get Rolled: [r: getRolled()]&lt;br&gt;
Roll 3d6 minimum 2: [e: 3D6L2]&lt;br&gt;
Get Rolled: [r: getRolled()]
&lt;/source&gt;

'''Output:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
Roll 1d10: « 1D10+2 = 9 + 2 = 11 »
Get Rolled: [9]
Roll 3d6 minimum 2: « 3D6L2 = 13 »
Get Rolled: [9,6,5,1]
&lt;/source&gt;

|also=
{{func|clearRolls}} {{func|getNewRolls}}

}}
[[Category:Dice Function]]</text>
      <sha1>ma2xpxt3wgf2lllbrzd5i4sowb6k171</sha1>
    </revision>
  </page>
  <page>
    <title>getNewRolls</title>
    <ns>0</ns>
    <id>1648</id>
    <revision>
      <id>7404</id>
      <parentid>7403</parentid>
      <timestamp>2019-04-21T13:20:58Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1283">{{MacroFunction
|name=getNewRolls
|trusted=false
|version=1.5.2
|description=
Returns an array of all the raw, i.e. unmodified, dice rolls since the last call to {{func|getNewRolls}}.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
getNewRolls()
&lt;/source&gt;
'''Parameters'''
{{param|none|Takes no parameters.}}

|example=
Make some dice rolls and show the individual rolls at each step.

&lt;source lang=&quot;mtmacro&quot; line&gt;
Roll 1d10: [e: 1D10+2]&lt;br&gt;
Get New Rolls: [r: getNewRolls()]&lt;br&gt;
Get Rolled: [r: getRolled()]&lt;br&gt;
Roll 3d6 minimum 2: [e: 3D6L2]&lt;br&gt;
Get New Rolls: [r: getNewRolls()]&lt;br&gt;
Get Rolled: [r: getRolled()]&lt;/source&gt;

'''Output:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
 Roll 1d10: « 1D10+2 = 3 + 2 = 5 »
 Get New Rolls: [3]
 Get Rolled: [3]
 Roll 3d6 minimum 2: « 3D6L2 = 10 »
 Get New Rolls: [5,3,1]
 Get Rolled: [3,5,3,1]
&lt;/source&gt;

Remember that it returns all the new die rolls since the last time it was called.
&lt;source lang=&quot;mtmacro&quot; line&gt;
Roll 1: [e: 3d6]&lt;br&gt;
[r: getNewRolls()]&lt;br&gt;
Roll 2: [e: 3d6]&lt;br&gt;
Roll 3: [e: 3d6]&lt;br&gt;
[r: getNewRolls()]
&lt;/source&gt;
'''Output'''
&lt;source lang=&quot;mtmacro&quot; line&gt;
Roll 1: « 3d6 = 16 »
[5,6,5]
Roll 2: « 3d6 = 17 »
Roll 3: « 3d6 = 6 »
[5,6,6,3,2,1]
&lt;/source&gt;

|also=
{{func|clearRolls}} {{func|getRolled}}

}}
[[Category:Dice Function]]</text>
      <sha1>7ik5pk81hflf0in02e3lxvttmuc5djx</sha1>
    </revision>
  </page>
  <page>
    <title>clearRolls</title>
    <ns>0</ns>
    <id>1649</id>
    <revision>
      <id>7390</id>
      <parentid>7389</parentid>
      <timestamp>2019-04-20T19:32:19Z</timestamp>
      <contributor>
        <username>Phergus</username>
        <id>660</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1089">{{MacroFunction
|name=clearRolls
|trusted=false
|version=1.5.2
|description=
Clears the internal array that keeps track of the individual dice rolls for the current macro.

|usage=
&lt;source lang=&quot;mtmacro&quot; line&gt;
clearRolls()
&lt;/source&gt;
'''Parameters'''
{{param|none|Takes no parameters.}}

|example=
Clear the saved rolls after second time.

&lt;source lang=&quot;mtmacro&quot; line&gt;
Roll 3d6: [e: 3D6]&lt;br&gt;
Get New Rolls: [r: getNewRolls()]&lt;br&gt;
Get Rolled: [r: getRolled()]&lt;br&gt;
Roll 3d6 minimum 2: [e: 3D6L2]&lt;br&gt;
Get New Rolls: [r: getNewRolls()]&lt;br&gt;
Get Rolled: [r: getRolled()]&lt;br&gt;
-- Clear Rolls --[h: clearRolls()]&lt;br&gt;
Roll 3d6: [e: 3D6]&lt;br&gt;
Get New Rolls: [r: getNewRolls()]&lt;br&gt;
Get Rolled: [r: getRolled()]&lt;br&gt;
&lt;/source&gt;

'''Output:'''
&lt;source lang=&quot;mtmacro&quot; line&gt;

Roll 3d6: « 3D6 = 12 »
Get New Rolls: [5,5,2]
Get Rolled: [5,5,2]
Roll 3d6 minimum 2: « 3D6L2 = 17 »
Get New Rolls: [5,6,6]
Get Rolled: [5,5,2,5,6,6]
-- Clear Rolls --
Roll 3d6: « 3D6 = 8 »
Get New Rolls: [2,2,4]
Get Rolled: [2,2,4]
&lt;/source&gt;

|also=
{{func|getNewRolls}} {{func|getRolled}}

}}
[[Category:Dice Function]]</text>
      <sha1>5v10w0zef2lg2naovlokyhaao2qoi2u</sha1>
    </revision>
  </page>
</mediawiki>
